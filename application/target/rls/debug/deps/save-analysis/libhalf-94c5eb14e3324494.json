{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0","program":"C:\\Users\\Ben\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","half","--edition=2021","C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=94c5eb14e3324494","-C","extra-filename=-94c5eb14e3324494","--out-dir","c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ben\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libhalf-94c5eb14e3324494.rmeta"},"prelude":{"crate_id":{"name":"half","disambiguator":[9530666300167332363,0]},"crate_root":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src","external_crates":[{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10288641326355699271,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","num":2,"id":{"name":"core","disambiguator":[5178777620647193466,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7203661724729889941,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17525700935344431946,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14114419768508526436,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[7430704726206783492,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12664251144516306473,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5349691386245612169,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7588176879124425336,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12802573245210436658,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[15058356585373963657,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11406058276128544710,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12054102872615165506,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15575797803660711391,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[2170788131994516450,0]}}],"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":9494,"line_start":1,"line_end":233,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8770,"byte_end":8774,"line_start":201,"line_end":201,"column_start":17,"column_end":21},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8794,"byte_end":8797,"line_start":202,"line_end":202,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9014,"byte_end":9018,"line_start":213,"line_end":213,"column_start":21,"column_end":25},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9020,"byte_end":9023,"line_start":213,"line_end":213,"column_start":27,"column_end":30},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9115,"byte_end":9131,"line_start":217,"line_end":217,"column_start":28,"column_end":44},"alias_span":null,"name":"HalfBitsSliceExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9133,"byte_end":9150,"line_start":217,"line_end":217,"column_start":46,"column_end":63},"alias_span":null,"name":"HalfFloatSliceExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9284,"byte_end":9298,"line_start":222,"line_end":222,"column_start":26,"column_end":40},"alias_span":null,"name":"HalfBitsVecExt","value":"","parent":{"krate":0,"index":765}},{"kind":"Use","ref_id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9300,"byte_end":9315,"line_start":222,"line_end":222,"column_start":42,"column_end":57},"alias_span":null,"name":"HalfFloatVecExt","value":"","parent":{"krate":0,"index":765}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":9494,"line_start":1,"line_end":233,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":315},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":708},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":787}],"decl_id":null,"docs":" A crate that provides support for half-precision 16-bit floating point types.","sig":null,"attributes":[{"value":"/ A crate that provides support for half-precision 16-bit floating point types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the [`f16`] type, which is an implementation of the IEEE 754-2008 standard","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":86,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ [`binary16`] a.k.a `half` floating point type. This 16-bit floating point type is intended for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":185,"byte_end":283,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ efficient storage where the full range and precision of a larger floating point value is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":284,"byte_end":380,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ required. This is especially useful for image storage formats.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":381,"byte_end":447,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":448,"byte_end":451,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`bf16`] type, an alternative 16-bit floating point format. The","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":452,"byte_end":546,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [`bfloat16`] format is a truncated IEEE 754 standard `binary32` float that preserves the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":547,"byte_end":639,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ exponent to allow the same range as [`f32`] but with only 8 bits of precision (instead of 11","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":640,"byte_end":736,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ bits for [`f16`]). See the [`bf16`] type for details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":737,"byte_end":794,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":795,"byte_end":798,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Because [`f16`] and [`bf16`] are primarily for efficient storage, floating point operations such","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":799,"byte_end":899,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ as addition, multiplication, etc. are not implemented by hardware. While this crate does provide","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":900,"byte_end":1000,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ the appropriate trait implementations for basic operations, they each convert the value to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1001,"byte_end":1095,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ [`f32`] before performing the operation and then back afterward. When performing complex","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1096,"byte_end":1188,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ arithmetic, manually convert to and from [`f32`] before and after to reduce repeated conversions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1189,"byte_end":1289,"line_start":17,"line_end":17,"column_start":1,"column_end":101}},{"value":"/ for each operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1290,"byte_end":1313,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1314,"byte_end":1317,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`slice`][mod@slice] module for zero-copy in-place conversions of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1318,"byte_end":1414,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ [`u16`] slices to both [`f16`] and [`bf16`], as well as efficient vectorized conversions of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1415,"byte_end":1510,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ larger buffers of floating point values to and from these half formats.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1511,"byte_end":1586,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1587,"byte_end":1590,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The crate uses `#[no_std]` by default, so can be used in embedded environments without using the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1591,"byte_end":1691,"line_start":24,"line_end":24,"column_start":1,"column_end":101}},{"value":"/ Rust [`std`] library. A `std` feature to enable support for the standard library is available,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1692,"byte_end":1790,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ see the [Cargo Features](#cargo-features) section below.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1791,"byte_end":1851,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1852,"byte_end":1855,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A [`prelude`] module is provided for easy importing of available utility traits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1856,"byte_end":1940,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1941,"byte_end":1944,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Serialization","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1945,"byte_end":1964,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1965,"byte_end":1968,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ When the `serde` feature is enabled, [`f16`] and [`bf16`] will be serialized as a newtype of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":1969,"byte_end":2065,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ [`u16`] by default. In binary formats this is ideal, as it will generally use just two bytes for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2066,"byte_end":2166,"line_start":33,"line_end":33,"column_start":1,"column_end":101}},{"value":"/ storage. For string formats like JSON, however, this isn't as useful, and due to design","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2167,"byte_end":2258,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/ limitations of serde, it's not possible for the default `Serialize` implementation to support","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2259,"byte_end":2356,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/ different serialization for different formats.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2357,"byte_end":2407,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2408,"byte_end":2411,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Instead, it's up to the containter type of the floats to control how it is serialized. This can","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2412,"byte_end":2511,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ easily be controlled when using the derive macros using `#[serde(serialize_with=\"\")]`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2512,"byte_end":2601,"line_start":39,"line_end":39,"column_start":1,"column_end":90}},{"value":"/ attributes. For both [`f16`] and [`bf16`] a `serialize_as_f32` and `serialize_as_string` are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2602,"byte_end":2698,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ provided for use with this attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2699,"byte_end":2740,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2741,"byte_end":2744,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Deserialization of both float types supports deserializing from the default serialization,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2745,"byte_end":2839,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ strings, and `f32`/`f64` values, so no additional work is required.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2840,"byte_end":2911,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2912,"byte_end":2915,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Cargo Features","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2916,"byte_end":2936,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2937,"byte_end":2940,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This crate supports a number of optional cargo features. None of these features are enabled by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":2941,"byte_end":3039,"line_start":48,"line_end":48,"column_start":1,"column_end":99}},{"value":"/ default, even `std`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3040,"byte_end":3064,"line_start":49,"line_end":49,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3065,"byte_end":3068,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ - **`use-intrinsics`** -- Use [`core::arch`] hardware intrinsics for `f16` and `bf16` conversions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3069,"byte_end":3170,"line_start":51,"line_end":51,"column_start":1,"column_end":102}},{"value":"/   if available on the compiler target. This feature currently only works on nightly Rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3171,"byte_end":3263,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/   until the corresponding intrinsics are stabilized.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3264,"byte_end":3320,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3321,"byte_end":3324,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/   When this feature is enabled and the hardware supports it, the functions and traits in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3325,"byte_end":3421,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/   [`slice`][mod@slice] module will use vectorized SIMD intructions for increased efficiency.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3422,"byte_end":3518,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3519,"byte_end":3522,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/   By default, without this feature, conversions are done only in software, which will also be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3523,"byte_end":3620,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/   the fallback if the target does not have hardware support. Note that without the `std`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3621,"byte_end":3713,"line_start":59,"line_end":59,"column_start":1,"column_end":93}},{"value":"/   feature enabled, no runtime CPU feature detection is used, so the hardware support is only","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3714,"byte_end":3810,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   compiled if the compiler target supports the CPU feature.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3811,"byte_end":3874,"line_start":61,"line_end":61,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3875,"byte_end":3878,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - **`alloc`** -- Enable use of the [`alloc`] crate when not using the `std` library.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3879,"byte_end":3967,"line_start":63,"line_end":63,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3968,"byte_end":3971,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/   Among other functions, this enables the [`vec`] module, which contains zero-copy","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":3972,"byte_end":4058,"line_start":65,"line_end":65,"column_start":1,"column_end":87}},{"value":"/   conversions for the [`Vec`] type. This allows fast conversion between raw `Vec<u16>` bits and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4059,"byte_end":4158,"line_start":66,"line_end":66,"column_start":1,"column_end":100}},{"value":"/   `Vec<f16>` or `Vec<bf16>` arrays, and vice versa.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4159,"byte_end":4214,"line_start":67,"line_end":67,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4215,"byte_end":4218,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - **`std`** -- Enable features that depend on the Rust [`std`] library. This also enables the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4219,"byte_end":4316,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/   `alloc` feature automatically.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4317,"byte_end":4353,"line_start":70,"line_end":70,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4354,"byte_end":4357,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/   Enabling the `std` feature also enables runtime CPU feature detection when the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4358,"byte_end":4442,"line_start":72,"line_end":72,"column_start":1,"column_end":85}},{"value":"/   `use-intrsincis` feature is also enabled. Without this feature detection, intrinsics are only","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4443,"byte_end":4542,"line_start":73,"line_end":73,"column_start":1,"column_end":100}},{"value":"/   used when compiler target supports the target feature.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4543,"byte_end":4603,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4604,"byte_end":4607,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - **`serde`** -- Adds support for the [`serde`] crate by implementing [`Serialize`] and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4608,"byte_end":4699,"line_start":76,"line_end":76,"column_start":1,"column_end":92}},{"value":"/   [`Deserialize`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4700,"byte_end":4759,"line_start":77,"line_end":77,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4760,"byte_end":4763,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ - **`num-traits`** -- Adds support for the [`num-traits`] crate by implementing [`ToPrimitive`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4764,"byte_end":4864,"line_start":79,"line_end":79,"column_start":1,"column_end":101}},{"value":"/   [`FromPrimitive`], [`AsPrimitive`], [`Num`], [`Float`], [`FloatCore`], and [`Bounded`] traits","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4865,"byte_end":4964,"line_start":80,"line_end":80,"column_start":1,"column_end":100}},{"value":"/   for both [`f16`] and [`bf16`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":4965,"byte_end":5001,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5002,"byte_end":5005,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ - **`bytemuck`** -- Adds support for the [`bytemuck`] crate by implementing [`Zeroable`] and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5006,"byte_end":5102,"line_start":83,"line_end":83,"column_start":1,"column_end":97}},{"value":"/   [`Pod`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5103,"byte_end":5154,"line_start":84,"line_end":84,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5155,"byte_end":5158,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ - **`zerocopy`** -- Adds support for the [`zerocopy`] crate by implementing [`AsBytes`] and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5159,"byte_end":5254,"line_start":86,"line_end":86,"column_start":1,"column_end":96}},{"value":"/   [`FromBytes`] traits for both [`f16`] and [`bf16`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5255,"byte_end":5312,"line_start":87,"line_end":87,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5313,"byte_end":5316,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ [`alloc`]: https://doc.rust-lang.org/alloc/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5317,"byte_end":5364,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5365,"byte_end":5408,"line_start":90,"line_end":90,"column_start":1,"column_end":44}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5409,"byte_end":5493,"line_start":91,"line_end":91,"column_start":1,"column_end":85}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5494,"byte_end":5572,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/ [`serde`]: https://crates.io/crates/serde","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5573,"byte_end":5618,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"/ [`bytemuck`]: https://crates.io/crates/bytemuck","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5619,"byte_end":5670,"line_start":94,"line_end":94,"column_start":1,"column_end":52}},{"value":"/ [`num-traits`]: https://crates.io/crates/num-traits","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5671,"byte_end":5726,"line_start":95,"line_end":95,"column_start":1,"column_end":56}},{"value":"/ [`zerocopy`]: https://crates.io/crates/zerocopy","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":5727,"byte_end":5778,"line_start":96,"line_end":96,"column_start":1,"column_end":52}},{"value":"warn(missing_docs, missing_copy_implementations, trivial_numeric_casts,\nfuture_incompatible)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":7868,"byte_end":7982,"line_start":166,"line_end":171,"column_start":1,"column_end":3}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8023,"byte_end":8058,"line_start":172,"line_end":172,"column_start":41,"column_end":76}},{"value":"allow(clippy :: verbose_bit_mask, clippy :: cast_lossless)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8061,"byte_end":8119,"line_start":173,"line_end":173,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11132,"byte_end":11136,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"bf16","qualname":"::bfloat::bf16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the [`bfloat16`] format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the [`bfloat16`] format.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10096,"byte_end":10166,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10167,"byte_end":10170,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The [`bfloat16`] floating point format is a truncated 16-bit version of the IEEE 754 standard","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10171,"byte_end":10268,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ `binary32`, a.k.a [`f32`]. [`bf16`] has approximately the same dynamic range as [`f32`] by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10269,"byte_end":10363,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ having a lower precision than [`f16`][crate::f16]. While [`f16`][crate::f16] has a precision of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10364,"byte_end":10463,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/ 11 bits, [`bf16`] has a precision of only 8 bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10464,"byte_end":10517,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10518,"byte_end":10521,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Like [`f16`][crate::f16], [`bf16`] does not offer arithmetic operations as it is intended for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10522,"byte_end":10619,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ compact storage rather than calculations. Operations should be performed with [`f32`] or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10620,"byte_end":10712,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/ higher-precision types and converted to/from [`bf16`] as necessary.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10713,"byte_end":10784,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10785,"byte_end":10788,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10789,"byte_end":10867,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10868,"byte_end":10898,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":10931,"byte_end":10951,"line_start":38,"line_end":38,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11258,"byte_end":11267,"line_start":48,"line_end":48,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<bf16>::from_bits","value":"const fn from_bits(u16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from the raw bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11160,"byte_end":11210,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11215,"byte_end":11224,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11229,"byte_end":11240,"line_start":47,"line_end":47,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11698,"byte_end":11706,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<bf16>::from_f32","value":"fn from_f32(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 32-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11319,"byte_end":11386,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11391,"byte_end":11394,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11399,"byte_end":11488,"line_start":54,"line_end":54,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11493,"byte_end":11586,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11591,"byte_end":11656,"line_start":56,"line_end":56,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11661,"byte_end":11670,"line_start":57,"line_end":57,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11675,"byte_end":11686,"line_start":58,"line_end":58,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12402,"byte_end":12416,"line_start":74,"line_end":74,"column_start":18,"column_end":32},"name":"from_f32_const","qualname":"<bf16>::from_f32_const","value":"const fn from_f32_const(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 32-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11776,"byte_end":11843,"line_start":63,"line_end":63,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11848,"byte_end":11851,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f32`][Self::from_f32] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11856,"byte_end":11948,"line_start":65,"line_end":65,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f32`][Self::from_f32] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11953,"byte_end":12048,"line_start":66,"line_end":66,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12053,"byte_end":12084,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12089,"byte_end":12092,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12097,"byte_end":12186,"line_start":69,"line_end":69,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12191,"byte_end":12284,"line_start":70,"line_end":70,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12289,"byte_end":12354,"line_start":71,"line_end":71,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12359,"byte_end":12368,"line_start":72,"line_end":72,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12373,"byte_end":12384,"line_start":73,"line_end":73,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12959,"byte_end":12967,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<bf16>::from_f64","value":"fn from_f64(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 64-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12492,"byte_end":12559,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12564,"byte_end":12567,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12572,"byte_end":12660,"line_start":80,"line_end":80,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12665,"byte_end":12757,"line_start":81,"line_end":81,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12762,"byte_end":12851,"line_start":82,"line_end":82,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12856,"byte_end":12917,"line_start":83,"line_end":83,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12922,"byte_end":12931,"line_start":84,"line_end":84,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":12936,"byte_end":12947,"line_start":85,"line_end":85,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13751,"byte_end":13765,"line_start":102,"line_end":102,"column_start":18,"column_end":32},"name":"from_f64_const","qualname":"<bf16>::from_f64_const","value":"const fn from_f64_const(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`] value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`] value from a 64-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13037,"byte_end":13104,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13109,"byte_end":13112,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f64`][Self::from_f64] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13117,"byte_end":13209,"line_start":92,"line_end":92,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f64`][Self::from_f64] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13214,"byte_end":13309,"line_start":93,"line_end":93,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13314,"byte_end":13345,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13350,"byte_end":13353,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13358,"byte_end":13446,"line_start":96,"line_end":96,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13451,"byte_end":13543,"line_start":97,"line_end":97,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13548,"byte_end":13637,"line_start":98,"line_end":98,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13642,"byte_end":13703,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13708,"byte_end":13717,"line_start":100,"line_end":100,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13722,"byte_end":13733,"line_start":101,"line_end":101,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13952,"byte_end":13959,"line_start":109,"line_end":109,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<bf16>::to_bits","value":"const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] into the underlying bit representation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13841,"byte_end":13904,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13909,"byte_end":13918,"line_start":107,"line_end":107,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":13923,"byte_end":13934,"line_start":108,"line_end":108,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14368,"byte_end":14379,"line_start":125,"line_end":125,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<bf16>::to_le_bytes","value":"const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14001,"byte_end":14094,"line_start":113,"line_end":113,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14099,"byte_end":14128,"line_start":114,"line_end":114,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14133,"byte_end":14136,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14141,"byte_end":14155,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14160,"byte_end":14163,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14168,"byte_end":14179,"line_start":118,"line_end":118,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14184,"byte_end":14211,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_le_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14216,"byte_end":14267,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x48, 0x41]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14272,"byte_end":14308,"line_start":121,"line_end":121,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14313,"byte_end":14320,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14325,"byte_end":14334,"line_start":123,"line_end":123,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14339,"byte_end":14350,"line_start":124,"line_end":124,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14813,"byte_end":14824,"line_start":141,"line_end":141,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<bf16>::to_be_bytes","value":"const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14439,"byte_end":14532,"line_start":129,"line_end":129,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14537,"byte_end":14573,"line_start":130,"line_end":130,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14578,"byte_end":14581,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14586,"byte_end":14600,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14605,"byte_end":14608,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14613,"byte_end":14624,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14629,"byte_end":14656,"line_start":135,"line_end":135,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_be_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14661,"byte_end":14712,"line_start":136,"line_end":136,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x41, 0x48]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14717,"byte_end":14753,"line_start":137,"line_end":137,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14758,"byte_end":14765,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14770,"byte_end":14779,"line_start":139,"line_end":139,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14784,"byte_end":14795,"line_start":140,"line_end":140,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15549,"byte_end":15560,"line_start":165,"line_end":165,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<bf16>::to_ne_bytes","value":"const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14884,"byte_end":14977,"line_start":145,"line_end":145,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":14982,"byte_end":15004,"line_start":146,"line_end":146,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15009,"byte_end":15012,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15017,"byte_end":15097,"line_start":148,"line_end":148,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][bf16::to_be_bytes] or [`to_le_bytes`][bf16::to_le_bytes], as appropriate,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15102,"byte_end":15195,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15200,"byte_end":15212,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15217,"byte_end":15220,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15225,"byte_end":15239,"line_start":152,"line_end":152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15244,"byte_end":15247,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15252,"byte_end":15263,"line_start":154,"line_end":154,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15268,"byte_end":15295,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15300,"byte_end":15351,"line_start":156,"line_end":156,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15356,"byte_end":15410,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"/     [0x41, 0x48]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15415,"byte_end":15435,"line_start":158,"line_end":158,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15440,"byte_end":15452,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15457,"byte_end":15477,"line_start":160,"line_end":160,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15482,"byte_end":15489,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15494,"byte_end":15501,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15506,"byte_end":15515,"line_start":163,"line_end":163,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15520,"byte_end":15531,"line_start":164,"line_end":164,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15959,"byte_end":15972,"line_start":180,"line_end":180,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<bf16>::from_le_bytes","value":"const fn from_le_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15620,"byte_end":15712,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15717,"byte_end":15720,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15725,"byte_end":15739,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15744,"byte_end":15747,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15752,"byte_end":15763,"line_start":173,"line_end":173,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15768,"byte_end":15795,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_le_bytes([0x48, 0x41]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15800,"byte_end":15850,"line_start":175,"line_end":175,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15855,"byte_end":15899,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15904,"byte_end":15911,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15916,"byte_end":15925,"line_start":178,"line_end":178,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":15930,"byte_end":15941,"line_start":179,"line_end":179,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16397,"byte_end":16410,"line_start":195,"line_end":195,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<bf16>::from_be_bytes","value":"const fn from_be_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16061,"byte_end":16150,"line_start":184,"line_end":184,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16155,"byte_end":16158,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16163,"byte_end":16177,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16182,"byte_end":16185,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16190,"byte_end":16201,"line_start":188,"line_end":188,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16206,"byte_end":16233,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_be_bytes([0x41, 0x48]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16238,"byte_end":16288,"line_start":190,"line_end":190,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16293,"byte_end":16337,"line_start":191,"line_end":191,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16342,"byte_end":16349,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16354,"byte_end":16363,"line_start":193,"line_end":193,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16368,"byte_end":16379,"line_start":194,"line_end":194,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17159,"byte_end":17172,"line_start":218,"line_end":218,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<bf16>::from_ne_bytes","value":"const fn from_ne_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16499,"byte_end":16591,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16596,"byte_end":16599,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16604,"byte_end":16693,"line_start":201,"line_end":201,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][bf16::from_be_bytes] or [`from_le_bytes`][bf16::from_le_bytes], as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16698,"byte_end":16786,"line_start":202,"line_end":202,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16791,"byte_end":16815,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16820,"byte_end":16823,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16828,"byte_end":16842,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16847,"byte_end":16850,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16855,"byte_end":16866,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16871,"byte_end":16898,"line_start":208,"line_end":208,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16903,"byte_end":16971,"line_start":209,"line_end":209,"column_start":5,"column_end":73}},{"value":"/     [0x41, 0x48]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":16976,"byte_end":16996,"line_start":210,"line_end":210,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17001,"byte_end":17013,"line_start":211,"line_end":211,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17018,"byte_end":17038,"line_start":212,"line_end":212,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17043,"byte_end":17050,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17055,"byte_end":17099,"line_start":214,"line_end":214,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17104,"byte_end":17111,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17116,"byte_end":17125,"line_start":216,"line_end":216,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17130,"byte_end":17141,"line_start":217,"line_end":217,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17452,"byte_end":17458,"line_start":227,"line_end":227,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<bf16>::to_f32","value":"fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f32`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f32`] value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17261,"byte_end":17313,"line_start":222,"line_end":222,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17318,"byte_end":17321,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f32`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17326,"byte_end":17410,"line_start":224,"line_end":224,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17415,"byte_end":17424,"line_start":225,"line_end":225,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17429,"byte_end":17440,"line_start":226,"line_end":226,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17943,"byte_end":17955,"line_start":240,"line_end":240,"column_start":18,"column_end":30},"name":"to_f32_const","qualname":"<bf16>::to_f32_const","value":"const fn to_f32_const(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f32`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f32`] value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17513,"byte_end":17565,"line_start":231,"line_end":231,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17570,"byte_end":17573,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f32`][Self::to_f32] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17578,"byte_end":17666,"line_start":233,"line_end":233,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f32`][Self::to_f32] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17671,"byte_end":17762,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17767,"byte_end":17798,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17803,"byte_end":17806,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f32`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17811,"byte_end":17895,"line_start":237,"line_end":237,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17900,"byte_end":17909,"line_start":238,"line_end":238,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":17914,"byte_end":17925,"line_start":239,"line_end":239,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18210,"byte_end":18216,"line_start":249,"line_end":249,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<bf16>::to_f64","value":"fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f64`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f64`] value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18019,"byte_end":18071,"line_start":244,"line_end":244,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18076,"byte_end":18079,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f64`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18084,"byte_end":18168,"line_start":246,"line_end":246,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18173,"byte_end":18182,"line_start":247,"line_end":247,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18187,"byte_end":18198,"line_start":248,"line_end":248,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18701,"byte_end":18713,"line_start":262,"line_end":262,"column_start":18,"column_end":30},"name":"to_f64_const","qualname":"<bf16>::to_f64_const","value":"const fn to_f64_const(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`] value into an [`f64`] value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`] value into an [`f64`] value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18271,"byte_end":18323,"line_start":253,"line_end":253,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18328,"byte_end":18331,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f64`][Self::to_f64] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18336,"byte_end":18424,"line_start":255,"line_end":255,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f64`][Self::to_f64] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18429,"byte_end":18520,"line_start":256,"line_end":256,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18525,"byte_end":18556,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18561,"byte_end":18564,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in [`f64`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18569,"byte_end":18653,"line_start":259,"line_end":259,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18658,"byte_end":18667,"line_start":260,"line_end":260,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18672,"byte_end":18683,"line_start":261,"line_end":261,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19129,"byte_end":19135,"line_start":281,"line_end":281,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<bf16>::is_nan","value":"const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is NaN and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is NaN and `false` otherwise.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18777,"byte_end":18839,"line_start":266,"line_end":266,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18844,"byte_end":18847,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18852,"byte_end":18866,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18871,"byte_end":18874,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18879,"byte_end":18890,"line_start":270,"line_end":270,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18895,"byte_end":18922,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18927,"byte_end":18930,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18935,"byte_end":18959,"line_start":273,"line_end":273,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":18964,"byte_end":19000,"line_start":274,"line_end":274,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19005,"byte_end":19008,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19013,"byte_end":19039,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19044,"byte_end":19069,"line_start":277,"line_end":277,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19074,"byte_end":19081,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19086,"byte_end":19095,"line_start":279,"line_end":279,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19100,"byte_end":19111,"line_start":280,"line_end":280,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19726,"byte_end":19737,"line_start":305,"line_end":305,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<bf16>::is_infinite","value":"const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false` otherwise.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19202,"byte_end":19266,"line_start":285,"line_end":285,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19271,"byte_end":19274,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19279,"byte_end":19293,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19298,"byte_end":19301,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19306,"byte_end":19317,"line_start":289,"line_end":289,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19322,"byte_end":19349,"line_start":290,"line_end":290,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19354,"byte_end":19357,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19362,"byte_end":19397,"line_start":292,"line_end":292,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19402,"byte_end":19431,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19436,"byte_end":19473,"line_start":294,"line_end":294,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19478,"byte_end":19502,"line_start":295,"line_end":295,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19507,"byte_end":19510,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19515,"byte_end":19545,"line_start":297,"line_end":297,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19550,"byte_end":19582,"line_start":298,"line_end":298,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19587,"byte_end":19590,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19595,"byte_end":19626,"line_start":300,"line_end":300,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19631,"byte_end":19666,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19671,"byte_end":19678,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19683,"byte_end":19692,"line_start":303,"line_end":303,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19697,"byte_end":19708,"line_start":304,"line_end":304,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20320,"byte_end":20329,"line_start":329,"line_end":329,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<bf16>::is_finite","value":"const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19805,"byte_end":19867,"line_start":309,"line_end":309,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19872,"byte_end":19875,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19880,"byte_end":19894,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19899,"byte_end":19902,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19907,"byte_end":19918,"line_start":313,"line_end":313,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19923,"byte_end":19950,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19955,"byte_end":19958,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":19963,"byte_end":19998,"line_start":316,"line_end":316,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20003,"byte_end":20032,"line_start":317,"line_end":317,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20037,"byte_end":20074,"line_start":318,"line_end":318,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20079,"byte_end":20103,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20108,"byte_end":20111,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20116,"byte_end":20143,"line_start":321,"line_end":321,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20148,"byte_end":20151,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20156,"byte_end":20186,"line_start":323,"line_end":323,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20191,"byte_end":20221,"line_start":324,"line_end":324,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20226,"byte_end":20260,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20265,"byte_end":20272,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20277,"byte_end":20286,"line_start":327,"line_end":327,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20291,"byte_end":20302,"line_start":328,"line_end":328,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21101,"byte_end":21110,"line_start":356,"line_end":356,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<bf16>::is_normal","value":"const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20397,"byte_end":20475,"line_start":333,"line_end":333,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20480,"byte_end":20483,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20488,"byte_end":20502,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20507,"byte_end":20510,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20515,"byte_end":20526,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20531,"byte_end":20558,"line_start":338,"line_end":338,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20563,"byte_end":20566,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let min = bf16::MIN_POSITIVE;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20571,"byte_end":20604,"line_start":340,"line_end":340,"column_start":5,"column_end":38}},{"value":"/ let max = bf16::MAX;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20609,"byte_end":20633,"line_start":341,"line_end":341,"column_start":5,"column_end":29}},{"value":"/ let lower_than_min = bf16::from_f32(1.0e-39_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20638,"byte_end":20691,"line_start":342,"line_end":342,"column_start":5,"column_end":58}},{"value":"/ let zero = bf16::from_f32(0.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20696,"byte_end":20735,"line_start":343,"line_end":343,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20740,"byte_end":20743,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20748,"byte_end":20777,"line_start":345,"line_end":345,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20782,"byte_end":20811,"line_start":346,"line_end":346,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20816,"byte_end":20819,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20824,"byte_end":20855,"line_start":348,"line_end":348,"column_start":5,"column_end":36}},{"value":"/ assert!(!bf16::NAN.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20860,"byte_end":20896,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/ assert!(!bf16::INFINITY.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20901,"byte_end":20942,"line_start":350,"line_end":350,"column_start":5,"column_end":46}},{"value":"/ // Values between 0 and `min` are subnormal.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":20947,"byte_end":20995,"line_start":351,"line_end":351,"column_start":5,"column_end":53}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21000,"byte_end":21041,"line_start":352,"line_end":352,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21046,"byte_end":21053,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21058,"byte_end":21067,"line_start":354,"line_end":354,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21072,"byte_end":21083,"line_start":355,"line_end":355,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21768,"byte_end":21776,"line_start":379,"line_end":379,"column_start":18,"column_end":26},"name":"classify","qualname":"<bf16>::classify","value":"const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21213,"byte_end":21267,"line_start":361,"line_end":361,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21272,"byte_end":21275,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21280,"byte_end":21370,"line_start":363,"line_end":363,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21375,"byte_end":21397,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21402,"byte_end":21405,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21410,"byte_end":21424,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21429,"byte_end":21432,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21437,"byte_end":21448,"line_start":368,"line_end":368,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21453,"byte_end":21482,"line_start":369,"line_end":369,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21487,"byte_end":21514,"line_start":370,"line_end":370,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21519,"byte_end":21522,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let num = bf16::from_f32(12.4_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21527,"byte_end":21566,"line_start":372,"line_end":372,"column_start":5,"column_end":44}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21571,"byte_end":21600,"line_start":373,"line_end":373,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21605,"byte_end":21608,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21613,"byte_end":21664,"line_start":375,"line_end":375,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21669,"byte_end":21722,"line_start":376,"line_end":376,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21727,"byte_end":21734,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":21739,"byte_end":21750,"line_start":378,"line_end":378,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22792,"byte_end":22798,"line_start":410,"line_end":410,"column_start":18,"column_end":24},"name":"signum","qualname":"<bf16>::signum","value":"const fn signum(Self) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22144,"byte_end":22200,"line_start":391,"line_end":391,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22205,"byte_end":22208,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ * 1.0 if the number is positive, +0.0 or [`INFINITY`][bf16::INFINITY]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22213,"byte_end":22286,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ * −1.0 if the number is negative, −0.0` or [`NEG_INFINITY`][bf16::NEG_INFINITY]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22291,"byte_end":22378,"line_start":394,"line_end":394,"column_start":5,"column_end":88}},{"value":"/ * [`NAN`][bf16::NAN] if the number is NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22383,"byte_end":22428,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22433,"byte_end":22436,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22441,"byte_end":22455,"line_start":397,"line_end":397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22460,"byte_end":22463,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22468,"byte_end":22479,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22484,"byte_end":22511,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22516,"byte_end":22519,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(3.5_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22524,"byte_end":22560,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22565,"byte_end":22568,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), bf16::from_f32(1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22573,"byte_end":22621,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bf16::NEG_INFINITY.signum(), bf16::from_f32(-1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22626,"byte_end":22692,"line_start":405,"line_end":405,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22697,"byte_end":22700,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.signum().is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22705,"byte_end":22746,"line_start":407,"line_end":407,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22751,"byte_end":22758,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22763,"byte_end":22774,"line_start":409,"line_end":409,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23581,"byte_end":23597,"line_start":439,"line_end":439,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<bf16>::is_sign_positive","value":"const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":22989,"byte_end":23078,"line_start":420,"line_end":420,"column_start":5,"column_end":94}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23083,"byte_end":23114,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23119,"byte_end":23122,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23127,"byte_end":23141,"line_start":423,"line_end":423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23146,"byte_end":23149,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23154,"byte_end":23165,"line_start":425,"line_end":425,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23170,"byte_end":23197,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23202,"byte_end":23205,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23210,"byte_end":23234,"line_start":428,"line_end":428,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23239,"byte_end":23275,"line_start":429,"line_end":429,"column_start":5,"column_end":41}},{"value":"/ let g = bf16::from_f32(-7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23280,"byte_end":23317,"line_start":430,"line_end":430,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23322,"byte_end":23325,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23330,"byte_end":23364,"line_start":432,"line_end":432,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23369,"byte_end":23404,"line_start":433,"line_end":433,"column_start":5,"column_end":40}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23409,"byte_end":23454,"line_start":434,"line_end":434,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23459,"byte_end":23521,"line_start":435,"line_end":435,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23526,"byte_end":23533,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23538,"byte_end":23547,"line_start":437,"line_end":437,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23552,"byte_end":23563,"line_start":438,"line_end":438,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24251,"byte_end":24267,"line_start":462,"line_end":462,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<bf16>::is_sign_negative","value":"const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23657,"byte_end":23748,"line_start":443,"line_end":443,"column_start":5,"column_end":94}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23753,"byte_end":23786,"line_start":444,"line_end":444,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23791,"byte_end":23794,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23799,"byte_end":23813,"line_start":446,"line_end":446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23818,"byte_end":23821,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23826,"byte_end":23837,"line_start":448,"line_end":448,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23842,"byte_end":23869,"line_start":449,"line_end":449,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23874,"byte_end":23877,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23882,"byte_end":23906,"line_start":451,"line_end":451,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23911,"byte_end":23946,"line_start":452,"line_end":452,"column_start":5,"column_end":40}},{"value":"/ let g = bf16::from_f32(-7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23951,"byte_end":23987,"line_start":453,"line_end":453,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":23992,"byte_end":23995,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24000,"byte_end":24035,"line_start":455,"line_end":455,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24040,"byte_end":24074,"line_start":456,"line_end":456,"column_start":5,"column_end":39}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24079,"byte_end":24124,"line_start":457,"line_end":457,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24129,"byte_end":24191,"line_start":458,"line_end":458,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24196,"byte_end":24203,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24208,"byte_end":24217,"line_start":460,"line_end":460,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24222,"byte_end":24233,"line_start":461,"line_end":461,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25155,"byte_end":25163,"line_start":486,"line_end":486,"column_start":18,"column_end":26},"name":"copysign","qualname":"<bf16>::copysign","value":"const fn copysign(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24327,"byte_end":24407,"line_start":466,"line_end":466,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24412,"byte_end":24415,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24420,"byte_end":24514,"line_start":468,"line_end":468,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24519,"byte_end":24586,"line_start":469,"line_end":469,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24591,"byte_end":24594,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24599,"byte_end":24613,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24618,"byte_end":24621,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24626,"byte_end":24633,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24638,"byte_end":24665,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/ let f = bf16::from_f32(3.5);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24670,"byte_end":24702,"line_start":475,"line_end":475,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24707,"byte_end":24710,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24715,"byte_end":24785,"line_start":477,"line_end":477,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(f.copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24790,"byte_end":24862,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(0.42)), bf16::from_f32(3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24867,"byte_end":24940,"line_start":479,"line_end":479,"column_start":5,"column_end":78}},{"value":"/ assert_eq!((-f).copysign(bf16::from_f32(-0.42)), bf16::from_f32(-3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":24945,"byte_end":25020,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25025,"byte_end":25028,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.copysign(bf16::from_f32(1.0)).is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25033,"byte_end":25095,"line_start":482,"line_end":482,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25100,"byte_end":25107,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25112,"byte_end":25121,"line_start":484,"line_end":484,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25126,"byte_end":25137,"line_start":485,"line_end":485,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25637,"byte_end":25640,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"max","qualname":"<bf16>::max","value":"fn max(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25261,"byte_end":25304,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25309,"byte_end":25312,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25317,"byte_end":25389,"line_start":492,"line_end":492,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25394,"byte_end":25397,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25402,"byte_end":25416,"line_start":494,"line_end":494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25421,"byte_end":25424,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25429,"byte_end":25436,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25441,"byte_end":25468,"line_start":497,"line_end":497,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25473,"byte_end":25505,"line_start":498,"line_end":498,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25510,"byte_end":25542,"line_start":499,"line_end":499,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25547,"byte_end":25550,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25555,"byte_end":25583,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25588,"byte_end":25595,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25600,"byte_end":25609,"line_start":503,"line_end":503,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25614,"byte_end":25625,"line_start":504,"line_end":504,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26164,"byte_end":26167,"line_start":528,"line_end":528,"column_start":12,"column_end":15},"name":"min","qualname":"<bf16>::min","value":"fn min(Self, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25788,"byte_end":25831,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25836,"byte_end":25839,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25844,"byte_end":25916,"line_start":515,"line_end":515,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25921,"byte_end":25924,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25929,"byte_end":25943,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25948,"byte_end":25951,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25956,"byte_end":25963,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":25968,"byte_end":25995,"line_start":520,"line_end":520,"column_start":5,"column_end":32}},{"value":"/ let x = bf16::from_f32(1.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26000,"byte_end":26032,"line_start":521,"line_end":521,"column_start":5,"column_end":37}},{"value":"/ let y = bf16::from_f32(2.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26037,"byte_end":26069,"line_start":522,"line_end":522,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26074,"byte_end":26077,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26082,"byte_end":26110,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26115,"byte_end":26122,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26127,"byte_end":26136,"line_start":526,"line_end":526,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26141,"byte_end":26152,"line_start":527,"line_end":527,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27245,"byte_end":27250,"line_start":557,"line_end":557,"column_start":12,"column_end":17},"name":"clamp","qualname":"<bf16>::clamp","value":"fn clamp(Self, bf16, bf16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26315,"byte_end":26375,"line_start":536,"line_end":536,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26380,"byte_end":26383,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26388,"byte_end":26478,"line_start":538,"line_end":538,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26483,"byte_end":26517,"line_start":539,"line_end":539,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26522,"byte_end":26525,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26530,"byte_end":26607,"line_start":541,"line_end":541,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26612,"byte_end":26615,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26620,"byte_end":26632,"line_start":543,"line_end":543,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26637,"byte_end":26694,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26699,"byte_end":26702,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26707,"byte_end":26721,"line_start":546,"line_end":546,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26726,"byte_end":26729,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26734,"byte_end":26741,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26746,"byte_end":26773,"line_start":549,"line_end":549,"column_start":5,"column_end":32}},{"value":"/ assert!(bf16::from_f32(-3.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(-2.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26778,"byte_end":26885,"line_start":550,"line_end":550,"column_start":5,"column_end":112}},{"value":"/ assert!(bf16::from_f32(0.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(0.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":26890,"byte_end":26995,"line_start":551,"line_end":551,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::from_f32(2.0).clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)) == bf16::from_f32(1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27000,"byte_end":27105,"line_start":552,"line_end":552,"column_start":5,"column_end":110}},{"value":"/ assert!(bf16::NAN.clamp(bf16::from_f32(-2.0), bf16::from_f32(1.0)).is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27110,"byte_end":27191,"line_start":553,"line_end":553,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27196,"byte_end":27203,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27208,"byte_end":27217,"line_start":555,"line_end":555,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27222,"byte_end":27233,"line_start":556,"line_end":556,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29896,"byte_end":29905,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"total_cmp","qualname":"<bf16>::total_cmp","value":"fn total_cmp<'_, '_>(&'_ Self, &'_ Self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Returns the ordering between `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the ordering between `self` and `other`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27469,"byte_end":27521,"line_start":569,"line_end":569,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27526,"byte_end":27529,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Unlike the standard partial comparison between floating point numbers,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27534,"byte_end":27608,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ this comparison always produces an ordering in accordance to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27613,"byte_end":27677,"line_start":572,"line_end":572,"column_start":5,"column_end":69}},{"value":"/ the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27682,"byte_end":27755,"line_start":573,"line_end":573,"column_start":5,"column_end":78}},{"value":"/ floating point standard. The values are ordered in the following sequence:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27760,"byte_end":27838,"line_start":574,"line_end":574,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27843,"byte_end":27846,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ - negative quiet NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27851,"byte_end":27875,"line_start":576,"line_end":576,"column_start":5,"column_end":29}},{"value":"/ - negative signaling NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27880,"byte_end":27908,"line_start":577,"line_end":577,"column_start":5,"column_end":33}},{"value":"/ - negative infinity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27913,"byte_end":27936,"line_start":578,"line_end":578,"column_start":5,"column_end":28}},{"value":"/ - negative numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27941,"byte_end":27963,"line_start":579,"line_end":579,"column_start":5,"column_end":27}},{"value":"/ - negative subnormal numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":27968,"byte_end":28000,"line_start":580,"line_end":580,"column_start":5,"column_end":37}},{"value":"/ - negative zero","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28005,"byte_end":28024,"line_start":581,"line_end":581,"column_start":5,"column_end":24}},{"value":"/ - positive zero","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28029,"byte_end":28048,"line_start":582,"line_end":582,"column_start":5,"column_end":24}},{"value":"/ - positive subnormal numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28053,"byte_end":28085,"line_start":583,"line_end":583,"column_start":5,"column_end":37}},{"value":"/ - positive numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28090,"byte_end":28112,"line_start":584,"line_end":584,"column_start":5,"column_end":27}},{"value":"/ - positive infinity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28117,"byte_end":28140,"line_start":585,"line_end":585,"column_start":5,"column_end":28}},{"value":"/ - positive signaling NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28145,"byte_end":28173,"line_start":586,"line_end":586,"column_start":5,"column_end":33}},{"value":"/ - positive quiet NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28178,"byte_end":28203,"line_start":587,"line_end":587,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28208,"byte_end":28211,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ The ordering established by this function does not always agree with the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28216,"byte_end":28292,"line_start":589,"line_end":589,"column_start":5,"column_end":81}},{"value":"/ [`PartialOrd`] and [`PartialEq`] implementations of `bf16`. For example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28297,"byte_end":28373,"line_start":590,"line_end":590,"column_start":5,"column_end":81}},{"value":"/ they consider negative and positive zero equal, while `total_cmp`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28378,"byte_end":28447,"line_start":591,"line_end":591,"column_start":5,"column_end":74}},{"value":"/ doesn't.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28452,"byte_end":28464,"line_start":592,"line_end":592,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28469,"byte_end":28472,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The interpretation of the signaling NaN bit follows the definition in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28477,"byte_end":28550,"line_start":594,"line_end":594,"column_start":5,"column_end":78}},{"value":"/ the IEEE 754 standard, which may not match the interpretation by some of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28555,"byte_end":28631,"line_start":595,"line_end":595,"column_start":5,"column_end":81}},{"value":"/ the older, non-conformant (e.g. MIPS) hardware implementations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28636,"byte_end":28703,"line_start":596,"line_end":596,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28708,"byte_end":28711,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28716,"byte_end":28730,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28735,"byte_end":28742,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"/ # use half::bf16;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28747,"byte_end":28768,"line_start":600,"line_end":600,"column_start":5,"column_end":26}},{"value":"/ let mut v: Vec<bf16> = vec![];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28773,"byte_end":28807,"line_start":601,"line_end":601,"column_start":5,"column_end":39}},{"value":"/ v.push(bf16::ONE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28812,"byte_end":28834,"line_start":602,"line_end":602,"column_start":5,"column_end":27}},{"value":"/ v.push(bf16::INFINITY);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28839,"byte_end":28866,"line_start":603,"line_end":603,"column_start":5,"column_end":32}},{"value":"/ v.push(bf16::NEG_INFINITY);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28871,"byte_end":28902,"line_start":604,"line_end":604,"column_start":5,"column_end":36}},{"value":"/ v.push(bf16::NAN);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28907,"byte_end":28929,"line_start":605,"line_end":605,"column_start":5,"column_end":27}},{"value":"/ v.push(bf16::MAX_SUBNORMAL);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28934,"byte_end":28966,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/ v.push(-bf16::MAX_SUBNORMAL);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":28971,"byte_end":29004,"line_start":607,"line_end":607,"column_start":5,"column_end":38}},{"value":"/ v.push(bf16::ZERO);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29009,"byte_end":29032,"line_start":608,"line_end":608,"column_start":5,"column_end":28}},{"value":"/ v.push(bf16::NEG_ZERO);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29037,"byte_end":29064,"line_start":609,"line_end":609,"column_start":5,"column_end":32}},{"value":"/ v.push(bf16::NEG_ONE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29069,"byte_end":29095,"line_start":610,"line_end":610,"column_start":5,"column_end":31}},{"value":"/ v.push(bf16::MIN_POSITIVE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29100,"byte_end":29131,"line_start":611,"line_end":611,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29136,"byte_end":29139,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ v.sort_by(|a, b| a.total_cmp(&b));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29144,"byte_end":29182,"line_start":613,"line_end":613,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29187,"byte_end":29190,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ assert!(v","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29195,"byte_end":29208,"line_start":615,"line_end":615,"column_start":5,"column_end":18}},{"value":"/     .into_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29213,"byte_end":29233,"line_start":616,"line_end":616,"column_start":5,"column_end":25}},{"value":"/     .zip(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29238,"byte_end":29251,"line_start":617,"line_end":617,"column_start":5,"column_end":18}},{"value":"/         [","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29256,"byte_end":29269,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/             bf16::NEG_INFINITY,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29274,"byte_end":29309,"line_start":619,"line_end":619,"column_start":5,"column_end":40}},{"value":"/             bf16::NEG_ONE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29314,"byte_end":29344,"line_start":620,"line_end":620,"column_start":5,"column_end":35}},{"value":"/             -bf16::MAX_SUBNORMAL,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29349,"byte_end":29386,"line_start":621,"line_end":621,"column_start":5,"column_end":42}},{"value":"/             bf16::NEG_ZERO,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29391,"byte_end":29422,"line_start":622,"line_end":622,"column_start":5,"column_end":36}},{"value":"/             bf16::ZERO,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29427,"byte_end":29454,"line_start":623,"line_end":623,"column_start":5,"column_end":32}},{"value":"/             bf16::MAX_SUBNORMAL,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29459,"byte_end":29495,"line_start":624,"line_end":624,"column_start":5,"column_end":41}},{"value":"/             bf16::MIN_POSITIVE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29500,"byte_end":29535,"line_start":625,"line_end":625,"column_start":5,"column_end":40}},{"value":"/             bf16::ONE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29540,"byte_end":29566,"line_start":626,"line_end":626,"column_start":5,"column_end":31}},{"value":"/             bf16::INFINITY,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29571,"byte_end":29602,"line_start":627,"line_end":627,"column_start":5,"column_end":36}},{"value":"/             bf16::NAN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29607,"byte_end":29632,"line_start":628,"line_end":628,"column_start":5,"column_end":30}},{"value":"/         ]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29637,"byte_end":29650,"line_start":629,"line_end":629,"column_start":5,"column_end":18}},{"value":"/         .iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29655,"byte_end":29674,"line_start":630,"line_end":630,"column_start":5,"column_end":24}},{"value":"/     )","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29679,"byte_end":29688,"line_start":631,"line_end":631,"column_start":5,"column_end":14}},{"value":"/     .all(|(a, b)| a.to_bits() == b.to_bits()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29693,"byte_end":29744,"line_start":632,"line_end":632,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29749,"byte_end":29756,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29859,"byte_end":29868,"line_start":635,"line_end":635,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":29873,"byte_end":29884,"line_start":636,"line_end":636,"column_start":5,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32292,"byte_end":32298,"line_start":701,"line_end":701,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::bfloat::bf16::DIGITS","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Approximate number of [`bf16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`bf16`] significant digits in base 10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32213,"byte_end":32277,"line_start":700,"line_end":700,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32513,"byte_end":32520,"line_start":706,"line_end":706,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::bfloat::bf16::EPSILON","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`bf16`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32313,"byte_end":32325,"line_start":702,"line_end":702,"column_start":5,"column_end":17}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32330,"byte_end":32404,"line_start":703,"line_end":703,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32409,"byte_end":32412,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32417,"byte_end":32498,"line_start":705,"line_end":705,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32602,"byte_end":32610,"line_start":708,"line_end":708,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::bfloat::bf16::INFINITY","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`bf16`] positive Infinity (+∞)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32550,"byte_end":32587,"line_start":707,"line_end":707,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32706,"byte_end":32721,"line_start":710,"line_end":710,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::bfloat::bf16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Number of [`bf16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`bf16`] significant digits in base 2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32640,"byte_end":32691,"line_start":709,"line_end":709,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32784,"byte_end":32787,"line_start":712,"line_end":712,"column_start":15,"column_end":18},"name":"MAX","qualname":"::bfloat::bf16::MAX","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Largest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`bf16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32736,"byte_end":32769,"line_start":711,"line_end":711,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32879,"byte_end":32889,"line_start":714,"line_end":714,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::bfloat::bf16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 10 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32814,"byte_end":32864,"line_start":713,"line_end":713,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32969,"byte_end":32976,"line_start":716,"line_end":716,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::bfloat::bf16::MAX_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`] power of 2 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32905,"byte_end":32954,"line_start":715,"line_end":715,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33042,"byte_end":33045,"line_start":718,"line_end":718,"column_start":15,"column_end":18},"name":"MIN","qualname":"::bfloat::bf16::MIN","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Smallest finite [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`bf16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":32993,"byte_end":33027,"line_start":717,"line_end":717,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33144,"byte_end":33154,"line_start":720,"line_end":720,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::bfloat::bf16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Minimum possible normal [`bf16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`bf16`] power of 10 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33072,"byte_end":33129,"line_start":719,"line_end":719,"column_start":5,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33263,"byte_end":33270,"line_start":722,"line_end":722,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::bfloat::bf16::MIN_EXP","value":"i32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`bf16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`bf16`] power of 2 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33171,"byte_end":33248,"line_start":721,"line_end":721,"column_start":5,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33346,"byte_end":33358,"line_start":724,"line_end":724,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::bfloat::bf16::MIN_POSITIVE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Smallest positive normal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`bf16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33288,"byte_end":33331,"line_start":723,"line_end":723,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33434,"byte_end":33437,"line_start":726,"line_end":726,"column_start":15,"column_end":18},"name":"NAN","qualname":"::bfloat::bf16::NAN","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Not a Number (NaN)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33388,"byte_end":33419,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33520,"byte_end":33532,"line_start":728,"line_end":728,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::bfloat::bf16::NEG_INFINITY","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`] negative infinity (-∞).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33467,"byte_end":33505,"line_start":727,"line_end":727,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33641,"byte_end":33646,"line_start":730,"line_end":730,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::bfloat::bf16::RADIX","value":"u32","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`bf16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`bf16`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33562,"byte_end":33626,"line_start":729,"line_end":729,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33722,"byte_end":33744,"line_start":733,"line_end":733,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::bfloat::bf16::MIN_POSITIVE_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`bf16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33662,"byte_end":33707,"line_start":732,"line_end":732,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33825,"byte_end":33838,"line_start":735,"line_end":735,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::bfloat::bf16::MAX_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Maximum subnormal [`bf16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`bf16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33774,"byte_end":33810,"line_start":734,"line_end":734,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33898,"byte_end":33901,"line_start":738,"line_end":738,"column_start":15,"column_end":18},"name":"ONE","qualname":"::bfloat::bf16::ONE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33869,"byte_end":33883,"line_start":737,"line_end":737,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33960,"byte_end":33964,"line_start":740,"line_end":740,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::bfloat::bf16::ZERO","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 0\n","sig":null,"attributes":[{"value":"/ [`bf16`] 0","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33931,"byte_end":33945,"line_start":739,"line_end":739,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34024,"byte_end":34032,"line_start":742,"line_end":742,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::bfloat::bf16::NEG_ZERO","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] -0\n","sig":null,"attributes":[{"value":"/ [`bf16`] -0","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":33994,"byte_end":34009,"line_start":741,"line_end":741,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34092,"byte_end":34099,"line_start":744,"line_end":744,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::bfloat::bf16::NEG_ONE","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] -1\n","sig":null,"attributes":[{"value":"/ [`bf16`] -1","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34062,"byte_end":34077,"line_start":743,"line_end":743,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34178,"byte_end":34179,"line_start":747,"line_end":747,"column_start":15,"column_end":16},"name":"E","qualname":"::bfloat::bf16::E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Euler's number (ℯ)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34130,"byte_end":34163,"line_start":746,"line_end":746,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34262,"byte_end":34264,"line_start":749,"line_end":749,"column_start":15,"column_end":17},"name":"PI","qualname":"::bfloat::bf16::PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`bf16`] Archimedes' constant (π)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34209,"byte_end":34247,"line_start":748,"line_end":748,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34326,"byte_end":34335,"line_start":751,"line_end":751,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::bfloat::bf16::FRAC_1_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34294,"byte_end":34311,"line_start":750,"line_end":750,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34399,"byte_end":34412,"line_start":753,"line_end":753,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::bfloat::bf16::FRAC_1_SQRT_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 1/√2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34365,"byte_end":34384,"line_start":752,"line_end":752,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34474,"byte_end":34483,"line_start":755,"line_end":755,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::bfloat::bf16::FRAC_2_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34442,"byte_end":34459,"line_start":754,"line_end":754,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34548,"byte_end":34562,"line_start":757,"line_end":757,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::bfloat::bf16::FRAC_2_SQRT_PI","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`bf16`] 2/√π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34513,"byte_end":34533,"line_start":756,"line_end":756,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34624,"byte_end":34633,"line_start":759,"line_end":759,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::bfloat::bf16::FRAC_PI_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/2\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34592,"byte_end":34609,"line_start":758,"line_end":758,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34695,"byte_end":34704,"line_start":761,"line_end":761,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::bfloat::bf16::FRAC_PI_3","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/3\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/3","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34663,"byte_end":34680,"line_start":760,"line_end":760,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34766,"byte_end":34775,"line_start":763,"line_end":763,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::bfloat::bf16::FRAC_PI_4","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/4\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/4","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34734,"byte_end":34751,"line_start":762,"line_end":762,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34837,"byte_end":34846,"line_start":765,"line_end":765,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::bfloat::bf16::FRAC_PI_6","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/6\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/6","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34805,"byte_end":34822,"line_start":764,"line_end":764,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34908,"byte_end":34917,"line_start":767,"line_end":767,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::bfloat::bf16::FRAC_PI_8","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] π/8\n","sig":null,"attributes":[{"value":"/ [`bf16`] π/8","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34876,"byte_end":34893,"line_start":766,"line_end":766,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34986,"byte_end":34991,"line_start":769,"line_end":769,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::bfloat::bf16::LN_10","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":34947,"byte_end":34971,"line_start":768,"line_end":768,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35059,"byte_end":35063,"line_start":771,"line_end":771,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::bfloat::bf16::LN_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗇 2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35021,"byte_end":35044,"line_start":770,"line_end":770,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35142,"byte_end":35149,"line_start":773,"line_end":773,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::bfloat::bf16::LOG10_E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35093,"byte_end":35127,"line_start":772,"line_end":772,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35226,"byte_end":35233,"line_start":775,"line_end":775,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::bfloat::bf16::LOG10_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35179,"byte_end":35211,"line_start":774,"line_end":774,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35309,"byte_end":35315,"line_start":777,"line_end":777,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::bfloat::bf16::LOG2_E","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35263,"byte_end":35294,"line_start":776,"line_end":776,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35390,"byte_end":35397,"line_start":779,"line_end":779,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::bfloat::bf16::LOG2_10","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`bf16`] 𝗅𝗈𝗀₂10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35345,"byte_end":35375,"line_start":778,"line_end":778,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35459,"byte_end":35465,"line_start":781,"line_end":781,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::bfloat::bf16::SQRT_2","value":"bf16","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" [`bf16`] √2\n","sig":null,"attributes":[{"value":"/ [`bf16`] √2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35427,"byte_end":35444,"line_start":780,"line_end":780,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35541,"byte_end":35545,"line_start":786,"line_end":786,"column_start":8,"column_end":12},"name":"from","qualname":"<f32 as std::convert::From>::from","value":"fn from(bf16) -> f32","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35524,"byte_end":35533,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35639,"byte_end":35643,"line_start":793,"line_end":793,"column_start":8,"column_end":12},"name":"from","qualname":"<f64 as std::convert::From>::from","value":"fn from(bf16) -> f64","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35622,"byte_end":35631,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35736,"byte_end":35740,"line_start":800,"line_end":800,"column_start":8,"column_end":12},"name":"from","qualname":"<bf16 as std::convert::From>::from","value":"fn from(i8) -> bf16","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35719,"byte_end":35728,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35890,"byte_end":35894,"line_start":808,"line_end":808,"column_start":8,"column_end":12},"name":"from","qualname":"<bf16 as std::convert::From>::from","value":"fn from(u8) -> bf16","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35873,"byte_end":35882,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36030,"byte_end":36032,"line_start":815,"line_end":815,"column_start":8,"column_end":10},"name":"eq","qualname":"<bf16 as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ bf16) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36270,"byte_end":36281,"line_start":825,"line_end":825,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<bf16 as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp<'_, '_>(&'_ Self, &'_ bf16) -> Option<Ordering>","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2968},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":37217,"byte_end":37219,"line_start":852,"line_end":852,"column_start":8,"column_end":10},"name":"lt","qualname":"<bf16 as std::cmp::PartialOrd>::lt","value":"fn lt<'_, '_>(&'_ Self, &'_ bf16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2969},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":37719,"byte_end":37721,"line_start":867,"line_end":867,"column_start":8,"column_end":10},"name":"le","qualname":"<bf16 as std::cmp::PartialOrd>::le","value":"fn le<'_, '_>(&'_ Self, &'_ bf16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2970},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":38222,"byte_end":38224,"line_start":882,"line_end":882,"column_start":8,"column_end":10},"name":"gt","qualname":"<bf16 as std::cmp::PartialOrd>::gt","value":"fn gt<'_, '_>(&'_ Self, &'_ bf16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2971},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":38724,"byte_end":38726,"line_start":897,"line_end":897,"column_start":8,"column_end":10},"name":"ge","qualname":"<bf16 as std::cmp::PartialOrd>::ge","value":"fn ge<'_, '_>(&'_ Self, &'_ bf16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2972},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39320,"byte_end":39328,"line_start":916,"line_end":916,"column_start":8,"column_end":16},"name":"from_str","qualname":"<bf16 as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> Result<bf16, ParseFloatError>","parent":{"krate":2,"index":12999},"children":[],"decl_id":{"krate":2,"index":13001},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39495,"byte_end":39498,"line_start":923,"line_end":923,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39668,"byte_end":39671,"line_start":930,"line_end":930,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10305},"children":[],"decl_id":{"krate":2,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39840,"byte_end":39843,"line_start":937,"line_end":937,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::LowerExp>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10317},"children":[],"decl_id":{"krate":2,"index":10318},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40014,"byte_end":40017,"line_start":944,"line_end":944,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::UpperExp>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10319},"children":[],"decl_id":{"krate":2,"index":10320},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40186,"byte_end":40189,"line_start":951,"line_end":951,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Binary>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10309},"children":[],"decl_id":{"krate":2,"index":10310},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40350,"byte_end":40353,"line_start":958,"line_end":958,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::Octal>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10307},"children":[],"decl_id":{"krate":2,"index":10308},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40517,"byte_end":40520,"line_start":965,"line_end":965,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::LowerHex>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10311},"children":[],"decl_id":{"krate":2,"index":10312},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40684,"byte_end":40687,"line_start":972,"line_end":972,"column_start":8,"column_end":11},"name":"fmt","qualname":"<bf16 as std::fmt::UpperHex>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10313},"children":[],"decl_id":{"krate":2,"index":10314},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40836,"byte_end":40839,"line_start":980,"line_end":980,"column_start":8,"column_end":11},"name":"neg","qualname":"<bf16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3363},"children":[],"decl_id":{"krate":2,"index":3365},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40987,"byte_end":40990,"line_start":989,"line_end":989,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'_ bf16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3363},"children":[],"decl_id":{"krate":2,"index":3365},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40970,"byte_end":40979,"line_start":988,"line_end":988,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41100,"byte_end":41103,"line_start":997,"line_end":997,"column_start":8,"column_end":11},"name":"add","qualname":"<bf16 as std::ops::Add>::add","value":"fn add(Self, Self) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41307,"byte_end":41310,"line_start":1006,"line_end":1006,"column_start":8,"column_end":11},"name":"add","qualname":"<bf16 as std::ops::Add>::add","value":"fn add<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41290,"byte_end":41299,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41476,"byte_end":41479,"line_start":1015,"line_end":1015,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ bf16 as std::ops::Add>::add","value":"fn add<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41459,"byte_end":41468,"line_start":1014,"line_end":1014,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41647,"byte_end":41650,"line_start":1024,"line_end":1024,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ bf16 as std::ops::Add>::add","value":"fn add(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41630,"byte_end":41639,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41767,"byte_end":41777,"line_start":1031,"line_end":1031,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<bf16 as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3367},"children":[],"decl_id":{"krate":2,"index":3369},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41750,"byte_end":41759,"line_start":1030,"line_end":1030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41899,"byte_end":41909,"line_start":1038,"line_end":1038,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<bf16 as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_, '_>(&'_ mut Self, &'_ bf16)","parent":{"krate":2,"index":3367},"children":[],"decl_id":{"krate":2,"index":3369},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41882,"byte_end":41891,"line_start":1037,"line_end":1037,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42030,"byte_end":42033,"line_start":1046,"line_end":1046,"column_start":8,"column_end":11},"name":"sub","qualname":"<bf16 as std::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42237,"byte_end":42240,"line_start":1055,"line_end":1055,"column_start":8,"column_end":11},"name":"sub","qualname":"<bf16 as std::ops::Sub>::sub","value":"fn sub<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42220,"byte_end":42229,"line_start":1054,"line_end":1054,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42406,"byte_end":42409,"line_start":1064,"line_end":1064,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ bf16 as std::ops::Sub>::sub","value":"fn sub<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42389,"byte_end":42398,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42577,"byte_end":42580,"line_start":1073,"line_end":1073,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ bf16 as std::ops::Sub>::sub","value":"fn sub(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42560,"byte_end":42569,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42697,"byte_end":42707,"line_start":1080,"line_end":1080,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<bf16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3371},"children":[],"decl_id":{"krate":2,"index":3373},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42680,"byte_end":42689,"line_start":1079,"line_end":1079,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42829,"byte_end":42839,"line_start":1087,"line_end":1087,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<bf16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_, '_>(&'_ mut Self, &'_ bf16)","parent":{"krate":2,"index":3371},"children":[],"decl_id":{"krate":2,"index":3373},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42812,"byte_end":42821,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42960,"byte_end":42963,"line_start":1095,"line_end":1095,"column_start":8,"column_end":11},"name":"mul","qualname":"<bf16 as std::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43167,"byte_end":43170,"line_start":1104,"line_end":1104,"column_start":8,"column_end":11},"name":"mul","qualname":"<bf16 as std::ops::Mul>::mul","value":"fn mul<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43150,"byte_end":43159,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43336,"byte_end":43339,"line_start":1113,"line_end":1113,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ bf16 as std::ops::Mul>::mul","value":"fn mul<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43319,"byte_end":43328,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43507,"byte_end":43510,"line_start":1122,"line_end":1122,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ bf16 as std::ops::Mul>::mul","value":"fn mul(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43490,"byte_end":43499,"line_start":1121,"line_end":1121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43627,"byte_end":43637,"line_start":1129,"line_end":1129,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<bf16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3375},"children":[],"decl_id":{"krate":2,"index":3377},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43610,"byte_end":43619,"line_start":1128,"line_end":1128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43759,"byte_end":43769,"line_start":1136,"line_end":1136,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<bf16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign<'_, '_>(&'_ mut Self, &'_ bf16)","parent":{"krate":2,"index":3375},"children":[],"decl_id":{"krate":2,"index":3377},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43742,"byte_end":43751,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43890,"byte_end":43893,"line_start":1144,"line_end":1144,"column_start":8,"column_end":11},"name":"div","qualname":"<bf16 as std::ops::Div>::div","value":"fn div(Self, Self) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44097,"byte_end":44100,"line_start":1153,"line_end":1153,"column_start":8,"column_end":11},"name":"div","qualname":"<bf16 as std::ops::Div>::div","value":"fn div<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44080,"byte_end":44089,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44266,"byte_end":44269,"line_start":1162,"line_end":1162,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ bf16 as std::ops::Div>::div","value":"fn div<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44249,"byte_end":44258,"line_start":1161,"line_end":1161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44437,"byte_end":44440,"line_start":1171,"line_end":1171,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ bf16 as std::ops::Div>::div","value":"fn div(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44420,"byte_end":44429,"line_start":1170,"line_end":1170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44557,"byte_end":44567,"line_start":1178,"line_end":1178,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<bf16 as std::ops::DivAssign>::div_assign","value":"fn div_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3379},"children":[],"decl_id":{"krate":2,"index":3381},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44540,"byte_end":44549,"line_start":1177,"line_end":1177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44689,"byte_end":44699,"line_start":1185,"line_end":1185,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<bf16 as std::ops::DivAssign>::div_assign","value":"fn div_assign<'_, '_>(&'_ mut Self, &'_ bf16)","parent":{"krate":2,"index":3379},"children":[],"decl_id":{"krate":2,"index":3381},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44672,"byte_end":44681,"line_start":1184,"line_end":1184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44820,"byte_end":44823,"line_start":1193,"line_end":1193,"column_start":8,"column_end":11},"name":"rem","qualname":"<bf16 as std::ops::Rem>::rem","value":"fn rem(Self, Self) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45027,"byte_end":45030,"line_start":1202,"line_end":1202,"column_start":8,"column_end":11},"name":"rem","qualname":"<bf16 as std::ops::Rem>::rem","value":"fn rem<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45010,"byte_end":45019,"line_start":1201,"line_end":1201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45196,"byte_end":45199,"line_start":1211,"line_end":1211,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ bf16 as std::ops::Rem>::rem","value":"fn rem<'_>(Self, &'_ bf16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45179,"byte_end":45188,"line_start":1210,"line_end":1210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45367,"byte_end":45370,"line_start":1220,"line_end":1220,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ bf16 as std::ops::Rem>::rem","value":"fn rem(Self, bf16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45350,"byte_end":45359,"line_start":1219,"line_end":1219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45487,"byte_end":45497,"line_start":1227,"line_end":1227,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<bf16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3383},"children":[],"decl_id":{"krate":2,"index":3385},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45470,"byte_end":45479,"line_start":1226,"line_end":1226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45619,"byte_end":45629,"line_start":1234,"line_end":1234,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<bf16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign<'_, '_>(&'_ mut Self, &'_ bf16)","parent":{"krate":2,"index":3383},"children":[],"decl_id":{"krate":2,"index":3385},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45602,"byte_end":45611,"line_start":1233,"line_end":1233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45743,"byte_end":45750,"line_start":1241,"line_end":1241,"column_start":8,"column_end":15},"name":"product","qualname":"<bf16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8373},"children":[],"decl_id":{"krate":2,"index":8375},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45726,"byte_end":45735,"line_start":1240,"line_end":1240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45923,"byte_end":45930,"line_start":1248,"line_end":1248,"column_start":8,"column_end":15},"name":"product","qualname":"<bf16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = &'a bf16>","parent":{"krate":2,"index":8373},"children":[],"decl_id":{"krate":2,"index":8375},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45906,"byte_end":45915,"line_start":1247,"line_end":1247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46089,"byte_end":46092,"line_start":1255,"line_end":1255,"column_start":8,"column_end":11},"name":"sum","qualname":"<bf16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8369},"children":[],"decl_id":{"krate":2,"index":8371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46072,"byte_end":46081,"line_start":1254,"line_end":1254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46257,"byte_end":46260,"line_start":1262,"line_end":1262,"column_start":8,"column_end":11},"name":"sum","qualname":"<bf16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a bf16>","parent":{"krate":2,"index":8369},"children":[],"decl_id":{"krate":2,"index":8371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46240,"byte_end":46249,"line_start":1261,"line_end":1261,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74923,"byte_end":74926,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"f16","qualname":"::binary16::f16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`\n format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74032,"byte_end":74130,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ format.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74131,"byte_end":74142,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74143,"byte_end":74146,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This 16-bit floating point type is intended for efficient storage where the full range and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74147,"byte_end":74241,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ precision of a larger floating point value is not required. Because [`f16`] is primarily for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74242,"byte_end":74338,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ efficient storage, floating point operations such as addition, multiplication, etc. are not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74339,"byte_end":74434,"line_start":29,"line_end":29,"column_start":1,"column_end":96}},{"value":"/ implemented. Operations should be performed with [`f32`] or higher-precision types and converted","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74435,"byte_end":74535,"line_start":30,"line_end":30,"column_start":1,"column_end":101}},{"value":"/ to/from [`f16`] as necessary.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74536,"byte_end":74569,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74570,"byte_end":74573,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74574,"byte_end":74658,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74659,"byte_end":74689,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74722,"byte_end":74742,"line_start":36,"line_end":36,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75060,"byte_end":75069,"line_start":46,"line_end":46,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<f16>::from_bits","value":"const fn from_bits(u16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from the raw bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74949,"byte_end":75012,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75017,"byte_end":75026,"line_start":44,"line_end":44,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75031,"byte_end":75042,"line_start":45,"line_end":45,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75650,"byte_end":75658,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<f16>::from_f32","value":"fn from_f32(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75119,"byte_end":75199,"line_start":50,"line_end":50,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75204,"byte_end":75207,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75212,"byte_end":75300,"line_start":52,"line_end":52,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75305,"byte_end":75399,"line_start":53,"line_end":53,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75404,"byte_end":75498,"line_start":54,"line_end":54,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75503,"byte_end":75593,"line_start":55,"line_end":55,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75598,"byte_end":75608,"line_start":56,"line_end":56,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75613,"byte_end":75622,"line_start":57,"line_end":57,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75627,"byte_end":75638,"line_start":58,"line_end":58,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76509,"byte_end":76523,"line_start":76,"line_end":76,"column_start":18,"column_end":32},"name":"from_f32_const","qualname":"<f16>::from_f32_const","value":"const fn from_f32_const(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75731,"byte_end":75811,"line_start":63,"line_end":63,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75816,"byte_end":75819,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f32`][Self::from_f32] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75824,"byte_end":75916,"line_start":65,"line_end":65,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f32`][Self::from_f32] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":75921,"byte_end":76016,"line_start":66,"line_end":66,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76021,"byte_end":76052,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76057,"byte_end":76060,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76065,"byte_end":76153,"line_start":69,"line_end":69,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76158,"byte_end":76252,"line_start":70,"line_end":70,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76257,"byte_end":76351,"line_start":71,"line_end":71,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76356,"byte_end":76446,"line_start":72,"line_end":72,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76451,"byte_end":76461,"line_start":73,"line_end":73,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76466,"byte_end":76475,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76480,"byte_end":76491,"line_start":75,"line_end":75,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77136,"byte_end":77144,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<f16>::from_f64","value":"fn from_f64(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76605,"byte_end":76685,"line_start":80,"line_end":80,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76690,"byte_end":76693,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76698,"byte_end":76786,"line_start":82,"line_end":82,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76791,"byte_end":76885,"line_start":83,"line_end":83,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76890,"byte_end":76984,"line_start":84,"line_end":84,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":76989,"byte_end":77079,"line_start":85,"line_end":85,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77084,"byte_end":77094,"line_start":86,"line_end":86,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77099,"byte_end":77108,"line_start":87,"line_end":87,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77113,"byte_end":77124,"line_start":88,"line_end":88,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77995,"byte_end":78009,"line_start":106,"line_end":106,"column_start":18,"column_end":32},"name":"from_f64_const","qualname":"<f16>::from_f64_const","value":"const fn from_f64_const(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77217,"byte_end":77297,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77302,"byte_end":77305,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`from_f64`][Self::from_f64] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77310,"byte_end":77402,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/ intrinsics, which allows it to be `const`. [`from_f64`][Self::from_f64] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77407,"byte_end":77502,"line_start":96,"line_end":96,"column_start":5,"column_end":100}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77507,"byte_end":77538,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77543,"byte_end":77546,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77551,"byte_end":77639,"line_start":99,"line_end":99,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77644,"byte_end":77738,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77743,"byte_end":77837,"line_start":101,"line_end":101,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77842,"byte_end":77932,"line_start":102,"line_end":102,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77937,"byte_end":77947,"line_start":103,"line_end":103,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77952,"byte_end":77961,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":77966,"byte_end":77977,"line_start":105,"line_end":105,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78201,"byte_end":78208,"line_start":113,"line_end":113,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<f16>::to_bits","value":"const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`] into the underlying bit representation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78091,"byte_end":78153,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78158,"byte_end":78167,"line_start":111,"line_end":111,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78172,"byte_end":78183,"line_start":112,"line_end":112,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78616,"byte_end":78627,"line_start":129,"line_end":129,"column_start":18,"column_end":29},"name":"to_le_bytes","qualname":"<f16>::to_le_bytes","value":"const fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78250,"byte_end":78343,"line_start":117,"line_end":117,"column_start":5,"column_end":98}},{"value":"/ little-endian byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78348,"byte_end":78377,"line_start":118,"line_end":118,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78382,"byte_end":78385,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78390,"byte_end":78404,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78409,"byte_end":78412,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78417,"byte_end":78428,"line_start":122,"line_end":122,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78433,"byte_end":78460,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_le_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78465,"byte_end":78515,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x40, 0x4A]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78520,"byte_end":78556,"line_start":125,"line_end":125,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78561,"byte_end":78568,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78573,"byte_end":78582,"line_start":127,"line_end":127,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78587,"byte_end":78598,"line_start":128,"line_end":128,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79060,"byte_end":79071,"line_start":145,"line_end":145,"column_start":18,"column_end":29},"name":"to_be_bytes","qualname":"<f16>::to_be_bytes","value":"const fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78687,"byte_end":78780,"line_start":133,"line_end":133,"column_start":5,"column_end":98}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78785,"byte_end":78821,"line_start":134,"line_end":134,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78826,"byte_end":78829,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78834,"byte_end":78848,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78853,"byte_end":78856,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78861,"byte_end":78872,"line_start":138,"line_end":138,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78877,"byte_end":78904,"line_start":139,"line_end":139,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_be_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78909,"byte_end":78959,"line_start":140,"line_end":140,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x4A, 0x40]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":78964,"byte_end":79000,"line_start":141,"line_end":141,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79005,"byte_end":79012,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79017,"byte_end":79026,"line_start":143,"line_end":143,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79031,"byte_end":79042,"line_start":144,"line_end":144,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79795,"byte_end":79806,"line_start":169,"line_end":169,"column_start":18,"column_end":29},"name":"to_ne_bytes","qualname":"<f16>::to_ne_bytes","value":"const fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Returns the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79131,"byte_end":79224,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ native byte order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79229,"byte_end":79251,"line_start":150,"line_end":150,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79256,"byte_end":79259,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79264,"byte_end":79344,"line_start":152,"line_end":152,"column_start":5,"column_end":85}},{"value":"/ [`to_be_bytes`][Self::to_be_bytes] or [`to_le_bytes`][Self::to_le_bytes], as appropriate,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79349,"byte_end":79442,"line_start":153,"line_end":153,"column_start":5,"column_end":98}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79447,"byte_end":79459,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79464,"byte_end":79467,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79472,"byte_end":79486,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79491,"byte_end":79494,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79499,"byte_end":79510,"line_start":158,"line_end":158,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79515,"byte_end":79542,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79547,"byte_end":79597,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79602,"byte_end":79656,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79661,"byte_end":79681,"line_start":162,"line_end":162,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79686,"byte_end":79698,"line_start":163,"line_end":163,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79703,"byte_end":79723,"line_start":164,"line_end":164,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79728,"byte_end":79735,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79740,"byte_end":79747,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79752,"byte_end":79761,"line_start":167,"line_end":167,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79766,"byte_end":79777,"line_start":168,"line_end":168,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80203,"byte_end":80216,"line_start":184,"line_end":184,"column_start":18,"column_end":31},"name":"from_le_bytes","qualname":"<f16>::from_le_bytes","value":"const fn from_le_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in little endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79866,"byte_end":79958,"line_start":173,"line_end":173,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79963,"byte_end":79966,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79971,"byte_end":79985,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79990,"byte_end":79993,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":79998,"byte_end":80009,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80014,"byte_end":80041,"line_start":178,"line_end":178,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_le_bytes([0x40, 0x4A]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80046,"byte_end":80095,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80100,"byte_end":80143,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80148,"byte_end":80155,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80160,"byte_end":80169,"line_start":182,"line_end":182,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80174,"byte_end":80185,"line_start":183,"line_end":183,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80637,"byte_end":80650,"line_start":199,"line_end":199,"column_start":18,"column_end":31},"name":"from_be_bytes","qualname":"<f16>::from_be_bytes","value":"const fn from_be_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in big endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80303,"byte_end":80392,"line_start":188,"line_end":188,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80397,"byte_end":80400,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80405,"byte_end":80419,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80424,"byte_end":80427,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80432,"byte_end":80443,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80448,"byte_end":80475,"line_start":193,"line_end":193,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_be_bytes([0x4A, 0x40]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80480,"byte_end":80529,"line_start":194,"line_end":194,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80534,"byte_end":80577,"line_start":195,"line_end":195,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80582,"byte_end":80589,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80594,"byte_end":80603,"line_start":197,"line_end":197,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80608,"byte_end":80619,"line_start":198,"line_end":198,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81395,"byte_end":81408,"line_start":222,"line_end":222,"column_start":18,"column_end":31},"name":"from_ne_bytes","qualname":"<f16>::from_ne_bytes","value":"const fn from_ne_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Creates a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Creates a floating point value from its representation as a byte array in native endian.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80737,"byte_end":80829,"line_start":203,"line_end":203,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80834,"byte_end":80837,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80842,"byte_end":80931,"line_start":205,"line_end":205,"column_start":5,"column_end":94}},{"value":"/ [`from_be_bytes`][Self::from_be_bytes] or [`from_le_bytes`][Self::from_le_bytes], as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":80936,"byte_end":81024,"line_start":206,"line_end":206,"column_start":5,"column_end":93}},{"value":"/ appropriate instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81029,"byte_end":81053,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81058,"byte_end":81061,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81066,"byte_end":81080,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81085,"byte_end":81088,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81093,"byte_end":81104,"line_start":211,"line_end":211,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81109,"byte_end":81136,"line_start":212,"line_end":212,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81141,"byte_end":81208,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81213,"byte_end":81233,"line_start":214,"line_end":214,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81238,"byte_end":81250,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81255,"byte_end":81275,"line_start":216,"line_end":216,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81280,"byte_end":81287,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81292,"byte_end":81335,"line_start":218,"line_end":218,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81340,"byte_end":81347,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81352,"byte_end":81361,"line_start":220,"line_end":220,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81366,"byte_end":81377,"line_start":221,"line_end":221,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81726,"byte_end":81732,"line_start":232,"line_end":232,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<f16>::to_f32","value":"fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f32` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81495,"byte_end":81543,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81548,"byte_end":81551,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81556,"byte_end":81650,"line_start":228,"line_end":228,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81655,"byte_end":81684,"line_start":229,"line_end":229,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81689,"byte_end":81698,"line_start":230,"line_end":230,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81703,"byte_end":81714,"line_start":231,"line_end":231,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82265,"byte_end":82277,"line_start":246,"line_end":246,"column_start":18,"column_end":30},"name":"to_f32_const","qualname":"<f16>::to_f32_const","value":"const fn to_f32_const(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f32` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81795,"byte_end":81843,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81848,"byte_end":81851,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f32`][Self::to_f32] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81856,"byte_end":81944,"line_start":238,"line_end":238,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f32`][Self::to_f32] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":81949,"byte_end":82040,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82045,"byte_end":82076,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82081,"byte_end":82084,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82089,"byte_end":82183,"line_start":242,"line_end":242,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82188,"byte_end":82217,"line_start":243,"line_end":243,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82222,"byte_end":82231,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82236,"byte_end":82247,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82580,"byte_end":82586,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<f16>::to_f64","value":"fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f64` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82349,"byte_end":82397,"line_start":250,"line_end":250,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82402,"byte_end":82405,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82410,"byte_end":82504,"line_start":252,"line_end":252,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82509,"byte_end":82538,"line_start":253,"line_end":253,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82543,"byte_end":82552,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82557,"byte_end":82568,"line_start":255,"line_end":255,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83119,"byte_end":83131,"line_start":270,"line_end":270,"column_start":18,"column_end":30},"name":"to_f64_const","qualname":"<f16>::to_f64_const","value":"const fn to_f64_const(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`] value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`] value into a `f64` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82649,"byte_end":82697,"line_start":260,"line_end":260,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82702,"byte_end":82705,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This function is identical to [`to_f64`][Self::to_f64] except it never uses hardware","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82710,"byte_end":82798,"line_start":262,"line_end":262,"column_start":5,"column_end":93}},{"value":"/ intrinsics, which allows it to be `const`. [`to_f64`][Self::to_f64] should be preferred","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82803,"byte_end":82894,"line_start":263,"line_end":263,"column_start":5,"column_end":96}},{"value":"/ in any non-`const` context.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82899,"byte_end":82930,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82935,"byte_end":82938,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":82943,"byte_end":83037,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83042,"byte_end":83071,"line_start":267,"line_end":267,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83076,"byte_end":83085,"line_start":268,"line_end":268,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83090,"byte_end":83101,"line_start":269,"line_end":269,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83555,"byte_end":83561,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<f16>::is_nan","value":"const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN` and `false` otherwise.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83203,"byte_end":83267,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83272,"byte_end":83275,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83280,"byte_end":83294,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83299,"byte_end":83302,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83307,"byte_end":83318,"line_start":278,"line_end":278,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83323,"byte_end":83350,"line_start":279,"line_end":279,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83355,"byte_end":83358,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83363,"byte_end":83386,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83391,"byte_end":83426,"line_start":282,"line_end":282,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83431,"byte_end":83434,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83439,"byte_end":83465,"line_start":284,"line_end":284,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83470,"byte_end":83495,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83500,"byte_end":83507,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83512,"byte_end":83521,"line_start":287,"line_end":287,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83526,"byte_end":83537,"line_start":288,"line_end":288,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84157,"byte_end":84168,"line_start":314,"line_end":314,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<f16>::is_infinite","value":"const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false`.\n otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83628,"byte_end":83682,"line_start":293,"line_end":293,"column_start":5,"column_end":56}},{"value":"/ otherwise.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83687,"byte_end":83701,"line_start":294,"line_end":294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83706,"byte_end":83709,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83714,"byte_end":83728,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83733,"byte_end":83736,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83741,"byte_end":83752,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83757,"byte_end":83784,"line_start":299,"line_end":299,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83789,"byte_end":83792,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83797,"byte_end":83831,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83836,"byte_end":83864,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83869,"byte_end":83905,"line_start":303,"line_end":303,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83910,"byte_end":83933,"line_start":304,"line_end":304,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83938,"byte_end":83941,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83946,"byte_end":83976,"line_start":306,"line_end":306,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":83981,"byte_end":84013,"line_start":307,"line_end":307,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84018,"byte_end":84021,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84026,"byte_end":84057,"line_start":309,"line_end":309,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84062,"byte_end":84097,"line_start":310,"line_end":310,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84102,"byte_end":84109,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84114,"byte_end":84123,"line_start":312,"line_end":312,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84128,"byte_end":84139,"line_start":313,"line_end":313,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84749,"byte_end":84758,"line_start":338,"line_end":338,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<f16>::is_finite","value":"const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84236,"byte_end":84300,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84305,"byte_end":84308,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84313,"byte_end":84327,"line_start":320,"line_end":320,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84332,"byte_end":84335,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84340,"byte_end":84351,"line_start":322,"line_end":322,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84356,"byte_end":84383,"line_start":323,"line_end":323,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84388,"byte_end":84391,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84396,"byte_end":84430,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84435,"byte_end":84463,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84468,"byte_end":84504,"line_start":327,"line_end":327,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84509,"byte_end":84532,"line_start":328,"line_end":328,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84537,"byte_end":84540,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84545,"byte_end":84572,"line_start":330,"line_end":330,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84577,"byte_end":84580,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84585,"byte_end":84615,"line_start":332,"line_end":332,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84620,"byte_end":84650,"line_start":333,"line_end":333,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84655,"byte_end":84689,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84694,"byte_end":84701,"line_start":335,"line_end":335,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84706,"byte_end":84715,"line_start":336,"line_end":336,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84720,"byte_end":84731,"line_start":337,"line_end":337,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85528,"byte_end":85537,"line_start":365,"line_end":365,"column_start":18,"column_end":27},"name":"is_normal","qualname":"<f16>::is_normal","value":"const fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84826,"byte_end":84906,"line_start":342,"line_end":342,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84911,"byte_end":84914,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84919,"byte_end":84933,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84938,"byte_end":84941,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84946,"byte_end":84957,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84962,"byte_end":84989,"line_start":347,"line_end":347,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":84994,"byte_end":84997,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let min = f16::MIN_POSITIVE;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85002,"byte_end":85034,"line_start":349,"line_end":349,"column_start":5,"column_end":37}},{"value":"/ let max = f16::MAX;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85039,"byte_end":85062,"line_start":350,"line_end":350,"column_start":5,"column_end":28}},{"value":"/ let lower_than_min = f16::from_f32(1.0e-10_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85067,"byte_end":85119,"line_start":351,"line_end":351,"column_start":5,"column_end":57}},{"value":"/ let zero = f16::from_f32(0.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85124,"byte_end":85162,"line_start":352,"line_end":352,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85167,"byte_end":85170,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85175,"byte_end":85204,"line_start":354,"line_end":354,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85209,"byte_end":85238,"line_start":355,"line_end":355,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85243,"byte_end":85246,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85251,"byte_end":85282,"line_start":357,"line_end":357,"column_start":5,"column_end":36}},{"value":"/ assert!(!f16::NAN.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85287,"byte_end":85322,"line_start":358,"line_end":358,"column_start":5,"column_end":40}},{"value":"/ assert!(!f16::INFINITY.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85327,"byte_end":85367,"line_start":359,"line_end":359,"column_start":5,"column_end":45}},{"value":"/ // Values between `0` and `min` are Subnormal.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85372,"byte_end":85422,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85427,"byte_end":85468,"line_start":361,"line_end":361,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85473,"byte_end":85480,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85485,"byte_end":85494,"line_start":363,"line_end":363,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85499,"byte_end":85510,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86193,"byte_end":86201,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"name":"classify","qualname":"<f16>::classify","value":"const fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85640,"byte_end":85694,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85699,"byte_end":85702,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85707,"byte_end":85797,"line_start":372,"line_end":372,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85802,"byte_end":85824,"line_start":373,"line_end":373,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85829,"byte_end":85832,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85837,"byte_end":85851,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85856,"byte_end":85859,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85864,"byte_end":85875,"line_start":377,"line_end":377,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85880,"byte_end":85909,"line_start":378,"line_end":378,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85914,"byte_end":85941,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85946,"byte_end":85949,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let num = f16::from_f32(12.4_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85954,"byte_end":85992,"line_start":381,"line_end":381,"column_start":5,"column_end":43}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":85997,"byte_end":86025,"line_start":382,"line_end":382,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86030,"byte_end":86033,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86038,"byte_end":86089,"line_start":384,"line_end":384,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86094,"byte_end":86147,"line_start":385,"line_end":385,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86152,"byte_end":86159,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86164,"byte_end":86175,"line_start":387,"line_end":387,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87214,"byte_end":87220,"line_start":419,"line_end":419,"column_start":18,"column_end":24},"name":"signum","qualname":"<f16>::signum","value":"const fn signum(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86569,"byte_end":86625,"line_start":400,"line_end":400,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86630,"byte_end":86633,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or [`INFINITY`][f16::INFINITY]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86638,"byte_end":86714,"line_start":402,"line_end":402,"column_start":5,"column_end":81}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or [`NEG_INFINITY`][f16::NEG_INFINITY]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86719,"byte_end":86804,"line_start":403,"line_end":403,"column_start":5,"column_end":90}},{"value":"/ * [`NAN`][f16::NAN] if the number is `NaN`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86809,"byte_end":86855,"line_start":404,"line_end":404,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86860,"byte_end":86863,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86868,"byte_end":86882,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86887,"byte_end":86890,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86895,"byte_end":86906,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86911,"byte_end":86938,"line_start":409,"line_end":409,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86943,"byte_end":86946,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(3.5_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86951,"byte_end":86986,"line_start":411,"line_end":411,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86991,"byte_end":86994,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), f16::from_f32(1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":86999,"byte_end":87046,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(f16::NEG_INFINITY.signum(), f16::from_f32(-1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87051,"byte_end":87115,"line_start":414,"line_end":414,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87120,"byte_end":87123,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.signum().is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87128,"byte_end":87168,"line_start":416,"line_end":416,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87173,"byte_end":87180,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87185,"byte_end":87196,"line_start":418,"line_end":418,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88005,"byte_end":88021,"line_start":448,"line_end":448,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<f16>::is_sign_positive","value":"const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87410,"byte_end":87503,"line_start":429,"line_end":429,"column_start":5,"column_end":98}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87508,"byte_end":87539,"line_start":430,"line_end":430,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87544,"byte_end":87547,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87552,"byte_end":87566,"line_start":432,"line_end":432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87571,"byte_end":87574,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87579,"byte_end":87590,"line_start":434,"line_end":434,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87595,"byte_end":87622,"line_start":435,"line_end":435,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87627,"byte_end":87630,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87635,"byte_end":87658,"line_start":437,"line_end":437,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87663,"byte_end":87698,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ let g = f16::from_f32(-7.0_f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87703,"byte_end":87739,"line_start":439,"line_end":439,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87744,"byte_end":87747,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87752,"byte_end":87786,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87791,"byte_end":87826,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87831,"byte_end":87878,"line_start":443,"line_end":443,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87883,"byte_end":87945,"line_start":444,"line_end":444,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87950,"byte_end":87957,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87962,"byte_end":87971,"line_start":446,"line_end":446,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":87976,"byte_end":87987,"line_start":447,"line_end":447,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88676,"byte_end":88692,"line_start":471,"line_end":471,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<f16>::is_sign_negative","value":"const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88081,"byte_end":88174,"line_start":452,"line_end":452,"column_start":5,"column_end":98}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88179,"byte_end":88212,"line_start":453,"line_end":453,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88217,"byte_end":88220,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88225,"byte_end":88239,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88244,"byte_end":88247,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88252,"byte_end":88263,"line_start":457,"line_end":457,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88268,"byte_end":88295,"line_start":458,"line_end":458,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88300,"byte_end":88303,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88308,"byte_end":88331,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88336,"byte_end":88370,"line_start":461,"line_end":461,"column_start":5,"column_end":39}},{"value":"/ let g = f16::from_f32(-7.0f32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88375,"byte_end":88410,"line_start":462,"line_end":462,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88415,"byte_end":88418,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88423,"byte_end":88458,"line_start":464,"line_end":464,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88463,"byte_end":88497,"line_start":465,"line_end":465,"column_start":5,"column_end":39}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88502,"byte_end":88549,"line_start":466,"line_end":466,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88554,"byte_end":88616,"line_start":467,"line_end":467,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88621,"byte_end":88628,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88633,"byte_end":88642,"line_start":469,"line_end":469,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88647,"byte_end":88658,"line_start":470,"line_end":470,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89569,"byte_end":89577,"line_start":495,"line_end":495,"column_start":18,"column_end":26},"name":"copysign","qualname":"<f16>::copysign","value":"const fn copysign(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number composed of the magnitude of `self` and the sign of `sign`.","sig":null,"attributes":[{"value":"/ Returns a number composed of the magnitude of `self` and the sign of `sign`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88752,"byte_end":88832,"line_start":475,"line_end":475,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88837,"byte_end":88840,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Equal to `self` if the sign of `self` and `sign` are the same, otherwise equal to `-self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88845,"byte_end":88939,"line_start":477,"line_end":477,"column_start":5,"column_end":99}},{"value":"/ If `self` is NaN, then NaN with the sign of `sign` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":88944,"byte_end":89011,"line_start":478,"line_end":478,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89016,"byte_end":89019,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89024,"byte_end":89038,"line_start":480,"line_end":480,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89043,"byte_end":89046,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89051,"byte_end":89058,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89063,"byte_end":89090,"line_start":483,"line_end":483,"column_start":5,"column_end":32}},{"value":"/ let f = f16::from_f32(3.5);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89095,"byte_end":89126,"line_start":484,"line_end":484,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89131,"byte_end":89134,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89139,"byte_end":89207,"line_start":486,"line_end":486,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(f.copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89212,"byte_end":89282,"line_start":487,"line_end":487,"column_start":5,"column_end":75}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(0.42)), f16::from_f32(3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89287,"byte_end":89358,"line_start":488,"line_end":488,"column_start":5,"column_end":76}},{"value":"/ assert_eq!((-f).copysign(f16::from_f32(-0.42)), f16::from_f32(-3.5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89363,"byte_end":89436,"line_start":489,"line_end":489,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89441,"byte_end":89444,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.copysign(f16::from_f32(1.0)).is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89449,"byte_end":89509,"line_start":491,"line_end":491,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89514,"byte_end":89521,"line_start":492,"line_end":492,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89526,"byte_end":89535,"line_start":493,"line_end":493,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89540,"byte_end":89551,"line_start":494,"line_end":494,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90046,"byte_end":90049,"line_start":514,"line_end":514,"column_start":12,"column_end":15},"name":"max","qualname":"<f16>::max","value":"fn max(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89672,"byte_end":89715,"line_start":499,"line_end":499,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89720,"byte_end":89723,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89728,"byte_end":89800,"line_start":501,"line_end":501,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89805,"byte_end":89808,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89813,"byte_end":89827,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89832,"byte_end":89835,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89840,"byte_end":89847,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89852,"byte_end":89879,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89884,"byte_end":89915,"line_start":507,"line_end":507,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89920,"byte_end":89951,"line_start":508,"line_end":508,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89956,"byte_end":89959,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.max(y), y);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89964,"byte_end":89992,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":89997,"byte_end":90004,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90009,"byte_end":90018,"line_start":512,"line_end":512,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90023,"byte_end":90034,"line_start":513,"line_end":513,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90569,"byte_end":90572,"line_start":537,"line_end":537,"column_start":12,"column_end":15},"name":"min","qualname":"<f16>::min","value":"fn min(Self, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90195,"byte_end":90238,"line_start":522,"line_end":522,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90243,"byte_end":90246,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90251,"byte_end":90323,"line_start":524,"line_end":524,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90328,"byte_end":90331,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90336,"byte_end":90350,"line_start":526,"line_end":526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90355,"byte_end":90358,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90363,"byte_end":90370,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90375,"byte_end":90402,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/ let x = f16::from_f32(1.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90407,"byte_end":90438,"line_start":530,"line_end":530,"column_start":5,"column_end":36}},{"value":"/ let y = f16::from_f32(2.0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90443,"byte_end":90474,"line_start":531,"line_end":531,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90479,"byte_end":90482,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x.min(y), x);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90487,"byte_end":90515,"line_start":533,"line_end":533,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90520,"byte_end":90527,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90532,"byte_end":90541,"line_start":535,"line_end":535,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90546,"byte_end":90557,"line_start":536,"line_end":536,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91633,"byte_end":91638,"line_start":566,"line_end":566,"column_start":12,"column_end":17},"name":"clamp","qualname":"<f16>::clamp","value":"fn clamp(Self, f16, f16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Restrict a value to a certain interval unless it is NaN.","sig":null,"attributes":[{"value":"/ Restrict a value to a certain interval unless it is NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90718,"byte_end":90778,"line_start":545,"line_end":545,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90783,"byte_end":90786,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90791,"byte_end":90881,"line_start":547,"line_end":547,"column_start":5,"column_end":95}},{"value":"/ Otherwise this returns `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90886,"byte_end":90920,"line_start":548,"line_end":548,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90925,"byte_end":90928,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Note that this function returns NaN if the initial value was NaN as well.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":90933,"byte_end":91010,"line_start":550,"line_end":550,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91015,"byte_end":91018,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91023,"byte_end":91035,"line_start":552,"line_end":552,"column_start":5,"column_end":17}},{"value":"/ Panics if `min > max`, `min` is NaN, or `max` is NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91040,"byte_end":91097,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91102,"byte_end":91105,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91110,"byte_end":91124,"line_start":555,"line_end":555,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91129,"byte_end":91132,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91137,"byte_end":91144,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91149,"byte_end":91176,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/ assert!(f16::from_f32(-3.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(-2.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91181,"byte_end":91284,"line_start":559,"line_end":559,"column_start":5,"column_end":108}},{"value":"/ assert!(f16::from_f32(0.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(0.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91289,"byte_end":91390,"line_start":560,"line_end":560,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::from_f32(2.0).clamp(f16::from_f32(-2.0), f16::from_f32(1.0)) == f16::from_f32(1.0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91395,"byte_end":91496,"line_start":561,"line_end":561,"column_start":5,"column_end":106}},{"value":"/ assert!(f16::NAN.clamp(f16::from_f32(-2.0), f16::from_f32(1.0)).is_nan());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91501,"byte_end":91579,"line_start":562,"line_end":562,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91584,"byte_end":91591,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91596,"byte_end":91605,"line_start":564,"line_end":564,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91610,"byte_end":91621,"line_start":565,"line_end":565,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94258,"byte_end":94267,"line_start":646,"line_end":646,"column_start":12,"column_end":21},"name":"total_cmp","qualname":"<f16>::total_cmp","value":"fn total_cmp<'_, '_>(&'_ Self, &'_ Self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Returns the ordering between `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns the ordering between `self` and `other`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91854,"byte_end":91906,"line_start":578,"line_end":578,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91911,"byte_end":91914,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Unlike the standard partial comparison between floating point numbers,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91919,"byte_end":91993,"line_start":580,"line_end":580,"column_start":5,"column_end":79}},{"value":"/ this comparison always produces an ordering in accordance to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":91998,"byte_end":92062,"line_start":581,"line_end":581,"column_start":5,"column_end":69}},{"value":"/ the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92067,"byte_end":92140,"line_start":582,"line_end":582,"column_start":5,"column_end":78}},{"value":"/ floating point standard. The values are ordered in the following sequence:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92145,"byte_end":92223,"line_start":583,"line_end":583,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92228,"byte_end":92231,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ - negative quiet NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92236,"byte_end":92260,"line_start":585,"line_end":585,"column_start":5,"column_end":29}},{"value":"/ - negative signaling NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92265,"byte_end":92293,"line_start":586,"line_end":586,"column_start":5,"column_end":33}},{"value":"/ - negative infinity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92298,"byte_end":92321,"line_start":587,"line_end":587,"column_start":5,"column_end":28}},{"value":"/ - negative numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92326,"byte_end":92348,"line_start":588,"line_end":588,"column_start":5,"column_end":27}},{"value":"/ - negative subnormal numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92353,"byte_end":92385,"line_start":589,"line_end":589,"column_start":5,"column_end":37}},{"value":"/ - negative zero","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92390,"byte_end":92409,"line_start":590,"line_end":590,"column_start":5,"column_end":24}},{"value":"/ - positive zero","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92414,"byte_end":92433,"line_start":591,"line_end":591,"column_start":5,"column_end":24}},{"value":"/ - positive subnormal numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92438,"byte_end":92470,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ - positive numbers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92475,"byte_end":92497,"line_start":593,"line_end":593,"column_start":5,"column_end":27}},{"value":"/ - positive infinity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92502,"byte_end":92525,"line_start":594,"line_end":594,"column_start":5,"column_end":28}},{"value":"/ - positive signaling NaN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92530,"byte_end":92558,"line_start":595,"line_end":595,"column_start":5,"column_end":33}},{"value":"/ - positive quiet NaN.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92563,"byte_end":92588,"line_start":596,"line_end":596,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92593,"byte_end":92596,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ The ordering established by this function does not always agree with the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92601,"byte_end":92677,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/ [`PartialOrd`] and [`PartialEq`] implementations of `f16`. For example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92682,"byte_end":92757,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/ they consider negative and positive zero equal, while `total_cmp`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92762,"byte_end":92831,"line_start":600,"line_end":600,"column_start":5,"column_end":74}},{"value":"/ doesn't.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92836,"byte_end":92848,"line_start":601,"line_end":601,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92853,"byte_end":92856,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ The interpretation of the signaling NaN bit follows the definition in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92861,"byte_end":92934,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/ the IEEE 754 standard, which may not match the interpretation by some of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":92939,"byte_end":93015,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/ the older, non-conformant (e.g. MIPS) hardware implementations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93020,"byte_end":93087,"line_start":605,"line_end":605,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93092,"byte_end":93095,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93100,"byte_end":93114,"line_start":607,"line_end":607,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93119,"byte_end":93126,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/ # use half::f16;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93131,"byte_end":93151,"line_start":609,"line_end":609,"column_start":5,"column_end":25}},{"value":"/ let mut v: Vec<f16> = vec![];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93156,"byte_end":93189,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ v.push(f16::ONE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93194,"byte_end":93215,"line_start":611,"line_end":611,"column_start":5,"column_end":26}},{"value":"/ v.push(f16::INFINITY);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93220,"byte_end":93246,"line_start":612,"line_end":612,"column_start":5,"column_end":31}},{"value":"/ v.push(f16::NEG_INFINITY);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93251,"byte_end":93281,"line_start":613,"line_end":613,"column_start":5,"column_end":35}},{"value":"/ v.push(f16::NAN);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93286,"byte_end":93307,"line_start":614,"line_end":614,"column_start":5,"column_end":26}},{"value":"/ v.push(f16::MAX_SUBNORMAL);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93312,"byte_end":93343,"line_start":615,"line_end":615,"column_start":5,"column_end":36}},{"value":"/ v.push(-f16::MAX_SUBNORMAL);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93348,"byte_end":93380,"line_start":616,"line_end":616,"column_start":5,"column_end":37}},{"value":"/ v.push(f16::ZERO);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93385,"byte_end":93407,"line_start":617,"line_end":617,"column_start":5,"column_end":27}},{"value":"/ v.push(f16::NEG_ZERO);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93412,"byte_end":93438,"line_start":618,"line_end":618,"column_start":5,"column_end":31}},{"value":"/ v.push(f16::NEG_ONE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93443,"byte_end":93468,"line_start":619,"line_end":619,"column_start":5,"column_end":30}},{"value":"/ v.push(f16::MIN_POSITIVE);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93473,"byte_end":93503,"line_start":620,"line_end":620,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93508,"byte_end":93511,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ v.sort_by(|a, b| a.total_cmp(&b));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93516,"byte_end":93554,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93559,"byte_end":93562,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ assert!(v","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93567,"byte_end":93580,"line_start":624,"line_end":624,"column_start":5,"column_end":18}},{"value":"/     .into_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93585,"byte_end":93605,"line_start":625,"line_end":625,"column_start":5,"column_end":25}},{"value":"/     .zip(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93610,"byte_end":93623,"line_start":626,"line_end":626,"column_start":5,"column_end":18}},{"value":"/         [","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93628,"byte_end":93641,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/             f16::NEG_INFINITY,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93646,"byte_end":93680,"line_start":628,"line_end":628,"column_start":5,"column_end":39}},{"value":"/             f16::NEG_ONE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93685,"byte_end":93714,"line_start":629,"line_end":629,"column_start":5,"column_end":34}},{"value":"/             -f16::MAX_SUBNORMAL,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93719,"byte_end":93755,"line_start":630,"line_end":630,"column_start":5,"column_end":41}},{"value":"/             f16::NEG_ZERO,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93760,"byte_end":93790,"line_start":631,"line_end":631,"column_start":5,"column_end":35}},{"value":"/             f16::ZERO,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93795,"byte_end":93821,"line_start":632,"line_end":632,"column_start":5,"column_end":31}},{"value":"/             f16::MAX_SUBNORMAL,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93826,"byte_end":93861,"line_start":633,"line_end":633,"column_start":5,"column_end":40}},{"value":"/             f16::MIN_POSITIVE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93866,"byte_end":93900,"line_start":634,"line_end":634,"column_start":5,"column_end":39}},{"value":"/             f16::ONE,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93905,"byte_end":93930,"line_start":635,"line_end":635,"column_start":5,"column_end":30}},{"value":"/             f16::INFINITY,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93935,"byte_end":93965,"line_start":636,"line_end":636,"column_start":5,"column_end":35}},{"value":"/             f16::NAN","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93970,"byte_end":93994,"line_start":637,"line_end":637,"column_start":5,"column_end":29}},{"value":"/         ]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":93999,"byte_end":94012,"line_start":638,"line_end":638,"column_start":5,"column_end":18}},{"value":"/         .iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94017,"byte_end":94036,"line_start":639,"line_end":639,"column_start":5,"column_end":24}},{"value":"/     )","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94041,"byte_end":94050,"line_start":640,"line_end":640,"column_start":5,"column_end":14}},{"value":"/     .all(|(a, b)| a.to_bits() == b.to_bits()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94055,"byte_end":94106,"line_start":641,"line_end":641,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94111,"byte_end":94118,"line_start":642,"line_end":642,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94221,"byte_end":94230,"line_start":644,"line_end":644,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":94235,"byte_end":94246,"line_start":645,"line_end":645,"column_start":5,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96645,"byte_end":96651,"line_start":710,"line_end":710,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::f16::DIGITS","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Approximate number of [`f16`] significant digits in base 10\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`] significant digits in base 10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96567,"byte_end":96630,"line_start":709,"line_end":709,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96865,"byte_end":96872,"line_start":715,"line_end":715,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::f16::EPSILON","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`]\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","sig":null,"attributes":[{"value":"/ [`f16`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96666,"byte_end":96677,"line_start":711,"line_end":711,"column_start":5,"column_end":16}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96682,"byte_end":96756,"line_start":712,"line_end":712,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96761,"byte_end":96764,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96769,"byte_end":96850,"line_start":714,"line_end":714,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96951,"byte_end":96959,"line_start":717,"line_end":717,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::f16::INFINITY","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] positive Infinity (+∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] positive Infinity (+∞)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96900,"byte_end":96936,"line_start":716,"line_end":716,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97052,"byte_end":97067,"line_start":719,"line_end":719,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::f16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Number of [`f16`] significant digits in base 2\n","sig":null,"attributes":[{"value":"/ Number of [`f16`] significant digits in base 2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":96987,"byte_end":97037,"line_start":718,"line_end":718,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97130,"byte_end":97133,"line_start":721,"line_end":721,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::f16::MAX","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Largest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97083,"byte_end":97115,"line_start":720,"line_end":720,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97222,"byte_end":97232,"line_start":723,"line_end":723,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::f16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 10 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97158,"byte_end":97207,"line_start":722,"line_end":722,"column_start":5,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97310,"byte_end":97317,"line_start":725,"line_end":725,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::f16::MAX_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`] power of 2 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97247,"byte_end":97295,"line_start":724,"line_end":724,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97381,"byte_end":97384,"line_start":727,"line_end":727,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::f16::MIN","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Smallest finite [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97333,"byte_end":97366,"line_start":726,"line_end":726,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97480,"byte_end":97490,"line_start":729,"line_end":729,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::f16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`] power of 10 exponent\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`] power of 10 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97409,"byte_end":97465,"line_start":728,"line_end":728,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97597,"byte_end":97604,"line_start":731,"line_end":731,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::f16::MIN_EXP","value":"i32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`] power of 2 exponent\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`] power of 2 exponent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97506,"byte_end":97582,"line_start":730,"line_end":730,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97678,"byte_end":97690,"line_start":733,"line_end":733,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::f16::MIN_POSITIVE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97621,"byte_end":97663,"line_start":732,"line_end":732,"column_start":5,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97763,"byte_end":97766,"line_start":735,"line_end":735,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::f16::NAN","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Not a Number (NaN)\n","sig":null,"attributes":[{"value":"/ [`f16`] Not a Number (NaN)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97718,"byte_end":97748,"line_start":734,"line_end":734,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97845,"byte_end":97857,"line_start":737,"line_end":737,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::f16::NEG_INFINITY","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] negative infinity (-∞)\n","sig":null,"attributes":[{"value":"/ [`f16`] negative infinity (-∞)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97794,"byte_end":97830,"line_start":736,"line_end":736,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97963,"byte_end":97968,"line_start":739,"line_end":739,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::f16::RADIX","value":"u32","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`]\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97885,"byte_end":97948,"line_start":738,"line_end":738,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98043,"byte_end":98065,"line_start":742,"line_end":742,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::f16::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":97984,"byte_end":98028,"line_start":741,"line_end":741,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98143,"byte_end":98156,"line_start":744,"line_end":744,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::f16::MAX_SUBNORMAL","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`] value\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`] value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98093,"byte_end":98128,"line_start":743,"line_end":743,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98213,"byte_end":98216,"line_start":747,"line_end":747,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::f16::ONE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1\n","sig":null,"attributes":[{"value":"/ [`f16`] 1","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98185,"byte_end":98198,"line_start":746,"line_end":746,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98272,"byte_end":98276,"line_start":749,"line_end":749,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::f16::ZERO","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 0\n","sig":null,"attributes":[{"value":"/ [`f16`] 0","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98244,"byte_end":98257,"line_start":748,"line_end":748,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98333,"byte_end":98341,"line_start":751,"line_end":751,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::f16::NEG_ZERO","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] -0\n","sig":null,"attributes":[{"value":"/ [`f16`] -0","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98304,"byte_end":98318,"line_start":750,"line_end":750,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98398,"byte_end":98405,"line_start":753,"line_end":753,"column_start":15,"column_end":22},"name":"NEG_ONE","qualname":"::binary16::f16::NEG_ONE","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] -1\n","sig":null,"attributes":[{"value":"/ [`f16`] -1","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98369,"byte_end":98383,"line_start":752,"line_end":752,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98481,"byte_end":98482,"line_start":756,"line_end":756,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::f16::E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Euler's number (ℯ)\n","sig":null,"attributes":[{"value":"/ [`f16`] Euler's number (ℯ)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98434,"byte_end":98466,"line_start":755,"line_end":755,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98562,"byte_end":98564,"line_start":758,"line_end":758,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::f16::PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ [`f16`] Archimedes' constant (π)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98510,"byte_end":98547,"line_start":757,"line_end":757,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98623,"byte_end":98632,"line_start":760,"line_end":760,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::f16::FRAC_1_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98592,"byte_end":98608,"line_start":759,"line_end":759,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98693,"byte_end":98706,"line_start":762,"line_end":762,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::f16::FRAC_1_SQRT_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`] 1/√2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98660,"byte_end":98678,"line_start":761,"line_end":761,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98765,"byte_end":98774,"line_start":764,"line_end":764,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::f16::FRAC_2_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98734,"byte_end":98750,"line_start":763,"line_end":763,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98836,"byte_end":98850,"line_start":766,"line_end":766,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::f16::FRAC_2_SQRT_PI","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`] 2/√π","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98802,"byte_end":98821,"line_start":765,"line_end":765,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98909,"byte_end":98918,"line_start":768,"line_end":768,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::f16::FRAC_PI_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/2\n","sig":null,"attributes":[{"value":"/ [`f16`] π/2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98878,"byte_end":98894,"line_start":767,"line_end":767,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98977,"byte_end":98986,"line_start":770,"line_end":770,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::f16::FRAC_PI_3","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/3\n","sig":null,"attributes":[{"value":"/ [`f16`] π/3","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":98946,"byte_end":98962,"line_start":769,"line_end":769,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99045,"byte_end":99054,"line_start":772,"line_end":772,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::f16::FRAC_PI_4","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/4\n","sig":null,"attributes":[{"value":"/ [`f16`] π/4","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99014,"byte_end":99030,"line_start":771,"line_end":771,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99113,"byte_end":99122,"line_start":774,"line_end":774,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::f16::FRAC_PI_6","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/6\n","sig":null,"attributes":[{"value":"/ [`f16`] π/6","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99082,"byte_end":99098,"line_start":773,"line_end":773,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99181,"byte_end":99190,"line_start":776,"line_end":776,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::f16::FRAC_PI_8","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] π/8\n","sig":null,"attributes":[{"value":"/ [`f16`] π/8","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99150,"byte_end":99166,"line_start":775,"line_end":775,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99256,"byte_end":99261,"line_start":778,"line_end":778,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::f16::LN_10","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99218,"byte_end":99241,"line_start":777,"line_end":777,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99326,"byte_end":99330,"line_start":780,"line_end":780,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::f16::LN_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗇 2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99289,"byte_end":99311,"line_start":779,"line_end":779,"column_start":5,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99406,"byte_end":99413,"line_start":782,"line_end":782,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::f16::LOG10_E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99358,"byte_end":99391,"line_start":781,"line_end":781,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99487,"byte_end":99494,"line_start":784,"line_end":784,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::binary16::f16::LOG10_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₁₀2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99441,"byte_end":99472,"line_start":783,"line_end":783,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99567,"byte_end":99573,"line_start":786,"line_end":786,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::f16::LOG2_E","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂ℯ","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99522,"byte_end":99552,"line_start":785,"line_end":785,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99645,"byte_end":99652,"line_start":788,"line_end":788,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::binary16::f16::LOG2_10","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`f16`] 𝗅𝗈𝗀₂10","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99601,"byte_end":99630,"line_start":787,"line_end":787,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99711,"byte_end":99717,"line_start":790,"line_end":790,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::f16::SQRT_2","value":"f16","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" [`f16`] √2\n","sig":null,"attributes":[{"value":"/ [`f16`] √2","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99680,"byte_end":99696,"line_start":789,"line_end":789,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99790,"byte_end":99794,"line_start":795,"line_end":795,"column_start":8,"column_end":12},"name":"from","qualname":"<f32 as std::convert::From>::from","value":"fn from(f16) -> f32","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99773,"byte_end":99782,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99886,"byte_end":99890,"line_start":802,"line_end":802,"column_start":8,"column_end":12},"name":"from","qualname":"<f64 as std::convert::From>::from","value":"fn from(f16) -> f64","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99869,"byte_end":99878,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99981,"byte_end":99985,"line_start":809,"line_end":809,"column_start":8,"column_end":12},"name":"from","qualname":"<f16 as std::convert::From>::from","value":"fn from(i8) -> f16","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99964,"byte_end":99973,"line_start":808,"line_end":808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100131,"byte_end":100135,"line_start":817,"line_end":817,"column_start":8,"column_end":12},"name":"from","qualname":"<f16 as std::convert::From>::from","value":"fn from(u8) -> f16","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100114,"byte_end":100123,"line_start":816,"line_end":816,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100268,"byte_end":100270,"line_start":824,"line_end":824,"column_start":8,"column_end":10},"name":"eq","qualname":"<f16 as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ f16) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100506,"byte_end":100517,"line_start":834,"line_end":834,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<f16 as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp<'_, '_>(&'_ Self, &'_ f16) -> Option<Ordering>","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2968},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":101452,"byte_end":101454,"line_start":861,"line_end":861,"column_start":8,"column_end":10},"name":"lt","qualname":"<f16 as std::cmp::PartialOrd>::lt","value":"fn lt<'_, '_>(&'_ Self, &'_ f16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2969},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":101953,"byte_end":101955,"line_start":876,"line_end":876,"column_start":8,"column_end":10},"name":"le","qualname":"<f16 as std::cmp::PartialOrd>::le","value":"fn le<'_, '_>(&'_ Self, &'_ f16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2970},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":102455,"byte_end":102457,"line_start":891,"line_end":891,"column_start":8,"column_end":10},"name":"gt","qualname":"<f16 as std::cmp::PartialOrd>::gt","value":"fn gt<'_, '_>(&'_ Self, &'_ f16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2971},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":102956,"byte_end":102958,"line_start":906,"line_end":906,"column_start":8,"column_end":10},"name":"ge","qualname":"<f16 as std::cmp::PartialOrd>::ge","value":"fn ge<'_, '_>(&'_ Self, &'_ f16) -> bool","parent":{"krate":2,"index":2966},"children":[],"decl_id":{"krate":2,"index":2972},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103550,"byte_end":103558,"line_start":925,"line_end":925,"column_start":8,"column_end":16},"name":"from_str","qualname":"<f16 as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> Result<f16, ParseFloatError>","parent":{"krate":2,"index":12999},"children":[],"decl_id":{"krate":2,"index":13001},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103722,"byte_end":103725,"line_start":932,"line_end":932,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103894,"byte_end":103897,"line_start":939,"line_end":939,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10305},"children":[],"decl_id":{"krate":2,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104065,"byte_end":104068,"line_start":946,"line_end":946,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::LowerExp>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10317},"children":[],"decl_id":{"krate":2,"index":10318},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104238,"byte_end":104241,"line_start":953,"line_end":953,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::UpperExp>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10319},"children":[],"decl_id":{"krate":2,"index":10320},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104409,"byte_end":104412,"line_start":960,"line_end":960,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Binary>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10309},"children":[],"decl_id":{"krate":2,"index":10310},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104572,"byte_end":104575,"line_start":967,"line_end":967,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::Octal>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10307},"children":[],"decl_id":{"krate":2,"index":10308},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104738,"byte_end":104741,"line_start":974,"line_end":974,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::LowerHex>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10311},"children":[],"decl_id":{"krate":2,"index":10312},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104904,"byte_end":104907,"line_start":981,"line_end":981,"column_start":8,"column_end":11},"name":"fmt","qualname":"<f16 as std::fmt::UpperHex>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), Error>","parent":{"krate":2,"index":10313},"children":[],"decl_id":{"krate":2,"index":10314},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105069,"byte_end":105072,"line_start":990,"line_end":990,"column_start":8,"column_end":11},"name":"neg","qualname":"<f16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3363},"children":[],"decl_id":{"krate":2,"index":3365},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105052,"byte_end":105061,"line_start":989,"line_end":989,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105218,"byte_end":105221,"line_start":999,"line_end":999,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'_ f16 as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3363},"children":[],"decl_id":{"krate":2,"index":3365},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105201,"byte_end":105210,"line_start":998,"line_end":998,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105344,"byte_end":105347,"line_start":1008,"line_end":1008,"column_start":8,"column_end":11},"name":"add","qualname":"<f16 as std::ops::Add>::add","value":"fn add(Self, Self) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105327,"byte_end":105336,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105547,"byte_end":105550,"line_start":1017,"line_end":1017,"column_start":8,"column_end":11},"name":"add","qualname":"<f16 as std::ops::Add>::add","value":"fn add<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105530,"byte_end":105539,"line_start":1016,"line_end":1016,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105711,"byte_end":105714,"line_start":1026,"line_end":1026,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ f16 as std::ops::Add>::add","value":"fn add<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105694,"byte_end":105703,"line_start":1025,"line_end":1025,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105877,"byte_end":105880,"line_start":1035,"line_end":1035,"column_start":8,"column_end":11},"name":"add","qualname":"<&'_ f16 as std::ops::Add>::add","value":"fn add(Self, f16) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105860,"byte_end":105869,"line_start":1034,"line_end":1034,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105995,"byte_end":106005,"line_start":1042,"line_end":1042,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<f16 as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3367},"children":[],"decl_id":{"krate":2,"index":3369},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105978,"byte_end":105987,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106125,"byte_end":106135,"line_start":1049,"line_end":1049,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<f16 as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_, '_>(&'_ mut Self, &'_ f16)","parent":{"krate":2,"index":3367},"children":[],"decl_id":{"krate":2,"index":3369},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106108,"byte_end":106117,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106268,"byte_end":106271,"line_start":1058,"line_end":1058,"column_start":8,"column_end":11},"name":"sub","qualname":"<f16 as std::ops::Sub>::sub","value":"fn sub(Self, Self) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106251,"byte_end":106260,"line_start":1057,"line_end":1057,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106471,"byte_end":106474,"line_start":1067,"line_end":1067,"column_start":8,"column_end":11},"name":"sub","qualname":"<f16 as std::ops::Sub>::sub","value":"fn sub<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106454,"byte_end":106463,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106635,"byte_end":106638,"line_start":1076,"line_end":1076,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ f16 as std::ops::Sub>::sub","value":"fn sub<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106618,"byte_end":106627,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106801,"byte_end":106804,"line_start":1085,"line_end":1085,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ f16 as std::ops::Sub>::sub","value":"fn sub(Self, f16) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106784,"byte_end":106793,"line_start":1084,"line_end":1084,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106919,"byte_end":106929,"line_start":1092,"line_end":1092,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<f16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3371},"children":[],"decl_id":{"krate":2,"index":3373},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106902,"byte_end":106911,"line_start":1091,"line_end":1091,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107049,"byte_end":107059,"line_start":1099,"line_end":1099,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<f16 as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_, '_>(&'_ mut Self, &'_ f16)","parent":{"krate":2,"index":3371},"children":[],"decl_id":{"krate":2,"index":3373},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107032,"byte_end":107041,"line_start":1098,"line_end":1098,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107192,"byte_end":107195,"line_start":1108,"line_end":1108,"column_start":8,"column_end":11},"name":"mul","qualname":"<f16 as std::ops::Mul>::mul","value":"fn mul(Self, Self) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107175,"byte_end":107184,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107395,"byte_end":107398,"line_start":1117,"line_end":1117,"column_start":8,"column_end":11},"name":"mul","qualname":"<f16 as std::ops::Mul>::mul","value":"fn mul<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107378,"byte_end":107387,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107559,"byte_end":107562,"line_start":1126,"line_end":1126,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ f16 as std::ops::Mul>::mul","value":"fn mul<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107542,"byte_end":107551,"line_start":1125,"line_end":1125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107725,"byte_end":107728,"line_start":1135,"line_end":1135,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'_ f16 as std::ops::Mul>::mul","value":"fn mul(Self, f16) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107708,"byte_end":107717,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107843,"byte_end":107853,"line_start":1142,"line_end":1142,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<f16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3375},"children":[],"decl_id":{"krate":2,"index":3377},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107826,"byte_end":107835,"line_start":1141,"line_end":1141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107973,"byte_end":107983,"line_start":1149,"line_end":1149,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<f16 as std::ops::MulAssign>::mul_assign","value":"fn mul_assign<'_, '_>(&'_ mut Self, &'_ f16)","parent":{"krate":2,"index":3375},"children":[],"decl_id":{"krate":2,"index":3377},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107956,"byte_end":107965,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108116,"byte_end":108119,"line_start":1158,"line_end":1158,"column_start":8,"column_end":11},"name":"div","qualname":"<f16 as std::ops::Div>::div","value":"fn div(Self, Self) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108099,"byte_end":108108,"line_start":1157,"line_end":1157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108319,"byte_end":108322,"line_start":1167,"line_end":1167,"column_start":8,"column_end":11},"name":"div","qualname":"<f16 as std::ops::Div>::div","value":"fn div<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108302,"byte_end":108311,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108483,"byte_end":108486,"line_start":1176,"line_end":1176,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ f16 as std::ops::Div>::div","value":"fn div<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108466,"byte_end":108475,"line_start":1175,"line_end":1175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108649,"byte_end":108652,"line_start":1185,"line_end":1185,"column_start":8,"column_end":11},"name":"div","qualname":"<&'_ f16 as std::ops::Div>::div","value":"fn div(Self, f16) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108632,"byte_end":108641,"line_start":1184,"line_end":1184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108767,"byte_end":108777,"line_start":1192,"line_end":1192,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<f16 as std::ops::DivAssign>::div_assign","value":"fn div_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3379},"children":[],"decl_id":{"krate":2,"index":3381},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108750,"byte_end":108759,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108897,"byte_end":108907,"line_start":1199,"line_end":1199,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<f16 as std::ops::DivAssign>::div_assign","value":"fn div_assign<'_, '_>(&'_ mut Self, &'_ f16)","parent":{"krate":2,"index":3379},"children":[],"decl_id":{"krate":2,"index":3381},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108880,"byte_end":108889,"line_start":1198,"line_end":1198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109040,"byte_end":109043,"line_start":1208,"line_end":1208,"column_start":8,"column_end":11},"name":"rem","qualname":"<f16 as std::ops::Rem>::rem","value":"fn rem(Self, Self) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109023,"byte_end":109032,"line_start":1207,"line_end":1207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109243,"byte_end":109246,"line_start":1217,"line_end":1217,"column_start":8,"column_end":11},"name":"rem","qualname":"<f16 as std::ops::Rem>::rem","value":"fn rem<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109226,"byte_end":109235,"line_start":1216,"line_end":1216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109407,"byte_end":109410,"line_start":1226,"line_end":1226,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ f16 as std::ops::Rem>::rem","value":"fn rem<'_>(Self, &'_ f16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109390,"byte_end":109399,"line_start":1225,"line_end":1225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109573,"byte_end":109576,"line_start":1235,"line_end":1235,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'_ f16 as std::ops::Rem>::rem","value":"fn rem(Self, f16) -> Self::Output","parent":{"krate":2,"index":3357},"children":[],"decl_id":{"krate":2,"index":3360},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109556,"byte_end":109565,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109691,"byte_end":109701,"line_start":1242,"line_end":1242,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<f16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign<'_>(&'_ mut Self, Self)","parent":{"krate":2,"index":3383},"children":[],"decl_id":{"krate":2,"index":3385},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109674,"byte_end":109683,"line_start":1241,"line_end":1241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109821,"byte_end":109831,"line_start":1249,"line_end":1249,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<f16 as std::ops::RemAssign>::rem_assign","value":"fn rem_assign<'_, '_>(&'_ mut Self, &'_ f16)","parent":{"krate":2,"index":3383},"children":[],"decl_id":{"krate":2,"index":3385},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109804,"byte_end":109813,"line_start":1248,"line_end":1248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109943,"byte_end":109950,"line_start":1256,"line_end":1256,"column_start":8,"column_end":15},"name":"product","qualname":"<f16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8373},"children":[],"decl_id":{"krate":2,"index":8375},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109926,"byte_end":109935,"line_start":1255,"line_end":1255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110120,"byte_end":110127,"line_start":1263,"line_end":1263,"column_start":8,"column_end":15},"name":"product","qualname":"<f16 as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = &'a f16>","parent":{"krate":2,"index":8373},"children":[],"decl_id":{"krate":2,"index":8375},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110103,"byte_end":110112,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110283,"byte_end":110286,"line_start":1270,"line_end":1270,"column_start":8,"column_end":11},"name":"sum","qualname":"<f16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8369},"children":[],"decl_id":{"krate":2,"index":8371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110266,"byte_end":110275,"line_start":1269,"line_end":1269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110448,"byte_end":110451,"line_start":1277,"line_end":1277,"column_start":8,"column_end":11},"name":"sum","qualname":"<f16 as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a f16>","parent":{"krate":2,"index":8369},"children":[],"decl_id":{"krate":2,"index":8371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110431,"byte_end":110440,"line_start":1276,"line_end":1276,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":663},{"krate":0,"index":668},{"krate":0,"index":681},{"krate":0,"index":694},{"krate":0,"index":703}],"decl_id":null,"docs":" Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or\n [`bf16`] numbers.","sig":null,"attributes":[{"value":"cfg(not(target_arch = \"spirv\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8615,"byte_end":8649,"line_start":195,"line_end":195,"column_start":1,"column_end":35}},{"value":"/ Contains utility functions and traits to convert between slices of [`u16`] bits and [`f16`] or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":152854,"byte_end":152952,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/ [`bf16`] numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":152953,"byte_end":152974,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":152975,"byte_end":152978,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsSliceExt`] sealed extension trait is implemented for `[u16]` slices,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":152979,"byte_end":153073,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ while the utility [`HalfFloatSliceExt`] sealed extension trait is implemented for both `[f16]`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153074,"byte_end":153172,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ and `[bf16]` slices. These traits provide efficient conversions and reinterpret casting of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153173,"byte_end":153267,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ larger buffers of floating point values, and are automatically included in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153268,"byte_end":153350,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ [`prelude`][crate::prelude] module.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153351,"byte_end":153390,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153684,"byte_end":153701,"line_start":18,"line_end":18,"column_start":11,"column_end":28},"name":"HalfFloatSliceExt","qualname":"::slice::HalfFloatSliceExt","value":"HalfFloatSliceExt: private::SealedHalfFloatSlice","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662}],"decl_id":null,"docs":" Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153500,"byte_end":153595,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153596,"byte_end":153599,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153600,"byte_end":153673,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154340,"byte_end":154356,"line_start":34,"line_end":34,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast","value":"fn reinterpret_cast<'_>(&'_ Self) -> &'_ [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`f16`] or [`bf16`] numbers as a slice of [`u16`] bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153739,"byte_end":153822,"line_start":19,"line_end":19,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153827,"byte_end":153830,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153835,"byte_end":153926,"line_start":21,"line_end":21,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153931,"byte_end":153954,"line_start":22,"line_end":22,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153959,"byte_end":153962,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153967,"byte_end":153981,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153986,"byte_end":153989,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153994,"byte_end":154005,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154010,"byte_end":154037,"line_start":27,"line_end":27,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154042,"byte_end":154123,"line_start":28,"line_end":28,"column_start":5,"column_end":86}},{"value":"/ let int_buffer = float_buffer.reinterpret_cast();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154128,"byte_end":154181,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154186,"byte_end":154189,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [float_buffer[0].to_bits(), float_buffer[1].to_bits(), float_buffer[2].to_bits()]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154194,"byte_end":154304,"line_start":31,"line_end":31,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154309,"byte_end":154316,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154321,"byte_end":154332,"line_start":33,"line_end":33,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155435,"byte_end":155455,"line_start":61,"line_end":61,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<'_>(&'_ mut Self) -> &'_ mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].\n bits","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`f16`] or [`bf16`] numbers as a mutable slice of [`u16`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154380,"byte_end":154474,"line_start":36,"line_end":36,"column_start":5,"column_end":99}},{"value":"/ bits","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154479,"byte_end":154487,"line_start":37,"line_end":37,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154492,"byte_end":154495,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154500,"byte_end":154594,"line_start":39,"line_end":39,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [u16]` is borrowed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154599,"byte_end":154683,"line_start":40,"line_end":40,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154688,"byte_end":154691,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154696,"byte_end":154710,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154715,"byte_end":154718,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154723,"byte_end":154734,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154739,"byte_end":154766,"line_start":45,"line_end":45,"column_start":5,"column_end":32}},{"value":"/ let mut float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154771,"byte_end":154856,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154861,"byte_end":154864,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154869,"byte_end":154874,"line_start":48,"line_end":48,"column_start":5,"column_end":10}},{"value":"/     let int_buffer = float_buffer.reinterpret_cast_mut();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154879,"byte_end":154940,"line_start":49,"line_end":49,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154945,"byte_end":154948,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":154953,"byte_end":155073,"line_start":51,"line_end":51,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155078,"byte_end":155081,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/     // Mutating the u16 slice will mutating the original","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155086,"byte_end":155146,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/     int_buffer[0] = 0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155151,"byte_end":155177,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155182,"byte_end":155187,"line_start":55,"line_end":55,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155192,"byte_end":155195,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop int_buffer before using float_buffer again or we will get a borrow error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155200,"byte_end":155306,"line_start":57,"line_end":57,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(0.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155311,"byte_end":155399,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155404,"byte_end":155411,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155416,"byte_end":155427,"line_start":60,"line_end":60,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156544,"byte_end":156566,"line_start":90,"line_end":90,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f32_slice","value":"fn convert_from_f32_slice<'_, '_>(&'_ mut Self, &'_ [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f32]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155487,"byte_end":155581,"line_start":63,"line_end":63,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155586,"byte_end":155589,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155594,"byte_end":155645,"line_start":65,"line_end":65,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155650,"byte_end":155653,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155658,"byte_end":155751,"line_start":67,"line_end":67,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155756,"byte_end":155841,"line_start":68,"line_end":68,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155846,"byte_end":155939,"line_start":69,"line_end":69,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155944,"byte_end":155956,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155961,"byte_end":155964,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155969,"byte_end":155981,"line_start":72,"line_end":72,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155986,"byte_end":155989,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":155994,"byte_end":156064,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156069,"byte_end":156072,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156077,"byte_end":156091,"line_start":76,"line_end":76,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156096,"byte_end":156107,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156112,"byte_end":156139,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156144,"byte_end":156177,"line_start":79,"line_end":79,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156182,"byte_end":156213,"line_start":80,"line_end":80,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156218,"byte_end":156272,"line_start":81,"line_end":81,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156277,"byte_end":156280,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156285,"byte_end":156325,"line_start":83,"line_end":83,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156330,"byte_end":156333,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156338,"byte_end":156356,"line_start":85,"line_end":85,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f32_slice(&float_values);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156361,"byte_end":156410,"line_start":86,"line_end":86,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156415,"byte_end":156418,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156423,"byte_end":156524,"line_start":88,"line_end":88,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156529,"byte_end":156536,"line_start":89,"line_end":89,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157654,"byte_end":157676,"line_start":119,"line_end":119,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f64_slice","value":"fn convert_from_f64_slice<'_, '_>(&'_ mut Self, &'_ [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f64]` slice into [`f16`] or [`bf16`] values in `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156597,"byte_end":156691,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156696,"byte_end":156699,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156704,"byte_end":156755,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156760,"byte_end":156763,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156768,"byte_end":156861,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156866,"byte_end":156951,"line_start":97,"line_end":97,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":156956,"byte_end":157049,"line_start":98,"line_end":98,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157054,"byte_end":157066,"line_start":99,"line_end":99,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157071,"byte_end":157074,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157079,"byte_end":157091,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157096,"byte_end":157099,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157104,"byte_end":157174,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157179,"byte_end":157182,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157187,"byte_end":157201,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157206,"byte_end":157217,"line_start":106,"line_end":106,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157222,"byte_end":157249,"line_start":107,"line_end":107,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157254,"byte_end":157287,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157292,"byte_end":157323,"line_start":109,"line_end":109,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157328,"byte_end":157382,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157387,"byte_end":157390,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157395,"byte_end":157435,"line_start":112,"line_end":112,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157440,"byte_end":157443,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157448,"byte_end":157466,"line_start":114,"line_end":114,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f64_slice(&float_values);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157471,"byte_end":157520,"line_start":115,"line_end":115,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157525,"byte_end":157528,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157533,"byte_end":157634,"line_start":117,"line_end":117,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157639,"byte_end":157646,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158703,"byte_end":158723,"line_start":147,"line_end":147,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f32_slice","value":"fn convert_to_f32_slice<'_, '_>(&'_ Self, &'_ mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in `dst`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157707,"byte_end":157799,"line_start":121,"line_end":121,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157804,"byte_end":157807,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157812,"byte_end":157863,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157868,"byte_end":157871,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157876,"byte_end":157969,"line_start":125,"line_end":125,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":157974,"byte_end":158059,"line_start":126,"line_end":126,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158064,"byte_end":158157,"line_start":127,"line_end":127,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158162,"byte_end":158174,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158179,"byte_end":158182,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158187,"byte_end":158199,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158204,"byte_end":158207,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158212,"byte_end":158282,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158287,"byte_end":158290,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158295,"byte_end":158309,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158314,"byte_end":158325,"line_start":135,"line_end":135,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158330,"byte_end":158357,"line_start":136,"line_end":136,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158362,"byte_end":158395,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f32; 4];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158400,"byte_end":158431,"line_start":138,"line_end":138,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158436,"byte_end":158439,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158444,"byte_end":158543,"line_start":140,"line_end":140,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158548,"byte_end":158551,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158556,"byte_end":158574,"line_start":142,"line_end":142,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f32_slice(&mut buffer);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158579,"byte_end":158629,"line_start":143,"line_end":143,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158634,"byte_end":158637,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158642,"byte_end":158683,"line_start":145,"line_end":145,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158688,"byte_end":158695,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159750,"byte_end":159770,"line_start":175,"line_end":175,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f64_slice","value":"fn convert_to_f64_slice<'_, '_>(&'_ Self, &'_ mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in `dst`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158754,"byte_end":158846,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158851,"byte_end":158854,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158859,"byte_end":158910,"line_start":151,"line_end":151,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158915,"byte_end":158918,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":158923,"byte_end":159016,"line_start":153,"line_end":153,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159021,"byte_end":159106,"line_start":154,"line_end":154,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159111,"byte_end":159204,"line_start":155,"line_end":155,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159209,"byte_end":159221,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159226,"byte_end":159229,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159234,"byte_end":159246,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159251,"byte_end":159254,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159259,"byte_end":159329,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159334,"byte_end":159337,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159342,"byte_end":159356,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159361,"byte_end":159372,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159377,"byte_end":159404,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159409,"byte_end":159442,"line_start":165,"line_end":165,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f64; 4];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159447,"byte_end":159478,"line_start":166,"line_end":166,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159483,"byte_end":159486,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159491,"byte_end":159590,"line_start":168,"line_end":168,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159595,"byte_end":159598,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159603,"byte_end":159621,"line_start":170,"line_end":170,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f64_slice(&mut buffer);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159626,"byte_end":159676,"line_start":171,"line_end":171,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159681,"byte_end":159684,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159689,"byte_end":159730,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159735,"byte_end":159742,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160811,"byte_end":160821,"line_start":200,"line_end":200,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"::slice::HalfFloatSliceExt::to_f32_vec","value":"fn to_f32_vec<'_>(&'_ Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in a new\n vector","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f32`] values in a new","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159894,"byte_end":159985,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ vector","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":159990,"byte_end":160000,"line_start":180,"line_end":180,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160005,"byte_end":160008,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160013,"byte_end":160106,"line_start":182,"line_end":182,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160111,"byte_end":160196,"line_start":183,"line_end":183,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160201,"byte_end":160294,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160299,"byte_end":160311,"line_start":185,"line_end":185,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160316,"byte_end":160319,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` or `alloc` feature.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160324,"byte_end":160392,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160397,"byte_end":160400,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160405,"byte_end":160419,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160424,"byte_end":160435,"line_start":190,"line_end":190,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160440,"byte_end":160467,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160472,"byte_end":160571,"line_start":192,"line_end":192,"column_start":5,"column_end":104}},{"value":"/ let vec = half_values.to_f32_vec();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160576,"byte_end":160615,"line_start":193,"line_end":193,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160620,"byte_end":160623,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![1., 2., 3., 4.]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160628,"byte_end":160670,"line_start":195,"line_end":195,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160675,"byte_end":160682,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160687,"byte_end":160734,"line_start":197,"line_end":197,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160792,"byte_end":160803,"line_start":199,"line_end":199,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161743,"byte_end":161753,"line_start":223,"line_end":223,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"::slice::HalfFloatSliceExt::to_f64_vec","value":"fn to_f64_vec<'_>(&'_ Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in a new\n vector.","sig":null,"attributes":[{"value":"/ Converts all of the [`f16`] or [`bf16`] elements of `self` into [`f64`] values in a new","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160847,"byte_end":160938,"line_start":202,"line_end":202,"column_start":5,"column_end":96}},{"value":"/ vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160943,"byte_end":160954,"line_start":203,"line_end":203,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160959,"byte_end":160962,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":160967,"byte_end":161060,"line_start":205,"line_end":205,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161065,"byte_end":161150,"line_start":206,"line_end":206,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](crate) for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161155,"byte_end":161248,"line_start":207,"line_end":207,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161253,"byte_end":161265,"line_start":208,"line_end":208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161270,"byte_end":161273,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` or `alloc` feature.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161278,"byte_end":161346,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161351,"byte_end":161354,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161359,"byte_end":161373,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161378,"byte_end":161389,"line_start":213,"line_end":213,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161394,"byte_end":161421,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161426,"byte_end":161525,"line_start":215,"line_end":215,"column_start":5,"column_end":104}},{"value":"/ let vec = half_values.to_f64_vec();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161530,"byte_end":161569,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161574,"byte_end":161577,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![1., 2., 3., 4.]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161582,"byte_end":161624,"line_start":218,"line_end":218,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161629,"byte_end":161636,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161641,"byte_end":161666,"line_start":220,"line_end":220,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161724,"byte_end":161735,"line_start":222,"line_end":222,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161933,"byte_end":161949,"line_start":229,"line_end":229,"column_start":11,"column_end":27},"name":"HalfBitsSliceExt","qualname":"::slice::HalfBitsSliceExt","value":"HalfBitsSliceExt: private::SealedHalfBitsSlice","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":666}],"decl_id":null,"docs":" Extensions to `[u16]` slices to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[u16]` slices to support reinterpret operations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161777,"byte_end":161844,"line_start":226,"line_end":226,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161845,"byte_end":161848,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161849,"byte_end":161922,"line_start":228,"line_end":228,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162911,"byte_end":162927,"line_start":251,"line_end":251,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast","value":"fn reinterpret_cast<H, '_>(&'_ Self) -> &'_ [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a slice of [`u16`] bits as a slice of [`f16`] or [`bf16`] numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161986,"byte_end":162069,"line_start":230,"line_end":230,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162074,"byte_end":162077,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162082,"byte_end":162162,"line_start":232,"line_end":232,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162167,"byte_end":162170,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162175,"byte_end":162266,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162271,"byte_end":162294,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162299,"byte_end":162302,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162307,"byte_end":162321,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162326,"byte_end":162329,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162334,"byte_end":162345,"line_start":239,"line_end":239,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162350,"byte_end":162377,"line_start":240,"line_end":240,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162382,"byte_end":162491,"line_start":241,"line_end":241,"column_start":5,"column_end":114}},{"value":"/ let float_buffer: &[f16] = int_buffer.reinterpret_cast();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162496,"byte_end":162557,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162562,"byte_end":162565,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162570,"byte_end":162658,"line_start":244,"line_end":244,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162663,"byte_end":162666,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162671,"byte_end":162762,"line_start":246,"line_end":246,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162767,"byte_end":162810,"line_start":247,"line_end":247,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast::<f16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162815,"byte_end":162875,"line_start":248,"line_end":248,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162880,"byte_end":162887,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":162892,"byte_end":162903,"line_start":250,"line_end":250,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164427,"byte_end":164447,"line_start":286,"line_end":286,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<H, '_>(&'_ mut Self) -> &'_ mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]\n numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a mutable slice of [`u16`] bits as a mutable slice of [`f16`] or [`bf16`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163000,"byte_end":163090,"line_start":255,"line_end":255,"column_start":5,"column_end":95}},{"value":"/ numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163095,"byte_end":163107,"line_start":256,"line_end":256,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163112,"byte_end":163115,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163120,"byte_end":163200,"line_start":258,"line_end":258,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163205,"byte_end":163208,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163213,"byte_end":163307,"line_start":260,"line_end":260,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [f16]` is borrowed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163312,"byte_end":163396,"line_start":261,"line_end":261,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163401,"byte_end":163404,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163409,"byte_end":163423,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163428,"byte_end":163431,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163436,"byte_end":163447,"line_start":265,"line_end":265,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163452,"byte_end":163479,"line_start":266,"line_end":266,"column_start":5,"column_end":32}},{"value":"/ let mut int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163484,"byte_end":163597,"line_start":267,"line_end":267,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163602,"byte_end":163605,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163610,"byte_end":163615,"line_start":269,"line_end":269,"column_start":5,"column_end":10}},{"value":"/     let float_buffer: &mut [f16] = int_buffer.reinterpret_cast_mut();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163620,"byte_end":163693,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163698,"byte_end":163701,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163706,"byte_end":163798,"line_start":272,"line_end":272,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163803,"byte_end":163806,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/     // Mutating the f16 slice will mutating the original","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163811,"byte_end":163871,"line_start":274,"line_end":274,"column_start":5,"column_end":65}},{"value":"/     float_buffer[0] = f16::from_f32(0.);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163876,"byte_end":163920,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163925,"byte_end":163930,"line_start":276,"line_end":276,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163935,"byte_end":163938,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop float_buffer before using int_buffer again or we will get a borrow error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":163943,"byte_end":164049,"line_start":278,"line_end":278,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(0.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164054,"byte_end":164170,"line_start":279,"line_end":279,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164175,"byte_end":164178,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164183,"byte_end":164274,"line_start":281,"line_end":281,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164279,"byte_end":164322,"line_start":282,"line_end":282,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164327,"byte_end":164391,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164396,"byte_end":164403,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164408,"byte_end":164419,"line_start":285,"line_end":285,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164583,"byte_end":164603,"line_start":294,"line_end":294,"column_start":15,"column_end":35},"name":"SealedHalfFloatSlice","qualname":"::slice::private::SealedHalfFloatSlice","value":"SealedHalfFloatSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164709,"byte_end":164728,"line_start":298,"line_end":298,"column_start":15,"column_end":34},"name":"SealedHalfBitsSlice","qualname":"::slice::private::SealedHalfBitsSlice","value":"SealedHalfBitsSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164833,"byte_end":164849,"line_start":304,"line_end":304,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[f16] as slice::HalfFloatSliceExt>::reinterpret_cast","value":"fn reinterpret_cast<'_>(&'_ Self) -> &'_ [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":655},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":164816,"byte_end":164825,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":165186,"byte_end":165206,"line_start":313,"line_end":313,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[f16] as slice::HalfFloatSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<'_>(&'_ mut Self) -> &'_ mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":656},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":165169,"byte_end":165178,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":165545,"byte_end":165567,"line_start":321,"line_end":321,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_from_f32_slice","value":"fn convert_from_f32_slice<'_, '_>(&'_ mut Self, &'_ [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":657},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":166603,"byte_end":166625,"line_start":348,"line_end":348,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_from_f64_slice","value":"fn convert_from_f64_slice<'_, '_>(&'_ mut Self, &'_ [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":658},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":167661,"byte_end":167681,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_to_f32_slice","value":"fn convert_to_f32_slice<'_, '_>(&'_ Self, &'_ mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":659},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":168718,"byte_end":168738,"line_start":402,"line_end":402,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"<[f16] as slice::HalfFloatSliceExt>::convert_to_f64_slice","value":"fn convert_to_f64_slice<'_, '_>(&'_ Self, &'_ mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":660},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":169874,"byte_end":169884,"line_start":432,"line_end":432,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"<[f16] as slice::HalfFloatSliceExt>::to_f32_vec","value":"fn to_f32_vec<'_>(&'_ Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":661},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":169772,"byte_end":169819,"line_start":429,"line_end":429,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":169824,"byte_end":169833,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":169838,"byte_end":169866,"line_start":431,"line_end":431,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170399,"byte_end":170409,"line_start":445,"line_end":445,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"<[f16] as slice::HalfFloatSliceExt>::to_f64_vec","value":"fn to_f64_vec<'_>(&'_ Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":662},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170297,"byte_end":170344,"line_start":442,"line_end":442,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170349,"byte_end":170358,"line_start":443,"line_end":443,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170363,"byte_end":170391,"line_start":444,"line_end":444,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170877,"byte_end":170893,"line_start":458,"line_end":458,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[bf16] as slice::HalfFloatSliceExt>::reinterpret_cast","value":"fn reinterpret_cast<'_>(&'_ Self) -> &'_ [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":655},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":170860,"byte_end":170869,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":171230,"byte_end":171250,"line_start":467,"line_end":467,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[bf16] as slice::HalfFloatSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<'_>(&'_ mut Self) -> &'_ mut [u16]","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":656},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":171213,"byte_end":171222,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":171589,"byte_end":171611,"line_start":475,"line_end":475,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_from_f32_slice","value":"fn convert_from_f32_slice<'_, '_>(&'_ mut Self, &'_ [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":657},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":171972,"byte_end":171994,"line_start":488,"line_end":488,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_from_f64_slice","value":"fn convert_from_f64_slice<'_, '_>(&'_ mut Self, &'_ [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":658},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":172355,"byte_end":172375,"line_start":501,"line_end":501,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_to_f32_slice","value":"fn convert_to_f32_slice<'_, '_>(&'_ Self, &'_ mut [f32])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":659},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":172728,"byte_end":172748,"line_start":514,"line_end":514,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"<[bf16] as slice::HalfFloatSliceExt>::convert_to_f64_slice","value":"fn convert_to_f64_slice<'_, '_>(&'_ Self, &'_ mut [f64])","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":660},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173200,"byte_end":173210,"line_start":530,"line_end":530,"column_start":8,"column_end":18},"name":"to_f32_vec","qualname":"<[bf16] as slice::HalfFloatSliceExt>::to_f32_vec","value":"fn to_f32_vec<'_>(&'_ Self) -> Vec<f32>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":661},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173098,"byte_end":173145,"line_start":527,"line_end":527,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173150,"byte_end":173159,"line_start":528,"line_end":528,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173164,"byte_end":173192,"line_start":529,"line_end":529,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173725,"byte_end":173735,"line_start":543,"line_end":543,"column_start":8,"column_end":18},"name":"to_f64_vec","qualname":"<[bf16] as slice::HalfFloatSliceExt>::to_f64_vec","value":"fn to_f64_vec<'_>(&'_ Self) -> Vec<f64>","parent":{"krate":0,"index":654},"children":[],"decl_id":{"krate":0,"index":662},"docs":"","sig":null,"attributes":[{"value":"cfg(any(feature = \"alloc\", feature = \"std\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173623,"byte_end":173670,"line_start":540,"line_end":540,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173675,"byte_end":173684,"line_start":541,"line_end":541,"column_start":5,"column_end":14}},{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":173689,"byte_end":173717,"line_start":542,"line_end":542,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":174265,"byte_end":174281,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"<[u16] as slice::HalfBitsSliceExt>::reinterpret_cast","value":"fn reinterpret_cast<H, '_>(&'_ Self) -> &'_ [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":{"krate":0,"index":664},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":174248,"byte_end":174257,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":174670,"byte_end":174690,"line_start":569,"line_end":569,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"<[u16] as slice::HalfBitsSliceExt>::reinterpret_cast_mut","value":"fn reinterpret_cast_mut<H, '_>(&'_ mut Self) -> &'_ mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":663},"children":[],"decl_id":{"krate":0,"index":666},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":174653,"byte_end":174662,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":756}],"decl_id":null,"docs":" Contains utility functions and traits to convert between vectors of [`u16`] bits and [`f16`] or\n [`bf16`] vectors.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8665,"byte_end":8690,"line_start":197,"line_end":197,"column_start":1,"column_end":26}},{"value":"/ Contains utility functions and traits to convert between vectors of [`u16`] bits and [`f16`] or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184561,"byte_end":184660,"line_start":1,"line_end":1,"column_start":1,"column_end":100}},{"value":"/ [`bf16`] vectors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184661,"byte_end":184682,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184683,"byte_end":184686,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsVecExt`] sealed extension trait is implemented for [`Vec<u16>`] vectors,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184687,"byte_end":184785,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ while the utility [`HalfFloatVecExt`] sealed extension trait is implemented for both","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184786,"byte_end":184874,"line_start":5,"line_end":5,"column_start":1,"column_end":89}},{"value":"/ [`Vec<f16>`] and [`Vec<bf16>`] vectors. These traits provide efficient conversions and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184875,"byte_end":184965,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ reinterpret casting of larger buffers of floating point values, and are automatically included","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":184966,"byte_end":185064,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ in the [`prelude`][crate::prelude] module.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185065,"byte_end":185111,"line_start":8,"line_end":8,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185112,"byte_end":185115,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This module is only available with the `std` or `alloc` feature.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185116,"byte_end":185184,"line_start":10,"line_end":10,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185471,"byte_end":185486,"line_start":20,"line_end":20,"column_start":11,"column_end":26},"name":"HalfFloatVecExt","qualname":"::vec::HalfFloatVecExt","value":"HalfFloatVecExt: private::SealedHalfFloatVec","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":" Extensions to [`Vec<f16>`] and [`Vec<bf16>`] to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to [`Vec<f16>`] and [`Vec<bf16>`] to support reinterpret operations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185299,"byte_end":185382,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185383,"byte_end":185386,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185387,"byte_end":185460,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186122,"byte_end":186138,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"::vec::HalfFloatVecExt::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Reinterprets a vector of [`f16`]or [`bf16`] numbers as a vector of [`u16`] bits.","sig":null,"attributes":[{"value":"/ Reinterprets a vector of [`f16`]or [`bf16`] numbers as a vector of [`u16`] bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185522,"byte_end":185606,"line_start":21,"line_end":21,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185611,"byte_end":185614,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted vector has the same memory location as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185619,"byte_end":185710,"line_start":23,"line_end":23,"column_start":5,"column_end":96}},{"value":"/ `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185715,"byte_end":185726,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185731,"byte_end":185734,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185739,"byte_end":185753,"line_start":26,"line_end":26,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185758,"byte_end":185761,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185766,"byte_end":185777,"line_start":28,"line_end":28,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185782,"byte_end":185809,"line_start":29,"line_end":29,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = vec![f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185814,"byte_end":185899,"line_start":30,"line_end":30,"column_start":5,"column_end":90}},{"value":"/ let int_buffer = float_buffer.reinterpret_into();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185904,"byte_end":185957,"line_start":31,"line_end":31,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185962,"byte_end":185965,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185970,"byte_end":186086,"line_start":33,"line_end":33,"column_start":5,"column_end":121}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186091,"byte_end":186098,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186103,"byte_end":186114,"line_start":35,"line_end":35,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186899,"byte_end":186913,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"::vec::HalfFloatVecExt::from_f32_slice","value":"fn from_f32_slice<'_>(&'_ [f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f32]` slice into a new [`f16`] or [`bf16`] vector.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f32]` slice into a new [`f16`] or [`bf16`] vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186163,"byte_end":186253,"line_start":38,"line_end":38,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186258,"byte_end":186261,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186266,"byte_end":186359,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186364,"byte_end":186449,"line_start":41,"line_end":41,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation][crate] for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186454,"byte_end":186547,"line_start":42,"line_end":42,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186552,"byte_end":186564,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186569,"byte_end":186572,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186577,"byte_end":186591,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186596,"byte_end":186607,"line_start":46,"line_end":46,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186612,"byte_end":186639,"line_start":47,"line_end":47,"column_start":5,"column_end":32}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186644,"byte_end":186684,"line_start":48,"line_end":48,"column_start":5,"column_end":45}},{"value":"/ let vec: Vec<f16> = Vec::from_f32_slice(&float_values);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186689,"byte_end":186748,"line_start":49,"line_end":49,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186753,"byte_end":186756,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186761,"byte_end":186863,"line_start":51,"line_end":51,"column_start":5,"column_end":107}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186868,"byte_end":186875,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186880,"byte_end":186891,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187679,"byte_end":187693,"line_start":72,"line_end":72,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"::vec::HalfFloatVecExt::from_f64_slice","value":"fn from_f64_slice<'_>(&'_ [f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":" Converts all of the elements of a `[f64]` slice into a new [`f16`] or [`bf16`] vector.","sig":null,"attributes":[{"value":"/ Converts all of the elements of a `[f64]` slice into a new [`f16`] or [`bf16`] vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":186943,"byte_end":187033,"line_start":56,"line_end":56,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187038,"byte_end":187041,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187046,"byte_end":187139,"line_start":58,"line_end":58,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187144,"byte_end":187229,"line_start":59,"line_end":59,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation][crate] for more information on hardware conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187234,"byte_end":187327,"line_start":60,"line_end":60,"column_start":5,"column_end":98}},{"value":"/ support.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187332,"byte_end":187344,"line_start":61,"line_end":61,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187349,"byte_end":187352,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187357,"byte_end":187371,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187376,"byte_end":187387,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187392,"byte_end":187419,"line_start":65,"line_end":65,"column_start":5,"column_end":32}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187424,"byte_end":187464,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let vec: Vec<f16> = Vec::from_f64_slice(&float_values);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187469,"byte_end":187528,"line_start":67,"line_end":67,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187533,"byte_end":187536,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187541,"byte_end":187643,"line_start":69,"line_end":69,"column_start":5,"column_end":107}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187648,"byte_end":187655,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187660,"byte_end":187671,"line_start":71,"line_end":71,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187875,"byte_end":187889,"line_start":78,"line_end":78,"column_start":11,"column_end":25},"name":"HalfBitsVecExt","qualname":"::vec::HalfBitsVecExt","value":"HalfBitsVecExt: private::SealedHalfBitsVec","parent":null,"children":[{"krate":0,"index":730}],"decl_id":null,"docs":" Extensions to [`Vec<u16>`] to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to [`Vec<u16>`] to support reinterpret operations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187721,"byte_end":187786,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187787,"byte_end":187790,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187791,"byte_end":187864,"line_start":77,"line_end":77,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188625,"byte_end":188641,"line_start":96,"line_end":96,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"::vec::HalfBitsVecExt::reinterpret_into","value":"fn reinterpret_into<H>(Self) -> Vec<H> where H: crate::private::SealedHalf","parent":{"krate":0,"index":729},"children":[],"decl_id":null,"docs":" Reinterprets a vector of [`u16`] bits as a vector of [`f16`] or [`bf16`] numbers.","sig":null,"attributes":[{"value":"/ Reinterprets a vector of [`u16`] bits as a vector of [`f16`] or [`bf16`] numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187924,"byte_end":188009,"line_start":79,"line_end":79,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188014,"byte_end":188017,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`] or [`bf16`] type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188022,"byte_end":188102,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188107,"byte_end":188110,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted vector has the same memory location as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188115,"byte_end":188206,"line_start":83,"line_end":83,"column_start":5,"column_end":96}},{"value":"/ `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188211,"byte_end":188222,"line_start":84,"line_end":84,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188227,"byte_end":188230,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188235,"byte_end":188249,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188254,"byte_end":188257,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188262,"byte_end":188273,"line_start":88,"line_end":88,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188278,"byte_end":188305,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = vec![f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188310,"byte_end":188423,"line_start":90,"line_end":90,"column_start":5,"column_end":118}},{"value":"/ let float_buffer = int_buffer.reinterpret_into::<f16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188428,"byte_end":188488,"line_start":91,"line_end":91,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188493,"byte_end":188496,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188501,"byte_end":188589,"line_start":93,"line_end":93,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188594,"byte_end":188601,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188606,"byte_end":188617,"line_start":95,"line_end":95,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188825,"byte_end":188843,"line_start":106,"line_end":106,"column_start":15,"column_end":33},"name":"SealedHalfFloatVec","qualname":"::vec::private::SealedHalfFloatVec","value":"SealedHalfFloatVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188951,"byte_end":188968,"line_start":110,"line_end":110,"column_start":15,"column_end":32},"name":"SealedHalfBitsVec","qualname":"::vec::private::SealedHalfBitsVec","value":"SealedHalfBitsVec","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189075,"byte_end":189091,"line_start":116,"line_end":116,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":726},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189058,"byte_end":189067,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189971,"byte_end":189985,"line_start":136,"line_end":136,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::from_f32_slice","value":"fn from_f32_slice<'_>(&'_ [f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":727},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189935,"byte_end":189963,"line_start":135,"line_end":135,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190438,"byte_end":190452,"line_start":147,"line_end":147,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"<Vec<f16> as vec::HalfFloatVecExt>::from_f64_slice","value":"fn from_f64_slice<'_>(&'_ [f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":728},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190402,"byte_end":190430,"line_start":146,"line_end":146,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190925,"byte_end":190941,"line_start":160,"line_end":160,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::reinterpret_into","value":"fn reinterpret_into(Self) -> Vec<u16>","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":726},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190908,"byte_end":190917,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":191821,"byte_end":191835,"line_start":180,"line_end":180,"column_start":8,"column_end":22},"name":"from_f32_slice","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::from_f32_slice","value":"fn from_f32_slice<'_>(&'_ [f32]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":727},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":191785,"byte_end":191813,"line_start":179,"line_end":179,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192288,"byte_end":192302,"line_start":191,"line_end":191,"column_start":8,"column_end":22},"name":"from_f64_slice","qualname":"<Vec<bf16> as vec::HalfFloatVecExt>::from_f64_slice","value":"fn from_f64_slice<'_>(&'_ [f64]) -> Self","parent":{"krate":0,"index":725},"children":[],"decl_id":{"krate":0,"index":728},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: uninit_vec)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192252,"byte_end":192280,"line_start":190,"line_end":190,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192823,"byte_end":192839,"line_start":205,"line_end":205,"column_start":8,"column_end":24},"name":"reinterpret_into","qualname":"<Vec<u16> as vec::HalfBitsVecExt>::reinterpret_into","value":"fn reinterpret_into<H>(Self) -> Vec<H> where H: crate::private::SealedHalf","parent":{"krate":0,"index":729},"children":[],"decl_id":{"krate":0,"index":730},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192806,"byte_end":192815,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8962,"byte_end":8969,"line_start":211,"line_end":211,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":784}],"decl_id":null,"docs":" A collection of the most used items and traits in this crate for easy importing.","sig":null,"attributes":[{"value":"/ A collection of the most used items and traits in this crate for easy importing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8800,"byte_end":8884,"line_start":204,"line_end":204,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8885,"byte_end":8888,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8889,"byte_end":8903,"line_start":206,"line_end":206,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8904,"byte_end":8907,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8908,"byte_end":8919,"line_start":208,"line_end":208,"column_start":1,"column_end":12}},{"value":"/ use half::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8920,"byte_end":8945,"line_start":209,"line_end":209,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8946,"byte_end":8953,"line_start":210,"line_end":210,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9415,"byte_end":9425,"line_start":229,"line_end":229,"column_start":15,"column_end":25},"name":"SealedHalf","qualname":"::private::SealedHalf","value":"SealedHalf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11149,"byte_end":11153,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35708,"byte_end":35712,"line_start":798,"line_end":798,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35862,"byte_end":35866,"line_start":806,"line_end":806,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36016,"byte_end":36020,"line_start":814,"line_end":814,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36256,"byte_end":36260,"line_start":824,"line_end":824,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39274,"byte_end":39278,"line_start":914,"line_end":914,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39481,"byte_end":39485,"line_start":922,"line_end":922,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39654,"byte_end":39658,"line_start":929,"line_end":929,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39826,"byte_end":39830,"line_start":936,"line_end":936,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40000,"byte_end":40004,"line_start":943,"line_end":943,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40172,"byte_end":40176,"line_start":950,"line_end":950,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40336,"byte_end":40340,"line_start":957,"line_end":957,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40503,"byte_end":40507,"line_start":964,"line_end":964,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40670,"byte_end":40674,"line_start":971,"line_end":971,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40797,"byte_end":40801,"line_start":977,"line_end":977,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41061,"byte_end":41065,"line_start":994,"line_end":994,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41231,"byte_end":41235,"line_start":1002,"line_end":1002,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41739,"byte_end":41743,"line_start":1029,"line_end":1029,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41871,"byte_end":41875,"line_start":1036,"line_end":1036,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41991,"byte_end":41995,"line_start":1043,"line_end":1043,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42161,"byte_end":42165,"line_start":1051,"line_end":1051,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42669,"byte_end":42673,"line_start":1078,"line_end":1078,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42801,"byte_end":42805,"line_start":1085,"line_end":1085,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42921,"byte_end":42925,"line_start":1092,"line_end":1092,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43091,"byte_end":43095,"line_start":1100,"line_end":1100,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43599,"byte_end":43603,"line_start":1127,"line_end":1127,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43731,"byte_end":43735,"line_start":1134,"line_end":1134,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43851,"byte_end":43855,"line_start":1141,"line_end":1141,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44021,"byte_end":44025,"line_start":1149,"line_end":1149,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44529,"byte_end":44533,"line_start":1176,"line_end":1176,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44661,"byte_end":44665,"line_start":1183,"line_end":1183,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44781,"byte_end":44785,"line_start":1190,"line_end":1190,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44951,"byte_end":44955,"line_start":1198,"line_end":1198,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45459,"byte_end":45463,"line_start":1225,"line_end":1225,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45591,"byte_end":45595,"line_start":1232,"line_end":1232,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45715,"byte_end":45719,"line_start":1239,"line_end":1239,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45895,"byte_end":45899,"line_start":1246,"line_end":1246,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46061,"byte_end":46065,"line_start":1253,"line_end":1253,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46229,"byte_end":46233,"line_start":1260,"line_end":1260,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74939,"byte_end":74942,"line_start":42,"line_end":42,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99954,"byte_end":99957,"line_start":807,"line_end":807,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100104,"byte_end":100107,"line_start":815,"line_end":815,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100255,"byte_end":100258,"line_start":823,"line_end":823,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100493,"byte_end":100496,"line_start":833,"line_end":833,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103505,"byte_end":103508,"line_start":923,"line_end":923,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103709,"byte_end":103712,"line_start":931,"line_end":931,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103881,"byte_end":103884,"line_start":938,"line_end":938,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104052,"byte_end":104055,"line_start":945,"line_end":945,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104225,"byte_end":104228,"line_start":952,"line_end":952,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104396,"byte_end":104399,"line_start":959,"line_end":959,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104559,"byte_end":104562,"line_start":966,"line_end":966,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104725,"byte_end":104728,"line_start":973,"line_end":973,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104891,"byte_end":104894,"line_start":980,"line_end":980,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105017,"byte_end":105020,"line_start":986,"line_end":986,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105292,"byte_end":105295,"line_start":1004,"line_end":1004,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105474,"byte_end":105477,"line_start":1013,"line_end":1013,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105968,"byte_end":105971,"line_start":1040,"line_end":1040,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106098,"byte_end":106101,"line_start":1047,"line_end":1047,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106216,"byte_end":106219,"line_start":1054,"line_end":1054,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106398,"byte_end":106401,"line_start":1063,"line_end":1063,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106892,"byte_end":106895,"line_start":1090,"line_end":1090,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107022,"byte_end":107025,"line_start":1097,"line_end":1097,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107140,"byte_end":107143,"line_start":1104,"line_end":1104,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107322,"byte_end":107325,"line_start":1113,"line_end":1113,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107816,"byte_end":107819,"line_start":1140,"line_end":1140,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107946,"byte_end":107949,"line_start":1147,"line_end":1147,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108064,"byte_end":108067,"line_start":1154,"line_end":1154,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108246,"byte_end":108249,"line_start":1163,"line_end":1163,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108740,"byte_end":108743,"line_start":1190,"line_end":1190,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108870,"byte_end":108873,"line_start":1197,"line_end":1197,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108988,"byte_end":108991,"line_start":1204,"line_end":1204,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109170,"byte_end":109173,"line_start":1213,"line_end":1213,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109664,"byte_end":109667,"line_start":1240,"line_end":1240,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109794,"byte_end":109797,"line_start":1247,"line_end":1247,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109916,"byte_end":109919,"line_start":1254,"line_end":1254,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110093,"byte_end":110096,"line_start":1261,"line_end":1261,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110256,"byte_end":110259,"line_start":1268,"line_end":1268,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110421,"byte_end":110424,"line_start":1275,"line_end":1275,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188879,"byte_end":188882,"line_start":107,"line_end":107,"column_start":33,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188923,"byte_end":188926,"line_start":108,"line_end":108,"column_start":33,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189003,"byte_end":189006,"line_start":111,"line_end":111,"column_start":32,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189043,"byte_end":189046,"line_start":114,"line_end":114,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190892,"byte_end":190895,"line_start":158,"line_end":158,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192741,"byte_end":192744,"line_start":202,"line_end":202,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9454,"byte_end":9457,"line_start":231,"line_end":231,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9485,"byte_end":9489,"line_start":232,"line_end":232,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8658,"byte_end":8663,"line_start":196,"line_end":196,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":637}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":8748,"byte_end":8751,"line_start":199,"line_end":199,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":708}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":11149,"byte_end":11153,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35708,"byte_end":35712,"line_start":798,"line_end":798,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":35862,"byte_end":35866,"line_start":806,"line_end":806,"column_start":19,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36016,"byte_end":36020,"line_start":814,"line_end":814,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":36256,"byte_end":36260,"line_start":824,"line_end":824,"column_start":21,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":2966}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39274,"byte_end":39278,"line_start":914,"line_end":914,"column_start":18,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":12999}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39481,"byte_end":39485,"line_start":922,"line_end":922,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39654,"byte_end":39658,"line_start":929,"line_end":929,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":39826,"byte_end":39830,"line_start":936,"line_end":936,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10317}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40000,"byte_end":40004,"line_start":943,"line_end":943,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10319}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40172,"byte_end":40176,"line_start":950,"line_end":950,"column_start":17,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10309}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40336,"byte_end":40340,"line_start":957,"line_end":957,"column_start":16,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10307}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40503,"byte_end":40507,"line_start":964,"line_end":964,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10311}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40670,"byte_end":40674,"line_start":971,"line_end":971,"column_start":19,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":10313}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":40797,"byte_end":40801,"line_start":977,"line_end":977,"column_start":14,"column_end":18},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3363}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41061,"byte_end":41065,"line_start":994,"line_end":994,"column_start":14,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41231,"byte_end":41235,"line_start":1002,"line_end":1002,"column_start":21,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41739,"byte_end":41743,"line_start":1029,"line_end":1029,"column_start":20,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3367}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41871,"byte_end":41875,"line_start":1036,"line_end":1036,"column_start":27,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3367}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":41991,"byte_end":41995,"line_start":1043,"line_end":1043,"column_start":14,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3341}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42161,"byte_end":42165,"line_start":1051,"line_end":1051,"column_start":21,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3341}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42669,"byte_end":42673,"line_start":1078,"line_end":1078,"column_start":20,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3371}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42801,"byte_end":42805,"line_start":1085,"line_end":1085,"column_start":27,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3371}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":42921,"byte_end":42925,"line_start":1092,"line_end":1092,"column_start":14,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3346}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43091,"byte_end":43095,"line_start":1100,"line_end":1100,"column_start":21,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3346}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43599,"byte_end":43603,"line_start":1127,"line_end":1127,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3375}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43731,"byte_end":43735,"line_start":1134,"line_end":1134,"column_start":27,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3375}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":43851,"byte_end":43855,"line_start":1141,"line_end":1141,"column_start":14,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3351}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44021,"byte_end":44025,"line_start":1149,"line_end":1149,"column_start":21,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3351}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44529,"byte_end":44533,"line_start":1176,"line_end":1176,"column_start":20,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44661,"byte_end":44665,"line_start":1183,"line_end":1183,"column_start":27,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44781,"byte_end":44785,"line_start":1190,"line_end":1190,"column_start":14,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3357}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":44951,"byte_end":44955,"line_start":1198,"line_end":1198,"column_start":21,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3357}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45459,"byte_end":45463,"line_start":1225,"line_end":1225,"column_start":20,"column_end":24},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3383}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45591,"byte_end":45595,"line_start":1232,"line_end":1232,"column_start":27,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":3383}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45715,"byte_end":45719,"line_start":1239,"line_end":1239,"column_start":18,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8373}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":45895,"byte_end":45899,"line_start":1246,"line_end":1246,"column_start":32,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8373}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46061,"byte_end":46065,"line_start":1253,"line_end":1253,"column_start":14,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8369}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\bfloat.rs","byte_start":46229,"byte_end":46233,"line_start":1260,"line_end":1260,"column_start":28,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":798},"to":{"krate":2,"index":8369}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":74939,"byte_end":74942,"line_start":42,"line_end":42,"column_start":6,"column_end":9},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":99954,"byte_end":99957,"line_start":807,"line_end":807,"column_start":19,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100104,"byte_end":100107,"line_start":815,"line_end":815,"column_start":19,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100255,"byte_end":100258,"line_start":823,"line_end":823,"column_start":20,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":100493,"byte_end":100496,"line_start":833,"line_end":833,"column_start":21,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":2966}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103505,"byte_end":103508,"line_start":923,"line_end":923,"column_start":18,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":12999}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103709,"byte_end":103712,"line_start":931,"line_end":931,"column_start":16,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":103881,"byte_end":103884,"line_start":938,"line_end":938,"column_start":18,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104052,"byte_end":104055,"line_start":945,"line_end":945,"column_start":19,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10317}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104225,"byte_end":104228,"line_start":952,"line_end":952,"column_start":19,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10319}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104396,"byte_end":104399,"line_start":959,"line_end":959,"column_start":17,"column_end":20},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10309}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104559,"byte_end":104562,"line_start":966,"line_end":966,"column_start":16,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10307}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104725,"byte_end":104728,"line_start":973,"line_end":973,"column_start":19,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10311}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":104891,"byte_end":104894,"line_start":980,"line_end":980,"column_start":19,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":10313}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105017,"byte_end":105020,"line_start":986,"line_end":986,"column_start":14,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3363}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105292,"byte_end":105295,"line_start":1004,"line_end":1004,"column_start":14,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105474,"byte_end":105477,"line_start":1013,"line_end":1013,"column_start":20,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":105968,"byte_end":105971,"line_start":1040,"line_end":1040,"column_start":20,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3367}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106098,"byte_end":106101,"line_start":1047,"line_end":1047,"column_start":26,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3367}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106216,"byte_end":106219,"line_start":1054,"line_end":1054,"column_start":14,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3341}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106398,"byte_end":106401,"line_start":1063,"line_end":1063,"column_start":20,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3341}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":106892,"byte_end":106895,"line_start":1090,"line_end":1090,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3371}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107022,"byte_end":107025,"line_start":1097,"line_end":1097,"column_start":26,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3371}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107140,"byte_end":107143,"line_start":1104,"line_end":1104,"column_start":14,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3346}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107322,"byte_end":107325,"line_start":1113,"line_end":1113,"column_start":20,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3346}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107816,"byte_end":107819,"line_start":1140,"line_end":1140,"column_start":20,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3375}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":107946,"byte_end":107949,"line_start":1147,"line_end":1147,"column_start":26,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3375}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108064,"byte_end":108067,"line_start":1154,"line_end":1154,"column_start":14,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3351}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108246,"byte_end":108249,"line_start":1163,"line_end":1163,"column_start":20,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3351}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108740,"byte_end":108743,"line_start":1190,"line_end":1190,"column_start":20,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108870,"byte_end":108873,"line_start":1197,"line_end":1197,"column_start":26,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":108988,"byte_end":108991,"line_start":1204,"line_end":1204,"column_start":14,"column_end":17},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3357}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109170,"byte_end":109173,"line_start":1213,"line_end":1213,"column_start":20,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3357}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109664,"byte_end":109667,"line_start":1240,"line_end":1240,"column_start":20,"column_end":23},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3383}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109794,"byte_end":109797,"line_start":1247,"line_end":1247,"column_start":26,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":3383}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":109916,"byte_end":109919,"line_start":1254,"line_end":1254,"column_start":18,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8373}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110093,"byte_end":110096,"line_start":1261,"line_end":1261,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8373}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110256,"byte_end":110259,"line_start":1268,"line_end":1268,"column_start":14,"column_end":17},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8369}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\binary16.rs","byte_start":110421,"byte_end":110424,"line_start":1275,"line_end":1275,"column_start":27,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":818},"to":{"krate":2,"index":8369}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":153712,"byte_end":153732,"line_start":18,"line_end":18,"column_start":39,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":676},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\slice.rs","byte_start":161960,"byte_end":161979,"line_start":229,"line_end":229,"column_start":38,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":679},"to":{"krate":0,"index":663}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":185497,"byte_end":185515,"line_start":20,"line_end":20,"column_start":37,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":743},"to":{"krate":0,"index":725}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":187900,"byte_end":187917,"line_start":78,"line_end":78,"column_start":36,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":746},"to":{"krate":0,"index":729}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188879,"byte_end":188882,"line_start":107,"line_end":107,"column_start":33,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":743}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":188923,"byte_end":188926,"line_start":108,"line_end":108,"column_start":33,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":743}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189003,"byte_end":189006,"line_start":111,"line_end":111,"column_start":32,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":746}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":189043,"byte_end":189046,"line_start":114,"line_end":114,"column_start":26,"column_end":29},"kind":{"Impl":{"id":85}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":725}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":190892,"byte_end":190895,"line_start":158,"line_end":158,"column_start":26,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":725}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\vec.rs","byte_start":192741,"byte_end":192744,"line_start":202,"line_end":202,"column_start":25,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":729}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9454,"byte_end":9457,"line_start":231,"line_end":231,"column_start":25,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":818},"to":{"krate":0,"index":795}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\half-2.2.0\\src\\lib.rs","byte_start":9485,"byte_end":9489,"line_start":232,"line_end":232,"column_start":25,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":798},"to":{"krate":0,"index":795}}]}