{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2","program":"C:\\Users\\Ben\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ahash","--edition=2018","C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"runtime-rng\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=d9266cded79a9b4c","-C","extra-filename=-d9266cded79a9b4c","--out-dir","c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps","--extern","cfg_if=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libcfg_if-7c477a85dc09cdc2.rmeta","--extern","getrandom=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libgetrandom-df74d4a43c09e153.rmeta","--extern","once_cell=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libonce_cell-289f6e181fa116d7.rmeta","--extern","serde=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libserde-94655c80bf796087.rmeta","--cap-lints","allow","--cfg","feature=\"specialize\"","--cfg","feature=\"stdsimd\"","--cfg","feature=\"folded_multiply\"","--error-format=json","--sysroot","C:\\Users\\Ben\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\application\\target\\rls\\debug\\deps\\libahash-d9266cded79a9b4c.rmeta"},"prelude":{"crate_id":{"name":"ahash","disambiguator":[14949227901135022770,0]},"crate_root":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src","external_crates":[{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10288641326355699271,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","num":2,"id":{"name":"core","disambiguator":[5178777620647193466,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7203661724729889941,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17525700935344431946,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14114419768508526436,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7430704726206783492,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12664251144516306473,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5349691386245612169,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7588176879124425336,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12802573245210436658,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15058356585373963657,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11406058276128544710,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12054102872615165506,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15575797803660711391,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[2170788131994516450,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[7872221195650628815,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","num":17,"id":{"name":"serde","disambiguator":[226809851131364859,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","num":18,"id":{"name":"serde_derive","disambiguator":[7049712192807757020,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","num":19,"id":{"name":"once_cell","disambiguator":[10393899279476839872,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","num":20,"id":{"name":"getrandom","disambiguator":[15237022176755909937,0]}}],"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":0,"byte_end":12337,"line_start":1,"line_end":397,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3924,"byte_end":3931,"line_start":117,"line_end":117,"column_start":39,"column_end":46},"alias_span":null,"name":"AHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4071,"byte_end":4079,"line_start":126,"line_end":126,"column_start":34,"column_end":42},"alias_span":null,"name":"AHashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4114,"byte_end":4122,"line_start":127,"line_end":127,"column_start":34,"column_end":42},"alias_span":null,"name":"AHashSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4634,"byte_end":4645,"line_start":146,"line_end":146,"column_start":30,"column_end":41},"alias_span":null,"name":"RandomState","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":0,"byte_end":12337,"line_start":1,"line_end":397,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":43},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":1103},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":122},{"krate":0,"index":142},{"krate":0,"index":217},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":303},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":317}],"decl_id":null,"docs":" AHash is a high performance keyed hash function.","sig":null,"attributes":[{"value":"/ AHash is a high performance keyed hash function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":0,"byte_end":52,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":53,"byte_end":56,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ It quickly provides a high quality hash where the result is not predictable without knowing the Key.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":57,"byte_end":161,"line_start":3,"line_end":3,"column_start":1,"column_end":105}},{"value":"/ AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":162,"byte_end":274,"line_start":4,"line_end":4,"column_start":1,"column_end":113}},{"value":"/ induce a collision.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":275,"byte_end":298,"line_start":5,"line_end":5,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":299,"byte_end":302,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # How aHash works","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":303,"byte_end":324,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":325,"byte_end":328,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ When it is available aHash uses the hardware AES instructions to provide a keyed hash function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":329,"byte_end":428,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ When it is not, aHash falls back on a slightly slower alternative algorithm.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":429,"byte_end":509,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":510,"byte_end":513,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Because aHash does not have a fixed standard for its output, it is able to improve over time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":514,"byte_end":611,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ But this also means that different computers or computers using different versions of ahash may observe different","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":612,"byte_end":729,"line_start":13,"line_end":13,"column_start":1,"column_end":118}},{"value":"/ hash values for the same input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":730,"byte_end":765,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"deny(clippy :: correctness, clippy :: complexity, clippy :: perf)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3006,"byte_end":3069,"line_start":94,"line_end":94,"column_start":1,"column_end":64}},{"value":"allow(clippy :: pedantic, clippy :: cast_lossless, clippy ::\nunreadable_literal)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3070,"byte_end":3148,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"feature(min_specialization)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3244,"byte_end":3271,"line_start":97,"line_end":97,"column_start":37,"column_end":64}},{"value":"feature(build_hasher_simple_hash_one)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3310,"byte_end":3347,"line_start":98,"line_end":98,"column_start":37,"column_end":74}},{"value":"feature(stdsimd)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":3383,"byte_end":3399,"line_start":99,"line_end":99,"column_start":34,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17573,"byte_end":17580,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"AHasher","qualname":"::fallback_hash::AHasher","value":"AHasher {  }","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867}],"decl_id":null,"docs":" A `Hasher` for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"/ A `Hasher` for hashing an arbitrary stream of bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17079,"byte_end":17135,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17136,"byte_end":17139,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Instances of [`AHasher`] represent state that is updated while hashing data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17140,"byte_end":17220,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17221,"byte_end":17224,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Each method updates the internal state based on the new data provided. Once","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17225,"byte_end":17304,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ all of the data has been provided, the resulting hash can be obtained by calling","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17305,"byte_end":17389,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ `finish()`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17390,"byte_end":17404,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17405,"byte_end":17408,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [Clone] is also provided in case you wish to calculate hashes for two different items that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17409,"byte_end":17503,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ start with the same data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17504,"byte_end":17533,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17534,"byte_end":17537,"line_start":21,"line_end":21,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23004,"byte_end":23012,"line_start":129,"line_end":129,"column_start":8,"column_end":16},"name":"write_u8","qualname":"<AHasher as std::hash::Hasher>::write_u8","value":"fn write_u8<'_>(&'_ mut Self, u8)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10549},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":22987,"byte_end":22996,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23092,"byte_end":23101,"line_start":134,"line_end":134,"column_start":8,"column_end":17},"name":"write_u16","qualname":"<AHasher as std::hash::Hasher>::write_u16","value":"fn write_u16<'_>(&'_ mut Self, u16)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10550},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23075,"byte_end":23084,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23182,"byte_end":23191,"line_start":139,"line_end":139,"column_start":8,"column_end":17},"name":"write_u32","qualname":"<AHasher as std::hash::Hasher>::write_u32","value":"fn write_u32<'_>(&'_ mut Self, u32)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10551},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23165,"byte_end":23174,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23272,"byte_end":23281,"line_start":144,"line_end":144,"column_start":8,"column_end":17},"name":"write_u64","qualname":"<AHasher as std::hash::Hasher>::write_u64","value":"fn write_u64<'_>(&'_ mut Self, u64)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10552},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23255,"byte_end":23264,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23362,"byte_end":23372,"line_start":149,"line_end":149,"column_start":8,"column_end":18},"name":"write_u128","qualname":"<AHasher as std::hash::Hasher>::write_u128","value":"fn write_u128<'_>(&'_ mut Self, u128)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10553},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23345,"byte_end":23354,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23586,"byte_end":23597,"line_start":159,"line_end":159,"column_start":8,"column_end":19},"name":"write_usize","qualname":"<AHasher as std::hash::Hasher>::write_usize","value":"fn write_usize<'_>(&'_ mut Self, usize)","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10554},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23436,"byte_end":23445,"line_start":153,"line_end":153,"column_start":5,"column_end":14}},{"value":"cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23450,"byte_end":23578,"line_start":154,"line_end":158,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23860,"byte_end":23865,"line_start":171,"line_end":171,"column_start":8,"column_end":13},"name":"write","qualname":"<AHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10548},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23806,"byte_end":23815,"line_start":169,"line_end":169,"column_start":5,"column_end":14}},{"value":"allow(clippy :: collapsible_if)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":23820,"byte_end":23852,"line_start":170,"line_end":170,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":24845,"byte_end":24851,"line_start":196,"line_end":196,"column_start":8,"column_end":14},"name":"finish","qualname":"<AHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10546},"children":[],"decl_id":{"krate":2,"index":10547},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":24828,"byte_end":24837,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920022,"byte_end":13920030,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"AHashMap","qualname":"::hash_map::AHashMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13919840,"byte_end":13919945,"line_start":19,"line_end":19,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13919946,"byte_end":13919993,"line_start":20,"line_end":20,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920160,"byte_end":13920164,"line_start":25,"line_end":25,"column_start":8,"column_end":12},"name":"from","qualname":"<AHashMap<K, V> as std::convert::From>::from","value":"fn from(HashMap<K, V, crate::RandomState>) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920578,"byte_end":13920582,"line_start":43,"line_end":43,"column_start":8,"column_end":12},"name":"from","qualname":"<AHashMap<K, V> as std::convert::From>::from","value":"fn from([(K, V); ]) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":" # Examples","sig":null,"attributes":[{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920342,"byte_end":13920356,"line_start":34,"line_end":34,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920361,"byte_end":13920364,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920369,"byte_end":13920376,"line_start":36,"line_end":36,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920381,"byte_end":13920405,"line_start":37,"line_end":37,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920410,"byte_end":13920413,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ let map1 = AHashMap::from([(1, 2), (3, 4)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920418,"byte_end":13920466,"line_start":39,"line_end":39,"column_start":5,"column_end":53}},{"value":"/ let map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920471,"byte_end":13920526,"line_start":40,"line_end":40,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(map1, map2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920531,"byte_end":13920558,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920563,"byte_end":13920570,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920728,"byte_end":13920732,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"into","qualname":"<AHashMap<K, V> as std::convert::Into>::into","value":"fn into(Self) -> HashMap<K, V, crate::RandomState>","parent":{"krate":2,"index":3171},"children":[],"decl_id":{"krate":2,"index":3173},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921031,"byte_end":13921034,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashMap<K, V, RandomState>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920847,"byte_end":13920941,"line_start":55,"line_end":55,"column_start":5,"column_end":99}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920946,"byte_end":13921019,"line_start":56,"line_end":56,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921286,"byte_end":13921299,"line_start":63,"line_end":63,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashMap<K, V, RandomState>>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" This crates a hashmap with the specified capacity using [RandomState::new].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashmap with the specified capacity using [RandomState::new].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921117,"byte_end":13921196,"line_start":61,"line_end":61,"column_start":5,"column_end":84}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921201,"byte_end":13921274,"line_start":62,"line_end":62,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921489,"byte_end":13921500,"line_start":72,"line_end":72,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashMap<K, V, S>>::with_hasher","value":"fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921599,"byte_end":13921623,"line_start":76,"line_end":76,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashMap<K, V, S>>::with_capacity_and_hasher","value":"fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922349,"byte_end":13922352,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"get","qualname":"<AHashMap<K, V, S>>::get","value":"fn get<Q, '_, '_>(&'_ Self, &'_ Q) -> Option<&'_ V> where Q: ?Sized,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921835,"byte_end":13921897,"line_start":86,"line_end":86,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921902,"byte_end":13921905,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921910,"byte_end":13921973,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921978,"byte_end":13922045,"line_start":89,"line_end":89,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922050,"byte_end":13922067,"line_start":90,"line_end":90,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922072,"byte_end":13922075,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922080,"byte_end":13922094,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922099,"byte_end":13922102,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922107,"byte_end":13922114,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922119,"byte_end":13922153,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922158,"byte_end":13922161,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922166,"byte_end":13922199,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922204,"byte_end":13922227,"line_start":98,"line_end":98,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922232,"byte_end":13922272,"line_start":99,"line_end":99,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922277,"byte_end":13922311,"line_start":100,"line_end":100,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922316,"byte_end":13922323,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922328,"byte_end":13922337,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923037,"byte_end":13923050,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<AHashMap<K, V, S>>::get_key_value","value":"fn get_key_value<Q, '_, '_>(&'_ Self, &'_ Q) -> Option<(&'_ K, &'_ V)> where\nQ: ?Sized, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922485,"byte_end":13922550,"line_start":111,"line_end":111,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922555,"byte_end":13922558,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922563,"byte_end":13922635,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922640,"byte_end":13922707,"line_start":114,"line_end":114,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922712,"byte_end":13922729,"line_start":115,"line_end":115,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922734,"byte_end":13922737,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922742,"byte_end":13922756,"line_start":117,"line_end":117,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922761,"byte_end":13922764,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922769,"byte_end":13922776,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922781,"byte_end":13922815,"line_start":120,"line_end":120,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922820,"byte_end":13922823,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922828,"byte_end":13922861,"line_start":122,"line_end":122,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922866,"byte_end":13922889,"line_start":123,"line_end":123,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922894,"byte_end":13922950,"line_start":124,"line_end":124,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13922955,"byte_end":13922999,"line_start":125,"line_end":125,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923004,"byte_end":13923011,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923016,"byte_end":13923025,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923746,"byte_end":13923753,"line_start":155,"line_end":155,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AHashMap<K, V, S>>::get_mut","value":"fn get_mut<Q, '_, '_>(&'_ mut Self, &'_ Q) -> Option<&'_ mut V> where\nQ: ?Sized, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923199,"byte_end":13923269,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923274,"byte_end":13923277,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923282,"byte_end":13923345,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923350,"byte_end":13923417,"line_start":139,"line_end":139,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923422,"byte_end":13923439,"line_start":140,"line_end":140,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923444,"byte_end":13923447,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923452,"byte_end":13923466,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923471,"byte_end":13923474,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923479,"byte_end":13923486,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923491,"byte_end":13923525,"line_start":145,"line_end":145,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923530,"byte_end":13923533,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923538,"byte_end":13923571,"line_start":147,"line_end":147,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923576,"byte_end":13923599,"line_start":148,"line_end":148,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923604,"byte_end":13923642,"line_start":149,"line_end":149,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923647,"byte_end":13923664,"line_start":150,"line_end":150,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923669,"byte_end":13923674,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923679,"byte_end":13923708,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923713,"byte_end":13923720,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923725,"byte_end":13923734,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924679,"byte_end":13924685,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"insert","qualname":"<AHashMap<K, V, S>>::insert","value":"fn insert<'_>(&'_ mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923898,"byte_end":13923940,"line_start":163,"line_end":163,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923945,"byte_end":13923948,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13923953,"byte_end":13924020,"line_start":165,"line_end":165,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924025,"byte_end":13924028,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924033,"byte_end":13924108,"line_start":167,"line_end":167,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924113,"byte_end":13924184,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924189,"byte_end":13924262,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924267,"byte_end":13924295,"line_start":170,"line_end":170,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924300,"byte_end":13924303,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924308,"byte_end":13924322,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924327,"byte_end":13924330,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924335,"byte_end":13924342,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924347,"byte_end":13924381,"line_start":175,"line_end":175,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924386,"byte_end":13924389,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924394,"byte_end":13924427,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924432,"byte_end":13924474,"line_start":178,"line_end":178,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924479,"byte_end":13924517,"line_start":179,"line_end":179,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924522,"byte_end":13924525,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924530,"byte_end":13924554,"line_start":181,"line_end":181,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924559,"byte_end":13924606,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924611,"byte_end":13924641,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924646,"byte_end":13924653,"line_start":184,"line_end":184,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924658,"byte_end":13924667,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925651,"byte_end":13925660,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<AHashMap<K, V, S>>::into_keys","value":"fn into_keys(Self) -> IntoKeys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the keys in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `K`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the keys in arbitrary order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924763,"byte_end":13924837,"line_start":190,"line_end":190,"column_start":5,"column_end":79}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924842,"byte_end":13924888,"line_start":191,"line_end":191,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `K`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924893,"byte_end":13924930,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924935,"byte_end":13924938,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924943,"byte_end":13924957,"line_start":194,"line_end":194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924962,"byte_end":13924965,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924970,"byte_end":13924977,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13924982,"byte_end":13925016,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925021,"byte_end":13925024,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ let map = HashMap::from([","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925029,"byte_end":13925058,"line_start":199,"line_end":199,"column_start":5,"column_end":34}},{"value":"/     (\"a\", 1),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925063,"byte_end":13925080,"line_start":200,"line_end":200,"column_start":5,"column_end":22}},{"value":"/     (\"b\", 2),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925085,"byte_end":13925102,"line_start":201,"line_end":201,"column_start":5,"column_end":22}},{"value":"/     (\"c\", 3),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925107,"byte_end":13925124,"line_start":202,"line_end":202,"column_start":5,"column_end":22}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925129,"byte_end":13925136,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925141,"byte_end":13925144,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let mut vec: Vec<&str> = map.into_keys().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925149,"byte_end":13925204,"line_start":205,"line_end":205,"column_start":5,"column_end":60}},{"value":"/ // The `IntoKeys` iterator produces keys in arbitrary order, so the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925209,"byte_end":13925280,"line_start":206,"line_end":206,"column_start":5,"column_end":76}},{"value":"/ // keys must be sorted to test them against a sorted array.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925285,"byte_end":13925348,"line_start":207,"line_end":207,"column_start":5,"column_end":68}},{"value":"/ vec.sort_unstable();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925353,"byte_end":13925377,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(vec, [\"a\", \"b\", \"c\"]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925382,"byte_end":13925419,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925424,"byte_end":13925431,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925436,"byte_end":13925439,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925444,"byte_end":13925461,"line_start":212,"line_end":212,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925466,"byte_end":13925469,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, iterating over keys takes O(capacity) time","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925474,"byte_end":13925551,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"/ instead of O(len) because it internally visits empty buckets too.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925556,"byte_end":13925625,"line_start":215,"line_end":215,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925630,"byte_end":13925639,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926618,"byte_end":13926629,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"into_values","qualname":"<AHashMap<K, V, S>>::into_values","value":"fn into_values(Self) -> IntoValues<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the values in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `V`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the values in arbitrary order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925725,"byte_end":13925801,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925806,"byte_end":13925852,"line_start":222,"line_end":222,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `V`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925857,"byte_end":13925894,"line_start":223,"line_end":223,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925899,"byte_end":13925902,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925907,"byte_end":13925921,"line_start":225,"line_end":225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925926,"byte_end":13925929,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925934,"byte_end":13925941,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925946,"byte_end":13925980,"line_start":228,"line_end":228,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925985,"byte_end":13925988,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let map = HashMap::from([","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13925993,"byte_end":13926022,"line_start":230,"line_end":230,"column_start":5,"column_end":34}},{"value":"/     (\"a\", 1),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926027,"byte_end":13926044,"line_start":231,"line_end":231,"column_start":5,"column_end":22}},{"value":"/     (\"b\", 2),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926049,"byte_end":13926066,"line_start":232,"line_end":232,"column_start":5,"column_end":22}},{"value":"/     (\"c\", 3),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926071,"byte_end":13926088,"line_start":233,"line_end":233,"column_start":5,"column_end":22}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926093,"byte_end":13926100,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926105,"byte_end":13926108,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ let mut vec: Vec<i32> = map.into_values().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926113,"byte_end":13926169,"line_start":236,"line_end":236,"column_start":5,"column_end":61}},{"value":"/ // The `IntoValues` iterator produces values in arbitrary order, so","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926174,"byte_end":13926245,"line_start":237,"line_end":237,"column_start":5,"column_end":76}},{"value":"/ // the values must be sorted to test them against a sorted array.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926250,"byte_end":13926319,"line_start":238,"line_end":238,"column_start":5,"column_end":74}},{"value":"/ vec.sort_unstable();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926324,"byte_end":13926348,"line_start":239,"line_end":239,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(vec, [1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926353,"byte_end":13926384,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926389,"byte_end":13926396,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926401,"byte_end":13926404,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926409,"byte_end":13926426,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926431,"byte_end":13926434,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, iterating over values takes O(capacity) time","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926439,"byte_end":13926518,"line_start":245,"line_end":245,"column_start":5,"column_end":84}},{"value":"/ instead of O(len) because it internally visits empty buckets too.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926523,"byte_end":13926592,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926597,"byte_end":13926606,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927263,"byte_end":13927269,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"remove","qualname":"<AHashMap<K, V, S>>::remove","value":"fn remove<Q, '_, '_>(&'_ mut Self, &'_ Q) -> Option<V> where Q: ?Sized,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926698,"byte_end":13926771,"line_start":252,"line_end":252,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926776,"byte_end":13926806,"line_start":253,"line_end":253,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926811,"byte_end":13926814,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926819,"byte_end":13926882,"line_start":255,"line_end":255,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926887,"byte_end":13926954,"line_start":256,"line_end":256,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926959,"byte_end":13926976,"line_start":257,"line_end":257,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926981,"byte_end":13926984,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13926989,"byte_end":13927003,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927008,"byte_end":13927011,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927016,"byte_end":13927023,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927028,"byte_end":13927062,"line_start":262,"line_end":262,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927067,"byte_end":13927070,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927075,"byte_end":13927108,"line_start":264,"line_end":264,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927113,"byte_end":13927136,"line_start":265,"line_end":265,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927141,"byte_end":13927183,"line_start":266,"line_end":266,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927188,"byte_end":13927225,"line_start":267,"line_end":267,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927230,"byte_end":13927237,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927242,"byte_end":13927251,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927493,"byte_end":13927498,"line_start":281,"line_end":281,"column_start":8,"column_end":13},"name":"deref","qualname":"<AHashMap<K, V, S> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ Self::Target","parent":{"krate":2,"index":3491},"children":[],"decl_id":{"krate":2,"index":3493},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927604,"byte_end":13927613,"line_start":287,"line_end":287,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<AHashMap<K, V, S> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut Self::Target","parent":{"krate":2,"index":3504},"children":[],"decl_id":{"krate":2,"index":3505},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927890,"byte_end":13927892,"line_start":305,"line_end":305,"column_start":8,"column_end":10},"name":"eq","qualname":"<AHashMap<K, V, S> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ AHashMap<K, V, S>) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928417,"byte_end":13928422,"line_start":332,"line_end":332,"column_start":8,"column_end":13},"name":"index","qualname":"<AHashMap<K, V, S> as std::ops::Index>::index","value":"fn index<'_, '_>(&'_ Self, &'_ Q) -> &'_ V","parent":{"krate":2,"index":3576},"children":[],"decl_id":{"krate":2,"index":3579},"docs":" Returns a reference to the value corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the supplied key.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928232,"byte_end":13928303,"line_start":326,"line_end":326,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928308,"byte_end":13928311,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928316,"byte_end":13928328,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928333,"byte_end":13928336,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Panics if the key is not present in the `HashMap`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928341,"byte_end":13928395,"line_start":330,"line_end":330,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928400,"byte_end":13928409,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928587,"byte_end":13928590,"line_start":343,"line_end":343,"column_start":8,"column_end":11},"name":"fmt","qualname":"<AHashMap<K, V, S> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928932,"byte_end":13928941,"line_start":354,"line_end":354,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<AHashMap<K, V, RandomState> as std::iter::FromIterator>::from_iter","value":"fn from_iter<T>(T) -> Self where T: IntoIterator<Item = (K, V)>","parent":{"krate":2,"index":8406},"children":[],"decl_id":{"krate":2,"index":8408},"docs":" This crates a hashmap from the provided iterator using [RandomState::new].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashmap from the provided iterator using [RandomState::new].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928768,"byte_end":13928846,"line_start":352,"line_end":352,"column_start":5,"column_end":83}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928851,"byte_end":13928924,"line_start":353,"line_end":353,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929264,"byte_end":13929273,"line_start":364,"line_end":364,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a AHashMap<K, V, S> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8410},"children":[],"decl_id":{"krate":2,"index":8413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929489,"byte_end":13929498,"line_start":372,"line_end":372,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a mut AHashMap<K, V, S> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8410},"children":[],"decl_id":{"krate":2,"index":8413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929695,"byte_end":13929704,"line_start":380,"line_end":380,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<AHashMap<K, V, S> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8410},"children":[],"decl_id":{"krate":2,"index":8413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929885,"byte_end":13929891,"line_start":391,"line_end":391,"column_start":8,"column_end":14},"name":"extend","qualname":"<AHashMap<K, V, S> as std::iter::Extend>::extend","value":"fn extend<T, '_>(&'_ mut Self, T) where T: IntoIterator<Item = (K, V)>","parent":{"krate":2,"index":8419},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929868,"byte_end":13929877,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930143,"byte_end":13930149,"line_start":403,"line_end":403,"column_start":8,"column_end":14},"name":"extend","qualname":"<AHashMap<K, V, S> as std::iter::Extend>::extend","value":"fn extend<T, '_>(&'_ mut Self, T) where T: IntoIterator<Item = (&'a K, &'a V)>","parent":{"krate":2,"index":8419},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930126,"byte_end":13930135,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930701,"byte_end":13930708,"line_start":414,"line_end":414,"column_start":8,"column_end":15},"name":"default","qualname":"<AHashMap<K, V, RandomState> as std::default::Default>::default","value":"fn default() -> AHashMap<K, V, RandomState>","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930684,"byte_end":13930693,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930919,"byte_end":13930928,"line_start":425,"line_end":425,"column_start":8,"column_end":17},"name":"serialize","qualname":"<AHashMap<K, V> as serde::Serialize>::serialize","value":"fn serialize<S, '_>(&'_ Self, S) -> Result<S::Ok, S::Error> where\nS: Serializer","parent":{"krate":17,"index":2162},"children":[],"decl_id":{"krate":17,"index":2163},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931202,"byte_end":13931213,"line_start":436,"line_end":436,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<AHashMap<K, V> as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: Deserializer","parent":{"krate":17,"index":1614},"children":[],"decl_id":{"krate":17,"index":1616},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931402,"byte_end":13931422,"line_start":441,"line_end":441,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"<AHashMap<K, V> as serde::Deserialize>::deserialize_in_place","value":"fn deserialize_in_place<D, '_>(D, &'_ mut Self) -> Result<(), D::Error> where\nD: Deserializer","parent":{"krate":17,"index":1614},"children":[],"decl_id":{"krate":17,"index":1618},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934051,"byte_end":13934059,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"AHashSet","qualname":"::hash_set::AHashSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13933869,"byte_end":13933974,"line_start":15,"line_end":15,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13933975,"byte_end":13934022,"line_start":16,"line_end":16,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934160,"byte_end":13934164,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"from","qualname":"<AHashSet<T> as std::convert::From>::from","value":"fn from(HashSet<T, RandomState>) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934546,"byte_end":13934550,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"from","qualname":"<AHashSet<T> as std::convert::From>::from","value":"fn from([T; ]) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":" # Examples","sig":null,"attributes":[{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934321,"byte_end":13934335,"line_start":30,"line_end":30,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934340,"byte_end":13934343,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934348,"byte_end":13934355,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashSet;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934360,"byte_end":13934384,"line_start":33,"line_end":33,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934389,"byte_end":13934392,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ let set1 = AHashSet::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934397,"byte_end":13934441,"line_start":35,"line_end":35,"column_start":5,"column_end":49}},{"value":"/ let set2: AHashSet<_> = [1, 2, 3, 4].into();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934446,"byte_end":13934494,"line_start":36,"line_end":36,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(set1, set2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934499,"byte_end":13934526,"line_start":37,"line_end":37,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934531,"byte_end":13934538,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934675,"byte_end":13934679,"line_start":45,"line_end":45,"column_start":8,"column_end":12},"name":"into","qualname":"<AHashSet<T> as std::convert::Into>::into","value":"fn into(Self) -> HashSet<T, RandomState>","parent":{"krate":2,"index":3171},"children":[],"decl_id":{"krate":2,"index":3173},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934919,"byte_end":13934922,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashSet<T, RandomState>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" This crates a hashset using [RandomState::new].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashset using [RandomState::new].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934778,"byte_end":13934829,"line_start":51,"line_end":51,"column_start":5,"column_end":56}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934834,"byte_end":13934907,"line_start":52,"line_end":52,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935174,"byte_end":13935187,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashSet<T, RandomState>>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" This crates a hashset with the specified capacity using [RandomState::new].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashset with the specified capacity using [RandomState::new].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935005,"byte_end":13935084,"line_start":57,"line_end":57,"column_start":5,"column_end":84}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935089,"byte_end":13935162,"line_start":58,"line_end":58,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935371,"byte_end":13935382,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashSet<T, S>>::with_hasher","value":"fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935481,"byte_end":13935505,"line_start":72,"line_end":72,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashSet<T, S>>::with_capacity_and_hasher","value":"fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935713,"byte_end":13935718,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"deref","qualname":"<AHashSet<T, S> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ Self::Target","parent":{"krate":2,"index":3491},"children":[],"decl_id":{"krate":2,"index":3493},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935818,"byte_end":13935827,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<AHashSet<T, S> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut Self::Target","parent":{"krate":2,"index":3504},"children":[],"decl_id":{"krate":2,"index":3505},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935984,"byte_end":13935986,"line_start":95,"line_end":95,"column_start":8,"column_end":10},"name":"eq","qualname":"<AHashSet<T, S> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ AHashSet<T, S>) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936850,"byte_end":13936855,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"bitor","qualname":"<&'_ AHashSet<T, S> as std::ops::BitOr>::bitor","value":"fn bitor<'_>(Self, &'_ AHashSet<T, S>) -> AHashSet<T, S>","parent":{"krate":2,"index":3400},"children":[],"decl_id":{"krate":2,"index":3403},"docs":" Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.","sig":null,"attributes":[{"value":"/ Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936304,"byte_end":13936372,"line_start":114,"line_end":114,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936377,"byte_end":13936380,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936385,"byte_end":13936399,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936404,"byte_end":13936407,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936412,"byte_end":13936419,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashSet;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936424,"byte_end":13936448,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936453,"byte_end":13936456,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936461,"byte_end":13936522,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/ let b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936527,"byte_end":13936588,"line_start":122,"line_end":122,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936593,"byte_end":13936596,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let set = &a | &b;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936601,"byte_end":13936623,"line_start":124,"line_end":124,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936628,"byte_end":13936631,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936636,"byte_end":13936654,"line_start":126,"line_end":126,"column_start":5,"column_end":23}},{"value":"/ let expected = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936659,"byte_end":13936694,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ for x in &set {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936699,"byte_end":13936718,"line_start":128,"line_end":128,"column_start":5,"column_end":24}},{"value":"/     assert!(expected.contains(x));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936723,"byte_end":13936761,"line_start":129,"line_end":129,"column_start":5,"column_end":43}},{"value":"/     i += 1;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936766,"byte_end":13936781,"line_start":130,"line_end":130,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936786,"byte_end":13936791,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(i, expected.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936796,"byte_end":13936830,"line_start":132,"line_end":132,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936835,"byte_end":13936842,"line_start":133,"line_end":133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937654,"byte_end":13937660,"line_start":166,"line_end":166,"column_start":8,"column_end":14},"name":"bitand","qualname":"<&'_ AHashSet<T, S> as std::ops::BitAnd>::bitand","value":"fn bitand<'_>(Self, &'_ AHashSet<T, S>) -> AHashSet<T, S>","parent":{"krate":2,"index":3395},"children":[],"decl_id":{"krate":2,"index":3398},"docs":" Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.","sig":null,"attributes":[{"value":"/ Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937110,"byte_end":13937185,"line_start":146,"line_end":146,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937190,"byte_end":13937193,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937198,"byte_end":13937212,"line_start":148,"line_end":148,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937217,"byte_end":13937220,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937225,"byte_end":13937232,"line_start":150,"line_end":150,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashSet;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937237,"byte_end":13937261,"line_start":151,"line_end":151,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937266,"byte_end":13937269,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ let a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937274,"byte_end":13937335,"line_start":153,"line_end":153,"column_start":5,"column_end":66}},{"value":"/ let b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937340,"byte_end":13937401,"line_start":154,"line_end":154,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937406,"byte_end":13937409,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let set = &a & &b;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937414,"byte_end":13937436,"line_start":156,"line_end":156,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937441,"byte_end":13937444,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937449,"byte_end":13937467,"line_start":158,"line_end":158,"column_start":5,"column_end":23}},{"value":"/ let expected = [2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937472,"byte_end":13937498,"line_start":159,"line_end":159,"column_start":5,"column_end":31}},{"value":"/ for x in &set {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937503,"byte_end":13937522,"line_start":160,"line_end":160,"column_start":5,"column_end":24}},{"value":"/     assert!(expected.contains(x));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937527,"byte_end":13937565,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/     i += 1;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937570,"byte_end":13937585,"line_start":162,"line_end":162,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937590,"byte_end":13937595,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(i, expected.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937600,"byte_end":13937634,"line_start":164,"line_end":164,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937639,"byte_end":13937646,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938474,"byte_end":13938480,"line_start":198,"line_end":198,"column_start":8,"column_end":14},"name":"bitxor","qualname":"<&'_ AHashSet<T, S> as std::ops::BitXor>::bitxor","value":"fn bitxor<'_>(Self, &'_ AHashSet<T, S>) -> AHashSet<T, S>","parent":{"krate":2,"index":3405},"children":[],"decl_id":{"krate":2,"index":3408},"docs":" Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.","sig":null,"attributes":[{"value":"/ Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13937916,"byte_end":13937999,"line_start":178,"line_end":178,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938004,"byte_end":13938007,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938012,"byte_end":13938026,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938031,"byte_end":13938034,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938039,"byte_end":13938046,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashSet;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938051,"byte_end":13938075,"line_start":183,"line_end":183,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938080,"byte_end":13938083,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938088,"byte_end":13938149,"line_start":185,"line_end":185,"column_start":5,"column_end":66}},{"value":"/ let b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938154,"byte_end":13938215,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938220,"byte_end":13938223,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ let set = &a ^ &b;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938228,"byte_end":13938250,"line_start":188,"line_end":188,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938255,"byte_end":13938258,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938263,"byte_end":13938281,"line_start":190,"line_end":190,"column_start":5,"column_end":23}},{"value":"/ let expected = [1, 2, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938286,"byte_end":13938318,"line_start":191,"line_end":191,"column_start":5,"column_end":37}},{"value":"/ for x in &set {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938323,"byte_end":13938342,"line_start":192,"line_end":192,"column_start":5,"column_end":24}},{"value":"/     assert!(expected.contains(x));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938347,"byte_end":13938385,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"/     i += 1;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938390,"byte_end":13938405,"line_start":194,"line_end":194,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938410,"byte_end":13938415,"line_start":195,"line_end":195,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(i, expected.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938420,"byte_end":13938454,"line_start":196,"line_end":196,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938459,"byte_end":13938466,"line_start":197,"line_end":197,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939275,"byte_end":13939278,"line_start":230,"line_end":230,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ AHashSet<T, S> as std::ops::Sub>::sub","value":"fn sub<'_>(Self, &'_ AHashSet<T, S>) -> AHashSet<T, S>","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":" Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.","sig":null,"attributes":[{"value":"/ Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938733,"byte_end":13938806,"line_start":210,"line_end":210,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938811,"byte_end":13938814,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938819,"byte_end":13938833,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938838,"byte_end":13938841,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938846,"byte_end":13938853,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHashSet;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938858,"byte_end":13938882,"line_start":215,"line_end":215,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938887,"byte_end":13938890,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938895,"byte_end":13938956,"line_start":217,"line_end":217,"column_start":5,"column_end":66}},{"value":"/ let b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13938961,"byte_end":13939022,"line_start":218,"line_end":218,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939027,"byte_end":13939030,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let set = &a - &b;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939035,"byte_end":13939057,"line_start":220,"line_end":220,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939062,"byte_end":13939065,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let mut i = 0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939070,"byte_end":13939088,"line_start":222,"line_end":222,"column_start":5,"column_end":23}},{"value":"/ let expected = [1, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939093,"byte_end":13939119,"line_start":223,"line_end":223,"column_start":5,"column_end":31}},{"value":"/ for x in &set {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939124,"byte_end":13939143,"line_start":224,"line_end":224,"column_start":5,"column_end":24}},{"value":"/     assert!(expected.contains(x));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939148,"byte_end":13939186,"line_start":225,"line_end":225,"column_start":5,"column_end":43}},{"value":"/     i += 1;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939191,"byte_end":13939206,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939211,"byte_end":13939216,"line_start":227,"line_end":227,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(i, expected.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939221,"byte_end":13939255,"line_start":228,"line_end":228,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939260,"byte_end":13939267,"line_start":229,"line_end":229,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939458,"byte_end":13939461,"line_start":240,"line_end":240,"column_start":8,"column_end":11},"name":"fmt","qualname":"<AHashSet<T, S> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939810,"byte_end":13939819,"line_start":252,"line_end":252,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<AHashSet<T, RandomState> as std::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> AHashSet<T> where I: IntoIterator<Item = T>","parent":{"krate":2,"index":8406},"children":[],"decl_id":{"krate":2,"index":8408},"docs":" This crates a hashset from the provided iterator using [RandomState::new].\n See the documentation in [RandomSource] for notes about key strength.\n","sig":null,"attributes":[{"value":"/ This crates a hashset from the provided iterator using [RandomState::new].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939632,"byte_end":13939710,"line_start":249,"line_end":249,"column_start":5,"column_end":83}},{"value":"/ See the documentation in [RandomSource] for notes about key strength.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939715,"byte_end":13939788,"line_start":250,"line_end":250,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939793,"byte_end":13939802,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940126,"byte_end":13940135,"line_start":262,"line_end":262,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a AHashSet<T, S> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8410},"children":[],"decl_id":{"krate":2,"index":8413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940310,"byte_end":13940319,"line_start":270,"line_end":270,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<AHashSet<T, S> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8410},"children":[],"decl_id":{"krate":2,"index":8413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940489,"byte_end":13940495,"line_start":281,"line_end":281,"column_start":8,"column_end":14},"name":"extend","qualname":"<AHashSet<T, S> as std::iter::Extend>::extend","value":"fn extend<I, '_>(&'_ mut Self, I) where I: IntoIterator<Item = T>","parent":{"krate":2,"index":8419},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940472,"byte_end":13940481,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940709,"byte_end":13940715,"line_start":292,"line_end":292,"column_start":8,"column_end":14},"name":"extend","qualname":"<AHashSet<T, S> as std::iter::Extend>::extend","value":"fn extend<I, '_>(&'_ mut Self, I) where I: IntoIterator<Item = &'a T>","parent":{"krate":2,"index":8419},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940692,"byte_end":13940701,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941335,"byte_end":13941342,"line_start":304,"line_end":304,"column_start":8,"column_end":15},"name":"default","qualname":"<AHashSet<T, RandomState> as std::default::Default>::default","value":"fn default() -> AHashSet<T, RandomState>","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":" Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.\n","sig":null,"attributes":[{"value":"/ Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941235,"byte_end":13941313,"line_start":302,"line_end":302,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941318,"byte_end":13941327,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941526,"byte_end":13941535,"line_start":314,"line_end":314,"column_start":8,"column_end":17},"name":"serialize","qualname":"<AHashSet<T> as serde::Serialize>::serialize","value":"fn serialize<S, '_>(&'_ Self, S) -> Result<S::Ok, S::Error> where\nS: Serializer","parent":{"krate":17,"index":2162},"children":[],"decl_id":{"krate":17,"index":2163},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941778,"byte_end":13941789,"line_start":324,"line_end":324,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<AHashSet<T> as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: Deserializer","parent":{"krate":17,"index":1614},"children":[],"decl_id":{"krate":17,"index":1616},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941978,"byte_end":13941998,"line_start":329,"line_end":329,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"<AHashSet<T> as serde::Deserialize>::deserialize_in_place","value":"fn deserialize_in_place<D, '_>(D, &'_ mut Self) -> Result<(), D::Error> where\nD: Deserializer","parent":{"krate":17,"index":1614},"children":[],"decl_id":{"krate":17,"index":1618},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1278},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4294,"byte_end":4301,"line_start":132,"line_end":132,"column_start":18,"column_end":25},"name":"HashMap","qualname":"::HashMap","value":"std::collections::HashMap<K, V, crate::RandomState>","parent":null,"children":[],"decl_id":null,"docs":" [Hasher]: std::hash::Hasher\n [HashMap]: std::collections::HashMap\n Type alias for [HashMap]<K, V, ahash::RandomState>\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4441,"byte_end":4448,"line_start":135,"line_end":135,"column_start":18,"column_end":25},"name":"HashSet","qualname":"::HashSet","value":"std::collections::HashSet<K, crate::RandomState>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for [HashSet]<K, ahash::RandomState>\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"random_state","qualname":"::random_state","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1307},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":1308},{"krate":0,"index":1320},{"krate":0,"index":1323},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":1325},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1335},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":210}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45672,"byte_end":45684,"line_start":130,"line_end":130,"column_start":11,"column_end":23},"name":"RandomSource","qualname":"::random_state::RandomSource","value":"RandomSource","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" A supplier of Randomness used for different hashers.\n See [set_random_source].","sig":null,"attributes":[{"value":"/ A supplier of Randomness used for different hashers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":44827,"byte_end":44883,"line_start":119,"line_end":119,"column_start":1,"column_end":57}},{"value":"/ See [set_random_source].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":44884,"byte_end":44912,"line_start":120,"line_end":120,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":44913,"byte_end":44916,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ If [set_random_source] aHash will default to the best available source of randomness.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":44917,"byte_end":45006,"line_start":122,"line_end":122,"column_start":1,"column_end":90}},{"value":"/ In order this is:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45007,"byte_end":45028,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"/ 1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45029,"byte_end":45173,"line_start":124,"line_end":124,"column_start":1,"column_end":145}},{"value":"/ 2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45174,"byte_end":45296,"line_start":125,"line_end":125,"column_start":1,"column_end":123}},{"value":"/ __Enabling this is recommended if `runtime-rng` is not possible__)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45297,"byte_end":45367,"line_start":126,"line_end":126,"column_start":1,"column_end":71}},{"value":"/ 3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45368,"byte_end":45481,"line_start":127,"line_end":127,"column_start":1,"column_end":114}},{"value":"/ (Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45482,"byte_end":45626,"line_start":128,"line_end":128,"column_start":1,"column_end":145}},{"value":"/ (Rust enables ASLR by default)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45627,"byte_end":45661,"line_start":129,"line_end":129,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45694,"byte_end":45709,"line_start":131,"line_end":131,"column_start":8,"column_end":23},"name":"gen_hasher_seed","qualname":"::random_state::RandomSource::gen_hasher_seed","value":"fn gen_hasher_seed<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":47987,"byte_end":48004,"line_start":189,"line_end":189,"column_start":20,"column_end":37},"name":"set_random_source","qualname":"::random_state::set_random_source","value":"fn set_random_source<impl RandomSource + Send + Sync + 'static>(impl RandomSource + Send + Sync + 'static)\n-> Result<(), bool> where\nimpl RandomSource + Send + Sync + 'static: RandomSource + Send + Sync +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Provides an optional way to manually supply a source of randomness for Hasher keys.","sig":null,"attributes":[{"value":"cfg(not(all(target_arch = \"arm\", target_os = \"none\")))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":47910,"byte_end":47967,"line_start":188,"line_end":188,"column_start":13,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49222,"byte_end":49233,"line_start":218,"line_end":218,"column_start":12,"column_end":23},"name":"RandomState","qualname":"::random_state::RandomState","value":"RandomState {  }","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"decl_id":null,"docs":" Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","sig":null,"attributes":[{"value":"/ Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48432,"byte_end":48517,"line_start":200,"line_end":200,"column_start":1,"column_end":86}},{"value":"/ [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48518,"byte_end":48596,"line_start":201,"line_end":201,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48597,"byte_end":48600,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ [build_hasher]: ahash::","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48601,"byte_end":48628,"line_start":203,"line_end":203,"column_start":1,"column_end":28}},{"value":"/ [Hasher]: std::hash::Hasher","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48629,"byte_end":48660,"line_start":204,"line_end":204,"column_start":1,"column_end":32}},{"value":"/ [BuildHasher]: std::hash::BuildHasher","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48661,"byte_end":48702,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ [HashMap]: std::collections::HashMap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48703,"byte_end":48743,"line_start":206,"line_end":206,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48744,"byte_end":48747,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ There are multiple constructors each is documented in more detail below:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48748,"byte_end":48824,"line_start":208,"line_end":208,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48825,"byte_end":48828,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ | Constructor   | Dynamically random? | Seed |","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48829,"byte_end":48879,"line_start":210,"line_end":210,"column_start":1,"column_end":51}},{"value":"/ |---------------|---------------------|------|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48880,"byte_end":48930,"line_start":211,"line_end":211,"column_start":1,"column_end":51}},{"value":"/ |`new`          | Each instance unique|_[RandomSource]_|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48931,"byte_end":48991,"line_start":212,"line_end":212,"column_start":1,"column_end":61}},{"value":"/ |`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":48992,"byte_end":49062,"line_start":213,"line_end":213,"column_start":1,"column_end":71}},{"value":"/ |`with_seed`    | Fixed per process   |`u64` + static random number|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49063,"byte_end":49135,"line_start":214,"line_end":214,"column_start":1,"column_end":73}},{"value":"/ |`with_seeds`   | Fixed               |`u64` x 4|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49136,"byte_end":49189,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49190,"byte_end":49193,"line_start":216,"line_end":216,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49376,"byte_end":49379,"line_start":226,"line_end":226,"column_start":8,"column_end":11},"name":"fmt","qualname":"<RandomState as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49688,"byte_end":49691,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"new","qualname":"<RandomState>::new","value":"fn new() -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RandomState` `BuildHasher` using random keys.","sig":null,"attributes":[{"value":"/ Create a new `RandomState` `BuildHasher` using random keys.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49501,"byte_end":49564,"line_start":233,"line_end":233,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49569,"byte_end":49572,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Each instance will have a unique set of keys derived from [RandomSource].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49577,"byte_end":49654,"line_start":235,"line_end":235,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49659,"byte_end":49662,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49667,"byte_end":49676,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50568,"byte_end":50581,"line_start":254,"line_end":254,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<RandomState>::generate_with","value":"fn generate_with(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\n that each time it is called the resulting state will be different and of high quality.\n This allows fixed constant or poor quality seeds to be provided without the problem of different\n `BuildHasher`s being identical or weak.","sig":null,"attributes":[{"value":"/ Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49859,"byte_end":49950,"line_start":244,"line_end":244,"column_start":5,"column_end":96}},{"value":"/ that each time it is called the resulting state will be different and of high quality.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49955,"byte_end":50045,"line_start":245,"line_end":245,"column_start":5,"column_end":95}},{"value":"/ This allows fixed constant or poor quality seeds to be provided without the problem of different","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50050,"byte_end":50150,"line_start":246,"line_end":246,"column_start":5,"column_end":105}},{"value":"/ `BuildHasher`s being identical or weak.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50155,"byte_end":50198,"line_start":247,"line_end":247,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50203,"byte_end":50206,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This is done via permuting the provided values with the value of a static counter and memory address.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50211,"byte_end":50316,"line_start":249,"line_end":249,"column_start":5,"column_end":110}},{"value":"/ (This makes this method somewhat more expensive than `with_seeds` below which does not do this).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50321,"byte_end":50421,"line_start":250,"line_end":250,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50426,"byte_end":50429,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ The provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50434,"byte_end":50542,"line_start":252,"line_end":252,"column_start":5,"column_end":113}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":50547,"byte_end":50556,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51976,"byte_end":51985,"line_start":293,"line_end":293,"column_start":12,"column_end":21},"name":"with_seed","qualname":"<RandomState>::with_seed","value":"fn with_seed(usize) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Build a `RandomState` from a single key. The provided key does not need to be of high quality,\n but all `RandomState`s created from the same key will produce identical hashers.\n (In contrast to `generate_with` above)","sig":null,"attributes":[{"value":"/ Build a `RandomState` from a single key. The provided key does not need to be of high quality,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51561,"byte_end":51659,"line_start":285,"line_end":285,"column_start":5,"column_end":103}},{"value":"/ but all `RandomState`s created from the same key will produce identical hashers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51664,"byte_end":51748,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/ (In contrast to `generate_with` above)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51753,"byte_end":51795,"line_start":287,"line_end":287,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51800,"byte_end":51803,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This allows for explicitly setting the seed to be used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51808,"byte_end":51867,"line_start":289,"line_end":289,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51872,"byte_end":51875,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Note: This method does not require the provided seed to be strong.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51880,"byte_end":51950,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":51955,"byte_end":51964,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52783,"byte_end":52793,"line_start":307,"line_end":307,"column_start":18,"column_end":28},"name":"with_seeds","qualname":"<RandomState>::with_seeds","value":"const fn with_seeds(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for explicitly setting the seeds to used.\n All `RandomState`s created with the same set of keys key will produce identical hashers.\n (In contrast to `generate_with` above)","sig":null,"attributes":[{"value":"/ Allows for explicitly setting the seeds to used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52123,"byte_end":52175,"line_start":298,"line_end":298,"column_start":5,"column_end":57}},{"value":"/ All `RandomState`s created with the same set of keys key will produce identical hashers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52180,"byte_end":52272,"line_start":299,"line_end":299,"column_start":5,"column_end":97}},{"value":"/ (In contrast to `generate_with` above)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52277,"byte_end":52319,"line_start":300,"line_end":300,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52324,"byte_end":52327,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Note: If DOS resistance is desired one of these should be a decent quality random number.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52332,"byte_end":52425,"line_start":302,"line_end":302,"column_start":5,"column_end":98}},{"value":"/ If 4 high quality random number are not cheaply available this method is robust against 0s being passed for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52430,"byte_end":52541,"line_start":303,"line_end":303,"column_start":5,"column_end":116}},{"value":"/ one or more of the parameters or the same value being passed for more than one parameter.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52546,"byte_end":52639,"line_start":304,"line_end":304,"column_start":5,"column_end":98}},{"value":"/ It is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52644,"byte_end":52751,"line_start":305,"line_end":305,"column_start":5,"column_end":112}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":52756,"byte_end":52765,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54407,"byte_end":54415,"line_start":356,"line_end":356,"column_start":12,"column_end":20},"name":"hash_one","qualname":"<RandomState>::hash_one","value":"fn hash_one<T, '_>(&'_ Self, T) -> u64 where T: Hash, Self: Sized","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\n For example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;","sig":null,"attributes":[{"value":"/ Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53006,"byte_end":53115,"line_start":316,"line_end":316,"column_start":5,"column_end":114}},{"value":"/ For example:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53120,"byte_end":53136,"line_start":317,"line_end":317,"column_start":5,"column_end":21}},{"value":"/ This is similar to:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53382,"byte_end":53405,"line_start":330,"line_end":330,"column_start":5,"column_end":28}},{"value":"/ (Note that these two ways to get a hash may not produce the same value for the same data)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53733,"byte_end":53826,"line_start":345,"line_end":345,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53831,"byte_end":53834,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ This is intended as a convenience for code which *consumes* hashes, such","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53839,"byte_end":53915,"line_start":347,"line_end":347,"column_start":5,"column_end":81}},{"value":"/ as the implementation of a hash table or in unit tests that check","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53920,"byte_end":53989,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/ whether a custom [`Hash`] implementation behaves as expected.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":53994,"byte_end":54059,"line_start":349,"line_end":349,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54064,"byte_end":54067,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This must not be used in any code which *creates* hashes, such as in an","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54072,"byte_end":54147,"line_start":351,"line_end":351,"column_start":5,"column_end":80}},{"value":"/ implementation of [`Hash`].  The way to create a combined hash of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54152,"byte_end":54221,"line_start":352,"line_end":352,"column_start":5,"column_end":74}},{"value":"/ multiple values is to call [`Hash::hash`] multiple times using the same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54226,"byte_end":54301,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/ [`Hasher`], not to call this method repeatedly and combine the results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54306,"byte_end":54381,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":54386,"byte_end":54395,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55317,"byte_end":55324,"line_start":377,"line_end":377,"column_start":8,"column_end":15},"name":"default","qualname":"<RandomState as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55300,"byte_end":55309,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56627,"byte_end":56639,"line_start":417,"line_end":417,"column_start":8,"column_end":20},"name":"build_hasher","qualname":"<RandomState as std::hash::BuildHasher>::build_hasher","value":"fn build_hasher<'_>(&'_ Self) -> AHasher","parent":{"krate":2,"index":10581},"children":[],"decl_id":{"krate":2,"index":10583},"docs":" Constructs a new [AHasher] with keys based on this [RandomState] object.\n This means that two different [RandomState]s will will generate\n [AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\n will generate the same hashes for the same input data.","sig":null,"attributes":[{"value":"/ Constructs a new [AHasher] with keys based on this [RandomState] object.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55433,"byte_end":55509,"line_start":385,"line_end":385,"column_start":5,"column_end":81}},{"value":"/ This means that two different [RandomState]s will will generate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55514,"byte_end":55581,"line_start":386,"line_end":386,"column_start":5,"column_end":72}},{"value":"/ [AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55586,"byte_end":55688,"line_start":387,"line_end":387,"column_start":5,"column_end":107}},{"value":"/ will generate the same hashes for the same input data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55693,"byte_end":55751,"line_start":388,"line_end":388,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55756,"byte_end":55759,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ [Hasher]: std::hash::Hasher","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56483,"byte_end":56514,"line_start":413,"line_end":413,"column_start":5,"column_end":36}},{"value":"/ [BuildHasher]: std::hash::BuildHasher","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56519,"byte_end":56560,"line_start":414,"line_end":414,"column_start":5,"column_end":46}},{"value":"/ [HashMap]: std::collections::HashMap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56565,"byte_end":56605,"line_start":415,"line_end":415,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56610,"byte_end":56619,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58145,"byte_end":58153,"line_start":463,"line_end":463,"column_start":8,"column_end":16},"name":"hash_one","qualname":"<RandomState as std::hash::BuildHasher>::hash_one","value":"fn hash_one<T, '_>(&'_ Self, T) -> u64 where T: Hash","parent":{"krate":2,"index":10581},"children":[],"decl_id":{"krate":2,"index":10584},"docs":" Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\n For example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;","sig":null,"attributes":[{"value":"/ Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56713,"byte_end":56822,"line_start":422,"line_end":422,"column_start":5,"column_end":114}},{"value":"/ For example:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":56827,"byte_end":56843,"line_start":423,"line_end":423,"column_start":5,"column_end":21}},{"value":"/ This is similar to:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57089,"byte_end":57112,"line_start":436,"line_end":436,"column_start":5,"column_end":28}},{"value":"/ (Note that these two ways to get a hash may not produce the same value for the same data)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57440,"byte_end":57533,"line_start":451,"line_end":451,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57538,"byte_end":57541,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ This is intended as a convenience for code which *consumes* hashes, such","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57546,"byte_end":57622,"line_start":453,"line_end":453,"column_start":5,"column_end":81}},{"value":"/ as the implementation of a hash table or in unit tests that check","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57627,"byte_end":57696,"line_start":454,"line_end":454,"column_start":5,"column_end":74}},{"value":"/ whether a custom [`Hash`] implementation behaves as expected.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57701,"byte_end":57766,"line_start":455,"line_end":455,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57771,"byte_end":57774,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ This must not be used in any code which *creates* hashes, such as in an","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57779,"byte_end":57854,"line_start":457,"line_end":457,"column_start":5,"column_end":80}},{"value":"/ implementation of [`Hash`].  The way to create a combined hash of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57859,"byte_end":57928,"line_start":458,"line_end":458,"column_start":5,"column_end":74}},{"value":"/ multiple values is to call [`Hash::hash`] multiple times using the same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":57933,"byte_end":58008,"line_start":459,"line_end":459,"column_start":5,"column_end":80}},{"value":"/ [`Hasher`], not to call this method repeatedly and combine the results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58013,"byte_end":58088,"line_start":460,"line_end":460,"column_start":5,"column_end":80}},{"value":"cfg(feature = \"specialize\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58093,"byte_end":58123,"line_start":461,"line_end":461,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58128,"byte_end":58137,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4929,"byte_end":4939,"line_start":155,"line_end":155,"column_start":11,"column_end":21},"name":"HashMapExt","qualname":"::HashMapExt","value":"HashMapExt","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293}],"decl_id":null,"docs":" A convenience trait that can be used together with the type aliases defined to\n get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4724,"byte_end":4747,"line_start":152,"line_end":152,"column_start":1,"column_end":24}},{"value":"/ A convenience trait that can be used together with the type aliases defined to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4748,"byte_end":4830,"line_start":153,"line_end":153,"column_start":1,"column_end":83}},{"value":"/ get access to the `new()` and `with_capacity()` methods for the HashMap type alias.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4831,"byte_end":4918,"line_start":154,"line_end":154,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4982,"byte_end":4985,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"new","qualname":"::HashMapExt::new","value":"fn new() -> Self","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" Constructs a new HashMap\n","sig":null,"attributes":[{"value":"/ Constructs a new HashMap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4946,"byte_end":4974,"line_start":156,"line_end":156,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5067,"byte_end":5080,"line_start":159,"line_end":159,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::HashMapExt::with_capacity","value":"fn with_capacity(usize) -> Self","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" Constructs a new HashMap with a given initial capacity\n","sig":null,"attributes":[{"value":"/ Constructs a new HashMap with a given initial capacity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5001,"byte_end":5059,"line_start":158,"line_end":158,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5317,"byte_end":5327,"line_start":165,"line_end":165,"column_start":11,"column_end":21},"name":"HashSetExt","qualname":"::HashSetExt","value":"HashSetExt","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" A convenience trait that can be used together with the type aliases defined to\n get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5110,"byte_end":5133,"line_start":162,"line_end":162,"column_start":1,"column_end":24}},{"value":"/ A convenience trait that can be used together with the type aliases defined to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5134,"byte_end":5216,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"/ get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5217,"byte_end":5306,"line_start":164,"line_end":164,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5370,"byte_end":5373,"line_start":167,"line_end":167,"column_start":8,"column_end":11},"name":"new","qualname":"::HashSetExt::new","value":"fn new() -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Constructs a new HashSet\n","sig":null,"attributes":[{"value":"/ Constructs a new HashSet","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5334,"byte_end":5362,"line_start":166,"line_end":166,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5455,"byte_end":5468,"line_start":169,"line_end":169,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::HashSetExt::with_capacity","value":"fn with_capacity(usize) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":" Constructs a new HashSet with a given initial capacity\n","sig":null,"attributes":[{"value":"/ Constructs a new HashSet with a given initial capacity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5389,"byte_end":5447,"line_start":168,"line_end":168,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5631,"byte_end":5634,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"new","qualname":"<std::collections::HashMap<K, V, S> as HashMapExt>::new","value":"fn new() -> Self","parent":{"krate":0,"index":291},"children":[],"decl_id":{"krate":0,"index":292},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5722,"byte_end":5735,"line_start":181,"line_end":181,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"<std::collections::HashMap<K, V, S> as HashMapExt>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":{"krate":0,"index":291},"children":[],"decl_id":{"krate":0,"index":293},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5983,"byte_end":5986,"line_start":191,"line_end":191,"column_start":8,"column_end":11},"name":"new","qualname":"<std::collections::HashSet<K, S> as HashSetExt>::new","value":"fn new() -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":{"krate":0,"index":295},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":6074,"byte_end":6087,"line_start":195,"line_end":195,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"<std::collections::HashSet<K, S> as HashSetExt>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":{"krate":0,"index":294},"children":[],"decl_id":{"krate":0,"index":296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7970,"byte_end":7977,"line_start":246,"line_end":246,"column_start":8,"column_end":15},"name":"default","qualname":"<AHasher as std::default::Default>::default","value":"fn default() -> AHasher","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":" Constructs a new [AHasher] with fixed keys.\n If `std` is enabled these will be generated upon first invocation.\n Otherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\n If neither of these features are available, hardcoded constants will be used.","sig":null,"attributes":[{"value":"/ Constructs a new [AHasher] with fixed keys.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7001,"byte_end":7048,"line_start":222,"line_end":222,"column_start":5,"column_end":52}},{"value":"/ If `std` is enabled these will be generated upon first invocation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7053,"byte_end":7123,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/ Otherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7128,"byte_end":7226,"line_start":224,"line_end":224,"column_start":5,"column_end":103}},{"value":"/ If neither of these features are available, hardcoded constants will be used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7231,"byte_end":7312,"line_start":225,"line_end":225,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7317,"byte_end":7320,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Because the values are fixed, different hashers will all hash elements the same way.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7325,"byte_end":7413,"line_start":227,"line_end":227,"column_start":5,"column_end":93}},{"value":"/ This could make hash values predictable, if DOS attacks are a concern. If this behaviour is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7418,"byte_end":7513,"line_start":228,"line_end":228,"column_start":5,"column_end":100}},{"value":"/ not required, it may be preferable to use [RandomState] instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7518,"byte_end":7586,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7591,"byte_end":7594,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7599,"byte_end":7613,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7618,"byte_end":7621,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7626,"byte_end":7633,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use ahash::AHasher;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7638,"byte_end":7661,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/ use std::hash::Hasher;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7666,"byte_end":7692,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7697,"byte_end":7700,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut hasher_1 = AHasher::default();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7705,"byte_end":7747,"line_start":237,"line_end":237,"column_start":5,"column_end":47}},{"value":"/ let mut hasher_2 = AHasher::default();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7752,"byte_end":7794,"line_start":238,"line_end":238,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7799,"byte_end":7802,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ hasher_1.write_u32(1234);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7807,"byte_end":7836,"line_start":240,"line_end":240,"column_start":5,"column_end":34}},{"value":"/ hasher_2.write_u32(1234);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7841,"byte_end":7870,"line_start":241,"line_end":241,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7875,"byte_end":7878,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(hasher_1.finish(), hasher_2.finish());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7883,"byte_end":7936,"line_start":243,"line_end":243,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7941,"byte_end":7948,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":7953,"byte_end":7962,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]}],"impls":[{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17648,"byte_end":17655,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":22973,"byte_end":22980,"line_start":127,"line_end":127,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":25211,"byte_end":25221,"line_start":210,"line_end":210,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":26400,"byte_end":26412,"line_start":258,"line_end":258,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":27420,"byte_end":27430,"line_start":306,"line_end":306,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920136,"byte_end":13920144,"line_start":24,"line_end":24,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920297,"byte_end":13920305,"line_start":30,"line_end":30,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920704,"byte_end":13920712,"line_start":48,"line_end":48,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920813,"byte_end":13920821,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921432,"byte_end":13921440,"line_start":68,"line_end":68,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921767,"byte_end":13921775,"line_start":81,"line_end":81,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927430,"byte_end":13927438,"line_start":279,"line_end":279,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927577,"byte_end":13927585,"line_start":286,"line_end":286,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927706,"byte_end":13927714,"line_start":292,"line_end":292,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927801,"byte_end":13927809,"line_start":299,"line_end":299,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927995,"byte_end":13928003,"line_start":310,"line_end":310,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928112,"byte_end":13928120,"line_start":318,"line_end":318,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928506,"byte_end":13928514,"line_start":337,"line_end":337,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928710,"byte_end":13928718,"line_start":348,"line_end":348,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929598,"byte_end":13929606,"line_start":377,"line_end":377,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929800,"byte_end":13929808,"line_start":385,"line_end":385,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930028,"byte_end":13930036,"line_start":396,"line_end":396,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930650,"byte_end":13930658,"line_start":412,"line_end":412,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930841,"byte_end":13930849,"line_start":420,"line_end":420,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931110,"byte_end":13931118,"line_start":431,"line_end":431,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931674,"byte_end":13931691,"line_start":446,"line_end":446,"column_start":46,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934139,"byte_end":13934147,"line_start":20,"line_end":20,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934279,"byte_end":13934287,"line_start":26,"line_end":26,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934654,"byte_end":13934662,"line_start":44,"line_end":44,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934747,"byte_end":13934755,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935317,"byte_end":13935325,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935656,"byte_end":13935664,"line_start":77,"line_end":77,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935794,"byte_end":13935802,"line_start":84,"line_end":84,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935916,"byte_end":13935924,"line_start":90,"line_end":90,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936083,"byte_end":13936091,"line_start":100,"line_end":100,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939394,"byte_end":13939402,"line_start":235,"line_end":235,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939577,"byte_end":13939585,"line_start":245,"line_end":245,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940224,"byte_end":13940232,"line_start":267,"line_end":267,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940407,"byte_end":13940415,"line_start":275,"line_end":275,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940615,"byte_end":13940623,"line_start":286,"line_end":286,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941204,"byte_end":13941212,"line_start":301,"line_end":301,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941469,"byte_end":13941477,"line_start":310,"line_end":310,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941714,"byte_end":13941722,"line_start":320,"line_end":320,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45793,"byte_end":45812,"line_start":138,"line_end":138,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":46196,"byte_end":46215,"line_start":153,"line_end":153,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49355,"byte_end":49366,"line_start":225,"line_end":225,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49482,"byte_end":49493,"line_start":231,"line_end":231,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55282,"byte_end":55293,"line_start":375,"line_end":375,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55387,"byte_end":55398,"line_start":382,"line_end":382,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58288,"byte_end":58299,"line_start":469,"line_end":469,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":60982,"byte_end":60983,"line_start":38,"line_end":38,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":62893,"byte_end":62896,"line_start":111,"line_end":111,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":63318,"byte_end":63324,"line_start":127,"line_end":127,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5569,"byte_end":5576,"line_start":173,"line_end":173,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5924,"byte_end":5931,"line_start":187,"line_end":187,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":6987,"byte_end":6994,"line_start":221,"line_end":221,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":8441,"byte_end":8442,"line_start":263,"line_end":263,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":4574,"byte_end":4586,"line_start":143,"line_end":143,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":142}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":17648,"byte_end":17655,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":22973,"byte_end":22980,"line_start":127,"line_end":127,"column_start":17,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":10546}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":25211,"byte_end":25221,"line_start":210,"line_end":210,"column_start":17,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":10546}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":26400,"byte_end":26412,"line_start":258,"line_end":258,"column_start":17,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":98},"to":{"krate":2,"index":10546}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\fallback_hash.rs","byte_start":27420,"byte_end":27430,"line_start":306,"line_end":306,"column_start":17,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":110},"to":{"krate":2,"index":10546}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920136,"byte_end":13920144,"line_start":24,"line_end":24,"column_start":56,"column_end":64},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920297,"byte_end":13920305,"line_start":30,"line_end":30,"column_start":50,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920704,"byte_end":13920712,"line_start":48,"line_end":48,"column_start":56,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3171}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13920813,"byte_end":13920821,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921432,"byte_end":13921440,"line_start":68,"line_end":68,"column_start":15,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13921767,"byte_end":13921775,"line_start":81,"line_end":81,"column_start":15,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927430,"byte_end":13927438,"line_start":279,"line_end":279,"column_start":25,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3491}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927577,"byte_end":13927585,"line_start":286,"line_end":286,"column_start":28,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3504}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927706,"byte_end":13927714,"line_start":292,"line_end":292,"column_start":30,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":9265}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927801,"byte_end":13927809,"line_start":299,"line_end":299,"column_start":29,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13927995,"byte_end":13928003,"line_start":310,"line_end":310,"column_start":22,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":2925}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928112,"byte_end":13928120,"line_start":318,"line_end":318,"column_start":40,"column_end":48},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3576}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928506,"byte_end":13928514,"line_start":337,"line_end":337,"column_start":25,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13928710,"byte_end":13928718,"line_start":348,"line_end":348,"column_start":37,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":8406}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929598,"byte_end":13929606,"line_start":377,"line_end":377,"column_start":32,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":8410}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13929800,"byte_end":13929808,"line_start":385,"line_end":385,"column_start":34,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":8419}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930028,"byte_end":13930036,"line_start":396,"line_end":396,"column_start":46,"column_end":54},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":8419}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930650,"byte_end":13930658,"line_start":412,"line_end":412,"column_start":24,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13930841,"byte_end":13930849,"line_start":420,"line_end":420,"column_start":26,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1283},"to":{"krate":17,"index":2162}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931110,"byte_end":13931118,"line_start":431,"line_end":431,"column_start":38,"column_end":46},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1283},"to":{"krate":17,"index":1614}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_map.rs","byte_start":13931674,"byte_end":13931691,"line_start":446,"line_end":446,"column_start":46,"column_end":63},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1088},"to":{"krate":17,"index":1700}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934139,"byte_end":13934147,"line_start":20,"line_end":20,"column_start":43,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934279,"byte_end":13934287,"line_start":26,"line_end":26,"column_start":42,"column_end":50},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934654,"byte_end":13934662,"line_start":44,"line_end":44,"column_start":43,"column_end":51},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3171}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13934747,"byte_end":13934755,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935317,"byte_end":13935325,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935656,"byte_end":13935664,"line_start":77,"line_end":77,"column_start":22,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3491}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935794,"byte_end":13935802,"line_start":84,"line_end":84,"column_start":25,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3504}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13935916,"byte_end":13935924,"line_start":90,"line_end":90,"column_start":26,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13936083,"byte_end":13936091,"line_start":100,"line_end":100,"column_start":19,"column_end":27},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":2925}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939394,"byte_end":13939402,"line_start":235,"line_end":235,"column_start":22,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13939577,"byte_end":13939585,"line_start":245,"line_end":245,"column_start":29,"column_end":37},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":8406}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940224,"byte_end":13940232,"line_start":267,"line_end":267,"column_start":29,"column_end":37},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":8410}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940407,"byte_end":13940415,"line_start":275,"line_end":275,"column_start":26,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":8419}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13940615,"byte_end":13940623,"line_start":286,"line_end":286,"column_start":34,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":8419}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941204,"byte_end":13941212,"line_start":301,"line_end":301,"column_start":21,"column_end":29},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941469,"byte_end":13941477,"line_start":310,"line_end":310,"column_start":23,"column_end":31},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1294},"to":{"krate":17,"index":2162}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\hash_set.rs","byte_start":13941714,"byte_end":13941722,"line_start":320,"line_end":320,"column_start":35,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1294},"to":{"krate":17,"index":1614}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":45793,"byte_end":45812,"line_start":138,"line_end":138,"column_start":6,"column_end":25},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":46196,"byte_end":46215,"line_start":153,"line_end":153,"column_start":23,"column_end":42},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":181},"to":{"krate":0,"index":179}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49355,"byte_end":49366,"line_start":225,"line_end":225,"column_start":21,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":49482,"byte_end":49493,"line_start":231,"line_end":231,"column_start":6,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55282,"byte_end":55293,"line_start":375,"line_end":375,"column_start":18,"column_end":29},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":55387,"byte_end":55398,"line_start":382,"line_end":382,"column_start":22,"column_end":33},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":10581}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\random_state.rs","byte_start":58288,"byte_end":58299,"line_start":469,"line_end":469,"column_start":25,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1330},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":60982,"byte_end":60983,"line_start":38,"line_end":38,"column_start":24,"column_end":25},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":242},"to":{"krate":0,"index":237}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":62893,"byte_end":62896,"line_start":111,"line_end":111,"column_start":21,"column_end":24},"kind":{"Impl":{"id":75}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":237}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src\\specialize.rs","byte_start":63318,"byte_end":63324,"line_start":127,"line_end":127,"column_start":21,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":237}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5569,"byte_end":5576,"line_start":173,"line_end":173,"column_start":48,"column_end":55},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":291}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":5924,"byte_end":5931,"line_start":187,"line_end":187,"column_start":45,"column_end":52},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":294}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":6987,"byte_end":6994,"line_start":221,"line_end":221,"column_start":18,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":8127,"byte_end":8138,"line_start":252,"line_end":252,"column_start":34,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":10581},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ahash-0.8.2\\src/lib.rs","byte_start":8441,"byte_end":8442,"line_start":263,"line_end":263,"column_start":41,"column_end":42},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":318},"to":{"krate":0,"index":310}}]}