{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2","program":"C:\\Users\\Ben\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","exr","--edition=2018","C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2d4cb3d85a58eef7","-C","extra-filename=-2d4cb3d85a58eef7","--out-dir","c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","--extern","bit_field=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libbit_field-b37deef005c8c152.rmeta","--extern","flume=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libflume-738e207db15a5777.rmeta","--extern","half=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libhalf-94c5eb14e3324494.rmeta","--extern","lebe=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\liblebe-bcd59b31c2a4b957.rmeta","--extern","miniz_oxide=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libminiz_oxide-3d49e340dfab0f5b.rmeta","--extern","smallvec=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libsmallvec-253b0a86f8973132.rmeta","--extern","threadpool=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libthreadpool-c771d46aaaba0507.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ben\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libexr-2d4cb3d85a58eef7.rmeta"},"prelude":{"crate_id":{"name":"exr","disambiguator":[16788770422276764091,0]},"crate_root":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src","external_crates":[{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10288641326355699271,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5178777620647193466,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7203661724729889941,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17525700935344431946,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14114419768508526436,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7430704726206783492,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12664251144516306473,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5349691386245612169,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7588176879124425336,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12802573245210436658,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15058356585373963657,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11406058276128544710,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12054102872615165506,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15575797803660711391,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[2170788131994516450,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","num":16,"id":{"name":"smallvec","disambiguator":[3142930680554501111,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","num":17,"id":{"name":"half","disambiguator":[9530666300167332363,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","num":18,"id":{"name":"lebe","disambiguator":[12564001807928221186,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","num":19,"id":{"name":"bit_field","disambiguator":[8427514154324319971,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\zip.rs","num":20,"id":{"name":"miniz_oxide","disambiguator":[3447107439928363180,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\zip.rs","num":21,"id":{"name":"adler","disambiguator":[16647164027692654332,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":22,"id":{"name":"threadpool","disambiguator":[6373306038024356015,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":23,"id":{"name":"num_cpus","disambiguator":[9151932574218723595,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":24,"id":{"name":"flume","disambiguator":[16522783103470041495,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":25,"id":{"name":"nanorand","disambiguator":[3227855925118354870,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":26,"id":{"name":"getrandom","disambiguator":[15237022176755909937,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":27,"id":{"name":"cfg_if","disambiguator":[7872221195650628815,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":28,"id":{"name":"futures_core","disambiguator":[13412865793139997503,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":29,"id":{"name":"futures_sink","disambiguator":[10928550804058915044,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":30,"id":{"name":"pin_project","disambiguator":[16823998681754556694,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":31,"id":{"name":"pin_project_internal","disambiguator":[9715180092680908338,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":32,"id":{"name":"spin","disambiguator":[9003672122233317963,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":33,"id":{"name":"lock_api","disambiguator":[5282362868738777283,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","num":34,"id":{"name":"scopeguard","disambiguator":[6110210485670846652,0]}}],"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2,"byte_end":2750,"line_start":3,"line_end":97,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":4667},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":2978,"byte_end":2982,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Read","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":1,"index":4724},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":2984,"byte_end":2989,"line_start":6,"line_end":6,"column_start":27,"column_end":32},"alias_span":null,"name":"Write","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":3525},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286886,"byte_end":1286897,"line_start":179,"line_end":179,"column_start":29,"column_end":40},"alias_span":null,"name":"Compression","value":"","parent":{"krate":0,"index":534}},{"kind":"Use","ref_id":{"krate":1,"index":4084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1613959,"byte_end":1613964,"line_start":6,"line_end":6,"column_start":18,"column_end":23},"alias_span":null,"name":"IoError","value":"","parent":{"krate":0,"index":2541}},{"kind":"Use","ref_id":{"krate":1,"index":4082},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1613994,"byte_end":1614000,"line_start":7,"line_end":7,"column_start":18,"column_end":24},"alias_span":null,"name":"IoResult","value":"","parent":{"krate":0,"index":2541}},{"kind":"Use","ref_id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1468,"byte_end":1481,"line_start":58,"line_end":58,"column_start":39,"column_end":52},"alias_span":null,"name":"WritableImage","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1493,"byte_end":1501,"line_start":58,"line_end":58,"column_start":64,"column_end":72},"alias_span":null,"name":"GetPixel","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1554,"byte_end":1558,"line_start":60,"line_end":60,"column_start":13,"column_end":17},"alias_span":null,"name":"read","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1574,"byte_end":1585,"line_start":60,"line_end":60,"column_start":33,"column_end":44},"alias_span":null,"name":"ReadSamples","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1594,"byte_end":1604,"line_start":60,"line_end":60,"column_start":53,"column_end":63},"alias_span":null,"name":"ReadLayers","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":4154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1625,"byte_end":1634,"line_start":61,"line_end":61,"column_start":20,"column_end":29},"alias_span":null,"name":"ReadImage","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1644,"byte_end":1656,"line_start":61,"line_end":61,"column_start":39,"column_end":51},"alias_span":null,"name":"ReadChannels","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1690,"byte_end":1709,"line_start":62,"line_end":62,"column_start":33,"column_end":52},"alias_span":null,"name":"ReadSpecificChannel","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1760,"byte_end":1764,"line_start":65,"line_end":65,"column_start":38,"column_end":42},"alias_span":null,"name":"Crop","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1766,"byte_end":1775,"line_start":65,"line_end":65,"column_start":44,"column_end":53},"alias_span":null,"name":"CropWhere","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":4729},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1777,"byte_end":1787,"line_start":65,"line_end":65,"column_start":55,"column_end":65},"alias_span":null,"name":"CropResult","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1789,"byte_end":1802,"line_start":65,"line_end":65,"column_start":67,"column_end":80},"alias_span":null,"name":"InspectSample","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":4763},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1804,"byte_end":1819,"line_start":65,"line_end":65,"column_start":82,"column_end":97},"alias_span":null,"name":"CroppedChannels","value":"","parent":{"krate":0,"index":3167}},{"kind":"Use","ref_id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1821,"byte_end":1837,"line_start":65,"line_end":65,"column_start":99,"column_end":115},"alias_span":null,"name":"ApplyCroppedView","value":"","parent":{"krate":0,"index":3167}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1867,"byte_end":1868,"line_start":68,"line_end":68,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"WritableImage","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1905,"byte_end":1919,"line_start":70,"line_end":70,"column_start":35,"column_end":49},"alias_span":null,"name":"write_rgb_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1921,"byte_end":1936,"line_start":70,"line_end":70,"column_start":51,"column_end":66},"alias_span":null,"name":"write_rgba_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1981,"byte_end":2012,"line_start":72,"line_end":72,"column_start":9,"column_end":40},"alias_span":null,"name":"read_first_rgba_layer_from_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2022,"byte_end":2052,"line_start":73,"line_end":73,"column_start":9,"column_end":39},"alias_span":null,"name":"read_all_rgba_layers_from_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2062,"byte_end":2085,"line_start":74,"line_end":74,"column_start":9,"column_end":32},"alias_span":null,"name":"read_all_data_from_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1590},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2095,"byte_end":2125,"line_start":75,"line_end":75,"column_start":9,"column_end":39},"alias_span":null,"name":"read_all_flat_layers_from_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2135,"byte_end":2166,"line_start":76,"line_end":76,"column_start":9,"column_end":40},"alias_span":null,"name":"read_first_flat_layer_from_file","value":"","parent":{"krate":0,"index":3166}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2230,"byte_end":2231,"line_start":80,"line_end":80,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"FlatSamples, PixelImage, AnyChannels, Layer, SpecificChannels, recursive, AnyChannel, Levels, Image","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2260,"byte_end":2269,"line_start":81,"line_end":81,"column_start":28,"column_end":37},"alias_span":null,"name":"attribute","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":4083},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2271,"byte_end":2279,"line_start":81,"line_end":81,"column_start":39,"column_end":47},"alias_span":null,"name":"MetaData","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3989},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2291,"byte_end":2306,"line_start":81,"line_end":81,"column_start":59,"column_end":74},"alias_span":null,"name":"LayerAttributes","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2308,"byte_end":2323,"line_start":81,"line_end":81,"column_start":76,"column_end":91},"alias_span":null,"name":"ImageAttributes","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":6528},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2364,"byte_end":2370,"line_start":82,"line_end":82,"column_start":36,"column_end":42},"alias_span":null,"name":"Sample","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3557},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2418,"byte_end":2432,"line_start":84,"line_end":84,"column_start":9,"column_end":23},"alias_span":null,"name":"AttributeValue","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3525},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2434,"byte_end":2445,"line_start":84,"line_end":84,"column_start":25,"column_end":36},"alias_span":null,"name":"Compression","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3641},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2447,"byte_end":2451,"line_start":84,"line_end":84,"column_start":38,"column_end":42},"alias_span":null,"name":"Text","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3711},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2453,"byte_end":2466,"line_start":84,"line_end":84,"column_start":44,"column_end":57},"alias_span":null,"name":"IntegerBounds","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3859},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2476,"byte_end":2485,"line_start":85,"line_end":85,"column_start":9,"column_end":18},"alias_span":null,"name":"LineOrder","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3782},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2487,"byte_end":2497,"line_start":85,"line_end":85,"column_start":20,"column_end":30},"alias_span":null,"name":"SampleType","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3892},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2499,"byte_end":2514,"line_start":85,"line_end":85,"column_start":32,"column_end":47},"alias_span":null,"name":"TileDescription","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3763},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2516,"byte_end":2534,"line_start":85,"line_end":85,"column_start":49,"column_end":67},"alias_span":null,"name":"ChannelDescription","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2587,"byte_end":2591,"line_start":89,"line_end":89,"column_start":26,"column_end":30},"alias_span":null,"name":"Vec2","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2587,"byte_end":2591,"line_start":89,"line_end":89,"column_start":26,"column_end":30},"alias_span":null,"name":"Vec2","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":2566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2644,"byte_end":2650,"line_start":92,"line_end":92,"column_start":29,"column_end":35},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":0,"index":6357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2652,"byte_end":2657,"line_start":92,"line_end":92,"column_start":37,"column_end":42},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":17,"index":818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2712,"byte_end":2715,"line_start":95,"line_end":95,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":3166}},{"kind":"Use","ref_id":{"krate":16,"index":168},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2739,"byte_end":2747,"line_start":96,"line_end":96,"column_start":23,"column_end":31},"alias_span":null,"name":"SmallVec","value":"","parent":{"krate":0,"index":3166}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2,"byte_end":2750,"line_start":3,"line_end":97,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":127},{"krate":0,"index":202},{"krate":0,"index":533},{"krate":0,"index":1049},{"krate":0,"index":2541},{"krate":0,"index":2589},{"krate":0,"index":3165},{"krate":0,"index":3166}],"decl_id":null,"docs":" Read and write OpenEXR images.\n This library uses no foreign code or unsafe Rust.","sig":null,"attributes":[{"value":"/ Read and write OpenEXR images.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":2,"byte_end":36,"line_start":3,"line_end":3,"column_start":1,"column_end":35}},{"value":"/ This library uses no foreign code or unsafe Rust.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":37,"byte_end":90,"line_start":4,"line_end":4,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":91,"byte_end":94,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ See the [README.md](https://github.com/johannesvollmer/exrs/blob/master/README.md) for crate information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":95,"byte_end":204,"line_start":6,"line_end":6,"column_start":1,"column_end":110}},{"value":"/ Read __the [GUIDE.md](https://github.com/johannesvollmer/exrs/blob/master/GUIDE.md) for a API introduction__.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":205,"byte_end":318,"line_start":7,"line_end":7,"column_start":1,"column_end":114}},{"value":"/ Check out the [examples](https://github.com/johannesvollmer/exrs/tree/master/examples) for a first impression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":319,"byte_end":433,"line_start":8,"line_end":8,"column_start":1,"column_end":115}},{"value":"warn(rust_2018_idioms, future_incompatible, unused_extern_crates, unused,\nmissing_copy_implementations, missing_debug_implementations, clippy :: all,\nclippy :: restriction, clippy :: pedantic, clippy :: nursery, clippy ::\ncargo,)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":435,"byte_end":706,"line_start":10,"line_end":24,"column_start":1,"column_end":3}},{"value":"deny(unused_variables, unused_assignments, dead_code, unused_must_use,\nmissing_copy_implementations, trivial_numeric_casts, redundant_semicolons)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":708,"byte_end":887,"line_start":26,"line_end":34,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":889,"byte_end":912,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":913,"byte_end":935,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":3297},{"krate":0,"index":3301},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":3304},{"krate":0,"index":3308},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":3311},{"krate":0,"index":3315},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":117},{"krate":0,"index":3318},{"krate":0,"index":3327},{"krate":0,"index":3336},{"krate":0,"index":3345},{"krate":0,"index":3354},{"krate":0,"index":3363},{"krate":0,"index":3372},{"krate":0,"index":3381},{"krate":0,"index":3390},{"krate":0,"index":3399},{"krate":0,"index":118}],"decl_id":null,"docs":" Specialized binary input and output.\n Uses the error handling for this crate.\n","sig":null,"attributes":[{"value":"/ Specialized binary input and output.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":2856,"byte_end":2896,"line_start":2,"line_end":2,"column_start":1,"column_end":41}},{"value":"/ Uses the error handling for this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":2897,"byte_end":2940,"line_start":3,"line_end":3,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":3301,"byte_end":3311,"line_start":20,"line_end":20,"column_start":8,"column_end":18},"name":"skip_bytes","qualname":"::io::skip_bytes","value":"fn skip_bytes<'_, impl Read>(&'_ mut impl Read, usize) -> IoResult<()> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Skip reading uninteresting bytes without allocating.\n","sig":null,"attributes":[{"value":"/ Skip reading uninteresting bytes without allocating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":3227,"byte_end":3283,"line_start":18,"line_end":18,"column_start":1,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":3284,"byte_end":3293,"line_start":19,"line_end":19,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4047,"byte_end":4081,"line_start":43,"line_end":43,"column_start":8,"column_end":42},"name":"attempt_delete_file_on_write_error","qualname":"::io::attempt_delete_file_on_write_error","value":"fn attempt_delete_file_on_write_error<'p,\nimpl FnOnce(LateFile<'p>) -> UnitResult>(&'p Path,\nimpl FnOnce(LateFile<'p>) -> UnitResult) -> UnitResult where\nimpl FnOnce(LateFile<'p>) -> UnitResult: FnOnce(LateFile) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" If an error occurs while writing, attempts to delete the partially written file.\n Creates a file just before the first write operation, not when this function is called.\n","sig":null,"attributes":[{"value":"/ If an error occurs while writing, attempts to delete the partially written file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":3853,"byte_end":3937,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ Creates a file just before the first write operation, not when this function is called.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":3938,"byte_end":4029,"line_start":41,"line_end":41,"column_start":1,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4030,"byte_end":4039,"line_start":42,"line_end":42,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3297},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4463,"byte_end":4471,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"LateFile","qualname":"::io::LateFile","value":"LateFile {  }","parent":null,"children":[{"krate":0,"index":3299},{"krate":0,"index":3300}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4574,"byte_end":4578,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"from","qualname":"<LateFile as std::convert::From>::from","value":"fn from(&'p Path) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4934,"byte_end":4939,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"write","qualname":"<LateFile as std::io::Write>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8]) -> std::io::Result<usize>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4725},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5043,"byte_end":5048,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"flush","qualname":"<LateFile as std::io::Write>::flush","value":"fn flush<'_>(&'_ mut Self) -> std::io::Result<()>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4729},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5218,"byte_end":5222,"line_start":83,"line_end":83,"column_start":8,"column_end":12},"name":"seek","qualname":"<LateFile as std::io::Seek>::seek","value":"fn seek<'_>(&'_ mut Self, SeekFrom) -> std::io::Result<u64>","parent":{"krate":1,"index":4742},"children":[],"decl_id":{"krate":1,"index":4743},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3304},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5399,"byte_end":5407,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"PeekRead","qualname":"::io::PeekRead","value":"PeekRead {  }","parent":null,"children":[{"krate":0,"index":3306},{"krate":0,"index":3307}],"decl_id":null,"docs":" Peek a single byte without consuming it.\n","sig":null,"attributes":[{"value":"/ Peek a single byte without consuming it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5326,"byte_end":5370,"line_start":89,"line_end":89,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5635,"byte_end":5638,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<PeekRead<T>>::new","value":"fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap a reader to make it peekable.\n","sig":null,"attributes":[{"value":"/ Wrap a reader to make it peekable.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5571,"byte_end":5609,"line_start":101,"line_end":101,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5614,"byte_end":5623,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5846,"byte_end":5853,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"peek_u8","qualname":"<PeekRead<T>>::peek_u8","value":"fn peek_u8<'_>(&'_ mut Self) -> &'_ IoResult<u8>","parent":null,"children":[],"decl_id":null,"docs":" Read a single byte and return that without consuming it.\n The next `read` call will include that byte.\n","sig":null,"attributes":[{"value":"/ Read a single byte and return that without consuming it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5707,"byte_end":5767,"line_start":107,"line_end":107,"column_start":5,"column_end":65}},{"value":"/ The next `read` call will include that byte.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5772,"byte_end":5820,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5825,"byte_end":5834,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6267,"byte_end":6277,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"skip_if_eq","qualname":"<PeekRead<T>>::skip_if_eq","value":"fn skip_if_eq<'_>(&'_ mut Self, u8) -> IoResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Skip a single byte if it equals the specified value.\n Returns whether the value was found.\n Consumes the peeked result if an error occurred.\n","sig":null,"attributes":[{"value":"/ Skip a single byte if it equals the specified value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6083,"byte_end":6139,"line_start":115,"line_end":115,"column_start":5,"column_end":61}},{"value":"/ Returns whether the value was found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6144,"byte_end":6184,"line_start":116,"line_end":116,"column_start":5,"column_end":45}},{"value":"/ Consumes the peeked result if an error occurred.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6189,"byte_end":6241,"line_start":117,"line_end":117,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6246,"byte_end":6255,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6865,"byte_end":6869,"line_start":138,"line_end":138,"column_start":8,"column_end":12},"name":"read","qualname":"<PeekRead<T> as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> IoResult<usize>","parent":{"krate":1,"index":4667},"children":[],"decl_id":{"krate":1,"index":4668},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7507,"byte_end":7514,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"skip_to","qualname":"<PeekRead<Tracking<T>>>::skip_to","value":"fn skip_to<'_>(&'_ mut Self, usize) -> std::io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seek this read to the specified byte position.\n Discards any previously peeked value.\n","sig":null,"attributes":[{"value":"/ Seek this read to the specified byte position.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7399,"byte_end":7449,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/ Discards any previously peeked value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7454,"byte_end":7495,"line_start":158,"line_end":158,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7752,"byte_end":7765,"line_start":169,"line_end":169,"column_start":12,"column_end":25},"name":"byte_position","qualname":"<PeekRead<Tracking<T>>>::byte_position","value":"fn byte_position<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Current number of bytes read.\n","sig":null,"attributes":[{"value":"/ Current number of bytes read.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7707,"byte_end":7740,"line_start":168,"line_end":168,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7969,"byte_end":7977,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"Tracking","qualname":"::io::Tracking","value":"Tracking {  }","parent":null,"children":[{"krate":0,"index":3313},{"krate":0,"index":3314}],"decl_id":null,"docs":" Keep track of what byte we are at.\n Used to skip back to a previous place after writing some information.\n","sig":null,"attributes":[{"value":"/ Keep track of what byte we are at.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7828,"byte_end":7866,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/ Used to skip back to a previous place after writing some information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7867,"byte_end":7940,"line_start":175,"line_end":175,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8134,"byte_end":8138,"line_start":186,"line_end":186,"column_start":8,"column_end":12},"name":"read","qualname":"<Tracking<T> as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> std::io::Result<usize>","parent":{"krate":1,"index":4667},"children":[],"decl_id":{"krate":1,"index":4668},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8348,"byte_end":8353,"line_start":194,"line_end":194,"column_start":8,"column_end":13},"name":"write","qualname":"<Tracking<T> as std::io::Write>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8]) -> std::io::Result<usize>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4725},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8519,"byte_end":8524,"line_start":200,"line_end":200,"column_start":8,"column_end":13},"name":"flush","qualname":"<Tracking<T> as std::io::Write>::flush","value":"fn flush<'_>(&'_ mut Self) -> std::io::Result<()>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4729},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8751,"byte_end":8754,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"new","qualname":"<Tracking<T>>::new","value":"fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If `inner` is a reference, if must never be seeked directly,\n but only through this `Tracking` instance.\n","sig":null,"attributes":[{"value":"/ If `inner` is a reference, if must never be seeked directly,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8624,"byte_end":8688,"line_start":207,"line_end":207,"column_start":5,"column_end":69}},{"value":"/ but only through this `Tracking` instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8693,"byte_end":8739,"line_start":208,"line_end":208,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8882,"byte_end":8895,"line_start":214,"line_end":214,"column_start":12,"column_end":25},"name":"byte_position","qualname":"<Tracking<T>>::byte_position","value":"fn byte_position<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Current number of bytes written or read.\n","sig":null,"attributes":[{"value":"/ Current number of bytes written or read.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8826,"byte_end":8870,"line_start":213,"line_end":213,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9122,"byte_end":9134,"line_start":223,"line_end":223,"column_start":12,"column_end":24},"name":"seek_read_to","qualname":"<Tracking<T>>::seek_read_to","value":"fn seek_read_to<'_>(&'_ mut Self, usize) -> std::io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Set the reader to the specified byte position.\n If it is only a couple of bytes, no seek system call is performed.\n","sig":null,"attributes":[{"value":"/ Set the reader to the specified byte position.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8985,"byte_end":9035,"line_start":221,"line_end":221,"column_start":5,"column_end":55}},{"value":"/ If it is only a couple of bytes, no seek system call is performed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9040,"byte_end":9110,"line_start":222,"line_end":222,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9989,"byte_end":10002,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"seek_write_to","qualname":"<Tracking<T>>::seek_write_to","value":"fn seek_write_to<'_>(&'_ mut Self, usize) -> std::io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Move the writing cursor to the specified target byte index.\n If seeking forward, this will write zeroes.\n","sig":null,"attributes":[{"value":"/ Move the writing cursor to the specified target byte index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9862,"byte_end":9925,"line_start":242,"line_end":242,"column_start":5,"column_end":68}},{"value":"/ If seeking forward, this will write zeroes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9930,"byte_end":9977,"line_start":243,"line_end":243,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10609,"byte_end":10613,"line_start":262,"line_end":262,"column_start":11,"column_end":15},"name":"Data","qualname":"::io::Data","value":"Data: Sized + Default + Clone","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116}],"decl_id":null,"docs":" Generic trait that defines common binary operations such as reading and writing for this type.\n","sig":null,"attributes":[{"value":"/ Generic trait that defines common binary operations such as reading and writing for this type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10500,"byte_end":10598,"line_start":261,"line_end":261,"column_start":1,"column_end":99}}]},{"kind":"Const","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10711,"byte_end":10720,"line_start":265,"line_end":265,"column_start":11,"column_end":20},"name":"BYTE_SIZE","qualname":"::io::Data::BYTE_SIZE","value":"usize","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10646,"byte_end":10700,"line_start":264,"line_end":264,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10806,"byte_end":10810,"line_start":268,"line_end":268,"column_start":8,"column_end":12},"name":"read","qualname":"::io::Data::read","value":"fn read<'_, impl Read>(&'_ mut impl Read) -> Result<Self> where\nimpl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Read a value of type `Self`.\n","sig":null,"attributes":[{"value":"/ Read a value of type `Self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10766,"byte_end":10798,"line_start":267,"line_end":267,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11010,"byte_end":11020,"line_start":272,"line_end":272,"column_start":8,"column_end":18},"name":"read_slice","qualname":"::io::Data::read_slice","value":"fn read_slice<'_, '_, impl Read>(&'_ mut impl Read, &'_ mut [Self])\n-> UnitResult where impl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Read as many values of type `Self` as fit into the specified slice.\n If the slice cannot be filled completely, returns `Error::Invalid`.\n","sig":null,"attributes":[{"value":"/ Read as many values of type `Self` as fit into the specified slice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10855,"byte_end":10926,"line_start":270,"line_end":270,"column_start":5,"column_end":76}},{"value":"/ If the slice cannot be filled completely, returns `Error::Invalid`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10931,"byte_end":11002,"line_start":271,"line_end":271,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11423,"byte_end":11431,"line_start":280,"line_end":280,"column_start":8,"column_end":16},"name":"read_vec","qualname":"::io::Data::read_vec","value":"fn read_vec<'_,\nimpl Read>(&'_ mut impl Read, usize, usize, Option<usize>, &'static str)\n-> Result<Vec<Self>> where impl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Read as many values of type `Self` as specified with `data_size`.","sig":null,"attributes":[{"value":"/ Read as many values of type `Self` as specified with `data_size`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11082,"byte_end":11151,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11156,"byte_end":11159,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This method will not allocate more memory than `soft_max` at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11164,"byte_end":11234,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ If `hard_max` is specified, it will never read any more than that.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11239,"byte_end":11309,"line_start":277,"line_end":277,"column_start":5,"column_end":75}},{"value":"/ Returns `Error::Invalid` if reader does not contain the desired number of elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11314,"byte_end":11401,"line_start":278,"line_end":278,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11406,"byte_end":11415,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11750,"byte_end":11755,"line_start":287,"line_end":287,"column_start":8,"column_end":13},"name":"write","qualname":"::io::Data::write","value":"fn write<'_, impl Write>(Self, &'_ mut impl Write) -> UnitResult where\nimpl Write: Write","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Write this value to the writer.\n","sig":null,"attributes":[{"value":"/ Write this value to the writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11707,"byte_end":11742,"line_start":286,"line_end":286,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11863,"byte_end":11874,"line_start":290,"line_end":290,"column_start":8,"column_end":19},"name":"write_slice","qualname":"::io::Data::write_slice","value":"fn write_slice<'_, '_, impl Write>(&'_ mut impl Write, &'_ [Self])\n-> UnitResult where impl Write: Write","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Write all values of that slice to the writer.\n","sig":null,"attributes":[{"value":"/ Write all values of that slice to the writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11806,"byte_end":11855,"line_start":289,"line_end":289,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12302,"byte_end":12315,"line_start":299,"line_end":299,"column_start":8,"column_end":21},"name":"read_into_vec","qualname":"::io::Data::read_into_vec","value":"fn read_into_vec<'_, '_,\nimpl Read>(&'_ mut impl Read, &'_ mut Vec<Self>, usize, usize, Option<usize>,\n&'static str) -> UnitResult where impl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Read as many values of type `Self` as specified with `data_size` into the provided vector.","sig":null,"attributes":[{"value":"/ Read as many values of type `Self` as specified with `data_size` into the provided vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":11936,"byte_end":12030,"line_start":293,"line_end":293,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12035,"byte_end":12038,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method will not allocate more memory than `soft_max` at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12043,"byte_end":12113,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ If `hard_max` is specified, it will never read any more than that.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12118,"byte_end":12188,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/ Returns `Error::Invalid` if reader does not contain the desired number of elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12193,"byte_end":12280,"line_start":297,"line_end":297,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":12285,"byte_end":12294,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13261,"byte_end":13282,"line_start":324,"line_end":324,"column_start":8,"column_end":29},"name":"write_i32_sized_slice","qualname":"::io::Data::write_i32_sized_slice","value":"fn write_i32_sized_slice<W, '_, '_>(&'_ mut W, &'_ [Self]) -> UnitResult where\nW: Write","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Write the length of the slice and then its contents.\n","sig":null,"attributes":[{"value":"/ Write the length of the slice and then its contents.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13183,"byte_end":13239,"line_start":322,"line_end":322,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13244,"byte_end":13253,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13793,"byte_end":13811,"line_start":335,"line_end":335,"column_start":8,"column_end":26},"name":"read_i32_sized_vec","qualname":"::io::Data::read_i32_sized_vec","value":"fn read_i32_sized_vec<'_,\nimpl Read>(&'_ mut impl Read, usize, Option<usize>, &'static str)\n-> Result<Vec<Self>> where impl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Read the desired element count and then read that many items into a vector.","sig":null,"attributes":[{"value":"/ Read the desired element count and then read that many items into a vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13442,"byte_end":13521,"line_start":329,"line_end":329,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13526,"byte_end":13529,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This method will not allocate more memory than `soft_max` at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13534,"byte_end":13604,"line_start":331,"line_end":331,"column_start":5,"column_end":75}},{"value":"/ If `hard_max` is specified, it will never read any more than that.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13609,"byte_end":13679,"line_start":332,"line_end":332,"column_start":5,"column_end":75}},{"value":"/ Returns `Error::Invalid` if reader does not contain the desired number of elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13684,"byte_end":13771,"line_start":333,"line_end":333,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":13776,"byte_end":13785,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":14109,"byte_end":14119,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"fill_slice","qualname":"::io::Data::fill_slice","value":"fn fill_slice<'_>(Self, &'_ mut [Self]) where Self: Copy","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Fill the slice with this value.\n","sig":null,"attributes":[{"value":"/ Fill the slice with this value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":14052,"byte_end":14087,"line_start":340,"line_end":340,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":14092,"byte_end":14101,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15548,"byte_end":15552,"line_start":394,"line_end":394,"column_start":8,"column_end":12},"name":"read","qualname":"<f16 as io::Data>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read) -> Result<Self> where\nimpl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":{"krate":0,"index":100},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15531,"byte_end":15540,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15665,"byte_end":15675,"line_start":399,"line_end":399,"column_start":8,"column_end":18},"name":"read_slice","qualname":"<f16 as io::Data>::read_slice","value":"fn read_slice<'_, '_, impl Read>(&'_ mut impl Read, &'_ mut [Self])\n-> Result<()> where impl Read: Read","parent":{"krate":0,"index":98},"children":[],"decl_id":{"krate":0,"index":102},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15648,"byte_end":15657,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15847,"byte_end":15852,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"write","qualname":"<f16 as io::Data>::write","value":"fn write<'_, impl Write>(Self, &'_ mut impl Write) -> Result<()> where\nimpl Write: Write","parent":{"krate":0,"index":98},"children":[],"decl_id":{"krate":0,"index":106},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15830,"byte_end":15839,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15963,"byte_end":15974,"line_start":410,"line_end":410,"column_start":8,"column_end":19},"name":"write_slice","qualname":"<f16 as io::Data>::write_slice","value":"fn write_slice<'_, '_, impl Write>(&'_ mut impl Write, &'_ [Self])\n-> Result<()> where impl Write: Write","parent":{"krate":0,"index":98},"children":[],"decl_id":{"krate":0,"index":108},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15946,"byte_end":15955,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":3408},{"krate":0,"index":3413},{"krate":0,"index":3416},{"krate":0,"index":3418},{"krate":0,"index":3421},{"krate":0,"index":3423},{"krate":0,"index":3427},{"krate":0,"index":3429},{"krate":0,"index":3432},{"krate":0,"index":3436},{"krate":0,"index":154},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":3439},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3455},{"krate":0,"index":198}],"decl_id":null,"docs":" Simple math utilities.\n","sig":null,"attributes":[{"value":"/ Simple math utilities.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":17608,"byte_end":17634,"line_start":5,"line_end":5,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":17998,"byte_end":18002,"line_start":17,"line_end":17,"column_start":12,"column_end":16},"name":"Vec2","qualname":"::math::Vec2","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple two-dimensional vector of any numerical type.\n Supports only few mathematical operations\n as this is used mainly as data struct.\n","sig":null,"attributes":[{"value":"/ Simple two-dimensional vector of any numerical type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":17781,"byte_end":17837,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"/ Supports only few mathematical operations","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":17838,"byte_end":17883,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/ as this is used mainly as data struct.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":17884,"byte_end":17926,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":3411},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18007,"byte_end":18012,"line_start":17,"line_end":17,"column_start":21,"column_end":26},"name":"0","qualname":"::math::Vec2::0","value":"T","parent":{"krate":0,"index":3408},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3412},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18014,"byte_end":18019,"line_start":17,"line_end":17,"column_start":28,"column_end":33},"name":"1","qualname":"::math::Vec2::1","value":"T","parent":{"krate":0,"index":3408},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18120,"byte_end":18123,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"max","qualname":"<Vec2<T>>::max","value":"fn max(Self, Self) -> Self where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with the maximum of either coordinates.\n","sig":null,"attributes":[{"value":"/ Returns the vector with the maximum of either coordinates.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18046,"byte_end":18108,"line_start":21,"line_end":21,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18306,"byte_end":18309,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"min","qualname":"<Vec2<T>>::min","value":"fn min(Self, Self) -> Self where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with the minimum of either coordinates.\n","sig":null,"attributes":[{"value":"/ Returns the vector with the minimum of either coordinates.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18232,"byte_end":18294,"line_start":26,"line_end":26,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18557,"byte_end":18565,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Vec2<T>>::try_from","value":"fn try_from<S>(Vec2<S>) -> std::result::Result<Self, T::Error> where\nT: TryFrom<S>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert all components of this vector to a new type,\n yielding either a vector of that new type, or an error.\n","sig":null,"attributes":[{"value":"/ Try to convert all components of this vector to a new type,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18418,"byte_end":18481,"line_start":31,"line_end":31,"column_start":5,"column_end":68}},{"value":"/ yielding either a vector of that new type, or an error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18486,"byte_end":18545,"line_start":32,"line_end":32,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18927,"byte_end":18931,"line_start":43,"line_end":43,"column_start":22,"column_end":26},"name":"area","qualname":"<Vec2<T>>::area","value":"fn area(Self) -> T where T: std::ops::Mul<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Seeing this vector as a dimension or size (width and height),\n this returns the area that this dimensions contains (`width * height`).\n","sig":null,"attributes":[{"value":"/ Seeing this vector as a dimension or size (width and height),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18760,"byte_end":18825,"line_start":41,"line_end":41,"column_start":5,"column_end":70}},{"value":"/ this returns the area that this dimensions contains (`width * height`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18830,"byte_end":18905,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18910,"byte_end":18919,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19082,"byte_end":19083,"line_start":48,"line_end":48,"column_start":22,"column_end":23},"name":"x","qualname":"<Vec2<T>>::x","value":"fn x(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The first component of this 2D vector.\n","sig":null,"attributes":[{"value":"/ The first component of this 2D vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19018,"byte_end":19060,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19065,"byte_end":19074,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19176,"byte_end":19177,"line_start":51,"line_end":51,"column_start":22,"column_end":23},"name":"y","qualname":"<Vec2<T>>::y","value":"fn y(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The second component of this 2D vector.\n","sig":null,"attributes":[{"value":"/ The second component of this 2D vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19111,"byte_end":19154,"line_start":50,"line_end":50,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19159,"byte_end":19168,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19269,"byte_end":19274,"line_start":54,"line_end":54,"column_start":22,"column_end":27},"name":"width","qualname":"<Vec2<T>>::width","value":"fn width(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The first component of this 2D vector.\n","sig":null,"attributes":[{"value":"/ The first component of this 2D vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19205,"byte_end":19247,"line_start":53,"line_end":53,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19252,"byte_end":19261,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19367,"byte_end":19373,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"name":"height","qualname":"<Vec2<T>>::height","value":"fn height(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" The second component of this 2D vector.\n","sig":null,"attributes":[{"value":"/ The second component of this 2D vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19302,"byte_end":19345,"line_start":56,"line_end":56,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19350,"byte_end":19359,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19706,"byte_end":19725,"line_start":63,"line_end":63,"column_start":22,"column_end":41},"name":"flat_index_for_size","qualname":"<Vec2<T>>::flat_index_for_size","value":"fn flat_index_for_size(Self, Vec2<T>) -> T where T: Copy + Debug + Ord +\nMul<Output = T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert this two-dimensional coordinate to an index suited for one-dimensional flattened image arrays.\n Works for images that store the pixels row by row, one after another, in a single array.\n In debug mode, panics for an index out of bounds.\n","sig":null,"attributes":[{"value":"/ Convert this two-dimensional coordinate to an index suited for one-dimensional flattened image arrays.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19423,"byte_end":19529,"line_start":60,"line_end":60,"column_start":5,"column_end":111}},{"value":"/ Works for images that store the pixels row by row, one after another, in a single array.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19534,"byte_end":19626,"line_start":61,"line_end":61,"column_start":5,"column_end":97}},{"value":"/ In debug mode, panics for an index out of bounds.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19631,"byte_end":19684,"line_start":62,"line_end":62,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":19689,"byte_end":19698,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20212,"byte_end":20220,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vec2<i32>>::to_usize","value":"fn to_usize(Self, &'static str) -> Result<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert to [`Vec2<usize>`], returning an error on negative numbers.\n","sig":null,"attributes":[{"value":"/ Try to convert to [`Vec2<usize>`], returning an error on negative numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20122,"byte_end":20200,"line_start":80,"line_end":80,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20489,"byte_end":20495,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vec2<usize>>::to_i32","value":"fn to_i32(Self) -> Vec2<i32>","parent":null,"children":[],"decl_id":null,"docs":" Panics for too large values\n","sig":null,"attributes":[{"value":"/ Panics for too large values","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20446,"byte_end":20477,"line_start":91,"line_end":91,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20810,"byte_end":20813,"line_start":103,"line_end":103,"column_start":8,"column_end":11},"name":"add","qualname":"<Vec2<T> as std::ops::Add>::add","value":"fn add(Self, Vec2<T>) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21017,"byte_end":21020,"line_start":110,"line_end":110,"column_start":8,"column_end":11},"name":"sub","qualname":"<Vec2<T> as std::ops::Sub>::sub","value":"fn sub(Self, Vec2<T>) -> Self::Output","parent":{"krate":2,"index":3341},"children":[],"decl_id":{"krate":2,"index":3344},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21224,"byte_end":21227,"line_start":117,"line_end":117,"column_start":8,"column_end":11},"name":"div","qualname":"<Vec2<T> as std::ops::Div>::div","value":"fn div(Self, Vec2<T>) -> Self::Output","parent":{"krate":2,"index":3351},"children":[],"decl_id":{"krate":2,"index":3354},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21431,"byte_end":21434,"line_start":124,"line_end":124,"column_start":8,"column_end":11},"name":"mul","qualname":"<Vec2<T> as std::ops::Mul>::mul","value":"fn mul(Self, Vec2<T>) -> Self::Output","parent":{"krate":2,"index":3346},"children":[],"decl_id":{"krate":2,"index":3349},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21636,"byte_end":21639,"line_start":131,"line_end":131,"column_start":8,"column_end":11},"name":"neg","qualname":"<Vec2<T> as std::ops::Neg>::neg","value":"fn neg(Self) -> Self::Output","parent":{"krate":2,"index":3363},"children":[],"decl_id":{"krate":2,"index":3365},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21734,"byte_end":21738,"line_start":135,"line_end":135,"column_start":8,"column_end":12},"name":"from","qualname":"<Vec2<T> as std::convert::From>::from","value":"fn from((T, T)) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21823,"byte_end":21827,"line_start":139,"line_end":139,"column_start":8,"column_end":12},"name":"from","qualname":"<(T, T) as std::convert::From>::from","value":"fn from(Vec2<T>) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3440},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22832,"byte_end":22836,"line_start":183,"line_end":183,"column_start":5,"column_end":9},"name":"Down","qualname":"::math::RoundingMode::Down","value":"RoundingMode::Down","parent":{"krate":0,"index":3439},"children":[],"decl_id":null,"docs":" Round down.\n","sig":null,"attributes":[{"value":"/ Round down.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22812,"byte_end":22827,"line_start":182,"line_end":182,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3442},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22861,"byte_end":22863,"line_start":186,"line_end":186,"column_start":5,"column_end":7},"name":"Up","qualname":"::math::RoundingMode::Up","value":"RoundingMode::Up","parent":{"krate":0,"index":3439},"children":[],"decl_id":null,"docs":" Round up.\n","sig":null,"attributes":[{"value":"/ Round up.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22843,"byte_end":22856,"line_start":185,"line_end":185,"column_start":5,"column_end":18}}]},{"kind":"Enum","id":{"krate":0,"index":3439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22792,"byte_end":22804,"line_start":180,"line_end":180,"column_start":10,"column_end":22},"name":"RoundingMode","qualname":"::math::RoundingMode","value":"enum RoundingMode { Down, Up, }","parent":null,"children":[{"krate":0,"index":3440},{"krate":0,"index":3442}],"decl_id":null,"docs":" Round up or down in specific calculations.\n","sig":null,"attributes":[{"value":"/ Round up or down in specific calculations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22685,"byte_end":22731,"line_start":178,"line_end":178,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"compression","qualname":"::compression","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":212},{"krate":0,"index":228},{"krate":0,"index":386},{"krate":0,"index":401},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":3525},{"krate":0,"index":3548},{"krate":0,"index":3550},{"krate":0,"index":3552},{"krate":0,"index":3553},{"krate":0,"index":3554},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"decl_id":null,"docs":" Contains the compression attribute definition\n and methods to compress and decompress data.\n","sig":null,"attributes":[{"value":"/ Contains the compression attribute definition","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":23690,"byte_end":23739,"line_start":2,"line_end":2,"column_start":1,"column_end":50}},{"value":"/ and methods to compress and decompress data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":23740,"byte_end":23788,"line_start":3,"line_end":3,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24075,"byte_end":24082,"line_start":21,"line_end":21,"column_start":10,"column_end":17},"name":"ByteVec","qualname":"::compression::ByteVec","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" A byte vector.\n","sig":null,"attributes":[{"value":"/ A byte vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24047,"byte_end":24065,"line_start":20,"line_end":20,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24122,"byte_end":24127,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Bytes","qualname":"::compression::Bytes","value":"&'s [u8]","parent":null,"children":[],"decl_id":null,"docs":" A byte slice.\n","sig":null,"attributes":[{"value":"/ A byte slice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24095,"byte_end":24112,"line_start":23,"line_end":23,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24684,"byte_end":24696,"line_start":36,"line_end":36,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::compression::Compression::Uncompressed","value":"Compression::Uncompressed","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Store uncompressed values.\n Produces large files that can be read and written very quickly.\n Consider using RLE instead, as it provides some compression with almost equivalent speed.\n","sig":null,"attributes":[{"value":"/ Store uncompressed values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24479,"byte_end":24509,"line_start":33,"line_end":33,"column_start":5,"column_end":35}},{"value":"/ Produces large files that can be read and written very quickly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24514,"byte_end":24581,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/ Consider using RLE instead, as it provides some compression with almost equivalent speed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24586,"byte_end":24679,"line_start":35,"line_end":35,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3528},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25033,"byte_end":25036,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"RLE","qualname":"::compression::Compression::RLE","value":"Compression::RLE","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Produces slightly smaller files\n that can still be read and written rather quickly.\n The compressed file size is usually between 60 and 75 percent of the uncompressed size.\n Works best for images with large flat areas, such as masks and abstract graphics.\n This compression method is lossless.\n","sig":null,"attributes":[{"value":"/ Produces slightly smaller files","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24703,"byte_end":24738,"line_start":38,"line_end":38,"column_start":5,"column_end":40}},{"value":"/ that can still be read and written rather quickly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24743,"byte_end":24797,"line_start":39,"line_end":39,"column_start":5,"column_end":59}},{"value":"/ The compressed file size is usually between 60 and 75 percent of the uncompressed size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24802,"byte_end":24893,"line_start":40,"line_end":40,"column_start":5,"column_end":96}},{"value":"/ Works best for images with large flat areas, such as masks and abstract graphics.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24898,"byte_end":24983,"line_start":41,"line_end":41,"column_start":5,"column_end":90}},{"value":"/ This compression method is lossless.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24988,"byte_end":25028,"line_start":42,"line_end":42,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3530},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25267,"byte_end":25271,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"ZIP1","qualname":"::compression::Compression::ZIP1","value":"Compression::ZIP1","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Uses ZIP compression to compress each line. Slowly produces small images\n which can be read with moderate speed. This compression method is lossless.\n Might be slightly faster but larger than `ZIP16´.\n","sig":null,"attributes":[{"value":"/ Uses ZIP compression to compress each line. Slowly produces small images","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25043,"byte_end":25119,"line_start":45,"line_end":45,"column_start":5,"column_end":81}},{"value":"/ which can be read with moderate speed. This compression method is lossless.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25124,"byte_end":25203,"line_start":46,"line_end":46,"column_start":5,"column_end":84}},{"value":"/ Might be slightly faster but larger than `ZIP16´.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25208,"byte_end":25262,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3532},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25622,"byte_end":25627,"line_start":53,"line_end":53,"column_start":5,"column_end":10},"name":"ZIP16","qualname":"::compression::Compression::ZIP16","value":"Compression::ZIP16","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Uses ZIP compression to compress blocks of 16 lines. Slowly produces small images\n which can be read with moderate speed. This compression method is lossless.\n Might be slightly slower but smaller than `ZIP1´.\n","sig":null,"attributes":[{"value":"/ Uses ZIP compression to compress blocks of 16 lines. Slowly produces small images","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25389,"byte_end":25474,"line_start":50,"line_end":50,"column_start":5,"column_end":90}},{"value":"/ which can be read with moderate speed. This compression method is lossless.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25479,"byte_end":25558,"line_start":51,"line_end":51,"column_start":5,"column_end":84}},{"value":"/ Might be slightly slower but smaller than `ZIP1´.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25563,"byte_end":25617,"line_start":52,"line_end":52,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3534},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26645,"byte_end":26648,"line_start":68,"line_end":68,"column_start":5,"column_end":8},"name":"PIZ","qualname":"::compression::Compression::PIZ","value":"Compression::PIZ","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" PIZ compression works well for noisy and natural images. Works better with larger tiles.\n Only supported for flat images, but not for deep data.\n This compression method is lossless.\n","sig":null,"attributes":[{"value":"/ PIZ compression works well for noisy and natural images. Works better with larger tiles.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25661,"byte_end":25753,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ Only supported for flat images, but not for deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25758,"byte_end":25816,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ This compression method is lossless.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":25821,"byte_end":25861,"line_start":57,"line_end":57,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3536},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27701,"byte_end":27706,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"PXR24","qualname":"::compression::Compression::PXR24","value":"Compression::PXR24","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" Like `ZIP1`, but reduces precision of `f32` images to `f24`.\n Therefore, this is lossless compression for `f16` and `u32` data, lossy compression for `f32` data.\n This compression method works well for depth\n buffers and similar images, where the possible range of values is very large, but\n where full 32-bit floating-point accuracy is not necessary. Rounding improves\n compression significantly by eliminating the pixels' 8 least significant bits, which\n tend to be very noisy, and therefore difficult to compress.\n This produces really small image files. Only supported for flat images, not for deep data.\n","sig":null,"attributes":[{"value":"/ Like `ZIP1`, but reduces precision of `f32` images to `f24`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26655,"byte_end":26719,"line_start":70,"line_end":70,"column_start":5,"column_end":69}},{"value":"/ Therefore, this is lossless compression for `f16` and `u32` data, lossy compression for `f32` data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26724,"byte_end":26827,"line_start":71,"line_end":71,"column_start":5,"column_end":108}},{"value":"/ This compression method works well for depth","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26832,"byte_end":26880,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/ buffers and similar images, where the possible range of values is very large, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26885,"byte_end":26970,"line_start":73,"line_end":73,"column_start":5,"column_end":90}},{"value":"/ where full 32-bit floating-point accuracy is not necessary. Rounding improves","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":26975,"byte_end":27056,"line_start":74,"line_end":74,"column_start":5,"column_end":86}},{"value":"/ compression significantly by eliminating the pixels' 8 least significant bits, which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27061,"byte_end":27149,"line_start":75,"line_end":75,"column_start":5,"column_end":93}},{"value":"/ tend to be very noisy, and therefore difficult to compress.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27154,"byte_end":27217,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ This produces really small image files. Only supported for flat images, not for deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27222,"byte_end":27316,"line_start":77,"line_end":77,"column_start":5,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3538},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29233,"byte_end":29236,"line_start":107,"line_end":107,"column_start":5,"column_end":8},"name":"B44","qualname":"::compression::Compression::B44","value":"Compression::B44","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" This is a lossy compression method for f16 images.\n It's the predecessor of the `B44A` compression,\n which has improved compression rates for uniformly colored areas.\n You should probably use `B44A` instead of the plain `B44`.","sig":null,"attributes":[{"value":"/ This is a lossy compression method for f16 images.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27752,"byte_end":27806,"line_start":85,"line_end":85,"column_start":5,"column_end":59}},{"value":"/ It's the predecessor of the `B44A` compression,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27811,"byte_end":27862,"line_start":86,"line_end":86,"column_start":5,"column_end":56}},{"value":"/ which has improved compression rates for uniformly colored areas.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27867,"byte_end":27936,"line_start":87,"line_end":87,"column_start":5,"column_end":74}},{"value":"/ You should probably use `B44A` instead of the plain `B44`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":27941,"byte_end":28003,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":28008,"byte_end":28011,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Only supported for flat images, not for deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":28016,"byte_end":28070,"line_start":90,"line_end":90,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3540},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29994,"byte_end":29998,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"B44A","qualname":"::compression::Compression::B44A","value":"Compression::B44A","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" This is a lossy compression method for f16 images.\n All f32 and u32 channels will be stored without compression.\n All the f16 pixels are divided into 4x4 blocks.\n Each block is then compressed as a whole.","sig":null,"attributes":[{"value":"/ This is a lossy compression method for f16 images.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29288,"byte_end":29342,"line_start":109,"line_end":109,"column_start":5,"column_end":59}},{"value":"/ All f32 and u32 channels will be stored without compression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29347,"byte_end":29411,"line_start":110,"line_end":110,"column_start":5,"column_end":69}},{"value":"/ All the f16 pixels are divided into 4x4 blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29416,"byte_end":29467,"line_start":111,"line_end":111,"column_start":5,"column_end":56}},{"value":"/ Each block is then compressed as a whole.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29472,"byte_end":29517,"line_start":112,"line_end":112,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29522,"byte_end":29525,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The 32 bytes of a block will require only ~14 bytes after compression,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29530,"byte_end":29604,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/ independent of the actual pixel contents. With chroma subsampling,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29609,"byte_end":29679,"line_start":115,"line_end":115,"column_start":5,"column_end":75}},{"value":"/ a block will be compressed to ~7 bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29684,"byte_end":29727,"line_start":116,"line_end":116,"column_start":5,"column_end":48}},{"value":"/ Uniformly colored blocks will be compressed to ~3 bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29732,"byte_end":29792,"line_start":117,"line_end":117,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29797,"byte_end":29800,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The 512 bytes of an f32 block will not be compressed at all.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29805,"byte_end":29869,"line_start":119,"line_end":119,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29874,"byte_end":29877,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Should be fast enough for realtime playback.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29882,"byte_end":29930,"line_start":121,"line_end":121,"column_start":5,"column_end":53}},{"value":"/ Only supported for flat images, not for deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":29935,"byte_end":29989,"line_start":122,"line_end":122,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3542},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30223,"byte_end":30227,"line_start":128,"line_end":128,"column_start":5,"column_end":9},"name":"DWAA","qualname":"::compression::Compression::DWAA","value":"Compression::DWAA(Option<f32>)","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" __This lossy compression is not yet supported by this implementation.__\n","sig":null,"attributes":[{"value":"/ __This lossy compression is not yet supported by this implementation.__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30031,"byte_end":30106,"line_start":125,"line_end":125,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":3544},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30228,"byte_end":30239,"line_start":128,"line_end":128,"column_start":10,"column_end":21},"name":"0","qualname":"::compression::Compression::DWAA::0","value":"std::option::Option<f32>","parent":{"krate":0,"index":3542},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3545},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30600,"byte_end":30604,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"DWAB","qualname":"::compression::Compression::DWAB","value":"Compression::DWAB(Option<f32>)","parent":{"krate":0,"index":3525},"children":[],"decl_id":null,"docs":" __This lossy compression is not yet supported by this implementation.__\n","sig":null,"attributes":[{"value":"/ __This lossy compression is not yet supported by this implementation.__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30353,"byte_end":30428,"line_start":130,"line_end":130,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":3547},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30605,"byte_end":30616,"line_start":135,"line_end":135,"column_start":10,"column_end":21},"name":"0","qualname":"::compression::Compression::DWAB::0","value":"std::option::Option<f32>","parent":{"krate":0,"index":3545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3525},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24460,"byte_end":24471,"line_start":31,"line_end":31,"column_start":10,"column_end":21},"name":"Compression","qualname":"::compression::Compression","value":"enum Compression {\n    Uncompressed,\n    RLE,\n    ZIP1,\n    ZIP16,\n    PIZ,\n    PXR24,\n    B44,\n    B44A,\n    DWAA(Option<f32>),\n    DWAB(Option<f32>),\n}","parent":null,"children":[{"krate":0,"index":3526},{"krate":0,"index":3528},{"krate":0,"index":3530},{"krate":0,"index":3532},{"krate":0,"index":3534},{"krate":0,"index":3536},{"krate":0,"index":3538},{"krate":0,"index":3540},{"krate":0,"index":3542},{"krate":0,"index":3545}],"decl_id":null,"docs":" Specifies which compression method to use.\n Use uncompressed data for fastest loading and writing speeds.\n Use RLE compression for fast loading and writing with slight memory savings.\n Use ZIP compression for slow processing with large memory savings.\n","sig":null,"attributes":[{"value":"/ Specifies which compression method to use.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24145,"byte_end":24191,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/ Use uncompressed data for fastest loading and writing speeds.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24192,"byte_end":24257,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/ Use RLE compression for fast loading and writing with slight memory savings.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24258,"byte_end":24338,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ Use ZIP compression for slow processing with large memory savings.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":24339,"byte_end":24409,"line_start":29,"line_end":29,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30739,"byte_end":30742,"line_start":139,"line_end":139,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Compression as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":10305},"children":[],"decl_id":{"krate":2,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":31396,"byte_end":31418,"line_start":160,"line_end":160,"column_start":12,"column_end":34},"name":"compress_image_section","qualname":"<Compression>::compress_image_section","value":"fn compress_image_section<'_>(Self, &'_ Header, ByteVec, IntegerBounds)\n-> Result<ByteVec>","parent":null,"children":[],"decl_id":null,"docs":" Compress the image section of bytes.\n","sig":null,"attributes":[{"value":"/ Compress the image section of bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":31344,"byte_end":31384,"line_start":159,"line_end":159,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":33502,"byte_end":33526,"line_start":194,"line_end":194,"column_start":12,"column_end":36},"name":"decompress_image_section","qualname":"<Compression>::decompress_image_section","value":"fn decompress_image_section<'_>(Self, &'_ Header, ByteVec, IntegerBounds,\nbool) -> Result<ByteVec>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the image section of bytes.\n","sig":null,"attributes":[{"value":"/ Decompress the image section of bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":33448,"byte_end":33490,"line_start":193,"line_end":193,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36314,"byte_end":36334,"line_start":243,"line_end":243,"column_start":12,"column_end":32},"name":"scan_lines_per_block","qualname":"<Compression>::scan_lines_per_block","value":"fn scan_lines_per_block(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" For scan line images and deep scan line images, one or more scan lines may be\n stored together as a scan line block. The number of scan lines per block\n depends on how the pixel data are compressed.\n","sig":null,"attributes":[{"value":"/ For scan line images and deep scan line images, one or more scan lines may be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36086,"byte_end":36167,"line_start":240,"line_end":240,"column_start":5,"column_end":86}},{"value":"/ stored together as a scan line block. The number of scan lines per block","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36172,"byte_end":36248,"line_start":241,"line_end":241,"column_start":5,"column_end":81}},{"value":"/ depends on how the pixel data are compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36253,"byte_end":36302,"line_start":242,"line_end":242,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36706,"byte_end":36724,"line_start":254,"line_end":254,"column_start":12,"column_end":30},"name":"supports_deep_data","qualname":"<Compression>::supports_deep_data","value":"fn supports_deep_data(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Deep data can only be compressed using RLE or ZIP compression.\n","sig":null,"attributes":[{"value":"/ Deep data can only be compressed using RLE or ZIP compression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36628,"byte_end":36694,"line_start":253,"line_end":253,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37050,"byte_end":37065,"line_start":264,"line_end":264,"column_start":12,"column_end":27},"name":"is_lossless_for","qualname":"<Compression>::is_lossless_for","value":"fn is_lossless_for(Self, SampleType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Most compression methods will reconstruct the exact pixel bytes,\n but some might throw away unimportant data for specific types of samples.\n","sig":null,"attributes":[{"value":"/ Most compression methods will reconstruct the exact pixel bytes,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36888,"byte_end":36956,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/ but some might throw away unimportant data for specific types of samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":36961,"byte_end":37038,"line_start":263,"line_end":263,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37631,"byte_end":37645,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"may_loose_data","qualname":"<Compression>::may_loose_data","value":"fn may_loose_data(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Most compression methods will reconstruct the exact pixel bytes,\n but some might throw away unimportant data in some cases.\n","sig":null,"attributes":[{"value":"/ Most compression methods will reconstruct the exact pixel bytes,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37485,"byte_end":37553,"line_start":274,"line_end":274,"column_start":5,"column_end":73}},{"value":"/ but some might throw away unimportant data in some cases.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37558,"byte_end":37619,"line_start":275,"line_end":275,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37989,"byte_end":38001,"line_start":286,"line_end":286,"column_start":12,"column_end":24},"name":"supports_nan","qualname":"<Compression>::supports_nan","value":"fn supports_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Most compression methods will reconstruct the exact pixel bytes,\n but some might replace NaN with zeroes.\n","sig":null,"attributes":[{"value":"/ Most compression methods will reconstruct the exact pixel bytes,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37861,"byte_end":37929,"line_start":284,"line_end":284,"column_start":5,"column_end":73}},{"value":"/ but some might replace NaN with zeroes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":37934,"byte_end":37977,"line_start":285,"line_end":285,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"meta","qualname":"::meta","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":836},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":4083},{"krate":0,"index":4086},{"krate":0,"index":4088},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":4094},{"krate":0,"index":4100},{"krate":0,"index":4102},{"krate":0,"index":4103},{"krate":0,"index":4104},{"krate":0,"index":4106},{"krate":0,"index":4107},{"krate":0,"index":4110},{"krate":0,"index":4112},{"krate":0,"index":4115},{"krate":0,"index":4118},{"krate":0,"index":4119},{"krate":0,"index":4121},{"krate":0,"index":4123},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4129},{"krate":0,"index":4130},{"krate":0,"index":4133},{"krate":0,"index":4139},{"krate":0,"index":4140},{"krate":0,"index":4142},{"krate":0,"index":4144},{"krate":0,"index":4145},{"krate":0,"index":4148},{"krate":0,"index":4149},{"krate":0,"index":4151},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":972},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1001},{"krate":0,"index":1036}],"decl_id":null,"docs":" Describes all meta data possible in an exr file.\n Contains functionality to read and write meta data from bytes.\n Browse the `exr::image` module to get started with the high-level interface.\n","sig":null,"attributes":[{"value":"/ Describes all meta data possible in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249341,"byte_end":1249393,"line_start":2,"line_end":2,"column_start":1,"column_end":53}},{"value":"/ Contains functionality to read and write meta data from bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249394,"byte_end":1249460,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ Browse the `exr::image` module to get started with the high-level interface.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249461,"byte_end":1249541,"line_start":4,"line_end":4,"column_start":1,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"attribute","qualname":"::meta::attribute","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":3557},{"krate":0,"index":3633},{"krate":0,"index":3635},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3641},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3649},{"krate":0,"index":3651},{"krate":0,"index":3653},{"krate":0,"index":3655},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3670},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3679},{"krate":0,"index":3680},{"krate":0,"index":3683},{"krate":0,"index":3686},{"krate":0,"index":3688},{"krate":0,"index":3697},{"krate":0,"index":3699},{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3705},{"krate":0,"index":3706},{"krate":0,"index":3708},{"krate":0,"index":538},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":3711},{"krate":0,"index":3714},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3719},{"krate":0,"index":3720},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3726},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3734},{"krate":0,"index":3736},{"krate":0,"index":3737},{"krate":0,"index":3739},{"krate":0,"index":3740},{"krate":0,"index":3743},{"krate":0,"index":3748},{"krate":0,"index":3750},{"krate":0,"index":3752},{"krate":0,"index":3753},{"krate":0,"index":3756},{"krate":0,"index":3757},{"krate":0,"index":3760},{"krate":0,"index":3763},{"krate":0,"index":3768},{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":3773},{"krate":0,"index":3775},{"krate":0,"index":3776},{"krate":0,"index":3779},{"krate":0,"index":3782},{"krate":0,"index":3789},{"krate":0,"index":3791},{"krate":0,"index":3793},{"krate":0,"index":3794},{"krate":0,"index":3796},{"krate":0,"index":3797},{"krate":0,"index":3799},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3808},{"krate":0,"index":3810},{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3817},{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3828},{"krate":0,"index":3830},{"krate":0,"index":3831},{"krate":0,"index":3833},{"krate":0,"index":3836},{"krate":0,"index":3844},{"krate":0,"index":3846},{"krate":0,"index":3848},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3856},{"krate":0,"index":3859},{"krate":0,"index":3866},{"krate":0,"index":3868},{"krate":0,"index":3870},{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3877},{"krate":0,"index":3880},{"krate":0,"index":3883},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3888},{"krate":0,"index":3889},{"krate":0,"index":3892},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3900},{"krate":0,"index":3901},{"krate":0,"index":3902},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3908},{"krate":0,"index":3911},{"krate":0,"index":3918},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3929},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":653},{"krate":0,"index":663},{"krate":0,"index":670},{"krate":0,"index":688},{"krate":0,"index":694},{"krate":0,"index":701},{"krate":0,"index":716},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":748},{"krate":0,"index":754},{"krate":0,"index":762},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":784},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":834}],"decl_id":null,"docs":" Contains all meta data attributes.\n Each layer can have any number of [`Attribute`]s, including custom attributes.\n","sig":null,"attributes":[{"value":"/ Contains all meta data attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282385,"byte_end":1282423,"line_start":2,"line_end":2,"column_start":1,"column_end":39}},{"value":"/ Each layer can have any number of [`Attribute`]s, including custom attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282424,"byte_end":1282506,"line_start":3,"line_end":3,"column_start":1,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3558},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282718,"byte_end":1282729,"line_start":14,"line_end":14,"column_start":5,"column_end":16},"name":"ChannelList","qualname":"::meta::attribute::AttributeValue::ChannelList","value":"AttributeValue::ChannelList(ChannelList)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Channel meta data.\n","sig":null,"attributes":[{"value":"/ Channel meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282691,"byte_end":1282713,"line_start":13,"line_end":13,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":3560},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282730,"byte_end":1282741,"line_start":14,"line_end":14,"column_start":17,"column_end":28},"name":"0","qualname":"::meta::attribute::AttributeValue::ChannelList::0","value":"meta::attribute::ChannelList","parent":{"krate":0,"index":3558},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3561},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282781,"byte_end":1282795,"line_start":17,"line_end":17,"column_start":5,"column_end":19},"name":"Chromaticities","qualname":"::meta::attribute::AttributeValue::Chromaticities","value":"AttributeValue::Chromaticities(Chromaticities)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Color space definition.\n","sig":null,"attributes":[{"value":"/ Color space definition.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282749,"byte_end":1282776,"line_start":16,"line_end":16,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3563},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282796,"byte_end":1282810,"line_start":17,"line_end":17,"column_start":20,"column_end":34},"name":"0","qualname":"::meta::attribute::AttributeValue::Chromaticities::0","value":"meta::attribute::Chromaticities","parent":{"krate":0,"index":3561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3564},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282860,"byte_end":1282871,"line_start":20,"line_end":20,"column_start":5,"column_end":16},"name":"Compression","qualname":"::meta::attribute::AttributeValue::Compression","value":"AttributeValue::Compression(Compression)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Compression method of this layer.\n","sig":null,"attributes":[{"value":"/ Compression method of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282818,"byte_end":1282855,"line_start":19,"line_end":19,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":3566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282872,"byte_end":1282883,"line_start":20,"line_end":20,"column_start":17,"column_end":28},"name":"0","qualname":"::meta::attribute::AttributeValue::Compression::0","value":"compression::Compression","parent":{"krate":0,"index":3564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3567},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282933,"byte_end":1282947,"line_start":23,"line_end":23,"column_start":5,"column_end":19},"name":"EnvironmentMap","qualname":"::meta::attribute::AttributeValue::EnvironmentMap","value":"AttributeValue::EnvironmentMap(EnvironmentMap)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" This image is an environment map.\n","sig":null,"attributes":[{"value":"/ This image is an environment map.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282891,"byte_end":1282928,"line_start":22,"line_end":22,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":3569},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282948,"byte_end":1282962,"line_start":23,"line_end":23,"column_start":20,"column_end":34},"name":"0","qualname":"::meta::attribute::AttributeValue::EnvironmentMap::0","value":"meta::attribute::EnvironmentMap","parent":{"krate":0,"index":3567},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283001,"byte_end":1283008,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"KeyCode","qualname":"::meta::attribute::AttributeValue::KeyCode","value":"AttributeValue::KeyCode(KeyCode)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Film roll information.\n","sig":null,"attributes":[{"value":"/ Film roll information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282970,"byte_end":1282996,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":3572},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283009,"byte_end":1283016,"line_start":26,"line_end":26,"column_start":13,"column_end":20},"name":"0","qualname":"::meta::attribute::AttributeValue::KeyCode::0","value":"meta::attribute::KeyCode","parent":{"krate":0,"index":3570},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3573},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283064,"byte_end":1283073,"line_start":29,"line_end":29,"column_start":5,"column_end":14},"name":"LineOrder","qualname":"::meta::attribute::AttributeValue::LineOrder","value":"AttributeValue::LineOrder(LineOrder)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Order of the bocks in the file.\n","sig":null,"attributes":[{"value":"/ Order of the bocks in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283024,"byte_end":1283059,"line_start":28,"line_end":28,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3575},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283074,"byte_end":1283083,"line_start":29,"line_end":29,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::LineOrder::0","value":"meta::attribute::LineOrder","parent":{"krate":0,"index":3573},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3576},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283123,"byte_end":1283132,"line_start":32,"line_end":32,"column_start":5,"column_end":14},"name":"Matrix3x3","qualname":"::meta::attribute::AttributeValue::Matrix3x3","value":"AttributeValue::Matrix3x3(Matrix3x3)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" A 3x3 matrix of floats.\n","sig":null,"attributes":[{"value":"/ A 3x3 matrix of floats.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283091,"byte_end":1283118,"line_start":31,"line_end":31,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3578},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283133,"byte_end":1283142,"line_start":32,"line_end":32,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::Matrix3x3::0","value":"[f32; _]","parent":{"krate":0,"index":3576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3579},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283182,"byte_end":1283191,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"Matrix4x4","qualname":"::meta::attribute::AttributeValue::Matrix4x4","value":"AttributeValue::Matrix4x4(Matrix4x4)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" A 4x4 matrix of floats.\n","sig":null,"attributes":[{"value":"/ A 4x4 matrix of floats.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283150,"byte_end":1283177,"line_start":34,"line_end":34,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3581},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283192,"byte_end":1283201,"line_start":35,"line_end":35,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::Matrix4x4::0","value":"[f32; _]","parent":{"krate":0,"index":3579},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3582},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283250,"byte_end":1283257,"line_start":38,"line_end":38,"column_start":5,"column_end":12},"name":"Preview","qualname":"::meta::attribute::AttributeValue::Preview","value":"AttributeValue::Preview(Preview)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 8-bit rgba Preview of the image.\n","sig":null,"attributes":[{"value":"/ 8-bit rgba Preview of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283209,"byte_end":1283245,"line_start":37,"line_end":37,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":3584},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283258,"byte_end":1283265,"line_start":38,"line_end":38,"column_start":13,"column_end":20},"name":"0","qualname":"::meta::attribute::AttributeValue::Preview::0","value":"meta::attribute::Preview","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3585},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283314,"byte_end":1283322,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Rational","qualname":"::meta::attribute::AttributeValue::Rational","value":"AttributeValue::Rational(Rational)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" An integer dividend and divisor.\n","sig":null,"attributes":[{"value":"/ An integer dividend and divisor.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283273,"byte_end":1283309,"line_start":40,"line_end":40,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":3587},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283323,"byte_end":1283331,"line_start":41,"line_end":41,"column_start":14,"column_end":22},"name":"0","qualname":"::meta::attribute::AttributeValue::Rational::0","value":"(i32, u32)","parent":{"krate":0,"index":3585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3588},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283384,"byte_end":1283393,"line_start":44,"line_end":44,"column_start":5,"column_end":14},"name":"BlockType","qualname":"::meta::attribute::AttributeValue::BlockType","value":"AttributeValue::BlockType(BlockType)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Deep or flat and tiled or scan line.\n","sig":null,"attributes":[{"value":"/ Deep or flat and tiled or scan line.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283339,"byte_end":1283379,"line_start":43,"line_end":43,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3590},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283394,"byte_end":1283403,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::BlockType::0","value":"meta::attribute::BlockType","parent":{"krate":0,"index":3588},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3591},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283434,"byte_end":1283444,"line_start":47,"line_end":47,"column_start":5,"column_end":15},"name":"TextVector","qualname":"::meta::attribute::AttributeValue::TextVector","value":"AttributeValue::TextVector(Vec<Text>)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" List of texts.\n","sig":null,"attributes":[{"value":"/ List of texts.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283411,"byte_end":1283429,"line_start":46,"line_end":46,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":3593},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283445,"byte_end":1283454,"line_start":47,"line_end":47,"column_start":16,"column_end":25},"name":"0","qualname":"::meta::attribute::AttributeValue::TextVector::0","value":"std::vec::Vec<meta::attribute::Text>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283496,"byte_end":1283511,"line_start":50,"line_end":50,"column_start":5,"column_end":20},"name":"TileDescription","qualname":"::meta::attribute::AttributeValue::TileDescription","value":"AttributeValue::TileDescription(TileDescription)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" How to tile up the image.\n","sig":null,"attributes":[{"value":"/ How to tile up the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283462,"byte_end":1283491,"line_start":49,"line_end":49,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":3596},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283512,"byte_end":1283527,"line_start":50,"line_end":50,"column_start":21,"column_end":36},"name":"0","qualname":"::meta::attribute::AttributeValue::TileDescription::0","value":"meta::attribute::TileDescription","parent":{"krate":0,"index":3594},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3597},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283563,"byte_end":1283571,"line_start":53,"line_end":53,"column_start":5,"column_end":13},"name":"TimeCode","qualname":"::meta::attribute::AttributeValue::TimeCode","value":"AttributeValue::TimeCode(TimeCode)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Timepoint and more.\n","sig":null,"attributes":[{"value":"/ Timepoint and more.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283535,"byte_end":1283558,"line_start":52,"line_end":52,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":3599},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283572,"byte_end":1283580,"line_start":53,"line_end":53,"column_start":14,"column_end":22},"name":"0","qualname":"::meta::attribute::AttributeValue::TimeCode::0","value":"meta::attribute::TimeCode","parent":{"krate":0,"index":3597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3600},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283620,"byte_end":1283624,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"Text","qualname":"::meta::attribute::AttributeValue::Text","value":"AttributeValue::Text(Text)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" A string of byte-chars.\n","sig":null,"attributes":[{"value":"/ A string of byte-chars.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283588,"byte_end":1283615,"line_start":55,"line_end":55,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3602},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283625,"byte_end":1283629,"line_start":56,"line_end":56,"column_start":10,"column_end":14},"name":"0","qualname":"::meta::attribute::AttributeValue::Text::0","value":"meta::attribute::Text","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283658,"byte_end":1283661,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"F64","qualname":"::meta::attribute::AttributeValue::F64","value":"AttributeValue::F64(f64)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 64-bit float\n","sig":null,"attributes":[{"value":"/ 64-bit float","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283637,"byte_end":1283653,"line_start":58,"line_end":58,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3605},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283662,"byte_end":1283665,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"0","qualname":"::meta::attribute::AttributeValue::F64::0","value":"f64","parent":{"krate":0,"index":3603},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3606},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283694,"byte_end":1283697,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"F32","qualname":"::meta::attribute::AttributeValue::F32","value":"AttributeValue::F32(f32)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 32-bit float\n","sig":null,"attributes":[{"value":"/ 32-bit float","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283673,"byte_end":1283689,"line_start":61,"line_end":61,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283698,"byte_end":1283701,"line_start":62,"line_end":62,"column_start":9,"column_end":12},"name":"0","qualname":"::meta::attribute::AttributeValue::F32::0","value":"f32","parent":{"krate":0,"index":3606},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3609},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283739,"byte_end":1283742,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"I32","qualname":"::meta::attribute::AttributeValue::I32","value":"AttributeValue::I32(i32)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 32-bit signed integer\n","sig":null,"attributes":[{"value":"/ 32-bit signed integer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283709,"byte_end":1283734,"line_start":64,"line_end":64,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3611},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283743,"byte_end":1283746,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"0","qualname":"::meta::attribute::AttributeValue::I32::0","value":"i32","parent":{"krate":0,"index":3609},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283784,"byte_end":1283797,"line_start":68,"line_end":68,"column_start":5,"column_end":18},"name":"IntegerBounds","qualname":"::meta::attribute::AttributeValue::IntegerBounds","value":"AttributeValue::IntegerBounds(IntegerBounds)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 2D integer rectangle.\n","sig":null,"attributes":[{"value":"/ 2D integer rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283754,"byte_end":1283779,"line_start":67,"line_end":67,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3614},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283798,"byte_end":1283811,"line_start":68,"line_end":68,"column_start":19,"column_end":32},"name":"0","qualname":"::meta::attribute::AttributeValue::IntegerBounds::0","value":"meta::attribute::IntegerBounds","parent":{"krate":0,"index":3612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3615},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283847,"byte_end":1283856,"line_start":71,"line_end":71,"column_start":5,"column_end":14},"name":"FloatRect","qualname":"::meta::attribute::AttributeValue::FloatRect","value":"AttributeValue::FloatRect(FloatRect)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 2D float rectangle.\n","sig":null,"attributes":[{"value":"/ 2D float rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283819,"byte_end":1283842,"line_start":70,"line_end":70,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":3617},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283857,"byte_end":1283866,"line_start":71,"line_end":71,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::FloatRect::0","value":"meta::attribute::FloatRect","parent":{"krate":0,"index":3615},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3618},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283901,"byte_end":1283908,"line_start":74,"line_end":74,"column_start":5,"column_end":12},"name":"IntVec2","qualname":"::meta::attribute::AttributeValue::IntVec2","value":"AttributeValue::IntVec2(Vec2<i32>)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 2D integer vector.\n","sig":null,"attributes":[{"value":"/ 2D integer vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283874,"byte_end":1283896,"line_start":73,"line_end":73,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":3620},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283909,"byte_end":1283918,"line_start":74,"line_end":74,"column_start":13,"column_end":22},"name":"0","qualname":"::meta::attribute::AttributeValue::IntVec2::0","value":"math::Vec2<i32>","parent":{"krate":0,"index":3618},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3621},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283951,"byte_end":1283960,"line_start":77,"line_end":77,"column_start":5,"column_end":14},"name":"FloatVec2","qualname":"::meta::attribute::AttributeValue::FloatVec2","value":"AttributeValue::FloatVec2(Vec2<f32>)","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 2D float vector.\n","sig":null,"attributes":[{"value":"/ 2D float vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283926,"byte_end":1283946,"line_start":76,"line_end":76,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3623},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283961,"byte_end":1283970,"line_start":77,"line_end":77,"column_start":15,"column_end":24},"name":"0","qualname":"::meta::attribute::AttributeValue::FloatVec2::0","value":"math::Vec2<f32>","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3624},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284005,"byte_end":1284012,"line_start":80,"line_end":80,"column_start":5,"column_end":12},"name":"IntVec3","qualname":"::meta::attribute::AttributeValue::IntVec3","value":"AttributeValue::IntVec3((i32, i32, i32))","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 3D integer vector.\n","sig":null,"attributes":[{"value":"/ 3D integer vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1283978,"byte_end":1284000,"line_start":79,"line_end":79,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":3626},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284013,"byte_end":1284028,"line_start":80,"line_end":80,"column_start":13,"column_end":28},"name":"0","qualname":"::meta::attribute::AttributeValue::IntVec3::0","value":"(i32, i32, i32)","parent":{"krate":0,"index":3624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3627},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284061,"byte_end":1284070,"line_start":83,"line_end":83,"column_start":5,"column_end":14},"name":"FloatVec3","qualname":"::meta::attribute::AttributeValue::FloatVec3","value":"AttributeValue::FloatVec3((f32, f32, f32))","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" 3D float vector.\n","sig":null,"attributes":[{"value":"/ 3D float vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284036,"byte_end":1284056,"line_start":82,"line_end":82,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3629},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284071,"byte_end":1284086,"line_start":83,"line_end":83,"column_start":15,"column_end":30},"name":"0","qualname":"::meta::attribute::AttributeValue::FloatVec3::0","value":"(f32, f32, f32)","parent":{"krate":0,"index":3627},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":3630},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284168,"byte_end":1284174,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Custom","qualname":"::meta::attribute::AttributeValue::Custom","value":"AttributeValue::Custom { kind, bytes }","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" A custom attribute.\n Contains the type name of this value.\n","sig":null,"attributes":[{"value":"/ A custom attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284094,"byte_end":1284117,"line_start":85,"line_end":85,"column_start":5,"column_end":28}},{"value":"/ Contains the type name of this value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284122,"byte_end":1284163,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3631},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284253,"byte_end":1284257,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"name":"kind","qualname":"::meta::attribute::AttributeValue::Custom::kind","value":"meta::attribute::Text","parent":{"krate":0,"index":3630},"children":[],"decl_id":null,"docs":" The name of the type this attribute is an instance of.\n","sig":null,"attributes":[{"value":"/ The name of the type this attribute is an instance of.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284186,"byte_end":1284244,"line_start":89,"line_end":89,"column_start":9,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284432,"byte_end":1284437,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"name":"bytes","qualname":"::meta::attribute::AttributeValue::Custom::bytes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":3630},"children":[],"decl_id":null,"docs":" The value, stored in little-endian byte order, of the value.\n Use the `exr::io::Data` trait to extract binary values from this vector.\n","sig":null,"attributes":[{"value":"/ The value, stored in little-endian byte order, of the value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284274,"byte_end":1284338,"line_start":92,"line_end":92,"column_start":9,"column_end":73}},{"value":"/ Use the `exr::io::Data` trait to extract binary values from this vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284347,"byte_end":1284423,"line_start":93,"line_end":93,"column_start":9,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":3557},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282669,"byte_end":1282683,"line_start":11,"line_end":11,"column_start":10,"column_end":24},"name":"AttributeValue","qualname":"::meta::attribute::AttributeValue","value":"enum AttributeValue {\n    ChannelList(ChannelList),\n    Chromaticities(Chromaticities),\n    Compression(Compression),\n    EnvironmentMap(EnvironmentMap),\n    KeyCode(KeyCode),\n    LineOrder(LineOrder),\n    Matrix3x3(Matrix3x3),\n    Matrix4x4(Matrix4x4),\n    Preview(Preview),\n    Rational(Rational),\n    BlockType(BlockType),\n    TextVector(Vec<Text>),\n    TileDescription(TileDescription),\n    TimeCode(TimeCode),\n    Text(Text),\n    F64(f64),\n    F32(f32),\n    I32(i32),\n    IntegerBounds(IntegerBounds),\n    FloatRect(FloatRect),\n    IntVec2(Vec2<i32>),\n    FloatVec2(Vec2<f32>),\n    IntVec3((i32, i32, i32)),\n    FloatVec3((f32, f32, f32)),\n    Custom {\n            kind: Text,\n            bytes: Vec<u8>,\n        },\n}","parent":null,"children":[{"krate":0,"index":3558},{"krate":0,"index":3561},{"krate":0,"index":3564},{"krate":0,"index":3567},{"krate":0,"index":3570},{"krate":0,"index":3573},{"krate":0,"index":3576},{"krate":0,"index":3579},{"krate":0,"index":3582},{"krate":0,"index":3585},{"krate":0,"index":3588},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":3603},{"krate":0,"index":3606},{"krate":0,"index":3609},{"krate":0,"index":3612},{"krate":0,"index":3615},{"krate":0,"index":3618},{"krate":0,"index":3621},{"krate":0,"index":3624},{"krate":0,"index":3627},{"krate":0,"index":3630}],"decl_id":null,"docs":" Contains one of all possible attributes.\n Includes a variant for custom attributes.\n","sig":null,"attributes":[{"value":"/ Contains one of all possible attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282534,"byte_end":1282578,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ Includes a variant for custom attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1282579,"byte_end":1282624,"line_start":9,"line_end":9,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3641},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284711,"byte_end":1284715,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"Text","qualname":"::meta::attribute::Text","value":"Text {  }","parent":null,"children":[{"krate":0,"index":3642}],"decl_id":null,"docs":" A byte array with each byte being a char.\n This is not UTF an must be constructed from a standard string.\n","sig":null,"attributes":[{"value":"/ A byte array with each byte being a char.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284457,"byte_end":1284502,"line_start":98,"line_end":98,"column_start":1,"column_end":46}},{"value":"/ This is not UTF an must be constructed from a standard string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284503,"byte_end":1284569,"line_start":99,"line_end":99,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3655},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285212,"byte_end":1285220,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"TimeCode","qualname":"::meta::attribute::TimeCode","value":"TimeCode { hours, minutes, seconds, frame, drop_frame, color_frame, field_phase, binary_group_flags, binary_groups }","parent":null,"children":[{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3665}],"decl_id":null,"docs":" Contains time information for this frame within a sequence.\n Also defined methods to compile this information into a\n `TV60`, `TV50` or `Film24` bit sequence, packed into `u32`.","sig":null,"attributes":[{"value":"/ Contains time information for this frame within a sequence.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284743,"byte_end":1284806,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/ Also defined methods to compile this information into a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284807,"byte_end":1284866,"line_start":107,"line_end":107,"column_start":1,"column_end":60}},{"value":"/ `TV60`, `TV50` or `Film24` bit sequence, packed into `u32`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284867,"byte_end":1284930,"line_start":108,"line_end":108,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284931,"byte_end":1284934,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Satisfies the [SMPTE standard 12M-1999](https://en.wikipedia.org/wiki/SMPTE_timecode).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1284935,"byte_end":1285025,"line_start":110,"line_end":110,"column_start":1,"column_end":91}},{"value":"/ For more in-depth information, see [philrees.co.uk/timecode](http://www.philrees.co.uk/articles/timecode.htm).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285026,"byte_end":1285140,"line_start":111,"line_end":111,"column_start":1,"column_end":115}}]},{"kind":"Field","id":{"krate":0,"index":3656},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285264,"byte_end":1285269,"line_start":116,"line_end":116,"column_start":9,"column_end":14},"name":"hours","qualname":"::meta::attribute::TimeCode::hours","value":"u8","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Hours 0 - 23 are valid.\n","sig":null,"attributes":[{"value":"/ Hours 0 - 23 are valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285228,"byte_end":1285255,"line_start":115,"line_end":115,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3657},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285318,"byte_end":1285325,"line_start":119,"line_end":119,"column_start":9,"column_end":16},"name":"minutes","qualname":"::meta::attribute::TimeCode::minutes","value":"u8","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Minutes 0 - 59 are valid.\n","sig":null,"attributes":[{"value":"/ Minutes 0 - 59 are valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285280,"byte_end":1285309,"line_start":118,"line_end":118,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":3658},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285374,"byte_end":1285381,"line_start":122,"line_end":122,"column_start":9,"column_end":16},"name":"seconds","qualname":"::meta::attribute::TimeCode::seconds","value":"u8","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Seconds 0 - 59 are valid.\n","sig":null,"attributes":[{"value":"/ Seconds 0 - 59 are valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285336,"byte_end":1285365,"line_start":121,"line_end":121,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":3659},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285436,"byte_end":1285441,"line_start":125,"line_end":125,"column_start":9,"column_end":14},"name":"frame","qualname":"::meta::attribute::TimeCode::frame","value":"u8","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Frame Indices 0 - 29 are valid.\n","sig":null,"attributes":[{"value":"/ Frame Indices 0 - 29 are valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285392,"byte_end":1285427,"line_start":124,"line_end":124,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285494,"byte_end":1285504,"line_start":128,"line_end":128,"column_start":9,"column_end":19},"name":"drop_frame","qualname":"::meta::attribute::TimeCode::drop_frame","value":"bool","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Whether this is a drop frame.\n","sig":null,"attributes":[{"value":"/ Whether this is a drop frame.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285452,"byte_end":1285485,"line_start":127,"line_end":127,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":3661},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285560,"byte_end":1285571,"line_start":131,"line_end":131,"column_start":9,"column_end":20},"name":"color_frame","qualname":"::meta::attribute::TimeCode::color_frame","value":"bool","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Whether this is a color frame.\n","sig":null,"attributes":[{"value":"/ Whether this is a color frame.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285517,"byte_end":1285551,"line_start":130,"line_end":130,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3662},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285609,"byte_end":1285620,"line_start":134,"line_end":134,"column_start":9,"column_end":20},"name":"field_phase","qualname":"::meta::attribute::TimeCode::field_phase","value":"bool","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Field Phase.\n","sig":null,"attributes":[{"value":"/ Field Phase.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285584,"byte_end":1285600,"line_start":133,"line_end":133,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3663},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285681,"byte_end":1285699,"line_start":137,"line_end":137,"column_start":9,"column_end":27},"name":"binary_group_flags","qualname":"::meta::attribute::TimeCode::binary_group_flags","value":"[bool; 3]","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" Flags for `TimeCode.binary_groups`.\n","sig":null,"attributes":[{"value":"/ Flags for `TimeCode.binary_groups`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285633,"byte_end":1285672,"line_start":136,"line_end":136,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3665},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285894,"byte_end":1285907,"line_start":142,"line_end":142,"column_start":9,"column_end":22},"name":"binary_groups","qualname":"::meta::attribute::TimeCode::binary_groups","value":"[u8; 8]","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" The user-defined control codes.\n Every entry in this array can use at most 3 bits.\n This results in a maximum value of 15, including 0, for each `u8`.\n","sig":null,"attributes":[{"value":"/ The user-defined control codes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285717,"byte_end":1285752,"line_start":139,"line_end":139,"column_start":5,"column_end":40}},{"value":"/ Every entry in this array can use at most 3 bits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285757,"byte_end":1285810,"line_start":140,"line_end":140,"column_start":5,"column_end":58}},{"value":"/ This results in a maximum value of 15, including 0, for each `u8`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285815,"byte_end":1285885,"line_start":141,"line_end":141,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3689},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286105,"byte_end":1286113,"line_start":150,"line_end":150,"column_start":5,"column_end":13},"name":"ScanLine","qualname":"::meta::attribute::BlockType::ScanLine","value":"BlockType::ScanLine","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Corresponds to the string value `scanlineimage`.\n","sig":null,"attributes":[{"value":"/ Corresponds to the string value `scanlineimage`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286048,"byte_end":1286100,"line_start":149,"line_end":149,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3691},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286174,"byte_end":1286178,"line_start":153,"line_end":153,"column_start":5,"column_end":9},"name":"Tile","qualname":"::meta::attribute::BlockType::Tile","value":"BlockType::Tile","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Corresponds to the string value `tiledimage`.\n","sig":null,"attributes":[{"value":"/ Corresponds to the string value `tiledimage`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286120,"byte_end":1286169,"line_start":152,"line_end":152,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3693},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286241,"byte_end":1286253,"line_start":156,"line_end":156,"column_start":5,"column_end":17},"name":"DeepScanLine","qualname":"::meta::attribute::BlockType::DeepScanLine","value":"BlockType::DeepScanLine","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Corresponds to the string value `deepscanline`.\n","sig":null,"attributes":[{"value":"/ Corresponds to the string value `deepscanline`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286185,"byte_end":1286236,"line_start":155,"line_end":155,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3695},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286312,"byte_end":1286320,"line_start":159,"line_end":159,"column_start":5,"column_end":13},"name":"DeepTile","qualname":"::meta::attribute::BlockType::DeepTile","value":"BlockType::DeepTile","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Corresponds to the string value `deeptile`.\n","sig":null,"attributes":[{"value":"/ Corresponds to the string value `deeptile`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286260,"byte_end":1286307,"line_start":158,"line_end":158,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":3688},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286031,"byte_end":1286040,"line_start":147,"line_end":147,"column_start":10,"column_end":19},"name":"BlockType","qualname":"::meta::attribute::BlockType","value":"enum BlockType { ScanLine, Tile, DeepScanLine, DeepTile, }","parent":null,"children":[{"krate":0,"index":3689},{"krate":0,"index":3691},{"krate":0,"index":3693},{"krate":0,"index":3695}],"decl_id":null,"docs":" layer type, specifies block type and deepness.\n","sig":null,"attributes":[{"value":"/ layer type, specifies block type and deepness.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1285920,"byte_end":1285970,"line_start":145,"line_end":145,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286400,"byte_end":1286418,"line_start":163,"line_end":163,"column_start":9,"column_end":27},"name":"block_type_strings","qualname":"::meta::attribute::block_type_strings","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" The string literals used to represent a `BlockType` in a file.\n","sig":null,"attributes":[{"value":"/ The string literals used to represent a `BlockType` in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286325,"byte_end":1286391,"line_start":162,"line_end":162,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286489,"byte_end":1286498,"line_start":166,"line_end":166,"column_start":15,"column_end":24},"name":"SCAN_LINE","qualname":"::meta::attribute::block_type_strings::SCAN_LINE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Type attribute text value of flat scan lines\n","sig":null,"attributes":[{"value":"/ Type attribute text value of flat scan lines","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286426,"byte_end":1286474,"line_start":165,"line_end":165,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286597,"byte_end":1286601,"line_start":169,"line_end":169,"column_start":15,"column_end":19},"name":"TILE","qualname":"::meta::attribute::block_type_strings::TILE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Type attribute text value of flat tiles\n","sig":null,"attributes":[{"value":"/ Type attribute text value of flat tiles","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286539,"byte_end":1286582,"line_start":168,"line_end":168,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286702,"byte_end":1286716,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"name":"DEEP_SCAN_LINE","qualname":"::meta::attribute::block_type_strings::DEEP_SCAN_LINE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Type attribute text value of deep scan lines\n","sig":null,"attributes":[{"value":"/ Type attribute text value of deep scan lines","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286639,"byte_end":1286687,"line_start":171,"line_end":171,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286814,"byte_end":1286823,"line_start":175,"line_end":175,"column_start":15,"column_end":24},"name":"DEEP_TILE","qualname":"::meta::attribute::block_type_strings::DEEP_TILE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Type attribute text value of deep tiles\n","sig":null,"attributes":[{"value":"/ Type attribute text value of deep tiles","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286756,"byte_end":1286799,"line_start":174,"line_end":174,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287004,"byte_end":1287014,"line_start":182,"line_end":182,"column_start":10,"column_end":20},"name":"DataWindow","qualname":"::meta::attribute::DataWindow","value":"IntegerBounds","parent":null,"children":[],"decl_id":null,"docs":" The integer rectangle describing where an layer is placed on the infinite 2D global space.\n","sig":null,"attributes":[{"value":"/ The integer rectangle describing where an layer is placed on the infinite 2D global space.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1286900,"byte_end":1286994,"line_start":181,"line_end":181,"column_start":1,"column_end":95}}]},{"kind":"Type","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287141,"byte_end":1287154,"line_start":185,"line_end":185,"column_start":10,"column_end":23},"name":"DisplayWindow","qualname":"::meta::attribute::DisplayWindow","value":"IntegerBounds","parent":null,"children":[],"decl_id":null,"docs":" The integer rectangle limiting which part of the infinite 2D global space should be displayed.\n","sig":null,"attributes":[{"value":"/ The integer rectangle limiting which part of the infinite 2D global space should be displayed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287033,"byte_end":1287131,"line_start":184,"line_end":184,"column_start":1,"column_end":99}}]},{"kind":"Type","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287245,"byte_end":1287253,"line_start":188,"line_end":188,"column_start":10,"column_end":18},"name":"Rational","qualname":"::meta::attribute::Rational","value":"(i32, u32)","parent":null,"children":[],"decl_id":null,"docs":" An integer dividend and divisor, together forming a ratio.\n","sig":null,"attributes":[{"value":"/ An integer dividend and divisor, together forming a ratio.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287173,"byte_end":1287235,"line_start":187,"line_end":187,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287330,"byte_end":1287339,"line_start":191,"line_end":191,"column_start":10,"column_end":19},"name":"Matrix4x4","qualname":"::meta::attribute::Matrix4x4","value":"[f32; ]","parent":null,"children":[],"decl_id":null,"docs":" A float matrix with four rows and four columns.\n","sig":null,"attributes":[{"value":"/ A float matrix with four rows and four columns.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287269,"byte_end":1287320,"line_start":190,"line_end":190,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287418,"byte_end":1287427,"line_start":194,"line_end":194,"column_start":10,"column_end":19},"name":"Matrix3x3","qualname":"::meta::attribute::Matrix3x3","value":"[f32; ]","parent":null,"children":[],"decl_id":null,"docs":" A float matrix with three rows and three columns.\n","sig":null,"attributes":[{"value":"/ A float matrix with three rows and three columns.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287355,"byte_end":1287408,"line_start":193,"line_end":193,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3711},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287720,"byte_end":1287733,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"IntegerBounds","qualname":"::meta::attribute::IntegerBounds","value":"IntegerBounds { position, size }","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713}],"decl_id":null,"docs":" A rectangular section anywhere in 2D integer space.\n Valid from minimum coordinate (including) `-1,073,741,822`\n to maximum coordinate (including) `1,073,741,822`, the value of (`i32::MAX/2 -1`).\n","sig":null,"attributes":[{"value":"/ A rectangular section anywhere in 2D integer space.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287443,"byte_end":1287498,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"/ Valid from minimum coordinate (including) `-1,073,741,822`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287499,"byte_end":1287561,"line_start":197,"line_end":197,"column_start":1,"column_end":63}},{"value":"/ to maximum coordinate (including) `1,073,741,822`, the value of (`i32::MAX/2 -1`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287562,"byte_end":1287648,"line_start":198,"line_end":198,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":3712},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287859,"byte_end":1287867,"line_start":204,"line_end":204,"column_start":9,"column_end":17},"name":"position","qualname":"::meta::attribute::IntegerBounds::position","value":"math::Vec2<i32>","parent":{"krate":0,"index":3711},"children":[],"decl_id":null,"docs":" The top left corner of this rectangle.\n The `Box2I32` includes this pixel if the size is not zero.\n","sig":null,"attributes":[{"value":"/ The top left corner of this rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287741,"byte_end":1287783,"line_start":202,"line_end":202,"column_start":5,"column_end":47}},{"value":"/ The `Box2I32` includes this pixel if the size is not zero.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287788,"byte_end":1287850,"line_start":203,"line_end":203,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3713},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288057,"byte_end":1288061,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"name":"size","qualname":"::meta::attribute::IntegerBounds::size","value":"math::Vec2<usize>","parent":{"krate":0,"index":3711},"children":[],"decl_id":null,"docs":" How many pixels to include in this `Box2I32`.\n Extends to the right and downwards.\n Does not include the actual boundary, just like `Vec::len()`.\n","sig":null,"attributes":[{"value":"/ How many pixels to include in this `Box2I32`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287885,"byte_end":1287934,"line_start":206,"line_end":206,"column_start":5,"column_end":54}},{"value":"/ Extends to the right and downwards.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287939,"byte_end":1287978,"line_start":207,"line_end":207,"column_start":5,"column_end":44}},{"value":"/ Does not include the actual boundary, just like `Vec::len()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1287983,"byte_end":1288048,"line_start":208,"line_end":208,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3731},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288185,"byte_end":1288194,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"FloatRect","qualname":"::meta::attribute::FloatRect","value":"FloatRect { min, max }","parent":null,"children":[{"krate":0,"index":3732},{"krate":0,"index":3733}],"decl_id":null,"docs":" A rectangular section anywhere in 2D float space.\n","sig":null,"attributes":[{"value":"/ A rectangular section anywhere in 2D float space.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288079,"byte_end":1288132,"line_start":212,"line_end":212,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3732},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288272,"byte_end":1288275,"line_start":217,"line_end":217,"column_start":9,"column_end":12},"name":"min","qualname":"::meta::attribute::FloatRect::min","value":"math::Vec2<f32>","parent":{"krate":0,"index":3731},"children":[],"decl_id":null,"docs":" The top left corner location of the rectangle (inclusive)\n","sig":null,"attributes":[{"value":"/ The top left corner location of the rectangle (inclusive)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288202,"byte_end":1288263,"line_start":216,"line_end":216,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3733},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288367,"byte_end":1288370,"line_start":220,"line_end":220,"column_start":9,"column_end":12},"name":"max","qualname":"::meta::attribute::FloatRect::max","value":"math::Vec2<f32>","parent":{"krate":0,"index":3731},"children":[],"decl_id":null,"docs":" The bottom right corner location of the rectangle (inclusive)\n","sig":null,"attributes":[{"value":"/ The bottom right corner location of the rectangle (inclusive)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288293,"byte_end":1288358,"line_start":219,"line_end":219,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3743},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288505,"byte_end":1288516,"line_start":225,"line_end":225,"column_start":12,"column_end":23},"name":"ChannelList","qualname":"::meta::attribute::ChannelList","value":"ChannelList { list, bytes_per_pixel, uniform_sample_type }","parent":null,"children":[{"krate":0,"index":3744},{"krate":0,"index":3746},{"krate":0,"index":3747}],"decl_id":null,"docs":" A List of channels. Channels must be sorted alphabetically.\n","sig":null,"attributes":[{"value":"/ A List of channels. Channels must be sorted alphabetically.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288385,"byte_end":1288448,"line_start":223,"line_end":223,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3744},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288563,"byte_end":1288567,"line_start":228,"line_end":228,"column_start":9,"column_end":13},"name":"list","qualname":"::meta::attribute::ChannelList::list","value":"smallvec::SmallVec<[meta::attribute::ChannelDescription; 5]>","parent":{"krate":0,"index":3743},"children":[],"decl_id":null,"docs":" The channels in this list.\n","sig":null,"attributes":[{"value":"/ The channels in this list.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288524,"byte_end":1288554,"line_start":227,"line_end":227,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":3746},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288738,"byte_end":1288753,"line_start":232,"line_end":232,"column_start":9,"column_end":24},"name":"bytes_per_pixel","qualname":"::meta::attribute::ChannelList::bytes_per_pixel","value":"usize","parent":{"krate":0,"index":3743},"children":[],"decl_id":null,"docs":" The number of bytes that one pixel in this image needs.\n","sig":null,"attributes":[{"value":"/ The number of bytes that one pixel in this image needs.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288609,"byte_end":1288668,"line_start":230,"line_end":230,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3747},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288891,"byte_end":1288910,"line_start":235,"line_end":235,"column_start":9,"column_end":28},"name":"uniform_sample_type","qualname":"::meta::attribute::ChannelList::uniform_sample_type","value":"std::option::Option<meta::attribute::SampleType>","parent":{"krate":0,"index":3743},"children":[],"decl_id":null,"docs":" The sample type of all channels, if all channels have the same type.\n","sig":null,"attributes":[{"value":"/ The sample type of all channels, if all channels have the same type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288810,"byte_end":1288882,"line_start":234,"line_end":234,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":3763},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289106,"byte_end":1289124,"line_start":242,"line_end":242,"column_start":12,"column_end":30},"name":"ChannelDescription","qualname":"::meta::attribute::ChannelDescription","value":"ChannelDescription { name, sample_type, quantize_linearly, sampling }","parent":null,"children":[{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767}],"decl_id":null,"docs":" A single channel in an layer.\n Does not contain the actual pixel data,\n but instead merely describes it.\n","sig":null,"attributes":[{"value":"/ A single channel in an layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288935,"byte_end":1288968,"line_start":238,"line_end":238,"column_start":1,"column_end":34}},{"value":"/ Does not contain the actual pixel data,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1288969,"byte_end":1289012,"line_start":239,"line_end":239,"column_start":1,"column_end":44}},{"value":"/ but instead merely describes it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289013,"byte_end":1289049,"line_start":240,"line_end":240,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":3764},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289186,"byte_end":1289190,"line_start":245,"line_end":245,"column_start":9,"column_end":13},"name":"name","qualname":"::meta::attribute::ChannelDescription::name","value":"meta::attribute::Text","parent":{"krate":0,"index":3763},"children":[],"decl_id":null,"docs":" One of \"R\", \"G\", or \"B\" most of the time.\n","sig":null,"attributes":[{"value":"/ One of \"R\", \"G\", or \"B\" most of the time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289132,"byte_end":1289177,"line_start":244,"line_end":244,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":3765},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289232,"byte_end":1289243,"line_start":248,"line_end":248,"column_start":9,"column_end":20},"name":"sample_type","qualname":"::meta::attribute::ChannelDescription::sample_type","value":"meta::attribute::SampleType","parent":{"krate":0,"index":3763},"children":[],"decl_id":null,"docs":" U32, F16 or F32.\n","sig":null,"attributes":[{"value":"/ U32, F16 or F32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289203,"byte_end":1289223,"line_start":247,"line_end":247,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3766},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289541,"byte_end":1289558,"line_start":255,"line_end":255,"column_start":9,"column_end":26},"name":"quantize_linearly","qualname":"::meta::attribute::ChannelDescription::quantize_linearly","value":"bool","parent":{"krate":0,"index":3763},"children":[],"decl_id":null,"docs":" This attribute only tells lossy compression methods\n whether this value should be quantized exponentially or linearly.","sig":null,"attributes":[{"value":"/ This attribute only tells lossy compression methods","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289262,"byte_end":1289317,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/ whether this value should be quantized exponentially or linearly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289322,"byte_end":1289391,"line_start":251,"line_end":251,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289396,"byte_end":1289399,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Should be `false` for red, green, or blue channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289404,"byte_end":1289459,"line_start":253,"line_end":253,"column_start":5,"column_end":60}},{"value":"/ Should be `true` for hue, chroma, saturation, or alpha channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289464,"byte_end":1289532,"line_start":254,"line_end":254,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3767},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289925,"byte_end":1289933,"line_start":262,"line_end":262,"column_start":9,"column_end":17},"name":"sampling","qualname":"::meta::attribute::ChannelDescription::sampling","value":"math::Vec2<usize>","parent":{"krate":0,"index":3763},"children":[],"decl_id":null,"docs":" How many of the samples are skipped compared to the other channels in this layer.","sig":null,"attributes":[{"value":"/ How many of the samples are skipped compared to the other channels in this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289571,"byte_end":1289656,"line_start":257,"line_end":257,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289661,"byte_end":1289664,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Can be used for chroma subsampling for manual lossy data compression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289669,"byte_end":1289742,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ Values other than 1 are allowed only in flat, scan-line based images.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289747,"byte_end":1289820,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ If an image is deep or tiled, x and y sampling rates for all of its channels must be 1.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289825,"byte_end":1289916,"line_start":261,"line_end":261,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3783},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290128,"byte_end":1290131,"line_start":270,"line_end":270,"column_start":5,"column_end":8},"name":"U32","qualname":"::meta::attribute::SampleType::U32","value":"SampleType::U32","parent":{"krate":0,"index":3782},"children":[],"decl_id":null,"docs":" This channel contains 32-bit unsigned int values.\n","sig":null,"attributes":[{"value":"/ This channel contains 32-bit unsigned int values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290070,"byte_end":1290123,"line_start":269,"line_end":269,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290189,"byte_end":1290192,"line_start":273,"line_end":273,"column_start":5,"column_end":8},"name":"F16","qualname":"::meta::attribute::SampleType::F16","value":"SampleType::F16","parent":{"krate":0,"index":3782},"children":[],"decl_id":null,"docs":" This channel contains 16-bit float values.\n","sig":null,"attributes":[{"value":"/ This channel contains 16-bit float values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290138,"byte_end":1290184,"line_start":272,"line_end":272,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3787},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290250,"byte_end":1290253,"line_start":276,"line_end":276,"column_start":5,"column_end":8},"name":"F32","qualname":"::meta::attribute::SampleType::F32","value":"SampleType::F32","parent":{"krate":0,"index":3782},"children":[],"decl_id":null,"docs":" This channel contains 32-bit float values.\n","sig":null,"attributes":[{"value":"/ This channel contains 32-bit float values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290199,"byte_end":1290245,"line_start":275,"line_end":275,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":3782},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290052,"byte_end":1290062,"line_start":267,"line_end":267,"column_start":10,"column_end":20},"name":"SampleType","qualname":"::meta::attribute::SampleType","value":"enum SampleType { U32, F16, F32, }","parent":null,"children":[{"krate":0,"index":3783},{"krate":0,"index":3785},{"krate":0,"index":3787}],"decl_id":null,"docs":" The type of samples in this channel.\n","sig":null,"attributes":[{"value":"/ The type of samples in this channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1289951,"byte_end":1289991,"line_start":265,"line_end":265,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3803},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290514,"byte_end":1290528,"line_start":284,"line_end":284,"column_start":12,"column_end":26},"name":"Chromaticities","qualname":"::meta::attribute::Chromaticities","value":"Chromaticities { red, green, blue, white }","parent":null,"children":[{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3807}],"decl_id":null,"docs":" The color space of the pixels.","sig":null,"attributes":[{"value":"/ The color space of the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290258,"byte_end":1290292,"line_start":279,"line_end":279,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290293,"byte_end":1290296,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ If a file doesn't have a chromaticities attribute, display software","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290297,"byte_end":1290368,"line_start":281,"line_end":281,"column_start":1,"column_end":72}},{"value":"/ should assume that the file's primaries and the white point match `Rec. ITU-R BT.709-3`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290369,"byte_end":1290461,"line_start":282,"line_end":282,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":3804},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290599,"byte_end":1290602,"line_start":287,"line_end":287,"column_start":9,"column_end":12},"name":"red","qualname":"::meta::attribute::Chromaticities::red","value":"math::Vec2<f32>","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" \"Red\" location on the CIE XY chromaticity diagram.\n","sig":null,"attributes":[{"value":"/ \"Red\" location on the CIE XY chromaticity diagram.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290536,"byte_end":1290590,"line_start":286,"line_end":286,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3805},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290685,"byte_end":1290690,"line_start":290,"line_end":290,"column_start":9,"column_end":14},"name":"green","qualname":"::meta::attribute::Chromaticities::green","value":"math::Vec2<f32>","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" \"Green\" location on the CIE XY chromaticity diagram.\n","sig":null,"attributes":[{"value":"/ \"Green\" location on the CIE XY chromaticity diagram.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290620,"byte_end":1290676,"line_start":289,"line_end":289,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":3806},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290772,"byte_end":1290776,"line_start":293,"line_end":293,"column_start":9,"column_end":13},"name":"blue","qualname":"::meta::attribute::Chromaticities::blue","value":"math::Vec2<f32>","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" \"Blue\" location on the CIE XY chromaticity diagram.\n","sig":null,"attributes":[{"value":"/ \"Blue\" location on the CIE XY chromaticity diagram.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290708,"byte_end":1290763,"line_start":292,"line_end":292,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":3807},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290859,"byte_end":1290864,"line_start":296,"line_end":296,"column_start":9,"column_end":14},"name":"white","qualname":"::meta::attribute::Chromaticities::white","value":"math::Vec2<f32>","parent":{"krate":0,"index":3803},"children":[],"decl_id":null,"docs":" \"White\" location on the CIE XY chromaticity diagram.\n","sig":null,"attributes":[{"value":"/ \"White\" location on the CIE XY chromaticity diagram.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290794,"byte_end":1290850,"line_start":295,"line_end":295,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291139,"byte_end":1291156,"line_start":305,"line_end":305,"column_start":5,"column_end":22},"name":"LatitudeLongitude","qualname":"::meta::attribute::EnvironmentMap::LatitudeLongitude","value":"EnvironmentMap::LatitudeLongitude","parent":{"krate":0,"index":3817},"children":[],"decl_id":null,"docs":" This image is an environment map projected like a world map.\n","sig":null,"attributes":[{"value":"/ This image is an environment map projected like a world map.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291070,"byte_end":1291134,"line_start":304,"line_end":304,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3820},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291216,"byte_end":1291220,"line_start":308,"line_end":308,"column_start":5,"column_end":9},"name":"Cube","qualname":"::meta::attribute::EnvironmentMap::Cube","value":"EnvironmentMap::Cube","parent":{"krate":0,"index":3817},"children":[],"decl_id":null,"docs":" This image contains the six sides of a cube.\n","sig":null,"attributes":[{"value":"/ This image contains the six sides of a cube.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291163,"byte_end":1291211,"line_start":307,"line_end":307,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3817},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291048,"byte_end":1291062,"line_start":302,"line_end":302,"column_start":10,"column_end":24},"name":"EnvironmentMap","qualname":"::meta::attribute::EnvironmentMap","value":"enum EnvironmentMap { LatitudeLongitude, Cube, }","parent":null,"children":[{"krate":0,"index":3818},{"krate":0,"index":3820}],"decl_id":null,"docs":" If this attribute is present, it describes\n how this texture should be projected onto an environment.\n","sig":null,"attributes":[{"value":"/ If this attribute is present, it describes","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290879,"byte_end":1290925,"line_start":299,"line_end":299,"column_start":1,"column_end":47}},{"value":"/ how this texture should be projected onto an environment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1290926,"byte_end":1290987,"line_start":300,"line_end":300,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291340,"byte_end":1291347,"line_start":313,"line_end":313,"column_start":12,"column_end":19},"name":"KeyCode","qualname":"::meta::attribute::KeyCode","value":"KeyCode { film_manufacturer_code, film_type, film_roll_prefix, count, perforation_offset, perforations_per_frame, perforations_per_count }","parent":null,"children":[{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839},{"krate":0,"index":3840},{"krate":0,"index":3841},{"krate":0,"index":3842},{"krate":0,"index":3843}],"decl_id":null,"docs":" Uniquely identifies a motion picture film frame.\n","sig":null,"attributes":[{"value":"/ Uniquely identifies a motion picture film frame.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291225,"byte_end":1291277,"line_start":311,"line_end":311,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":3837},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291399,"byte_end":1291421,"line_start":316,"line_end":316,"column_start":9,"column_end":31},"name":"film_manufacturer_code","qualname":"::meta::attribute::KeyCode::film_manufacturer_code","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Identifies a film manufacturer.\n","sig":null,"attributes":[{"value":"/ Identifies a film manufacturer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291355,"byte_end":1291390,"line_start":315,"line_end":315,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3838},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291469,"byte_end":1291478,"line_start":319,"line_end":319,"column_start":9,"column_end":18},"name":"film_type","qualname":"::meta::attribute::KeyCode::film_type","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Identifies a film type.\n","sig":null,"attributes":[{"value":"/ Identifies a film type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291433,"byte_end":1291460,"line_start":318,"line_end":318,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3839},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291534,"byte_end":1291550,"line_start":322,"line_end":322,"column_start":9,"column_end":25},"name":"film_roll_prefix","qualname":"::meta::attribute::KeyCode::film_roll_prefix","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Specifies the film roll prefix.\n","sig":null,"attributes":[{"value":"/ Specifies the film roll prefix.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291490,"byte_end":1291525,"line_start":321,"line_end":321,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3840},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291600,"byte_end":1291605,"line_start":325,"line_end":325,"column_start":9,"column_end":14},"name":"count","qualname":"::meta::attribute::KeyCode::count","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Specifies the film count.\n","sig":null,"attributes":[{"value":"/ Specifies the film count.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291562,"byte_end":1291591,"line_start":324,"line_end":324,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":3841},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291663,"byte_end":1291681,"line_start":328,"line_end":328,"column_start":9,"column_end":27},"name":"perforation_offset","qualname":"::meta::attribute::KeyCode::perforation_offset","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Specifies the perforation offset.\n","sig":null,"attributes":[{"value":"/ Specifies the perforation offset.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291617,"byte_end":1291654,"line_start":327,"line_end":327,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":3842},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291759,"byte_end":1291781,"line_start":331,"line_end":331,"column_start":9,"column_end":31},"name":"perforations_per_frame","qualname":"::meta::attribute::KeyCode::perforations_per_frame","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Specifies the perforation count of each single frame.\n","sig":null,"attributes":[{"value":"/ Specifies the perforation count of each single frame.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291693,"byte_end":1291750,"line_start":330,"line_end":330,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":3843},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291858,"byte_end":1291880,"line_start":334,"line_end":334,"column_start":9,"column_end":31},"name":"perforations_per_count","qualname":"::meta::attribute::KeyCode::perforations_per_count","value":"i32","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":" Specifies the perforation count of each single film.\n","sig":null,"attributes":[{"value":"/ Specifies the perforation count of each single film.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291793,"byte_end":1291849,"line_start":333,"line_end":333,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3860},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292281,"byte_end":1292291,"line_start":344,"line_end":344,"column_start":5,"column_end":15},"name":"Increasing","qualname":"::meta::attribute::LineOrder::Increasing","value":"LineOrder::Increasing","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" The blocks in the file are ordered in descending rows from left to right.\n When compressing in parallel, this option requires potentially large amounts of memory.\n In that case, use `LineOrder::Unspecified` for best performance.\n","sig":null,"attributes":[{"value":"/ The blocks in the file are ordered in descending rows from left to right.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292030,"byte_end":1292107,"line_start":341,"line_end":341,"column_start":5,"column_end":82}},{"value":"/ When compressing in parallel, this option requires potentially large amounts of memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292112,"byte_end":1292203,"line_start":342,"line_end":342,"column_start":5,"column_end":96}},{"value":"/ In that case, use `LineOrder::Unspecified` for best performance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292208,"byte_end":1292276,"line_start":343,"line_end":343,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3862},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292548,"byte_end":1292558,"line_start":349,"line_end":349,"column_start":5,"column_end":15},"name":"Decreasing","qualname":"::meta::attribute::LineOrder::Decreasing","value":"LineOrder::Decreasing","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" The blocks in the file are ordered in ascending rows from right to left.\n When compressing in parallel, this option requires potentially large amounts of memory.\n In that case, use `LineOrder::Unspecified` for best performance.\n","sig":null,"attributes":[{"value":"/ The blocks in the file are ordered in ascending rows from right to left.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292298,"byte_end":1292374,"line_start":346,"line_end":346,"column_start":5,"column_end":81}},{"value":"/ When compressing in parallel, this option requires potentially large amounts of memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292379,"byte_end":1292470,"line_start":347,"line_end":347,"column_start":5,"column_end":96}},{"value":"/ In that case, use `LineOrder::Unspecified` for best performance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292475,"byte_end":1292543,"line_start":348,"line_end":348,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3864},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292712,"byte_end":1292723,"line_start":353,"line_end":353,"column_start":5,"column_end":16},"name":"Unspecified","qualname":"::meta::attribute::LineOrder::Unspecified","value":"LineOrder::Unspecified","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" The blocks are not ordered in a specific way inside the file.\n In multi-core file writing, this option offers the best performance.\n","sig":null,"attributes":[{"value":"/ The blocks are not ordered in a specific way inside the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292565,"byte_end":1292630,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/ In multi-core file writing, this option offers the best performance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292635,"byte_end":1292707,"line_start":352,"line_end":352,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":3859},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292013,"byte_end":1292022,"line_start":339,"line_end":339,"column_start":10,"column_end":19},"name":"LineOrder","qualname":"::meta::attribute::LineOrder","value":"enum LineOrder { Increasing, Decreasing, Unspecified, }","parent":null,"children":[{"krate":0,"index":3860},{"krate":0,"index":3862},{"krate":0,"index":3864}],"decl_id":null,"docs":" In what order the `Block`s of pixel data appear in a file.\n","sig":null,"attributes":[{"value":"/ In what order the `Block`s of pixel data appear in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1291890,"byte_end":1291952,"line_start":337,"line_end":337,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":3880},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292873,"byte_end":1292880,"line_start":359,"line_end":359,"column_start":12,"column_end":19},"name":"Preview","qualname":"::meta::attribute::Preview","value":"Preview { size, pixel_data }","parent":null,"children":[{"krate":0,"index":3881},{"krate":0,"index":3882}],"decl_id":null,"docs":" A small `rgba` image of `i8` values that approximates the real exr image.\n","sig":null,"attributes":[{"value":"/ A small `rgba` image of `i8` values that approximates the real exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292728,"byte_end":1292805,"line_start":356,"line_end":356,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292937,"byte_end":1292941,"line_start":362,"line_end":362,"column_start":9,"column_end":13},"name":"size","qualname":"::meta::attribute::Preview::size","value":"math::Vec2<usize>","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":" The dimensions of the preview image.\n","sig":null,"attributes":[{"value":"/ The dimensions of the preview image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292888,"byte_end":1292928,"line_start":361,"line_end":361,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3882},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293156,"byte_end":1293166,"line_start":367,"line_end":367,"column_start":9,"column_end":19},"name":"pixel_data","qualname":"::meta::attribute::Preview::pixel_data","value":"std::vec::Vec<i8>","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":" An array with a length of 4 × width × height.\n The pixels are stored in `LineOrder::Increasing`.\n Each pixel consists of the four `u8` values red, green, blue, alpha.\n","sig":null,"attributes":[{"value":"/ An array with a length of 4 × width × height.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1292961,"byte_end":1293012,"line_start":364,"line_end":364,"column_start":5,"column_end":54}},{"value":"/ The pixels are stored in `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293017,"byte_end":1293070,"line_start":365,"line_end":365,"column_start":5,"column_end":58}},{"value":"/ Each pixel consists of the four `u8` values red, green, blue, alpha.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293075,"byte_end":1293147,"line_start":366,"line_end":366,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":3892},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293406,"byte_end":1293421,"line_start":374,"line_end":374,"column_start":12,"column_end":27},"name":"TileDescription","qualname":"::meta::attribute::TileDescription","value":"TileDescription { tile_size, level_mode, rounding_mode }","parent":null,"children":[{"krate":0,"index":3893},{"krate":0,"index":3894},{"krate":0,"index":3895}],"decl_id":null,"docs":" Describes how the layer is divided into tiles.\n Specifies the size of each tile in the image\n and whether this image contains multiple resolution levels.\n","sig":null,"attributes":[{"value":"/ Describes how the layer is divided into tiles.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293180,"byte_end":1293230,"line_start":370,"line_end":370,"column_start":1,"column_end":51}},{"value":"/ Specifies the size of each tile in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293231,"byte_end":1293279,"line_start":371,"line_end":371,"column_start":1,"column_end":49}},{"value":"/ and whether this image contains multiple resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293280,"byte_end":1293343,"line_start":372,"line_end":372,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3893},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293523,"byte_end":1293532,"line_start":378,"line_end":378,"column_start":9,"column_end":18},"name":"tile_size","qualname":"::meta::attribute::TileDescription::tile_size","value":"math::Vec2<usize>","parent":{"krate":0,"index":3892},"children":[],"decl_id":null,"docs":" The size of each tile.\n Stays the same number of pixels across all levels.\n","sig":null,"attributes":[{"value":"/ The size of each tile.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293429,"byte_end":1293455,"line_start":376,"line_end":376,"column_start":5,"column_end":31}},{"value":"/ Stays the same number of pixels across all levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293460,"byte_end":1293514,"line_start":377,"line_end":377,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3894},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293617,"byte_end":1293627,"line_start":381,"line_end":381,"column_start":9,"column_end":19},"name":"level_mode","qualname":"::meta::attribute::TileDescription::level_mode","value":"meta::attribute::LevelMode","parent":{"krate":0,"index":3892},"children":[],"decl_id":null,"docs":" Whether to also store smaller versions of the image.\n","sig":null,"attributes":[{"value":"/ Whether to also store smaller versions of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293552,"byte_end":1293608,"line_start":380,"line_end":380,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":3895},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293718,"byte_end":1293731,"line_start":384,"line_end":384,"column_start":9,"column_end":22},"name":"rounding_mode","qualname":"::meta::attribute::TileDescription::rounding_mode","value":"math::RoundingMode","parent":{"krate":0,"index":3892},"children":[],"decl_id":null,"docs":" Whether to round up or down when calculating Mip/Rip levels.\n","sig":null,"attributes":[{"value":"/ Whether to round up or down when calculating Mip/Rip levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293645,"byte_end":1293709,"line_start":383,"line_end":383,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3912},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293935,"byte_end":1293943,"line_start":392,"line_end":392,"column_start":5,"column_end":13},"name":"Singular","qualname":"::meta::attribute::LevelMode::Singular","value":"LevelMode::Singular","parent":{"krate":0,"index":3911},"children":[],"decl_id":null,"docs":" Only a single level.\n","sig":null,"attributes":[{"value":"/ Only a single level.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293906,"byte_end":1293930,"line_start":391,"line_end":391,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3914},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293994,"byte_end":1294000,"line_start":395,"line_end":395,"column_start":5,"column_end":11},"name":"MipMap","qualname":"::meta::attribute::LevelMode::MipMap","value":"LevelMode::MipMap","parent":{"krate":0,"index":3911},"children":[],"decl_id":null,"docs":" Levels with a similar aspect ratio.\n","sig":null,"attributes":[{"value":"/ Levels with a similar aspect ratio.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293950,"byte_end":1293989,"line_start":394,"line_end":394,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3916},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294055,"byte_end":1294061,"line_start":398,"line_end":398,"column_start":5,"column_end":11},"name":"RipMap","qualname":"::meta::attribute::LevelMode::RipMap","value":"LevelMode::RipMap","parent":{"krate":0,"index":3911},"children":[],"decl_id":null,"docs":" Levels with all possible aspect ratios.\n","sig":null,"attributes":[{"value":"/ Levels with all possible aspect ratios.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294007,"byte_end":1294050,"line_start":397,"line_end":397,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":3911},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293889,"byte_end":1293898,"line_start":389,"line_end":389,"column_start":10,"column_end":19},"name":"LevelMode","qualname":"::meta::attribute::LevelMode","value":"enum LevelMode { Singular, MipMap, RipMap, }","parent":null,"children":[{"krate":0,"index":3912},{"krate":0,"index":3914},{"krate":0,"index":3916}],"decl_id":null,"docs":" Whether to also store increasingly smaller versions of the original image.\n","sig":null,"attributes":[{"value":"/ Whether to also store increasingly smaller versions of the original image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1293750,"byte_end":1293828,"line_start":387,"line_end":387,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294219,"byte_end":1294228,"line_start":405,"line_end":405,"column_start":10,"column_end":19},"name":"TextBytes","qualname":"::meta::attribute::TextBytes","value":"SmallVec<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" The raw bytes that make up a string in an exr file.\n Each `u8` is a single char.\n","sig":null,"attributes":[{"value":"/ The raw bytes that make up a string in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294067,"byte_end":1294122,"line_start":402,"line_end":402,"column_start":1,"column_end":56}},{"value":"/ Each `u8` is a single char.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294123,"byte_end":1294154,"line_start":403,"line_end":403,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294299,"byte_end":1294308,"line_start":408,"line_end":408,"column_start":10,"column_end":19},"name":"TextSlice","qualname":"::meta::attribute::TextSlice","value":"[u8]","parent":null,"children":[],"decl_id":null,"docs":" A byte slice, interpreted as text\n","sig":null,"attributes":[{"value":"/ A byte slice, interpreted as text","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294252,"byte_end":1294289,"line_start":407,"line_end":407,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294775,"byte_end":1294786,"line_start":431,"line_end":431,"column_start":12,"column_end":23},"name":"new_or_none","qualname":"<Text>::new_or_none","value":"fn new_or_none<impl AsRef<str>>(impl AsRef<str>) -> Option<Self> where\nimpl AsRef<str>: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Text` from an `str` reference.\n Returns `None` if this string contains unsupported chars.\n","sig":null,"attributes":[{"value":"/ Create a `Text` from an `str` reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294653,"byte_end":1294697,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ Returns `None` if this string contains unsupported chars.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294702,"byte_end":1294763,"line_start":430,"line_end":430,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295152,"byte_end":1295164,"line_start":441,"line_end":441,"column_start":12,"column_end":24},"name":"new_or_panic","qualname":"<Text>::new_or_panic","value":"fn new_or_panic<impl AsRef<str>>(impl AsRef<str>) -> Self where\nimpl AsRef<str>: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Text` from an `str` reference.\n Panics if this string contains unsupported chars.\n","sig":null,"attributes":[{"value":"/ Create a `Text` from an `str` reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295038,"byte_end":1295082,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/ Panics if this string contains unsupported chars.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295087,"byte_end":1295140,"line_start":440,"line_end":440,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295394,"byte_end":1295414,"line_start":447,"line_end":447,"column_start":12,"column_end":32},"name":"from_slice_unchecked","qualname":"<Text>::from_slice_unchecked","value":"fn from_slice_unchecked<'_>(&'_ TextSlice) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Text` from a slice of bytes,\n without checking any of the bytes.\n","sig":null,"attributes":[{"value":"/ Create a `Text` from a slice of bytes,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295297,"byte_end":1295339,"line_start":445,"line_end":445,"column_start":5,"column_end":47}},{"value":"/ without checking any of the bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295344,"byte_end":1295382,"line_start":446,"line_end":446,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295624,"byte_end":1295644,"line_start":453,"line_end":453,"column_start":12,"column_end":32},"name":"from_bytes_unchecked","qualname":"<Text>::from_bytes_unchecked","value":"fn from_bytes_unchecked(TextBytes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Text` from the specified bytes object,\n without checking any of the bytes.\n","sig":null,"attributes":[{"value":"/ Create a `Text` from the specified bytes object,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295517,"byte_end":1295569,"line_start":451,"line_end":451,"column_start":5,"column_end":57}},{"value":"/ without checking any of the bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295574,"byte_end":1295612,"line_start":452,"line_end":452,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295769,"byte_end":1295777,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Text>::as_slice","value":"fn as_slice<'_>(&'_ Self) -> &'_ TextSlice","parent":null,"children":[],"decl_id":null,"docs":" The internal ASCII bytes this text is made of.\n","sig":null,"attributes":[{"value":"/ The internal ASCII bytes this text is made of.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295707,"byte_end":1295757,"line_start":457,"line_end":457,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296010,"byte_end":1296018,"line_start":464,"line_end":464,"column_start":12,"column_end":20},"name":"validate","qualname":"<Text>::validate","value":"fn validate<'_, '_>(&'_ Self, bool, Option<&'_ mut bool>) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Check whether this string is valid, adjusting `long_names` if required.\n If `long_names` is not provided, text length will be entirely unchecked.\n","sig":null,"attributes":[{"value":"/ Check whether this string is valid, adjusting `long_names` if required.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295842,"byte_end":1295917,"line_start":462,"line_end":462,"column_start":5,"column_end":80}},{"value":"/ If `long_names` is not provided, text length will be entirely unchecked.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1295922,"byte_end":1295998,"line_start":463,"line_end":463,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296350,"byte_end":1296364,"line_start":470,"line_end":470,"column_start":12,"column_end":26},"name":"validate_bytes","qualname":"<Text>::validate_bytes","value":"fn validate_bytes<'_, '_>(&'_ TextSlice, bool, Option<&'_ mut bool>)\n-> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Check whether some bytes are valid, adjusting `long_names` if required.\n If `long_names` is not provided, text length will be entirely unchecked.\n","sig":null,"attributes":[{"value":"/ Check whether some bytes are valid, adjusting `long_names` if required.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296182,"byte_end":1296257,"line_start":468,"line_end":468,"column_start":5,"column_end":80}},{"value":"/ If `long_names` is not provided, text length will be entirely unchecked.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296262,"byte_end":1296338,"line_start":469,"line_end":469,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296910,"byte_end":1296935,"line_start":484,"line_end":484,"column_start":12,"column_end":37},"name":"null_terminated_byte_size","qualname":"<Text>::null_terminated_byte_size","value":"fn null_terminated_byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The byte count this string would occupy if it were encoded as a null-terminated string.\n","sig":null,"attributes":[{"value":"/ The byte count this string would occupy if it were encoded as a null-terminated string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1296807,"byte_end":1296898,"line_start":483,"line_end":483,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297119,"byte_end":1297138,"line_start":489,"line_end":489,"column_start":12,"column_end":31},"name":"i32_sized_byte_size","qualname":"<Text>::i32_sized_byte_size","value":"fn i32_sized_byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The byte count this string would occupy if it were encoded as a size-prefixed string.\n","sig":null,"attributes":[{"value":"/ The byte count this string would occupy if it were encoded as a size-prefixed string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297018,"byte_end":1297107,"line_start":488,"line_end":488,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297294,"byte_end":1297309,"line_start":494,"line_end":494,"column_start":12,"column_end":27},"name":"write_i32_sized","qualname":"<Text>::write_i32_sized","value":"fn write_i32_sized<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where\nW: Write","parent":null,"children":[],"decl_id":null,"docs":" Write the length of a string and then the contents with that length.\n","sig":null,"attributes":[{"value":"/ Write the length of a string and then the contents with that length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297210,"byte_end":1297282,"line_start":493,"line_end":493,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297865,"byte_end":1297879,"line_start":507,"line_end":507,"column_start":12,"column_end":26},"name":"read_i32_sized","qualname":"<Text>::read_i32_sized","value":"fn read_i32_sized<R, '_>(&'_ mut R, usize) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the length of a string and then the contents with that length.\n","sig":null,"attributes":[{"value":"/ Read the length of a string and then the contents with that length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1297782,"byte_end":1297853,"line_start":506,"line_end":506,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1298200,"byte_end":1298210,"line_start":513,"line_end":513,"column_start":12,"column_end":22},"name":"read_sized","qualname":"<Text>::read_sized","value":"fn read_sized<R, '_>(&'_ mut R, usize) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the contents with that length.\n","sig":null,"attributes":[{"value":"/ Read the contents with that length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1298149,"byte_end":1298188,"line_start":512,"line_end":512,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1298917,"byte_end":1298938,"line_start":532,"line_end":532,"column_start":12,"column_end":33},"name":"write_null_terminated","qualname":"<Text>::write_null_terminated","value":"fn write_null_terminated<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where\nW: Write","parent":null,"children":[],"decl_id":null,"docs":" Write the string contents and a null-terminator.\n","sig":null,"attributes":[{"value":"/ Write the string contents and a null-terminator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1298853,"byte_end":1298905,"line_start":531,"line_end":531,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1299527,"byte_end":1299547,"line_start":546,"line_end":546,"column_start":12,"column_end":32},"name":"read_null_terminated","qualname":"<Text>::read_null_terminated","value":"fn read_null_terminated<R, '_>(&'_ mut R, usize) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read a string until the null-terminator is found. Then skips the null-terminator.\n","sig":null,"attributes":[{"value":"/ Read a string until the null-terminator is found. Then skips the null-terminator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1299430,"byte_end":1299515,"line_start":545,"line_end":545,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301470,"byte_end":1301475,"line_start":602,"line_end":602,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Text>::bytes","value":"fn bytes<'_>(&'_ Self) -> &'_ [u8]","parent":null,"children":[],"decl_id":null,"docs":" The underlying bytes that represent this text.\n","sig":null,"attributes":[{"value":"/ The underlying bytes that represent this text.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301408,"byte_end":1301458,"line_start":601,"line_end":601,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301708,"byte_end":1301713,"line_start":608,"line_end":608,"column_start":12,"column_end":17},"name":"chars","qualname":"<Text>::chars","value":"fn chars<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the individual chars in this text, similar to `String::chars()`.\n Does not do any heap-allocation but borrows from this instance instead.\n","sig":null,"attributes":[{"value":"/ Iterate over the individual chars in this text, similar to `String::chars()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301535,"byte_end":1301616,"line_start":606,"line_end":606,"column_start":5,"column_end":86}},{"value":"/ Does not do any heap-allocation but borrows from this instance instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301621,"byte_end":1301696,"line_start":607,"line_end":607,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301882,"byte_end":1301884,"line_start":613,"line_end":613,"column_start":12,"column_end":14},"name":"eq","qualname":"<Text>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare this `exr::Text` with a plain `&str`.\n","sig":null,"attributes":[{"value":"/ Compare this `exr::Text` with a plain `&str`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301821,"byte_end":1301870,"line_start":612,"line_end":612,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302052,"byte_end":1302071,"line_start":618,"line_end":618,"column_start":12,"column_end":31},"name":"eq_case_insensitive","qualname":"<Text>::eq_case_insensitive","value":"fn eq_case_insensitive<'_, '_>(&'_ Self, &'_ str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare this `exr::Text` with a plain `&str` ignoring capitalization.\n","sig":null,"attributes":[{"value":"/ Compare this `exr::Text` with a plain `&str` ignoring capitalization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1301967,"byte_end":1302040,"line_start":617,"line_end":617,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302451,"byte_end":1302453,"line_start":628,"line_end":628,"column_start":8,"column_end":10},"name":"eq","qualname":"<Text as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ str) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302554,"byte_end":1302556,"line_start":634,"line_end":634,"column_start":8,"column_end":10},"name":"eq","qualname":"<str as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302682,"byte_end":1302688,"line_start":642,"line_end":642,"column_start":8,"column_end":14},"name":"borrow","qualname":"<Text as std::borrow::Borrow>::borrow","value":"fn borrow<'_>(&'_ Self) -> &'_ TextSlice","parent":{"krate":2,"index":2862},"children":[],"decl_id":{"krate":2,"index":2864},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302874,"byte_end":1302878,"line_start":649,"line_end":649,"column_start":8,"column_end":12},"name":"hash","qualname":"<Text as std::hash::Hash>::hash","value":"fn hash<H, '_, '_>(&'_ Self, &'_ mut H) where H: Hasher","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302990,"byte_end":1302994,"line_start":655,"line_end":655,"column_start":8,"column_end":12},"name":"into","qualname":"<Text as std::convert::Into>::into","value":"fn into(Self) -> String","parent":{"krate":2,"index":3171},"children":[],"decl_id":{"krate":2,"index":3173},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303152,"byte_end":1303156,"line_start":663,"line_end":663,"column_start":8,"column_end":12},"name":"from","qualname":"<Text as std::convert::From>::from","value":"fn from(&'s str) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":" Panics if the string contains an unsupported character\n","sig":null,"attributes":[{"value":"/ Panics if the string contains an unsupported character","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303086,"byte_end":1303144,"line_start":662,"line_end":662,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303647,"byte_end":1303650,"line_start":684,"line_end":684,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Text as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut ::std::fmt::Formatter)\n-> ::std::fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303859,"byte_end":1303862,"line_start":691,"line_end":691,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Text as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut ::std::fmt::Formatter)\n-> ::std::fmt::Result","parent":{"krate":2,"index":10305},"children":[],"decl_id":{"krate":2,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304149,"byte_end":1304152,"line_start":706,"line_end":706,"column_start":12,"column_end":15},"name":"new","qualname":"<ChannelList>::new","value":"fn new(SmallVec<[ChannelDescription; ]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Does not validate channel order.\n","sig":null,"attributes":[{"value":"/ Does not validate channel order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304101,"byte_end":1304137,"line_start":705,"line_end":705,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304936,"byte_end":1304961,"line_start":725,"line_end":725,"column_start":12,"column_end":37},"name":"channels_with_byte_offset","qualname":"<ChannelList>::channels_with_byte_offset","value":"fn channels_with_byte_offset<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the channels, and adds to each channel the byte offset of the channels sample type.\n Assumes the internal channel list is properly sorted.\n","sig":null,"attributes":[{"value":"/ Iterate over the channels, and adds to each channel the byte offset of the channels sample type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304762,"byte_end":1304862,"line_start":723,"line_end":723,"column_start":5,"column_end":105}},{"value":"/ Assumes the internal channel list is properly sorted.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304867,"byte_end":1304924,"line_start":724,"line_end":724,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1305414,"byte_end":1305435,"line_start":735,"line_end":735,"column_start":12,"column_end":33},"name":"find_index_of_channel","qualname":"<ChannelList>::find_index_of_channel","value":"fn find_index_of_channel<'_, '_>(&'_ Self, &'_ Text) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the channel with the exact name, case sensitive, or none.\n Potentially uses less than linear time.\n","sig":null,"attributes":[{"value":"/ Return the index of the channel with the exact name, case sensitive, or none.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1305273,"byte_end":1305354,"line_start":733,"line_end":733,"column_start":5,"column_end":86}},{"value":"/ Potentially uses less than linear time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1305359,"byte_end":1305402,"line_start":734,"line_end":734,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306405,"byte_end":1306410,"line_start":759,"line_end":759,"column_start":12,"column_end":17},"name":"parse","qualname":"<BlockType>::parse","value":"fn parse(Text) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return a `BlockType` object from the specified attribute text value.\n","sig":null,"attributes":[{"value":"/ Return a `BlockType` object from the specified attribute text value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306321,"byte_end":1306393,"line_start":758,"line_end":758,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306919,"byte_end":1306924,"line_start":772,"line_end":772,"column_start":12,"column_end":17},"name":"write","qualname":"<BlockType>::write","value":"fn write<'_, '_, impl Write>(&'_ Self, &'_ mut impl Write) -> UnitResult where\nimpl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306844,"byte_end":1306907,"line_start":771,"line_end":771,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307144,"byte_end":1307157,"line_start":778,"line_end":778,"column_start":12,"column_end":25},"name":"to_text_bytes","qualname":"<BlockType>::to_text_bytes","value":"fn to_text_bytes<'_>(&'_ Self) -> &'_ [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw attribute text value this type is represented by in a file.\n","sig":null,"attributes":[{"value":"/ Returns the raw attribute text value this type is represented by in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307053,"byte_end":1307132,"line_start":777,"line_end":777,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307548,"byte_end":1307557,"line_start":788,"line_end":788,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<BlockType>::byte_size","value":"fn byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307482,"byte_end":1307536,"line_start":787,"line_end":787,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307706,"byte_end":1307710,"line_start":797,"line_end":797,"column_start":12,"column_end":16},"name":"zero","qualname":"<IntegerBounds>::zero","value":"fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a box with no size located at (0,0).\n","sig":null,"attributes":[{"value":"/ Create a box with no size located at (0,0).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307647,"byte_end":1307694,"line_start":796,"line_end":796,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307834,"byte_end":1307849,"line_start":802,"line_end":802,"column_start":12,"column_end":27},"name":"from_dimensions","qualname":"<IntegerBounds>::from_dimensions","value":"fn from_dimensions<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>) -> Self\nwhere impl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Create a box with a size starting at zero.\n","sig":null,"attributes":[{"value":"/ Create a box with a size starting at zero.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307776,"byte_end":1307822,"line_start":801,"line_end":801,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307997,"byte_end":1308000,"line_start":807,"line_end":807,"column_start":12,"column_end":15},"name":"new","qualname":"<IntegerBounds>::new","value":"fn new<impl Into<Vec2<i32>>,\nimpl Into<Vec2<usize>>>(impl Into<Vec2<i32>>, impl Into<Vec2<usize>>) -> Self\nwhere impl Into<Vec2<i32>>: Into<Vec2<i32>>,\nimpl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Create a box with a size and an origin point.\n","sig":null,"attributes":[{"value":"/ Create a box with a size and an origin point.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307936,"byte_end":1307985,"line_start":806,"line_end":806,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308325,"byte_end":1308328,"line_start":814,"line_end":814,"column_start":12,"column_end":15},"name":"end","qualname":"<IntegerBounds>::end","value":"fn end(Self) -> Vec2<i32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the top-right coordinate of the rectangle.\n The row and column described by this vector are not included in the rectangle,\n just like `Vec::len()`.\n","sig":null,"attributes":[{"value":"/ Returns the top-right coordinate of the rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308140,"byte_end":1308194,"line_start":811,"line_end":811,"column_start":5,"column_end":59}},{"value":"/ The row and column described by this vector are not included in the rectangle,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308199,"byte_end":1308281,"line_start":812,"line_end":812,"column_start":5,"column_end":87}},{"value":"/ just like `Vec::len()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308286,"byte_end":1308313,"line_start":813,"line_end":813,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308525,"byte_end":1308528,"line_start":819,"line_end":819,"column_start":12,"column_end":15},"name":"max","qualname":"<IntegerBounds>::max","value":"fn max(Self) -> Vec2<i32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum coordinate that a value in this rectangle may have.\n","sig":null,"attributes":[{"value":"/ Returns the maximum coordinate that a value in this rectangle may have.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308438,"byte_end":1308513,"line_start":818,"line_end":818,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308631,"byte_end":1308639,"line_start":824,"line_end":824,"column_start":12,"column_end":20},"name":"validate","qualname":"<IntegerBounds>::validate","value":"fn validate<'_>(&'_ Self, Option<Vec2<usize>>) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1308592,"byte_end":1308619,"line_start":823,"line_end":823,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1309809,"byte_end":1309818,"line_start":856,"line_end":856,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<IntegerBounds>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1309743,"byte_end":1309797,"line_start":855,"line_end":855,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1309945,"byte_end":1309950,"line_start":861,"line_end":861,"column_start":12,"column_end":17},"name":"write","qualname":"<IntegerBounds>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1309870,"byte_end":1309933,"line_start":860,"line_end":860,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1310285,"byte_end":1310289,"line_start":873,"line_end":873,"column_start":12,"column_end":16},"name":"read","qualname":"<IntegerBounds>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1310235,"byte_end":1310273,"line_start":872,"line_end":872,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311131,"byte_end":1311142,"line_start":896,"line_end":896,"column_start":12,"column_end":23},"name":"with_origin","qualname":"<IntegerBounds>::with_origin","value":"fn with_origin(Self, Vec2<i32>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new rectangle which is offset by the specified origin.\n","sig":null,"attributes":[{"value":"/ Create a new rectangle which is offset by the specified origin.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311052,"byte_end":1311119,"line_start":895,"line_end":895,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311391,"byte_end":1311399,"line_start":901,"line_end":901,"column_start":12,"column_end":20},"name":"contains","qualname":"<IntegerBounds>::contains","value":"fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the specified rectangle is equal to or inside this rectangle.\n","sig":null,"attributes":[{"value":"/ Returns whether the specified rectangle is equal to or inside this rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311298,"byte_end":1311379,"line_start":900,"line_end":900,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311724,"byte_end":1311733,"line_start":913,"line_end":913,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<FloatRect>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311658,"byte_end":1311712,"line_start":912,"line_end":912,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311860,"byte_end":1311865,"line_start":918,"line_end":918,"column_start":12,"column_end":17},"name":"write","qualname":"<FloatRect>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311785,"byte_end":1311848,"line_start":917,"line_end":917,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312134,"byte_end":1312138,"line_start":927,"line_end":927,"column_start":12,"column_end":16},"name":"read","qualname":"<FloatRect>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312084,"byte_end":1312122,"line_start":926,"line_end":926,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312528,"byte_end":1312544,"line_start":943,"line_end":943,"column_start":12,"column_end":28},"name":"bytes_per_sample","qualname":"<SampleType>::bytes_per_sample","value":"fn bytes_per_sample<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many bytes a single sample takes up.\n","sig":null,"attributes":[{"value":"/ How many bytes a single sample takes up.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312472,"byte_end":1312516,"line_start":942,"line_end":942,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312812,"byte_end":1312821,"line_start":952,"line_end":952,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<SampleType>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312746,"byte_end":1312800,"line_start":951,"line_end":951,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312944,"byte_end":1312949,"line_start":957,"line_end":957,"column_start":12,"column_end":17},"name":"write","qualname":"<SampleType>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312869,"byte_end":1312932,"line_start":956,"line_end":956,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313236,"byte_end":1313240,"line_start":968,"line_end":968,"column_start":12,"column_end":16},"name":"read","qualname":"<SampleType>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313186,"byte_end":1313224,"line_start":967,"line_end":967,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313827,"byte_end":1313855,"line_start":982,"line_end":982,"column_start":12,"column_end":40},"name":"guess_quantization_linearity","qualname":"<ChannelDescription>::guess_quantization_linearity","value":"fn guess_quantization_linearity<'_>(&'_ Text) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Choose whether to compress samples linearly or not, based on the channel name.\n Luminance-based channels will be compressed differently than linear data such as alpha.\n","sig":null,"attributes":[{"value":"/ Choose whether to compress samples linearly or not, based on the channel name.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313637,"byte_end":1313719,"line_start":980,"line_end":980,"column_start":5,"column_end":87}},{"value":"/ Luminance-based channels will be compressed differently than linear data such as alpha.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313724,"byte_end":1313815,"line_start":981,"line_end":981,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1314382,"byte_end":1314387,"line_start":993,"line_end":993,"column_start":12,"column_end":17},"name":"named","qualname":"<ChannelDescription>::named","value":"fn named<impl Into<Text>>(impl Into<Text>, SampleType) -> Self where\nimpl Into<Text>: Into<Text>","parent":null,"children":[],"decl_id":null,"docs":" Create a new channel with the specified properties and a sampling rate of (1,1).\n Automatically chooses the linearity for compression based on the channel name.\n","sig":null,"attributes":[{"value":"/ Create a new channel with the specified properties and a sampling rate of (1,1).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1314199,"byte_end":1314283,"line_start":991,"line_end":991,"column_start":5,"column_end":89}},{"value":"/ Automatically chooses the linearity for compression based on the channel name.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1314288,"byte_end":1314370,"line_start":992,"line_end":992,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1314853,"byte_end":1314856,"line_start":1004,"line_end":1004,"column_start":12,"column_end":15},"name":"new","qualname":"<ChannelDescription>::new","value":"fn new<impl Into<Text>>(impl Into<Text>, SampleType, bool) -> Self where\nimpl Into<Text>: Into<Text>","parent":null,"children":[],"decl_id":null,"docs":" Create a new channel with the specified properties and a sampling rate of (1,1).\n","sig":null,"attributes":[{"value":"/ Create a new channel with the specified properties and a sampling rate of (1,1).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1314757,"byte_end":1314841,"line_start":1003,"line_end":1003,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315164,"byte_end":1315181,"line_start":1010,"line_end":1010,"column_start":12,"column_end":29},"name":"subsampled_pixels","qualname":"<ChannelDescription>::subsampled_pixels","value":"fn subsampled_pixels<'_>(&'_ Self, Vec2<usize>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The count of pixels this channel contains, respecting subsampling.\n","sig":null,"attributes":[{"value":"/ The count of pixels this channel contains, respecting subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315040,"byte_end":1315110,"line_start":1008,"line_end":1008,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315361,"byte_end":1315382,"line_start":1015,"line_end":1015,"column_start":12,"column_end":33},"name":"subsampled_resolution","qualname":"<ChannelDescription>::subsampled_resolution","value":"fn subsampled_resolution<'_>(&'_ Self, Vec2<usize>) -> Vec2<usize>","parent":null,"children":[],"decl_id":null,"docs":" The resolution pf this channel, respecting subsampling.\n","sig":null,"attributes":[{"value":"/ The resolution pf this channel, respecting subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315290,"byte_end":1315349,"line_start":1014,"line_end":1014,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315544,"byte_end":1315553,"line_start":1020,"line_end":1020,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<ChannelDescription>::byte_size","value":"fn byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315478,"byte_end":1315532,"line_start":1019,"line_end":1019,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315855,"byte_end":1315860,"line_start":1029,"line_end":1029,"column_start":12,"column_end":17},"name":"write","qualname":"<ChannelDescription>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1315780,"byte_end":1315843,"line_start":1028,"line_end":1028,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1316378,"byte_end":1316382,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"read","qualname":"<ChannelDescription>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1316328,"byte_end":1316366,"line_start":1044,"line_end":1044,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1317188,"byte_end":1317196,"line_start":1069,"line_end":1069,"column_start":12,"column_end":20},"name":"validate","qualname":"<ChannelDescription>::validate","value":"fn validate<'_>(&'_ Self, bool, IntegerBounds, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1317149,"byte_end":1317176,"line_start":1068,"line_end":1068,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318575,"byte_end":1318584,"line_start":1102,"line_end":1102,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<ChannelList>::byte_size","value":"fn byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318509,"byte_end":1318563,"line_start":1101,"line_end":1101,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318873,"byte_end":1318878,"line_start":1108,"line_end":1108,"column_start":12,"column_end":17},"name":"write","qualname":"<ChannelList>::write","value":"fn write<'_, '_, impl Write>(&'_ Self, &'_ mut impl Write) -> UnitResult where\nimpl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n Assumes channels are sorted alphabetically and all values are validated.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318717,"byte_end":1318780,"line_start":1106,"line_end":1106,"column_start":5,"column_end":68}},{"value":"/ Assumes channels are sorted alphabetically and all values are validated.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318785,"byte_end":1318861,"line_start":1107,"line_end":1107,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1319121,"byte_end":1319125,"line_start":1118,"line_end":1118,"column_start":12,"column_end":16},"name":"read","qualname":"<ChannelList>::read","value":"fn read<'_, impl Read>(&'_ mut PeekRead<impl Read>) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1319071,"byte_end":1319109,"line_start":1117,"line_end":1117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1319443,"byte_end":1319451,"line_start":1128,"line_end":1128,"column_start":12,"column_end":20},"name":"validate","qualname":"<ChannelList>::validate","value":"fn validate<'_>(&'_ Self, bool, IntegerBounds, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Check if channels are valid and sorted.\n","sig":null,"attributes":[{"value":"/ Check if channels are valid and sorted.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1319388,"byte_end":1319431,"line_start":1127,"line_end":1127,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320588,"byte_end":1320597,"line_start":1158,"line_end":1158,"column_start":15,"column_end":24},"name":"BYTE_SIZE","qualname":"::meta::attribute::TimeCode::BYTE_SIZE","value":"usize","parent":{"krate":0,"index":727},"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320519,"byte_end":1320573,"line_start":1157,"line_end":1157,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320705,"byte_end":1320713,"line_start":1161,"line_end":1161,"column_start":12,"column_end":20},"name":"validate","qualname":"<TimeCode>::validate","value":"fn validate<'_>(&'_ Self, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Returns an error if this time code is considered invalid.\n","sig":null,"attributes":[{"value":"/ Returns an error if this time code is considered invalid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320632,"byte_end":1320693,"line_start":1160,"line_end":1160,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1321554,"byte_end":1321575,"line_start":1178,"line_end":1178,"column_start":12,"column_end":33},"name":"pack_time_as_tv60_u32","qualname":"<TimeCode>::pack_time_as_tv60_u32","value":"fn pack_time_as_tv60_u32<'_>(&'_ Self) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Pack the SMPTE time code into a u32 value, according to TV60 packing.\n This is the encoding which is used within a binary exr file.\n","sig":null,"attributes":[{"value":"/ Pack the SMPTE time code into a u32 value, according to TV60 packing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1321400,"byte_end":1321473,"line_start":1176,"line_end":1176,"column_start":5,"column_end":78}},{"value":"/ This is the encoding which is used within a binary exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1321478,"byte_end":1321542,"line_start":1177,"line_end":1177,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1322415,"byte_end":1322429,"line_start":1198,"line_end":1198,"column_start":12,"column_end":26},"name":"from_tv60_time","qualname":"<TimeCode>::from_tv60_time","value":"fn from_tv60_time(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unpack a time code from one TV60 encoded u32 value and the encoded user data.\n This is the encoding which is used within a binary exr file.\n","sig":null,"attributes":[{"value":"/ Unpack a time code from one TV60 encoded u32 value and the encoded user data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1322253,"byte_end":1322334,"line_start":1196,"line_end":1196,"column_start":5,"column_end":86}},{"value":"/ This is the encoding which is used within a binary exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1322339,"byte_end":1322403,"line_start":1197,"line_end":1197,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1323519,"byte_end":1323540,"line_start":1219,"line_end":1219,"column_start":12,"column_end":33},"name":"pack_time_as_tv50_u32","qualname":"<TimeCode>::pack_time_as_tv50_u32","value":"fn pack_time_as_tv50_u32<'_>(&'_ Self) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Pack the SMPTE time code into a u32 value, according to TV50 packing.\n This encoding does not support the `drop_frame` flag, it will be lost.\n","sig":null,"attributes":[{"value":"/ Pack the SMPTE time code into a u32 value, according to TV50 packing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1323355,"byte_end":1323428,"line_start":1217,"line_end":1217,"column_start":5,"column_end":78}},{"value":"/ This encoding does not support the `drop_frame` flag, it will be lost.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1323433,"byte_end":1323507,"line_start":1218,"line_end":1218,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324115,"byte_end":1324129,"line_start":1233,"line_end":1233,"column_start":12,"column_end":26},"name":"from_tv50_time","qualname":"<TimeCode>::from_tv50_time","value":"fn from_tv50_time(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unpack a time code from one TV50 encoded u32 value and the encoded user data.\n This encoding does not support the `drop_frame` flag, it will always be false.\n","sig":null,"attributes":[{"value":"/ Unpack a time code from one TV50 encoded u32 value and the encoded user data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1323935,"byte_end":1324016,"line_start":1231,"line_end":1231,"column_start":5,"column_end":86}},{"value":"/ This encoding does not support the `drop_frame` flag, it will always be false.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324021,"byte_end":1324103,"line_start":1232,"line_end":1232,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324756,"byte_end":1324779,"line_start":1252,"line_end":1252,"column_start":12,"column_end":35},"name":"pack_time_as_film24_u32","qualname":"<TimeCode>::pack_time_as_film24_u32","value":"fn pack_time_as_film24_u32<'_>(&'_ Self) -> Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Pack the SMPTE time code into a u32 value, according to FILM24 packing.\n This encoding does not support the `drop_frame` and `color_frame` flags, they will be lost.\n","sig":null,"attributes":[{"value":"/ Pack the SMPTE time code into a u32 value, according to FILM24 packing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324569,"byte_end":1324644,"line_start":1250,"line_end":1250,"column_start":5,"column_end":80}},{"value":"/ This encoding does not support the `drop_frame` and `color_frame` flags, they will be lost.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324649,"byte_end":1324744,"line_start":1251,"line_end":1251,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1325132,"byte_end":1325148,"line_start":1261,"line_end":1261,"column_start":12,"column_end":28},"name":"from_film24_time","qualname":"<TimeCode>::from_film24_time","value":"fn from_film24_time(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unpack a time code from one TV60 encoded u32 value and the encoded user data.\n This encoding does not support the `drop_frame` and `color_frame` flags, they will always be `false`.\n","sig":null,"attributes":[{"value":"/ Unpack a time code from one TV60 encoded u32 value and the encoded user data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1324929,"byte_end":1325010,"line_start":1259,"line_end":1259,"column_start":5,"column_end":86}},{"value":"/ This encoding does not support the `drop_frame` and `color_frame` flags, they will always be `false`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1325015,"byte_end":1325120,"line_start":1260,"line_end":1260,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1325761,"byte_end":1325782,"line_start":1278,"line_end":1278,"column_start":12,"column_end":33},"name":"pack_user_data_as_u32","qualname":"<TimeCode>::pack_user_data_as_u32","value":"fn pack_user_data_as_u32<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Pack the user data `u8` array into one u32.\n User data values are clamped to the valid range (maximum value is 4).\n","sig":null,"attributes":[{"value":"/ Pack the user data `u8` array into one u32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1325624,"byte_end":1325671,"line_start":1276,"line_end":1276,"column_start":5,"column_end":52}},{"value":"/ User data values are clamped to the valid range (maximum value is 4).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1325676,"byte_end":1325749,"line_start":1277,"line_end":1277,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1326685,"byte_end":1326690,"line_start":1296,"line_end":1296,"column_start":12,"column_end":17},"name":"write","qualname":"<TimeCode>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Write this time code to the byte stream, encoded as TV60 integers.\n Returns an `Error::Invalid` if the fields are out of the allowed range.\n","sig":null,"attributes":[{"value":"/ Write this time code to the byte stream, encoded as TV60 integers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1326523,"byte_end":1326593,"line_start":1294,"line_end":1294,"column_start":5,"column_end":75}},{"value":"/ Returns an `Error::Invalid` if the fields are out of the allowed range.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1326598,"byte_end":1326673,"line_start":1295,"line_end":1295,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1326973,"byte_end":1326977,"line_start":1303,"line_end":1303,"column_start":12,"column_end":16},"name":"read","qualname":"<TimeCode>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the time code, without validating, extracting from TV60 integers.\n","sig":null,"attributes":[{"value":"/ Read the time code, without validating, extracting from TV60 integers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1326887,"byte_end":1326961,"line_start":1302,"line_end":1302,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327270,"byte_end":1327279,"line_start":1313,"line_end":1313,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<Chromaticities>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327204,"byte_end":1327258,"line_start":1312,"line_end":1312,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327406,"byte_end":1327411,"line_start":1318,"line_end":1318,"column_start":12,"column_end":17},"name":"write","qualname":"<Chromaticities>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327331,"byte_end":1327394,"line_start":1317,"line_end":1317,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327837,"byte_end":1327841,"line_start":1334,"line_end":1334,"column_start":12,"column_end":16},"name":"read","qualname":"<Chromaticities>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327787,"byte_end":1327825,"line_start":1333,"line_end":1333,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328262,"byte_end":1328271,"line_start":1347,"line_end":1347,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<Compression>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328196,"byte_end":1328250,"line_start":1346,"line_end":1346,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328381,"byte_end":1328386,"line_start":1350,"line_end":1350,"column_start":12,"column_end":17},"name":"write","qualname":"<Compression>::write","value":"fn write<W, '_>(Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328306,"byte_end":1328369,"line_start":1349,"line_end":1349,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328863,"byte_end":1328867,"line_start":1368,"line_end":1368,"column_start":12,"column_end":16},"name":"read","qualname":"<Compression>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328813,"byte_end":1328851,"line_start":1367,"line_end":1367,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329419,"byte_end":1329428,"line_start":1389,"line_end":1389,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<EnvironmentMap>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329353,"byte_end":1329407,"line_start":1388,"line_end":1388,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329550,"byte_end":1329555,"line_start":1394,"line_end":1394,"column_start":12,"column_end":17},"name":"write","qualname":"<EnvironmentMap>::write","value":"fn write<W, '_>(Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329475,"byte_end":1329538,"line_start":1393,"line_end":1393,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329827,"byte_end":1329831,"line_start":1405,"line_end":1405,"column_start":12,"column_end":16},"name":"read","qualname":"<EnvironmentMap>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329777,"byte_end":1329815,"line_start":1404,"line_end":1404,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330190,"byte_end":1330199,"line_start":1418,"line_end":1418,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<KeyCode>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330124,"byte_end":1330178,"line_start":1417,"line_end":1417,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330326,"byte_end":1330331,"line_start":1423,"line_end":1423,"column_start":12,"column_end":17},"name":"write","qualname":"<KeyCode>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330251,"byte_end":1330314,"line_start":1422,"line_end":1422,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330722,"byte_end":1330726,"line_start":1434,"line_end":1434,"column_start":12,"column_end":16},"name":"read","qualname":"<KeyCode>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330672,"byte_end":1330710,"line_start":1433,"line_end":1433,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331235,"byte_end":1331244,"line_start":1450,"line_end":1450,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<LineOrder>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331169,"byte_end":1331223,"line_start":1449,"line_end":1449,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331366,"byte_end":1331371,"line_start":1455,"line_end":1455,"column_start":12,"column_end":17},"name":"write","qualname":"<LineOrder>::write","value":"fn write<W, '_>(Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331291,"byte_end":1331354,"line_start":1454,"line_end":1454,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331671,"byte_end":1331675,"line_start":1467,"line_end":1467,"column_start":12,"column_end":16},"name":"read","qualname":"<LineOrder>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331621,"byte_end":1331659,"line_start":1466,"line_end":1466,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1332056,"byte_end":1332065,"line_start":1484,"line_end":1484,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<Preview>::byte_size","value":"fn byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331990,"byte_end":1332044,"line_start":1483,"line_end":1483,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1332221,"byte_end":1332226,"line_start":1489,"line_end":1489,"column_start":12,"column_end":17},"name":"write","qualname":"<Preview>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1332146,"byte_end":1332209,"line_start":1488,"line_end":1488,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1332512,"byte_end":1332516,"line_start":1498,"line_end":1498,"column_start":12,"column_end":16},"name":"read","qualname":"<Preview>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1332462,"byte_end":1332500,"line_start":1497,"line_end":1497,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333545,"byte_end":1333553,"line_start":1530,"line_end":1530,"column_start":12,"column_end":20},"name":"validate","qualname":"<Preview>::validate","value":"fn validate<'_>(&'_ Self, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333506,"byte_end":1333533,"line_start":1529,"line_end":1529,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333830,"byte_end":1333833,"line_start":1540,"line_end":1540,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Preview as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut ::std::fmt::Formatter)\n-> ::std::fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334082,"byte_end":1334091,"line_start":1548,"line_end":1548,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<TileDescription>::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334016,"byte_end":1334070,"line_start":1547,"line_end":1547,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334265,"byte_end":1334270,"line_start":1553,"line_end":1553,"column_start":12,"column_end":17},"name":"write","qualname":"<TileDescription>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334190,"byte_end":1334253,"line_start":1552,"line_end":1552,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334926,"byte_end":1334930,"line_start":1574,"line_end":1574,"column_start":12,"column_end":16},"name":"read","qualname":"<TileDescription>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1334876,"byte_end":1334914,"line_start":1573,"line_end":1573,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1335926,"byte_end":1335934,"line_start":1602,"line_end":1602,"column_start":12,"column_end":20},"name":"validate","qualname":"<TileDescription>::validate","value":"fn validate<'_>(&'_ Self) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1335887,"byte_end":1335914,"line_start":1601,"line_end":1601,"column_start":5,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1336451,"byte_end":1336460,"line_start":1618,"line_end":1618,"column_start":8,"column_end":17},"name":"byte_size","qualname":"::meta::attribute::byte_size","value":"fn byte_size<'_, '_>(&'_ Text, &'_ AttributeValue) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this attribute would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this attribute would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1336260,"byte_end":1336324,"line_start":1616,"line_end":1616,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1336760,"byte_end":1336765,"line_start":1626,"line_end":1626,"column_start":8,"column_end":13},"name":"write","qualname":"::meta::attribute::write","value":"fn write<W, '_, '_, '_>(&'_ [u8], &'_ AttributeValue, &'_ mut W) -> UnitResult\nwhere W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this attribute to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this attribute to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1336688,"byte_end":1336752,"line_start":1625,"line_end":1625,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337154,"byte_end":1337158,"line_start":1634,"line_end":1634,"column_start":8,"column_end":12},"name":"read","qualname":"::meta::attribute::read","value":"fn read<'_, impl Read>(&'_ mut PeekRead<impl Read>, usize)\n-> Result<(Text, Result<AttributeValue>)> where impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the attribute without validating. The result may be `Ok` even if this single attribute is invalid.\n","sig":null,"attributes":[{"value":"/ Read the attribute without validating. The result may be `Ok` even if this single attribute is invalid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337039,"byte_end":1337146,"line_start":1633,"line_end":1633,"column_start":1,"column_end":108}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337556,"byte_end":1337564,"line_start":1643,"line_end":1643,"column_start":8,"column_end":16},"name":"validate","qualname":"::meta::attribute::validate","value":"fn validate<'_, '_,\n'_>(&'_ Text, &'_ AttributeValue, &'_ mut bool, bool, IntegerBounds, bool)\n-> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this attribute.\n","sig":null,"attributes":[{"value":"/ Validate this attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337520,"byte_end":1337548,"line_start":1642,"line_end":1642,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337994,"byte_end":1338003,"line_start":1652,"line_end":1652,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<AttributeValue>::byte_size","value":"fn byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337928,"byte_end":1337982,"line_start":1651,"line_end":1651,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1339771,"byte_end":1339780,"line_start":1696,"line_end":1696,"column_start":12,"column_end":21},"name":"kind_name","qualname":"<AttributeValue>::kind_name","value":"fn kind_name<'_>(&'_ Self) -> &'_ [u8]","parent":null,"children":[],"decl_id":null,"docs":" The exr name string of the type that an attribute can have.\n","sig":null,"attributes":[{"value":"/ The exr name string of the type that an attribute can have.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1339696,"byte_end":1339759,"line_start":1695,"line_end":1695,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1341080,"byte_end":1341085,"line_start":1730,"line_end":1730,"column_start":12,"column_end":17},"name":"write","qualname":"<AttributeValue>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1341005,"byte_end":1341068,"line_start":1729,"line_end":1729,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1343322,"byte_end":1343326,"line_start":1778,"line_end":1778,"column_start":12,"column_end":16},"name":"read","qualname":"<AttributeValue>::read","value":"fn read<'_, impl Read>(&'_ mut PeekRead<impl Read>, Text, usize)\n-> Result<Result<Self>> where impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n Returns `Ok(Ok(attribute))` for valid attributes.\n Returns `Ok(Err(Error))` for invalid attributes from a valid byte source.\n Returns `Err(Error)` for invalid byte sources, for example for invalid files.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1343046,"byte_end":1343084,"line_start":1774,"line_end":1774,"column_start":5,"column_end":43}},{"value":"/ Returns `Ok(Ok(attribute))` for valid attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1343089,"byte_end":1343142,"line_start":1775,"line_end":1775,"column_start":5,"column_end":58}},{"value":"/ Returns `Ok(Err(Error))` for invalid attributes from a valid byte source.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1343147,"byte_end":1343224,"line_start":1776,"line_end":1776,"column_start":5,"column_end":82}},{"value":"/ Returns `Err(Error)` for invalid byte sources, for example for invalid files.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1343229,"byte_end":1343310,"line_start":1777,"line_end":1777,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1346999,"byte_end":1347007,"line_start":1870,"line_end":1870,"column_start":12,"column_end":20},"name":"validate","qualname":"<AttributeValue>::validate","value":"fn validate<'_>(&'_ Self, bool, IntegerBounds, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1346960,"byte_end":1346987,"line_start":1869,"line_end":1869,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1347718,"byte_end":1347724,"line_start":1891,"line_end":1891,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<AttributeValue>::to_i32","value":"fn to_i32<'_>(&'_ Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(i32)` if this attribute is an i32.\n","sig":null,"attributes":[{"value":"/ Return `Ok(i32)` if this attribute is an i32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1347657,"byte_end":1347706,"line_start":1890,"line_end":1890,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1347943,"byte_end":1347949,"line_start":1899,"line_end":1899,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<AttributeValue>::to_f32","value":"fn to_f32<'_>(&'_ Self) -> Result<f32>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(f32)` if this attribute is an f32.\n","sig":null,"attributes":[{"value":"/ Return `Ok(f32)` if this attribute is an f32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1347882,"byte_end":1347931,"line_start":1898,"line_end":1898,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348169,"byte_end":1348178,"line_start":1907,"line_end":1907,"column_start":12,"column_end":21},"name":"into_text","qualname":"<AttributeValue>::into_text","value":"fn into_text(Self) -> Result<Text>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(Text)` if this attribute is a text.\n","sig":null,"attributes":[{"value":"/ Return `Ok(Text)` if this attribute is a text.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348107,"byte_end":1348157,"line_start":1906,"line_end":1906,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348398,"byte_end":1348405,"line_start":1915,"line_end":1915,"column_start":12,"column_end":19},"name":"to_text","qualname":"<AttributeValue>::to_text","value":"fn to_text<'_>(&'_ Self) -> Result<&'_ Text>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(Text)` if this attribute is a text.\n","sig":null,"attributes":[{"value":"/ Return `Ok(Text)` if this attribute is a text.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348336,"byte_end":1348386,"line_start":1914,"line_end":1914,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348657,"byte_end":1348674,"line_start":1923,"line_end":1923,"column_start":12,"column_end":29},"name":"to_chromaticities","qualname":"<AttributeValue>::to_chromaticities","value":"fn to_chromaticities<'_>(&'_ Self) -> Result<Chromaticities>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(Chromaticities)` if this attribute is a chromaticities attribute.\n","sig":null,"attributes":[{"value":"/ Return `Ok(Chromaticities)` if this attribute is a chromaticities attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348565,"byte_end":1348645,"line_start":1922,"line_end":1922,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348925,"byte_end":1348937,"line_start":1931,"line_end":1931,"column_start":12,"column_end":24},"name":"to_time_code","qualname":"<AttributeValue>::to_time_code","value":"fn to_time_code<'_>(&'_ Self) -> Result<TimeCode>","parent":null,"children":[],"decl_id":null,"docs":" Return `Ok(TimeCode)` if this attribute is a time code.\n","sig":null,"attributes":[{"value":"/ Return `Ok(TimeCode)` if this attribute is a time code.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1348854,"byte_end":1348913,"line_start":1930,"line_end":1930,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":834},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349180,"byte_end":1349190,"line_start":1942,"line_end":1942,"column_start":9,"column_end":19},"name":"type_names","qualname":"::meta::attribute::type_names","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":3932},{"krate":0,"index":3933},{"krate":0,"index":3934},{"krate":0,"index":3935},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3944},{"krate":0,"index":3945},{"krate":0,"index":3946},{"krate":0,"index":3947},{"krate":0,"index":3948},{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3951},{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3954}],"decl_id":null,"docs":" Contains string literals identifying the type of an attribute.\n","sig":null,"attributes":[{"value":"/ Contains string literals identifying the type of an attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349105,"byte_end":1349171,"line_start":1941,"line_end":1941,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":3932},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349532,"byte_end":1349539,"line_start":1953,"line_end":1953,"column_start":9,"column_end":16},"name":"I32BOX2","qualname":"::meta::attribute::type_names::I32BOX2","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3933},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349566,"byte_end":1349573,"line_start":1954,"line_end":1954,"column_start":9,"column_end":16},"name":"F32BOX2","qualname":"::meta::attribute::type_names::F32BOX2","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3934},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349600,"byte_end":1349603,"line_start":1955,"line_end":1955,"column_start":9,"column_end":12},"name":"I32","qualname":"::meta::attribute::type_names::I32","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3935},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349632,"byte_end":1349635,"line_start":1956,"line_end":1956,"column_start":9,"column_end":12},"name":"F32","qualname":"::meta::attribute::type_names::F32","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3936},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349666,"byte_end":1349669,"line_start":1957,"line_end":1957,"column_start":9,"column_end":12},"name":"F64","qualname":"::meta::attribute::type_names::F64","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3937},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349701,"byte_end":1349709,"line_start":1958,"line_end":1958,"column_start":9,"column_end":17},"name":"RATIONAL","qualname":"::meta::attribute::type_names::RATIONAL","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3938},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349738,"byte_end":1349747,"line_start":1959,"line_end":1959,"column_start":9,"column_end":18},"name":"TIME_CODE","qualname":"::meta::attribute::type_names::TIME_CODE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3939},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349775,"byte_end":1349782,"line_start":1960,"line_end":1960,"column_start":9,"column_end":16},"name":"I32VEC2","qualname":"::meta::attribute::type_names::I32VEC2","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3940},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349807,"byte_end":1349814,"line_start":1961,"line_end":1961,"column_start":9,"column_end":16},"name":"F32VEC2","qualname":"::meta::attribute::type_names::F32VEC2","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3941},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349839,"byte_end":1349846,"line_start":1962,"line_end":1962,"column_start":9,"column_end":16},"name":"I32VEC3","qualname":"::meta::attribute::type_names::I32VEC3","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3942},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349871,"byte_end":1349878,"line_start":1963,"line_end":1963,"column_start":9,"column_end":16},"name":"F32VEC3","qualname":"::meta::attribute::type_names::F32VEC3","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3943},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349903,"byte_end":1349915,"line_start":1964,"line_end":1964,"column_start":9,"column_end":21},"name":"CHANNEL_LIST","qualname":"::meta::attribute::type_names::CHANNEL_LIST","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3944},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349938,"byte_end":1349952,"line_start":1965,"line_end":1965,"column_start":9,"column_end":23},"name":"CHROMATICITIES","qualname":"::meta::attribute::type_names::CHROMATICITIES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3945},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349981,"byte_end":1349992,"line_start":1966,"line_end":1966,"column_start":9,"column_end":20},"name":"COMPRESSION","qualname":"::meta::attribute::type_names::COMPRESSION","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3946},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350021,"byte_end":1350036,"line_start":1967,"line_end":1967,"column_start":9,"column_end":24},"name":"ENVIRONMENT_MAP","qualname":"::meta::attribute::type_names::ENVIRONMENT_MAP","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3947},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350056,"byte_end":1350064,"line_start":1968,"line_end":1968,"column_start":9,"column_end":17},"name":"KEY_CODE","qualname":"::meta::attribute::type_names::KEY_CODE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350092,"byte_end":1350102,"line_start":1969,"line_end":1969,"column_start":9,"column_end":19},"name":"LINE_ORDER","qualname":"::meta::attribute::type_names::LINE_ORDER","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3949},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350130,"byte_end":1350142,"line_start":1970,"line_end":1970,"column_start":9,"column_end":21},"name":"F32MATRIX3X3","qualname":"::meta::attribute::type_names::F32MATRIX3X3","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3950},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350163,"byte_end":1350175,"line_start":1971,"line_end":1971,"column_start":9,"column_end":21},"name":"F32MATRIX4X4","qualname":"::meta::attribute::type_names::F32MATRIX4X4","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3951},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350196,"byte_end":1350203,"line_start":1972,"line_end":1972,"column_start":9,"column_end":16},"name":"PREVIEW","qualname":"::meta::attribute::type_names::PREVIEW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3952},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350232,"byte_end":1350236,"line_start":1973,"line_end":1973,"column_start":9,"column_end":13},"name":"TEXT","qualname":"::meta::attribute::type_names::TEXT","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3953},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350267,"byte_end":1350278,"line_start":1974,"line_end":1974,"column_start":9,"column_end":20},"name":"TEXT_VECTOR","qualname":"::meta::attribute::type_names::TEXT_VECTOR","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1350308,"byte_end":1350313,"line_start":1975,"line_end":1975,"column_start":9,"column_end":14},"name":"TILES","qualname":"::meta::attribute::type_names::TILES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this attribute type as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this attribute type as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1349321,"byte_end":1349398,"line_start":1946,"line_end":1946,"column_start":17,"column_end":94}}]},{"kind":"Mod","id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"header","qualname":"::meta::header","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":3955},{"krate":0,"index":3967},{"krate":0,"index":3969},{"krate":0,"index":3971},{"krate":0,"index":3972},{"krate":0,"index":3975},{"krate":0,"index":3981},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3987},{"krate":0,"index":3989},{"krate":0,"index":4027},{"krate":0,"index":4029},{"krate":0,"index":4030},{"krate":0,"index":845},{"krate":0,"index":851},{"krate":0,"index":855},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912}],"decl_id":null,"docs":" Contains collections of common attributes.\n Defines some data types that list all standard attributes.\n","sig":null,"attributes":[{"value":"/ Contains collections of common attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362130,"byte_end":1362176,"line_start":2,"line_end":2,"column_start":1,"column_end":47}},{"value":"/ Defines some data types that list all standard attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362177,"byte_end":1362239,"line_start":3,"line_end":3,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":3955},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362619,"byte_end":1362625,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Header","qualname":"::meta::header::Header","value":"Header { channels, compression, blocks, line_order, layer_size, deep, deep_data_version, chunk_count, max_samples_per_pixel, shared_attributes, own_attributes }","parent":null,"children":[{"krate":0,"index":3956},{"krate":0,"index":3957},{"krate":0,"index":3958},{"krate":0,"index":3959},{"krate":0,"index":3960},{"krate":0,"index":3961},{"krate":0,"index":3962},{"krate":0,"index":3963},{"krate":0,"index":3964},{"krate":0,"index":3965},{"krate":0,"index":3966}],"decl_id":null,"docs":" Describes a single layer in a file.\n A file can have any number of layers.\n The meta data contains one header per layer.\n","sig":null,"attributes":[{"value":"/ Describes a single layer in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362442,"byte_end":1362481,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ A file can have any number of layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362482,"byte_end":1362523,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/ The meta data contains one header per layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362524,"byte_end":1362572,"line_start":14,"line_end":14,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3956},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362677,"byte_end":1362685,"line_start":19,"line_end":19,"column_start":9,"column_end":17},"name":"channels","qualname":"::meta::header::Header::channels","value":"meta::attribute::ChannelList","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" List of channels in this layer.\n","sig":null,"attributes":[{"value":"/ List of channels in this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362633,"byte_end":1362668,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3957},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362817,"byte_end":1362828,"line_start":22,"line_end":22,"column_start":9,"column_end":20},"name":"compression","qualname":"::meta::header::Header::compression","value":"compression::Compression","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" How the pixel data of all channels in this layer is compressed. May be `Compression::Uncompressed`.\n","sig":null,"attributes":[{"value":"/ How the pixel data of all channels in this layer is compressed. May be `Compression::Uncompressed`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362705,"byte_end":1362808,"line_start":21,"line_end":21,"column_start":5,"column_end":108}}]},{"kind":"Field","id":{"krate":0,"index":3958},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363442,"byte_end":1363448,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"blocks","qualname":"::meta::header::Header::blocks","value":"meta::BlockDescription","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Describes how the pixels of this layer are divided into smaller blocks.\n A single block can be loaded without processing all bytes of a file.","sig":null,"attributes":[{"value":"/ Describes how the pixels of this layer are divided into smaller blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362848,"byte_end":1362923,"line_start":24,"line_end":24,"column_start":5,"column_end":80}},{"value":"/ A single block can be loaded without processing all bytes of a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1362928,"byte_end":1363000,"line_start":25,"line_end":25,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363005,"byte_end":1363008,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ Also describes whether a file contains multiple resolution levels: mip maps or rip maps.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363013,"byte_end":1363105,"line_start":27,"line_end":27,"column_start":5,"column_end":97}},{"value":"/ This allows loading not the full resolution, but the smallest sensible resolution.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363110,"byte_end":1363196,"line_start":28,"line_end":28,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":3959},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363543,"byte_end":1363553,"line_start":36,"line_end":36,"column_start":9,"column_end":19},"name":"line_order","qualname":"::meta::header::Header::line_order","value":"meta::attribute::LineOrder","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" In what order the tiles of this header occur in the file.\n","sig":null,"attributes":[{"value":"/ In what order the tiles of this header occur in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363473,"byte_end":1363534,"line_start":35,"line_end":35,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3960},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363657,"byte_end":1363667,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"layer_size","qualname":"::meta::header::Header::layer_size","value":"math::Vec2<usize>","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" The resolution of this layer. Equivalent to the size of the `DataWindow`.\n","sig":null,"attributes":[{"value":"/ The resolution of this layer. Equivalent to the size of the `DataWindow`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363571,"byte_end":1363648,"line_start":38,"line_end":38,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":3961},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363738,"byte_end":1363742,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"deep","qualname":"::meta::header::Header::deep","value":"bool","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Whether this layer contains deep data.\n","sig":null,"attributes":[{"value":"/ Whether this layer contains deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363687,"byte_end":1363729,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3962},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363815,"byte_end":1363832,"line_start":45,"line_end":45,"column_start":9,"column_end":26},"name":"deep_data_version","qualname":"::meta::header::Header::deep_data_version","value":"std::option::Option<i32>","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" This library supports only deep data version 1.\n","sig":null,"attributes":[{"value":"/ This library supports only deep data version 1.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363755,"byte_end":1363806,"line_start":44,"line_end":44,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364323,"byte_end":1364334,"line_start":57,"line_end":57,"column_start":9,"column_end":20},"name":"chunk_count","qualname":"::meta::header::Header::chunk_count","value":"usize","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Number of chunks, that is, scan line blocks or tiles, that this image has been divided into.\n This number is calculated once at the beginning\n of the read process or when creating a header object.","sig":null,"attributes":[{"value":"/ Number of chunks, that is, scan line blocks or tiles, that this image has been divided into.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363852,"byte_end":1363948,"line_start":47,"line_end":47,"column_start":5,"column_end":101}},{"value":"/ This number is calculated once at the beginning","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1363953,"byte_end":1364004,"line_start":48,"line_end":48,"column_start":5,"column_end":56}},{"value":"/ of the read process or when creating a header object.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364009,"byte_end":1364066,"line_start":49,"line_end":49,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364071,"byte_end":1364074,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This value includes all chunks of all resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364079,"byte_end":1364139,"line_start":51,"line_end":51,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364144,"byte_end":1364147,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364152,"byte_end":1364155,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ __Warning__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364160,"byte_end":1364175,"line_start":54,"line_end":54,"column_start":5,"column_end":20}},{"value":"/ _This value is relied upon. You should probably use `Header::with_encoding`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364180,"byte_end":1364260,"line_start":55,"line_end":55,"column_start":5,"column_end":85}},{"value":"/ which automatically updates the chunk count._","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364265,"byte_end":1364314,"line_start":56,"line_end":56,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3964},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364957,"byte_end":1364978,"line_start":70,"line_end":70,"column_start":9,"column_end":30},"name":"max_samples_per_pixel","qualname":"::meta::header::Header::max_samples_per_pixel","value":"std::option::Option<usize>","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Maximum number of samples in a single pixel in a deep image.\n","sig":null,"attributes":[{"value":"/ Maximum number of samples in a single pixel in a deep image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1364884,"byte_end":1364948,"line_start":69,"line_end":69,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":3965},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365121,"byte_end":1365138,"line_start":74,"line_end":74,"column_start":9,"column_end":26},"name":"shared_attributes","qualname":"::meta::header::Header::shared_attributes","value":"meta::header::ImageAttributes","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Includes mandatory fields like pixel aspect or display window\n which must be the same for all layers.\n","sig":null,"attributes":[{"value":"/ Includes mandatory fields like pixel aspect or display window","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365000,"byte_end":1365065,"line_start":72,"line_end":72,"column_start":5,"column_end":70}},{"value":"/ which must be the same for all layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365070,"byte_end":1365112,"line_start":73,"line_end":73,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3966},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365318,"byte_end":1365332,"line_start":78,"line_end":78,"column_start":9,"column_end":23},"name":"own_attributes","qualname":"::meta::header::Header::own_attributes","value":"meta::header::LayerAttributes","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":" Does not include the attributes required for reading the file contents.\n Excludes standard fields that must be the same for all headers.\n","sig":null,"attributes":[{"value":"/ Does not include the attributes required for reading the file contents.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365162,"byte_end":1365237,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ Excludes standard fields that must be the same for all headers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365242,"byte_end":1365309,"line_start":77,"line_end":77,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":3975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365564,"byte_end":1365579,"line_start":85,"line_end":85,"column_start":12,"column_end":27},"name":"ImageAttributes","qualname":"::meta::header::ImageAttributes","value":"ImageAttributes { display_window, pixel_aspect, chromaticities, time_code, other }","parent":null,"children":[{"krate":0,"index":3976},{"krate":0,"index":3977},{"krate":0,"index":3978},{"krate":0,"index":3979},{"krate":0,"index":3980}],"decl_id":null,"docs":" Includes mandatory fields like pixel aspect or display window\n which must be the same for all layers.\n For more attributes, see struct `LayerAttributes`.\n","sig":null,"attributes":[{"value":"/ Includes mandatory fields like pixel aspect or display window","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365354,"byte_end":1365419,"line_start":81,"line_end":81,"column_start":1,"column_end":66}},{"value":"/ which must be the same for all layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365420,"byte_end":1365462,"line_start":82,"line_end":82,"column_start":1,"column_end":43}},{"value":"/ For more attributes, see struct `LayerAttributes`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365463,"byte_end":1365517,"line_start":83,"line_end":83,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3976},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365699,"byte_end":1365713,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"name":"display_window","qualname":"::meta::header::ImageAttributes::display_window","value":"meta::attribute::IntegerBounds","parent":{"krate":0,"index":3975},"children":[],"decl_id":null,"docs":" The rectangle anywhere in the global infinite 2D space\n that clips all contents of the file.\n","sig":null,"attributes":[{"value":"/ The rectangle anywhere in the global infinite 2D space","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365587,"byte_end":1365645,"line_start":87,"line_end":87,"column_start":5,"column_end":63}},{"value":"/ that clips all contents of the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365650,"byte_end":1365690,"line_start":88,"line_end":88,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3977},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365790,"byte_end":1365802,"line_start":92,"line_end":92,"column_start":9,"column_end":21},"name":"pixel_aspect","qualname":"::meta::header::ImageAttributes::pixel_aspect","value":"f32","parent":{"krate":0,"index":3975},"children":[],"decl_id":null,"docs":" Aspect ratio of each pixel in this header.\n","sig":null,"attributes":[{"value":"/ Aspect ratio of each pixel in this header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365735,"byte_end":1365781,"line_start":91,"line_end":91,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365900,"byte_end":1365914,"line_start":95,"line_end":95,"column_start":9,"column_end":23},"name":"chromaticities","qualname":"::meta::header::ImageAttributes::chromaticities","value":"std::option::Option<meta::attribute::Chromaticities>","parent":{"krate":0,"index":3975},"children":[],"decl_id":null,"docs":" The chromaticities attribute of the image. See the `Chromaticities` type.\n","sig":null,"attributes":[{"value":"/ The chromaticities attribute of the image. See the `Chromaticities` type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365814,"byte_end":1365891,"line_start":94,"line_end":94,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":3979},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365985,"byte_end":1365994,"line_start":98,"line_end":98,"column_start":9,"column_end":18},"name":"time_code","qualname":"::meta::header::ImageAttributes::time_code","value":"std::option::Option<meta::attribute::TimeCode>","parent":{"krate":0,"index":3975},"children":[],"decl_id":null,"docs":" The time code of the image.\n","sig":null,"attributes":[{"value":"/ The time code of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1365945,"byte_end":1365976,"line_start":97,"line_end":97,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":3980},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366259,"byte_end":1366264,"line_start":103,"line_end":103,"column_start":9,"column_end":14},"name":"other","qualname":"::meta::header::ImageAttributes::other","value":"std::collections::HashMap<meta::attribute::Text, meta::attribute::AttributeValue>","parent":{"krate":0,"index":3975},"children":[],"decl_id":null,"docs":" Contains custom attributes.\n Does not contain the attributes already present in the `ImageAttributes`.\n Contains only attributes that are standardized to be the same for all headers: chromaticities and time codes.\n","sig":null,"attributes":[{"value":"/ Contains custom attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366019,"byte_end":1366050,"line_start":100,"line_end":100,"column_start":5,"column_end":36}},{"value":"/ Does not contain the attributes already present in the `ImageAttributes`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366055,"byte_end":1366132,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/ Contains only attributes that are standardized to be the same for all headers: chromaticities and time codes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366137,"byte_end":1366250,"line_start":102,"line_end":102,"column_start":5,"column_end":118}}]},{"kind":"Struct","id":{"krate":0,"index":3989},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366538,"byte_end":1366553,"line_start":110,"line_end":110,"column_start":12,"column_end":27},"name":"LayerAttributes","qualname":"::meta::header::LayerAttributes","value":"LayerAttributes { layer_name, layer_position, screen_window_center, screen_window_width, white_luminance, adopted_neutral, rendering_transform_name, look_modification_transform_name, horizontal_density, owner, comments, capture_date, utc_offset, longitude, latitude, altitude, focus, exposure, aperture, iso_speed, environment_map, film_key_code, wrap_mode_name, frames_per_second, multi_view_names, world_to_camera, world_to_normalized_device, deep_image_state, original_data_window, preview, view_name, software_name, near_clip_plane, far_clip_plane, horizontal_field_of_view, vertical_field_of_view, other }","parent":null,"children":[{"krate":0,"index":3990},{"krate":0,"index":3991},{"krate":0,"index":3992},{"krate":0,"index":3993},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010},{"krate":0,"index":4011},{"krate":0,"index":4012},{"krate":0,"index":4013},{"krate":0,"index":4014},{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4022},{"krate":0,"index":4023},{"krate":0,"index":4024},{"krate":0,"index":4025},{"krate":0,"index":4026}],"decl_id":null,"docs":" Does not include the attributes required for reading the file contents.\n Excludes standard fields that must be the same for all headers.\n For more attributes, see struct `ImageAttributes`.\n","sig":null,"attributes":[{"value":"/ Does not include the attributes required for reading the file contents.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366300,"byte_end":1366375,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/ Excludes standard fields that must be the same for all headers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366376,"byte_end":1366443,"line_start":107,"line_end":107,"column_start":1,"column_end":68}},{"value":"/ For more attributes, see struct `ImageAttributes`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366444,"byte_end":1366498,"line_start":108,"line_end":108,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3990},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366754,"byte_end":1366764,"line_start":115,"line_end":115,"column_start":9,"column_end":19},"name":"layer_name","qualname":"::meta::header::LayerAttributes::layer_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The name of this layer.\n Required if this file contains deep data or multiple layers.\n","sig":null,"attributes":[{"value":"/ The name of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366561,"byte_end":1366588,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"/ Required if this file contains deep data or multiple layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366593,"byte_end":1366657,"line_start":113,"line_end":113,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":3991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366981,"byte_end":1366995,"line_start":120,"line_end":120,"column_start":9,"column_end":23},"name":"layer_position","qualname":"::meta::header::LayerAttributes::layer_position","value":"math::Vec2<i32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The top left corner of the rectangle that positions this layer\n within the global infinite 2D space of the whole file.\n This represents the position of the `DataWindow`.\n","sig":null,"attributes":[{"value":"/ The top left corner of the rectangle that positions this layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366785,"byte_end":1366851,"line_start":117,"line_end":117,"column_start":5,"column_end":71}},{"value":"/ within the global infinite 2D space of the whole file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366856,"byte_end":1366914,"line_start":118,"line_end":118,"column_start":5,"column_end":63}},{"value":"/ This represents the position of the `DataWindow`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1366919,"byte_end":1366972,"line_start":119,"line_end":119,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":3992},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367122,"byte_end":1367142,"line_start":124,"line_end":124,"column_start":9,"column_end":29},"name":"screen_window_center","qualname":"::meta::header::LayerAttributes::screen_window_center","value":"math::Vec2<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Part of the perspective projection. Default should be `(0, 0)`.\n","sig":null,"attributes":[{"value":"/ Part of the perspective projection. Default should be `(0, 0)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367013,"byte_end":1367080,"line_start":122,"line_end":122,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3993},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367264,"byte_end":1367283,"line_start":128,"line_end":128,"column_start":9,"column_end":28},"name":"screen_window_width","qualname":"::meta::header::LayerAttributes::screen_window_width","value":"f32","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Part of the perspective projection. Default should be `1`.\n","sig":null,"attributes":[{"value":"/ Part of the perspective projection. Default should be `1`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367193,"byte_end":1367255,"line_start":127,"line_end":127,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3994},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367689,"byte_end":1367704,"line_start":136,"line_end":136,"column_start":9,"column_end":24},"name":"white_luminance","qualname":"::meta::header::LayerAttributes::white_luminance","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The white luminance of the colors.\n Defines the luminance in candelas per square meter, Nits, of the rgb value `(1, 1, 1)`.\n","sig":null,"attributes":[{"value":"/ The white luminance of the colors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367295,"byte_end":1367333,"line_start":130,"line_end":130,"column_start":5,"column_end":43}},{"value":"/ Defines the luminance in candelas per square meter, Nits, of the rgb value `(1, 1, 1)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367338,"byte_end":1367429,"line_start":131,"line_end":131,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":3995},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368046,"byte_end":1368061,"line_start":142,"line_end":142,"column_start":9,"column_end":24},"name":"adopted_neutral","qualname":"::meta::header::LayerAttributes::adopted_neutral","value":"std::option::Option<math::Vec2<f32>>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The adopted neutral of the colors. Specifies the CIE (x,y) frequency coordinates that should\n be considered neutral during color rendering. Pixels in the image\n whose CIE (x,y) frequency coordinates match the adopted neutral value should\n be mapped to neutral values on the given display.\n","sig":null,"attributes":[{"value":"/ The adopted neutral of the colors. Specifies the CIE (x,y) frequency coordinates that should","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367724,"byte_end":1367820,"line_start":138,"line_end":138,"column_start":5,"column_end":101}},{"value":"/ be considered neutral during color rendering. Pixels in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367825,"byte_end":1367894,"line_start":139,"line_end":139,"column_start":5,"column_end":74}},{"value":"/ whose CIE (x,y) frequency coordinates match the adopted neutral value should","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367899,"byte_end":1367979,"line_start":140,"line_end":140,"column_start":5,"column_end":85}},{"value":"/ be mapped to neutral values on the given display.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1367984,"byte_end":1368037,"line_start":141,"line_end":141,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":3996},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368177,"byte_end":1368201,"line_start":145,"line_end":145,"column_start":9,"column_end":33},"name":"rendering_transform_name","qualname":"::meta::header::LayerAttributes::rendering_transform_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Name of the color transform function that is applied for rendering the image.\n","sig":null,"attributes":[{"value":"/ Name of the color transform function that is applied for rendering the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368087,"byte_end":1368168,"line_start":144,"line_end":144,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368321,"byte_end":1368353,"line_start":148,"line_end":148,"column_start":9,"column_end":41},"name":"look_modification_transform_name","qualname":"::meta::header::LayerAttributes::look_modification_transform_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Name of the color transform function that computes the look modification of the image.\n","sig":null,"attributes":[{"value":"/ Name of the color transform function that computes the look modification of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368222,"byte_end":1368312,"line_start":147,"line_end":147,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368539,"byte_end":1368557,"line_start":152,"line_end":152,"column_start":9,"column_end":27},"name":"horizontal_density","qualname":"::meta::header::LayerAttributes::horizontal_density","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The horizontal density, in pixels per inch.\n The image's vertical output density can be computed using `horizontal_density * pixel_aspect_ratio`.\n","sig":null,"attributes":[{"value":"/ The horizontal density, in pixels per inch.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368374,"byte_end":1368421,"line_start":150,"line_end":150,"column_start":5,"column_end":52}},{"value":"/ The image's vertical output density can be computed using `horizontal_density * pixel_aspect_ratio`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368426,"byte_end":1368530,"line_start":151,"line_end":151,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":3999},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368608,"byte_end":1368613,"line_start":155,"line_end":155,"column_start":9,"column_end":14},"name":"owner","qualname":"::meta::header::LayerAttributes::owner","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Name of the owner.\n","sig":null,"attributes":[{"value":"/ Name of the owner.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368577,"byte_end":1368599,"line_start":154,"line_end":154,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":4000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368678,"byte_end":1368686,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"name":"comments","qualname":"::meta::header::LayerAttributes::comments","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Additional textual information.\n","sig":null,"attributes":[{"value":"/ Additional textual information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368634,"byte_end":1368669,"line_start":157,"line_end":157,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":4001},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368799,"byte_end":1368811,"line_start":162,"line_end":162,"column_start":9,"column_end":21},"name":"capture_date","qualname":"::meta::header::LayerAttributes::capture_date","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The date of image creation, in `YYYY:MM:DD hh:mm:ss` format.\n","sig":null,"attributes":[{"value":"/ The date of image creation, in `YYYY:MM:DD hh:mm:ss` format.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368707,"byte_end":1368771,"line_start":160,"line_end":160,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":4002},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368866,"byte_end":1368876,"line_start":165,"line_end":165,"column_start":9,"column_end":19},"name":"utc_offset","qualname":"::meta::header::LayerAttributes::utc_offset","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Time offset from UTC.\n","sig":null,"attributes":[{"value":"/ Time offset from UTC.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368832,"byte_end":1368857,"line_start":164,"line_end":164,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":4003},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368937,"byte_end":1368946,"line_start":168,"line_end":168,"column_start":9,"column_end":18},"name":"longitude","qualname":"::meta::header::LayerAttributes::longitude","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Geographical image location.\n","sig":null,"attributes":[{"value":"/ Geographical image location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368896,"byte_end":1368928,"line_start":167,"line_end":167,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4004},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369007,"byte_end":1369015,"line_start":171,"line_end":171,"column_start":9,"column_end":17},"name":"latitude","qualname":"::meta::header::LayerAttributes::latitude","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Geographical image location.\n","sig":null,"attributes":[{"value":"/ Geographical image location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1368966,"byte_end":1368998,"line_start":170,"line_end":170,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4005},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369076,"byte_end":1369084,"line_start":174,"line_end":174,"column_start":9,"column_end":17},"name":"altitude","qualname":"::meta::header::LayerAttributes::altitude","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Geographical image location.\n","sig":null,"attributes":[{"value":"/ Geographical image location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369035,"byte_end":1369067,"line_start":173,"line_end":173,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4006},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369140,"byte_end":1369145,"line_start":177,"line_end":177,"column_start":9,"column_end":14},"name":"focus","qualname":"::meta::header::LayerAttributes::focus","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Camera focus in meters.\n","sig":null,"attributes":[{"value":"/ Camera focus in meters.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369104,"byte_end":1369131,"line_start":176,"line_end":176,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369203,"byte_end":1369211,"line_start":180,"line_end":180,"column_start":9,"column_end":17},"name":"exposure","qualname":"::meta::header::LayerAttributes::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Exposure time in seconds.\n","sig":null,"attributes":[{"value":"/ Exposure time in seconds.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369165,"byte_end":1369194,"line_start":179,"line_end":179,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":4008},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369369,"byte_end":1369377,"line_start":184,"line_end":184,"column_start":9,"column_end":17},"name":"aperture","qualname":"::meta::header::LayerAttributes::aperture","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Camera aperture measured in f-stops. Equals the focal length\n of the lens divided by the diameter of the iris opening.\n","sig":null,"attributes":[{"value":"/ Camera aperture measured in f-stops. Equals the focal length","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369231,"byte_end":1369295,"line_start":182,"line_end":182,"column_start":5,"column_end":69}},{"value":"/ of the lens divided by the diameter of the iris opening.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369300,"byte_end":1369360,"line_start":183,"line_end":183,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":4009},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369441,"byte_end":1369450,"line_start":187,"line_end":187,"column_start":9,"column_end":18},"name":"iso_speed","qualname":"::meta::header::LayerAttributes::iso_speed","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Iso-speed of the camera sensor.\n","sig":null,"attributes":[{"value":"/ Iso-speed of the camera sensor.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369397,"byte_end":1369432,"line_start":186,"line_end":186,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":4010},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369544,"byte_end":1369559,"line_start":190,"line_end":190,"column_start":9,"column_end":24},"name":"environment_map","qualname":"::meta::header::LayerAttributes::environment_map","value":"std::option::Option<meta::attribute::EnvironmentMap>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" If this is an environment map, specifies how to interpret it.\n","sig":null,"attributes":[{"value":"/ If this is an environment map, specifies how to interpret it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369470,"byte_end":1369535,"line_start":189,"line_end":189,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":4011},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369689,"byte_end":1369702,"line_start":193,"line_end":193,"column_start":9,"column_end":22},"name":"film_key_code","qualname":"::meta::header::LayerAttributes::film_key_code","value":"std::option::Option<meta::attribute::KeyCode>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Identifies film manufacturer, film type, film roll and frame position within the roll.\n","sig":null,"attributes":[{"value":"/ Identifies film manufacturer, film type, film roll and frame position within the roll.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369590,"byte_end":1369680,"line_start":192,"line_end":192,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":4012},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369854,"byte_end":1369868,"line_start":197,"line_end":197,"column_start":9,"column_end":23},"name":"wrap_mode_name","qualname":"::meta::header::LayerAttributes::wrap_mode_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Specifies how texture map images are extrapolated.\n Values can be `black`, `clamp`, `periodic`, or `mirror`.\n","sig":null,"attributes":[{"value":"/ Specifies how texture map images are extrapolated.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369726,"byte_end":1369780,"line_start":195,"line_end":195,"column_start":5,"column_end":59}},{"value":"/ Values can be `black`, `clamp`, `periodic`, or `mirror`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369785,"byte_end":1369845,"line_start":196,"line_end":196,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":4013},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369953,"byte_end":1369970,"line_start":200,"line_end":200,"column_start":9,"column_end":26},"name":"frames_per_second","qualname":"::meta::header::LayerAttributes::frames_per_second","value":"std::option::Option<(i32, u32)>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Frames per second if this is a frame in a sequence.\n","sig":null,"attributes":[{"value":"/ Frames per second if this is a frame in a sequence.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369889,"byte_end":1369944,"line_start":199,"line_end":199,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":4014},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370081,"byte_end":1370097,"line_start":203,"line_end":203,"column_start":9,"column_end":25},"name":"multi_view_names","qualname":"::meta::header::LayerAttributes::multi_view_names","value":"std::option::Option<std::vec::Vec<meta::attribute::Text>>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Specifies the view names for multi-view, for example stereo, image files.\n","sig":null,"attributes":[{"value":"/ Specifies the view names for multi-view, for example stereo, image files.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1369995,"byte_end":1370072,"line_start":202,"line_end":202,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":4015},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370275,"byte_end":1370290,"line_start":207,"line_end":207,"column_start":9,"column_end":24},"name":"world_to_camera","qualname":"::meta::header::LayerAttributes::world_to_camera","value":"std::option::Option<[f32; _]>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The matrix that transforms 3D points from the world to the camera coordinate space.\n Left-handed coordinate system, y up, z forward.\n","sig":null,"attributes":[{"value":"/ The matrix that transforms 3D points from the world to the camera coordinate space.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370123,"byte_end":1370210,"line_start":205,"line_end":205,"column_start":5,"column_end":92}},{"value":"/ Left-handed coordinate system, y up, z forward.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370215,"byte_end":1370266,"line_start":206,"line_end":206,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4016},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370481,"byte_end":1370507,"line_start":211,"line_end":211,"column_start":9,"column_end":35},"name":"world_to_normalized_device","qualname":"::meta::header::LayerAttributes::world_to_normalized_device","value":"std::option::Option<[f32; _]>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The matrix that transforms 3D points from the world to the \"Normalized Device Coordinate\" space.\n Left-handed coordinate system, y up, z forward.\n","sig":null,"attributes":[{"value":"/ The matrix that transforms 3D points from the world to the \"Normalized Device Coordinate\" space.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370316,"byte_end":1370416,"line_start":209,"line_end":209,"column_start":5,"column_end":105}},{"value":"/ Left-handed coordinate system, y up, z forward.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370421,"byte_end":1370472,"line_start":210,"line_end":210,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4017},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370622,"byte_end":1370638,"line_start":214,"line_end":214,"column_start":9,"column_end":25},"name":"deep_image_state","qualname":"::meta::header::LayerAttributes::deep_image_state","value":"std::option::Option<(i32, u32)>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Specifies whether the pixels in a deep image are sorted and non-overlapping.\n","sig":null,"attributes":[{"value":"/ Specifies whether the pixels in a deep image are sorted and non-overlapping.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370533,"byte_end":1370613,"line_start":213,"line_end":213,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":4018},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370736,"byte_end":1370756,"line_start":217,"line_end":217,"column_start":9,"column_end":29},"name":"original_data_window","qualname":"::meta::header::LayerAttributes::original_data_window","value":"std::option::Option<meta::attribute::IntegerBounds>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" If the image was cropped, contains the original data window.\n","sig":null,"attributes":[{"value":"/ If the image was cropped, contains the original data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370663,"byte_end":1370727,"line_start":216,"line_end":216,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":4019},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370851,"byte_end":1370858,"line_start":220,"line_end":220,"column_start":9,"column_end":16},"name":"preview","qualname":"::meta::header::LayerAttributes::preview","value":"std::option::Option<meta::attribute::Preview>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" An 8-bit rgba image representing the rendered image.\n","sig":null,"attributes":[{"value":"/ An 8-bit rgba image representing the rendered image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370786,"byte_end":1370842,"line_start":219,"line_end":219,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4020},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370986,"byte_end":1370995,"line_start":223,"line_end":223,"column_start":9,"column_end":18},"name":"view_name","qualname":"::meta::header::LayerAttributes::view_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Name of the view, which is typically either `\"right\"` or `\"left\"` for a stereoscopic image.\n","sig":null,"attributes":[{"value":"/ Name of the view, which is typically either `\"right\"` or `\"left\"` for a stereoscopic image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1370882,"byte_end":1370977,"line_start":222,"line_end":222,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":4021},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371079,"byte_end":1371092,"line_start":226,"line_end":226,"column_start":9,"column_end":22},"name":"software_name","qualname":"::meta::header::LayerAttributes::software_name","value":"std::option::Option<meta::attribute::Text>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The name of the software that produced this image.\n","sig":null,"attributes":[{"value":"/ The name of the software that produced this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371016,"byte_end":1371070,"line_start":225,"line_end":225,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4022},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371179,"byte_end":1371194,"line_start":229,"line_end":229,"column_start":9,"column_end":24},"name":"near_clip_plane","qualname":"::meta::header::LayerAttributes::near_clip_plane","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The near clip plane of the virtual camera projection.\n","sig":null,"attributes":[{"value":"/ The near clip plane of the virtual camera projection.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371113,"byte_end":1371170,"line_start":228,"line_end":228,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":4023},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371279,"byte_end":1371293,"line_start":232,"line_end":232,"column_start":9,"column_end":23},"name":"far_clip_plane","qualname":"::meta::header::LayerAttributes::far_clip_plane","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The far clip plane of the virtual camera projection.\n","sig":null,"attributes":[{"value":"/ The far clip plane of the virtual camera projection.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371214,"byte_end":1371270,"line_start":231,"line_end":231,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4024},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371389,"byte_end":1371413,"line_start":235,"line_end":235,"column_start":9,"column_end":33},"name":"horizontal_field_of_view","qualname":"::meta::header::LayerAttributes::horizontal_field_of_view","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The field of view angle, along the horizontal axis, in degrees.\n","sig":null,"attributes":[{"value":"/ The field of view angle, along the horizontal axis, in degrees.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371313,"byte_end":1371380,"line_start":234,"line_end":234,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4025},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371509,"byte_end":1371531,"line_start":238,"line_end":238,"column_start":9,"column_end":31},"name":"vertical_field_of_view","qualname":"::meta::header::LayerAttributes::vertical_field_of_view","value":"std::option::Option<f32>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" The field of view angle, along the horizontal axis, in degrees.\n","sig":null,"attributes":[{"value":"/ The field of view angle, along the horizontal axis, in degrees.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371433,"byte_end":1371500,"line_start":237,"line_end":237,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4026},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371818,"byte_end":1371823,"line_start":243,"line_end":243,"column_start":9,"column_end":14},"name":"other","qualname":"::meta::header::LayerAttributes::other","value":"std::collections::HashMap<meta::attribute::Text, meta::attribute::AttributeValue>","parent":{"krate":0,"index":3989},"children":[],"decl_id":null,"docs":" Contains custom attributes.\n Does not contain the attributes already present in the `Header` or `LayerAttributes` struct.\n Does not contain attributes that are standardized to be the same for all layers: no chromaticities and no time codes.\n","sig":null,"attributes":[{"value":"/ Contains custom attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371551,"byte_end":1371582,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ Does not contain the attributes already present in the `Header` or `LayerAttributes` struct.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371587,"byte_end":1371683,"line_start":241,"line_end":241,"column_start":5,"column_end":101}},{"value":"/ Does not contain attributes that are standardized to be the same for all layers: no chromaticities and no time codes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371688,"byte_end":1371809,"line_start":242,"line_end":242,"column_start":5,"column_end":126}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371965,"byte_end":1371970,"line_start":250,"line_end":250,"column_start":12,"column_end":17},"name":"named","qualname":"<LayerAttributes>::named","value":"fn named<impl Into<Text>>(impl Into<Text>) -> Self where\nimpl Into<Text>: Into<Text>","parent":null,"children":[],"decl_id":null,"docs":" Create default layer attributes with a data position of zero.\n","sig":null,"attributes":[{"value":"/ Create default layer attributes with a data position of zero.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371888,"byte_end":1371953,"line_start":249,"line_end":249,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1372178,"byte_end":1372191,"line_start":258,"line_end":258,"column_start":12,"column_end":25},"name":"with_position","qualname":"<LayerAttributes>::with_position","value":"fn with_position(Self, Vec2<i32>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the data position of this layer.\n","sig":null,"attributes":[{"value":"/ Set the data position of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1372126,"byte_end":1372166,"line_start":257,"line_end":257,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1372368,"byte_end":1372387,"line_start":263,"line_end":263,"column_start":12,"column_end":31},"name":"with_camera_frustum","qualname":"<LayerAttributes>::with_camera_frustum","value":"fn with_camera_frustum<impl Into<Vec2<f32>>>(Self, Matrix4x4, Matrix4x4,\nimpl Into<Vec2<f32>>, std::ops::Range<f32>) -> Self where\nimpl Into<Vec2<f32>>: Into<Vec2<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Set all common camera projection attributes at once.\n","sig":null,"attributes":[{"value":"/ Set all common camera projection attributes at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1372300,"byte_end":1372356,"line_start":262,"line_end":262,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373130,"byte_end":1373133,"line_start":288,"line_end":288,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageAttributes>::new","value":"fn new(IntegerBounds) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the display position and size of this image.\n","sig":null,"attributes":[{"value":"/ Set the display position and size of this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373066,"byte_end":1373118,"line_start":287,"line_end":287,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373463,"byte_end":1373472,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"name":"with_size","qualname":"<ImageAttributes>::with_size","value":"fn with_size<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>) -> Self where\nimpl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Set the display position to zero and use the specified size for this image.\n","sig":null,"attributes":[{"value":"/ Set the display position to zero and use the specified size for this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373372,"byte_end":1373451,"line_start":298,"line_end":298,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1374024,"byte_end":1374027,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"new","qualname":"<Header>::new","value":"fn new<impl Into<Vec2<usize>>>(Text, impl Into<Vec2<usize>>,\nSmallVec<[ChannelDescription; ]>) -> Self where\nimpl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Header with the specified name, display window and channels.\n Use `Header::with_encoding` and the similar methods to add further properties to the header.","sig":null,"attributes":[{"value":"/ Create a new Header with the specified name, display window and channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373600,"byte_end":1373677,"line_start":309,"line_end":309,"column_start":5,"column_end":82}},{"value":"/ Use `Header::with_encoding` and the similar methods to add further properties to the header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373682,"byte_end":1373778,"line_start":310,"line_end":310,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373783,"byte_end":1373786,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ The other settings are left to their default values:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373791,"byte_end":1373847,"line_start":312,"line_end":312,"column_start":5,"column_end":61}},{"value":"/ - RLE compression","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373852,"byte_end":1373873,"line_start":313,"line_end":313,"column_start":5,"column_end":26}},{"value":"/ - display window equal to data window","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373878,"byte_end":1373919,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"/ - tiles (64 x 64 px)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373924,"byte_end":1373948,"line_start":315,"line_end":315,"column_start":5,"column_end":29}},{"value":"/ - unspecified line order","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373953,"byte_end":1373981,"line_start":316,"line_end":316,"column_start":5,"column_end":33}},{"value":"/ - no custom attributes","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373986,"byte_end":1374012,"line_start":317,"line_end":317,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375096,"byte_end":1375115,"line_start":349,"line_end":349,"column_start":12,"column_end":31},"name":"with_display_window","qualname":"<Header>::with_display_window","value":"fn with_display_window(Self, IntegerBounds) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the display window, that is, the global clipping rectangle.\n __Must be the same for all headers of a file.__\n","sig":null,"attributes":[{"value":"/ Set the display window, that is, the global clipping rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1374961,"byte_end":1375028,"line_start":347,"line_end":347,"column_start":5,"column_end":72}},{"value":"/ __Must be the same for all headers of a file.__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375033,"byte_end":1375084,"line_start":348,"line_end":348,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375300,"byte_end":1375313,"line_start":355,"line_end":355,"column_start":12,"column_end":25},"name":"with_position","qualname":"<Header>::with_position","value":"fn with_position(Self, Vec2<i32>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the offset of this layer.\n","sig":null,"attributes":[{"value":"/ Set the offset of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375255,"byte_end":1375288,"line_start":354,"line_end":354,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375526,"byte_end":1375539,"line_start":361,"line_end":361,"column_start":12,"column_end":25},"name":"with_encoding","qualname":"<Header>::with_encoding","value":"fn with_encoding(Self, Compression, BlockDescription, LineOrder) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set compression, tiling, and line order. Automatically computes chunk count.\n","sig":null,"attributes":[{"value":"/ Set compression, tiling, and line order. Automatically computes chunk count.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375434,"byte_end":1375514,"line_start":360,"line_end":360,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375925,"byte_end":1375940,"line_start":370,"line_end":370,"column_start":12,"column_end":27},"name":"with_attributes","qualname":"<Header>::with_attributes","value":"fn with_attributes(Self, LayerAttributes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set **all** attributes of the header that are not shared with all other headers in the image.\n","sig":null,"attributes":[{"value":"/ Set **all** attributes of the header that are not shared with all other headers in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1375816,"byte_end":1375913,"line_start":369,"line_end":369,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376147,"byte_end":1376169,"line_start":375,"line_end":375,"column_start":12,"column_end":34},"name":"with_shared_attributes","qualname":"<Header>::with_shared_attributes","value":"fn with_shared_attributes(Self, ImageAttributes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set **all** attributes of the header that are shared with all other headers in the image.\n","sig":null,"attributes":[{"value":"/ Set **all** attributes of the header that are shared with all other headers in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376042,"byte_end":1376135,"line_start":374,"line_end":374,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376555,"byte_end":1376579,"line_start":382,"line_end":382,"column_start":12,"column_end":36},"name":"enumerate_ordered_blocks","qualname":"<Header>::enumerate_ordered_blocks","value":"fn enumerate_ordered_blocks<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all blocks, in the order specified by the headers line order attribute.\n Unspecified line order is treated as increasing line order.\n Also enumerates the index of each block in the header, as if it were sorted in increasing line order.\n","sig":null,"attributes":[{"value":"/ Iterate over all blocks, in the order specified by the headers line order attribute.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376277,"byte_end":1376365,"line_start":379,"line_end":379,"column_start":5,"column_end":93}},{"value":"/ Unspecified line order is treated as increasing line order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376370,"byte_end":1376433,"line_start":380,"line_end":380,"column_start":5,"column_end":68}},{"value":"/ Also enumerates the index of each block in the header, as if it were sorted in increasing line order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1376438,"byte_end":1376543,"line_start":381,"line_end":381,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1377793,"byte_end":1377818,"line_start":412,"line_end":412,"column_start":12,"column_end":37},"name":"blocks_increasing_y_order","qualname":"<Header>::blocks_increasing_y_order","value":"fn blocks_increasing_y_order<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all tile indices in this header in `LineOrder::Increasing` order.\n","sig":null,"attributes":[{"value":"/ Iterate over all tile indices in this header in `LineOrder::Increasing` order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1377699,"byte_end":1377781,"line_start":411,"line_end":411,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381202,"byte_end":1381222,"line_start":480,"line_end":480,"column_start":12,"column_end":32},"name":"max_block_pixel_size","qualname":"<Header>::max_block_pixel_size","value":"fn max_block_pixel_size<'_>(&'_ Self) -> Vec2<usize>","parent":null,"children":[],"decl_id":null,"docs":" The default pixel resolution of a single block (tile or scan line block).\n Not all blocks have this size, because they may be cutoff at the end of the image.\n","sig":null,"attributes":[{"value":"/ The default pixel resolution of a single block (tile or scan line block).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381022,"byte_end":1381099,"line_start":478,"line_end":478,"column_start":5,"column_end":82}},{"value":"/ Not all blocks have this size, because they may be cutoff at the end of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381104,"byte_end":1381190,"line_start":479,"line_end":479,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381577,"byte_end":1381616,"line_start":488,"line_end":488,"column_start":12,"column_end":51},"name":"get_block_data_window_pixel_coordinates","qualname":"<Header>::get_block_data_window_pixel_coordinates","value":"fn get_block_data_window_pixel_coordinates<'_>(&'_ Self, TileCoordinates)\n-> Result<IntegerBounds>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the position of a block in the global infinite 2D space of a file. May be negative.\n","sig":null,"attributes":[{"value":"/ Calculate the position of a block in the global infinite 2D space of a file. May be negative.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381468,"byte_end":1381565,"line_start":487,"line_end":487,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381922,"byte_end":1381958,"line_start":494,"line_end":494,"column_start":12,"column_end":48},"name":"get_absolute_block_pixel_coordinates","qualname":"<Header>::get_absolute_block_pixel_coordinates","value":"fn get_absolute_block_pixel_coordinates<'_>(&'_ Self, TileCoordinates)\n-> Result<IntegerBounds>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the pixel index rectangle inside this header. Is not negative. Starts at `0`.\n","sig":null,"attributes":[{"value":"/ Calculate the pixel index rectangle inside this header. Is not negative. Starts at `0`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1381819,"byte_end":1381910,"line_start":493,"line_end":493,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1383448,"byte_end":1383470,"line_start":528,"line_end":528,"column_start":12,"column_end":34},"name":"get_block_data_indices","qualname":"<Header>::get_block_data_indices","value":"fn get_block_data_indices<'_, '_>(&'_ Self, &'_ CompressedBlock)\n-> Result<TileCoordinates>","parent":null,"children":[],"decl_id":null,"docs":" Return the tile index, converting scan line block coordinates to tile indices.\n Starts at `0` and is not negative.\n","sig":null,"attributes":[{"value":"/ Return the tile index, converting scan line block coordinates to tile indices.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1383311,"byte_end":1383393,"line_start":526,"line_end":526,"column_start":5,"column_end":87}},{"value":"/ Starts at `0` and is not negative.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1383398,"byte_end":1383436,"line_start":527,"line_end":527,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1384353,"byte_end":1384389,"line_start":553,"line_end":553,"column_start":12,"column_end":48},"name":"get_scan_line_block_tile_coordinates","qualname":"<Header>::get_scan_line_block_tile_coordinates","value":"fn get_scan_line_block_tile_coordinates<'_>(&'_ Self, i32)\n-> Result<TileCoordinates>","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute tile coordinate data indices, which start at `0`.\n","sig":null,"attributes":[{"value":"/ Computes the absolute tile coordinate data indices, which start at `0`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1384266,"byte_end":1384341,"line_start":552,"line_end":552,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1384928,"byte_end":1384947,"line_start":568,"line_end":568,"column_start":12,"column_end":31},"name":"max_block_byte_size","qualname":"<Header>::max_block_byte_size","value":"fn max_block_byte_size<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum byte length of an uncompressed or compressed block, used for validation.\n","sig":null,"attributes":[{"value":"/ Maximum byte length of an uncompressed or compressed block, used for validation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1384832,"byte_end":1384916,"line_start":567,"line_end":567,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1385448,"byte_end":1385465,"line_start":578,"line_end":578,"column_start":12,"column_end":29},"name":"total_pixel_bytes","qualname":"<Header>::total_pixel_bytes","value":"fn total_pixel_bytes<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the pixels of this header will require\n when stored without compression. Respects multi-resolution levels and subsampling.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the pixels of this header will require","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1385270,"byte_end":1385345,"line_start":576,"line_end":576,"column_start":5,"column_end":80}},{"value":"/ when stored without compression. Respects multi-resolution levels and subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1385350,"byte_end":1385436,"line_start":577,"line_end":577,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1386612,"byte_end":1386632,"line_start":606,"line_end":606,"column_start":12,"column_end":32},"name":"max_pixel_file_bytes","qualname":"<Header>::max_pixel_file_bytes","value":"fn max_pixel_file_bytes<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Approximates the maximum number of bytes that the pixels of this header will consume in a file.\n Due to compression, the actual byte size may be smaller.\n","sig":null,"attributes":[{"value":"/ Approximates the maximum number of bytes that the pixels of this header will consume in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1386436,"byte_end":1386535,"line_start":604,"line_end":604,"column_start":5,"column_end":104}},{"value":"/ Due to compression, the actual byte size may be smaller.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1386540,"byte_end":1386600,"line_start":605,"line_end":605,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1386899,"byte_end":1386907,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"validate","qualname":"<Header>::validate","value":"fn validate<'_, '_>(&'_ Self, bool, &'_ mut bool, bool) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1386860,"byte_end":1386887,"line_start":613,"line_end":613,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1390852,"byte_end":1390860,"line_start":708,"line_end":708,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Header>::read_all","value":"fn read_all<'_, '_,\nimpl Read>(&'_ mut PeekRead<impl Read>, &'_ Requirements, bool)\n-> Result<Headers> where impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the headers without validating them.\n","sig":null,"attributes":[{"value":"/ Read the headers without validating them.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1390795,"byte_end":1390840,"line_start":707,"line_end":707,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1391387,"byte_end":1391396,"line_start":724,"line_end":724,"column_start":12,"column_end":21},"name":"write_all","qualname":"<Header>::write_all","value":"fn write_all<'_, '_, impl Write>(&'_ [Header], &'_ mut impl Write, bool)\n-> UnitResult where impl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write the headers to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write the headers to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1391314,"byte_end":1391375,"line_start":723,"line_end":723,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1391710,"byte_end":1391714,"line_start":737,"line_end":737,"column_start":12,"column_end":16},"name":"read","qualname":"<Header>::read","value":"fn read<'_, '_,\nimpl Read>(&'_ mut PeekRead<impl Read>, &'_ Requirements, bool)\n-> Result<Self> where impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1391660,"byte_end":1391698,"line_start":736,"line_end":736,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1402132,"byte_end":1402137,"line_start":914,"line_end":914,"column_start":12,"column_end":17},"name":"write","qualname":"<Header>::write","value":"fn write<'_, '_, impl Write>(&'_ Self, &'_ mut impl Write) -> UnitResult where\nimpl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1402057,"byte_end":1402120,"line_start":913,"line_end":913,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407467,"byte_end":1407478,"line_start":1027,"line_end":1027,"column_start":12,"column_end":23},"name":"data_window","qualname":"<Header>::data_window","value":"fn data_window<'_>(&'_ Self) -> IntegerBounds","parent":null,"children":[],"decl_id":null,"docs":" The rectangle describing the bounding box of this layer\n within the infinite global 2D space of the file.\n","sig":null,"attributes":[{"value":"/ The rectangle describing the bounding box of this layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407339,"byte_end":1407398,"line_start":1025,"line_end":1025,"column_start":5,"column_end":64}},{"value":"/ within the infinite global 2D space of the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407403,"byte_end":1407455,"line_start":1026,"line_end":1026,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407648,"byte_end":1407662,"line_start":1035,"line_end":1035,"column_start":9,"column_end":23},"name":"standard_names","qualname":"::meta::header::standard_names","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4036},{"krate":0,"index":4037},{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4040},{"krate":0,"index":4041},{"krate":0,"index":4042},{"krate":0,"index":4043},{"krate":0,"index":4044},{"krate":0,"index":4045},{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4049},{"krate":0,"index":4050},{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4053},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4068},{"krate":0,"index":4069},{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082}],"decl_id":null,"docs":" Collection of required attribute names.\n","sig":null,"attributes":[{"value":"/ Collection of required attribute names.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407596,"byte_end":1407639,"line_start":1034,"line_end":1034,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":4034},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408176,"byte_end":1408181,"line_start":1052,"line_end":1052,"column_start":9,"column_end":14},"name":"TILES","qualname":"::meta::header::standard_names::TILES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4035},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408201,"byte_end":1408205,"line_start":1053,"line_end":1053,"column_start":9,"column_end":13},"name":"NAME","qualname":"::meta::header::standard_names::NAME","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4036},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408224,"byte_end":1408234,"line_start":1054,"line_end":1054,"column_start":9,"column_end":19},"name":"BLOCK_TYPE","qualname":"::meta::header::standard_names::BLOCK_TYPE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4037},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408253,"byte_end":1408270,"line_start":1055,"line_end":1055,"column_start":9,"column_end":26},"name":"DEEP_DATA_VERSION","qualname":"::meta::header::standard_names::DEEP_DATA_VERSION","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4038},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408292,"byte_end":1408298,"line_start":1056,"line_end":1056,"column_start":9,"column_end":15},"name":"CHUNKS","qualname":"::meta::header::standard_names::CHUNKS","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4039},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408323,"byte_end":1408334,"line_start":1057,"line_end":1057,"column_start":9,"column_end":20},"name":"MAX_SAMPLES","qualname":"::meta::header::standard_names::MAX_SAMPLES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4040},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408367,"byte_end":1408375,"line_start":1058,"line_end":1058,"column_start":9,"column_end":17},"name":"CHANNELS","qualname":"::meta::header::standard_names::CHANNELS","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4041},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408398,"byte_end":1408409,"line_start":1059,"line_end":1059,"column_start":9,"column_end":20},"name":"COMPRESSION","qualname":"::meta::header::standard_names::COMPRESSION","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4042},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408435,"byte_end":1408446,"line_start":1060,"line_end":1060,"column_start":9,"column_end":20},"name":"DATA_WINDOW","qualname":"::meta::header::standard_names::DATA_WINDOW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4043},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408471,"byte_end":1408485,"line_start":1061,"line_end":1061,"column_start":9,"column_end":23},"name":"DISPLAY_WINDOW","qualname":"::meta::header::standard_names::DISPLAY_WINDOW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4044},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408513,"byte_end":1408523,"line_start":1062,"line_end":1062,"column_start":9,"column_end":19},"name":"LINE_ORDER","qualname":"::meta::header::standard_names::LINE_ORDER","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4045},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408547,"byte_end":1408559,"line_start":1063,"line_end":1063,"column_start":9,"column_end":21},"name":"PIXEL_ASPECT","qualname":"::meta::header::standard_names::PIXEL_ASPECT","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4046},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408590,"byte_end":1408603,"line_start":1064,"line_end":1064,"column_start":9,"column_end":22},"name":"WINDOW_CENTER","qualname":"::meta::header::standard_names::WINDOW_CENTER","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4047},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408636,"byte_end":1408648,"line_start":1065,"line_end":1065,"column_start":9,"column_end":21},"name":"WINDOW_WIDTH","qualname":"::meta::header::standard_names::WINDOW_WIDTH","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4048},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408680,"byte_end":1408695,"line_start":1066,"line_end":1066,"column_start":9,"column_end":24},"name":"WHITE_LUMINANCE","qualname":"::meta::header::standard_names::WHITE_LUMINANCE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4049},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408724,"byte_end":1408739,"line_start":1067,"line_end":1067,"column_start":9,"column_end":24},"name":"ADOPTED_NEUTRAL","qualname":"::meta::header::standard_names::ADOPTED_NEUTRAL","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4050},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408768,"byte_end":1408787,"line_start":1068,"line_end":1068,"column_start":9,"column_end":28},"name":"RENDERING_TRANSFORM","qualname":"::meta::header::standard_names::RENDERING_TRANSFORM","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408820,"byte_end":1408838,"line_start":1069,"line_end":1069,"column_start":9,"column_end":27},"name":"LOOK_MOD_TRANSFORM","qualname":"::meta::header::standard_names::LOOK_MOD_TRANSFORM","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4052},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408869,"byte_end":1408878,"line_start":1070,"line_end":1070,"column_start":9,"column_end":18},"name":"X_DENSITY","qualname":"::meta::header::standard_names::X_DENSITY","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4053},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408901,"byte_end":1408906,"line_start":1071,"line_end":1071,"column_start":9,"column_end":14},"name":"OWNER","qualname":"::meta::header::standard_names::OWNER","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4054},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408926,"byte_end":1408934,"line_start":1072,"line_end":1072,"column_start":9,"column_end":17},"name":"COMMENTS","qualname":"::meta::header::standard_names::COMMENTS","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4055},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408957,"byte_end":1408969,"line_start":1073,"line_end":1073,"column_start":9,"column_end":21},"name":"CAPTURE_DATE","qualname":"::meta::header::standard_names::CAPTURE_DATE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4056},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1408991,"byte_end":1409001,"line_start":1074,"line_end":1074,"column_start":9,"column_end":19},"name":"UTC_OFFSET","qualname":"::meta::header::standard_names::UTC_OFFSET","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4057},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409025,"byte_end":1409034,"line_start":1075,"line_end":1075,"column_start":9,"column_end":18},"name":"LONGITUDE","qualname":"::meta::header::standard_names::LONGITUDE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409058,"byte_end":1409066,"line_start":1076,"line_end":1076,"column_start":9,"column_end":17},"name":"LATITUDE","qualname":"::meta::header::standard_names::LATITUDE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4059},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409089,"byte_end":1409097,"line_start":1077,"line_end":1077,"column_start":9,"column_end":17},"name":"ALTITUDE","qualname":"::meta::header::standard_names::ALTITUDE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4060},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409120,"byte_end":1409125,"line_start":1078,"line_end":1078,"column_start":9,"column_end":14},"name":"FOCUS","qualname":"::meta::header::standard_names::FOCUS","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4061},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409145,"byte_end":1409158,"line_start":1079,"line_end":1079,"column_start":9,"column_end":22},"name":"EXPOSURE_TIME","qualname":"::meta::header::standard_names::EXPOSURE_TIME","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4062},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409180,"byte_end":1409188,"line_start":1080,"line_end":1080,"column_start":9,"column_end":17},"name":"APERTURE","qualname":"::meta::header::standard_names::APERTURE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4063},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409211,"byte_end":1409220,"line_start":1081,"line_end":1081,"column_start":9,"column_end":18},"name":"ISO_SPEED","qualname":"::meta::header::standard_names::ISO_SPEED","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4064},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409243,"byte_end":1409258,"line_start":1082,"line_end":1082,"column_start":9,"column_end":24},"name":"ENVIRONMENT_MAP","qualname":"::meta::header::standard_names::ENVIRONMENT_MAP","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4065},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409279,"byte_end":1409287,"line_start":1083,"line_end":1083,"column_start":9,"column_end":17},"name":"KEY_CODE","qualname":"::meta::header::standard_names::KEY_CODE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4066},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409309,"byte_end":1409318,"line_start":1084,"line_end":1084,"column_start":9,"column_end":18},"name":"TIME_CODE","qualname":"::meta::header::standard_names::TIME_CODE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4067},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409341,"byte_end":1409351,"line_start":1085,"line_end":1085,"column_start":9,"column_end":19},"name":"WRAP_MODES","qualname":"::meta::header::standard_names::WRAP_MODES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4068},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409375,"byte_end":1409392,"line_start":1086,"line_end":1086,"column_start":9,"column_end":26},"name":"FRAMES_PER_SECOND","qualname":"::meta::header::standard_names::FRAMES_PER_SECOND","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4069},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409422,"byte_end":1409432,"line_start":1087,"line_end":1087,"column_start":9,"column_end":19},"name":"MULTI_VIEW","qualname":"::meta::header::standard_names::MULTI_VIEW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4070},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409456,"byte_end":1409471,"line_start":1088,"line_end":1088,"column_start":9,"column_end":24},"name":"WORLD_TO_CAMERA","qualname":"::meta::header::standard_names::WORLD_TO_CAMERA","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4071},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409499,"byte_end":1409511,"line_start":1089,"line_end":1089,"column_start":9,"column_end":21},"name":"WORLD_TO_NDC","qualname":"::meta::header::standard_names::WORLD_TO_NDC","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4072},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409536,"byte_end":1409552,"line_start":1090,"line_end":1090,"column_start":9,"column_end":25},"name":"DEEP_IMAGE_STATE","qualname":"::meta::header::standard_names::DEEP_IMAGE_STATE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4073},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409581,"byte_end":1409601,"line_start":1091,"line_end":1091,"column_start":9,"column_end":29},"name":"ORIGINAL_DATA_WINDOW","qualname":"::meta::header::standard_names::ORIGINAL_DATA_WINDOW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4074},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409634,"byte_end":1409655,"line_start":1092,"line_end":1092,"column_start":9,"column_end":30},"name":"DWA_COMPRESSION_LEVEL","qualname":"::meta::header::standard_names::DWA_COMPRESSION_LEVEL","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4075},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409689,"byte_end":1409696,"line_start":1093,"line_end":1093,"column_start":9,"column_end":16},"name":"PREVIEW","qualname":"::meta::header::standard_names::PREVIEW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409718,"byte_end":1409722,"line_start":1094,"line_end":1094,"column_start":9,"column_end":13},"name":"VIEW","qualname":"::meta::header::standard_names::VIEW","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4077},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409741,"byte_end":1409755,"line_start":1095,"line_end":1095,"column_start":9,"column_end":23},"name":"CHROMATICITIES","qualname":"::meta::header::standard_names::CHROMATICITIES","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4078},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409784,"byte_end":1409788,"line_start":1096,"line_end":1096,"column_start":9,"column_end":13},"name":"NEAR","qualname":"::meta::header::standard_names::NEAR","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4079},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409807,"byte_end":1409810,"line_start":1097,"line_end":1097,"column_start":9,"column_end":12},"name":"FAR","qualname":"::meta::header::standard_names::FAR","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4080},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409828,"byte_end":1409833,"line_start":1098,"line_end":1098,"column_start":9,"column_end":14},"name":"FOV_X","qualname":"::meta::header::standard_names::FOV_X","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4081},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409869,"byte_end":1409874,"line_start":1099,"line_end":1099,"column_start":9,"column_end":14},"name":"FOV_Y","qualname":"::meta::header::standard_names::FOV_Y","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":4082},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409908,"byte_end":1409916,"line_start":1100,"line_end":1100,"column_start":9,"column_end":17},"name":"SOFTWARE","qualname":"::meta::header::standard_names::SOFTWARE","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" The byte-string name of this required attribute as it appears in an exr file.\n","sig":null,"attributes":[{"value":"/ The byte-string name of this required attribute as it appears in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1407957,"byte_end":1408038,"line_start":1045,"line_end":1045,"column_start":17,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409982,"byte_end":1409989,"line_start":1106,"line_end":1106,"column_start":8,"column_end":15},"name":"default","qualname":"<LayerAttributes as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1411372,"byte_end":1411375,"line_start":1150,"line_end":1150,"column_start":8,"column_end":11},"name":"fmt","qualname":"<LayerAttributes as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4083},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250264,"byte_end":1250272,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"MetaData","qualname":"::meta::MetaData","value":"MetaData { requirements, headers }","parent":null,"children":[{"krate":0,"index":4084},{"krate":0,"index":4085}],"decl_id":null,"docs":" Contains the complete meta data of an exr image.\n Defines how the image is split up in the file,\n the number and type of images and channels,\n and various other attributes.\n The usage of custom attributes is encouraged.\n","sig":null,"attributes":[{"value":"/ Contains the complete meta data of an exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249982,"byte_end":1250034,"line_start":26,"line_end":26,"column_start":1,"column_end":53}},{"value":"/ Defines how the image is split up in the file,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250035,"byte_end":1250085,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/ the number and type of images and channels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250086,"byte_end":1250133,"line_start":28,"line_end":28,"column_start":1,"column_end":48}},{"value":"/ and various other attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250134,"byte_end":1250167,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/ The usage of custom attributes is encouraged.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250168,"byte_end":1250217,"line_start":30,"line_end":30,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":4084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250371,"byte_end":1250383,"line_start":35,"line_end":35,"column_start":9,"column_end":21},"name":"requirements","qualname":"::meta::MetaData::requirements","value":"meta::Requirements","parent":{"krate":0,"index":4083},"children":[],"decl_id":null,"docs":" Some flags summarizing the features that must be supported to decode the file.\n","sig":null,"attributes":[{"value":"/ Some flags summarizing the features that must be supported to decode the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250280,"byte_end":1250362,"line_start":34,"line_end":34,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":4085},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250506,"byte_end":1250513,"line_start":39,"line_end":39,"column_start":9,"column_end":16},"name":"headers","qualname":"::meta::MetaData::headers","value":"smallvec::SmallVec<[meta::header::Header; 3]>","parent":{"krate":0,"index":4083},"children":[],"decl_id":null,"docs":" One header to describe each layer in this file.\n","sig":null,"attributes":[{"value":"/ One header to describe each layer in this file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250404,"byte_end":1250455,"line_start":37,"line_end":37,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250560,"byte_end":1250567,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"name":"Headers","qualname":"::meta::Headers","value":"SmallVec<[Header; ]>","parent":null,"children":[],"decl_id":null,"docs":" List of `Header`s.\n","sig":null,"attributes":[{"value":"/ List of `Header`s.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250528,"byte_end":1250550,"line_start":43,"line_end":43,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250631,"byte_end":1250643,"line_start":47,"line_end":47,"column_start":10,"column_end":22},"name":"OffsetTables","qualname":"::meta::OffsetTables","value":"SmallVec<[OffsetTable; ]>","parent":null,"children":[],"decl_id":null,"docs":" List of `OffsetTable`s.\n","sig":null,"attributes":[{"value":"/ List of `OffsetTable`s.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250594,"byte_end":1250621,"line_start":46,"line_end":46,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251444,"byte_end":1251455,"line_start":61,"line_end":61,"column_start":10,"column_end":21},"name":"OffsetTable","qualname":"::meta::OffsetTable","value":"Vec<u64>","parent":null,"children":[],"decl_id":null,"docs":" The offset table is an ordered list of indices referencing pixel data in the exr file.\n For each pixel tile in the image, an index exists, which points to the byte-location\n of the corresponding pixel data in the file. That index can be used to load specific\n portions of an image without processing all bytes in a file. For each header,\n an offset table exists with its indices ordered by `LineOrder::Increasing`.\n","sig":null,"attributes":[{"value":"/ The offset table is an ordered list of indices referencing pixel data in the exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250676,"byte_end":1250766,"line_start":50,"line_end":50,"column_start":1,"column_end":91}},{"value":"/ For each pixel tile in the image, an index exists, which points to the byte-location","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250767,"byte_end":1250855,"line_start":51,"line_end":51,"column_start":1,"column_end":89}},{"value":"/ of the corresponding pixel data in the file. That index can be used to load specific","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250856,"byte_end":1250944,"line_start":52,"line_end":52,"column_start":1,"column_end":89}},{"value":"/ portions of an image without processing all bytes in a file. For each header,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1250945,"byte_end":1251026,"line_start":53,"line_end":53,"column_start":1,"column_end":82}},{"value":"/ an offset table exists with its indices ordered by `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251027,"byte_end":1251106,"line_start":54,"line_end":54,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4094},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251761,"byte_end":1251773,"line_start":68,"line_end":68,"column_start":12,"column_end":24},"name":"Requirements","qualname":"::meta::Requirements","value":"Requirements { file_format_version, is_single_layer_and_tiled, has_long_names, has_deep_data, has_multiple_layers }","parent":null,"children":[{"krate":0,"index":4095},{"krate":0,"index":4096},{"krate":0,"index":4097},{"krate":0,"index":4098},{"krate":0,"index":4099}],"decl_id":null,"docs":" A summary of requirements that must be met to read this exr file.\n Used to determine whether this file can be read by a given reader.\n It includes the OpenEXR version number. This library aims to support version `2.0`.\n","sig":null,"attributes":[{"value":"/ A summary of requirements that must be met to read this exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251470,"byte_end":1251539,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"/ Used to determine whether this file can be read by a given reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251540,"byte_end":1251610,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ It includes the OpenEXR version number. This library aims to support version `2.0`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251611,"byte_end":1251698,"line_start":66,"line_end":66,"column_start":1,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":4095},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251909,"byte_end":1251928,"line_start":72,"line_end":72,"column_start":9,"column_end":28},"name":"file_format_version","qualname":"::meta::Requirements::file_format_version","value":"u8","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" This library supports reading version 1 and 2, and writing version 2.\n","sig":null,"attributes":[{"value":"/ This library supports reading version 1 and 2, and writing version 2.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251781,"byte_end":1251854,"line_start":70,"line_end":70,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":4096},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252130,"byte_end":1252155,"line_start":76,"line_end":76,"column_start":9,"column_end":34},"name":"is_single_layer_and_tiled","qualname":"::meta::Requirements::is_single_layer_and_tiled","value":"bool","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" If true, this image has tiled blocks and contains only a single layer.\n If false and not deep and not multilayer, this image is a single layer image with scan line blocks.\n","sig":null,"attributes":[{"value":"/ If true, this image has tiled blocks and contains only a single layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1251939,"byte_end":1252013,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ If false and not deep and not multilayer, this image is a single layer image with scan line blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252018,"byte_end":1252121,"line_start":75,"line_end":75,"column_start":5,"column_end":108}}]},{"kind":"Field","id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252372,"byte_end":1252386,"line_start":81,"line_end":81,"column_start":9,"column_end":23},"name":"has_long_names","qualname":"::meta::Requirements::has_long_names","value":"bool","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Whether this file has strings with a length greater than 31.\n Strings can never be longer than 255.\n","sig":null,"attributes":[{"value":"/ Whether this file has strings with a length greater than 31.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252253,"byte_end":1252317,"line_start":79,"line_end":79,"column_start":5,"column_end":69}},{"value":"/ Strings can never be longer than 255.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252322,"byte_end":1252363,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4098},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252466,"byte_end":1252479,"line_start":84,"line_end":84,"column_start":9,"column_end":22},"name":"has_deep_data","qualname":"::meta::Requirements::has_deep_data","value":"bool","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" This image contains at least one layer with deep data.\n","sig":null,"attributes":[{"value":"/ This image contains at least one layer with deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252399,"byte_end":1252457,"line_start":83,"line_end":83,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":4099},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252548,"byte_end":1252567,"line_start":87,"line_end":87,"column_start":9,"column_end":28},"name":"has_multiple_layers","qualname":"::meta::Requirements::has_multiple_layers","value":"bool","parent":{"krate":0,"index":4094},"children":[],"decl_id":null,"docs":" Whether this file contains multiple layers.\n","sig":null,"attributes":[{"value":"/ Whether this file contains multiple layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252492,"byte_end":1252539,"line_start":86,"line_end":86,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4115},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252698,"byte_end":1252709,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"TileIndices","qualname":"::meta::TileIndices","value":"TileIndices { location, size }","parent":null,"children":[{"krate":0,"index":4116},{"krate":0,"index":4117}],"decl_id":null,"docs":" Locates a rectangular section of pixels in an image.\n","sig":null,"attributes":[{"value":"/ Locates a rectangular section of pixels in an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252579,"byte_end":1252635,"line_start":91,"line_end":91,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252748,"byte_end":1252756,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"location","qualname":"::meta::TileIndices::location","value":"block::chunk::TileCoordinates","parent":{"krate":0,"index":4115},"children":[],"decl_id":null,"docs":" Index of the tile.\n","sig":null,"attributes":[{"value":"/ Index of the tile.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252717,"byte_end":1252739,"line_start":95,"line_end":95,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":4117},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252816,"byte_end":1252820,"line_start":99,"line_end":99,"column_start":9,"column_end":13},"name":"size","qualname":"::meta::TileIndices::size","value":"math::Vec2<usize>","parent":{"krate":0,"index":4115},"children":[],"decl_id":null,"docs":" Pixel size of the tile.\n","sig":null,"attributes":[{"value":"/ Pixel size of the tile.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252780,"byte_end":1252807,"line_start":98,"line_end":98,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4134},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253113,"byte_end":1253122,"line_start":108,"line_end":108,"column_start":5,"column_end":14},"name":"ScanLines","qualname":"::meta::BlockDescription::ScanLines","value":"BlockDescription::ScanLines","parent":{"krate":0,"index":4133},"children":[],"decl_id":null,"docs":" The image is divided into scan line blocks.\n The number of scan lines in a block depends on the compression method.\n","sig":null,"attributes":[{"value":"/ The image is divided into scan line blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252982,"byte_end":1253029,"line_start":106,"line_end":106,"column_start":5,"column_end":52}},{"value":"/ The number of scan lines in a block depends on the compression method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253034,"byte_end":1253108,"line_start":107,"line_end":107,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253302,"byte_end":1253307,"line_start":113,"line_end":113,"column_start":5,"column_end":10},"name":"Tiles","qualname":"::meta::BlockDescription::Tiles","value":"BlockDescription::Tiles(TileDescription)","parent":{"krate":0,"index":4133},"children":[],"decl_id":null,"docs":" The image is divided into tile blocks.\n Also specifies the size of each tile in the image\n and whether this image contains multiple resolution levels.\n","sig":null,"attributes":[{"value":"/ The image is divided into tile blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253129,"byte_end":1253171,"line_start":110,"line_end":110,"column_start":5,"column_end":47}},{"value":"/ Also specifies the size of each tile in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253176,"byte_end":1253229,"line_start":111,"line_end":111,"column_start":5,"column_end":58}},{"value":"/ and whether this image contains multiple resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253234,"byte_end":1253297,"line_start":112,"line_end":112,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":4138},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1253308,"byte_end":1253323,"line_start":113,"line_end":113,"column_start":11,"column_end":26},"name":"0","qualname":"::meta::BlockDescription::Tiles::0","value":"meta::attribute::TileDescription","parent":{"krate":0,"index":4136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4133},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252958,"byte_end":1252974,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"BlockDescription","qualname":"::meta::BlockDescription","value":"enum BlockDescription { ScanLines, Tiles(TileDescription), }","parent":null,"children":[{"krate":0,"index":4134},{"krate":0,"index":4136}],"decl_id":null,"docs":" How the image pixels are split up into separate blocks.\n","sig":null,"attributes":[{"value":"/ How the image pixels are split up into separate blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1252838,"byte_end":1252897,"line_start":102,"line_end":102,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254246,"byte_end":1254255,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"has_tiles","qualname":"<BlockDescription>::has_tiles","value":"fn has_tiles<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this image is tiled. If false, this image is divided into scan line blocks.\n","sig":null,"attributes":[{"value":"/ Whether this image is tiled. If false, this image is divided into scan line blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254147,"byte_end":1254234,"line_start":143,"line_end":143,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254484,"byte_end":1254496,"line_start":158,"line_end":158,"column_start":9,"column_end":21},"name":"magic_number","qualname":"::meta::magic_number","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":970}],"decl_id":null,"docs":" The first four bytes of each exr file.\n Used to abort reading non-exr files.\n","sig":null,"attributes":[{"value":"/ The first four bytes of each exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254392,"byte_end":1254434,"line_start":156,"line_end":156,"column_start":1,"column_end":43}},{"value":"/ Used to abort reading non-exr files.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254435,"byte_end":1254475,"line_start":157,"line_end":157,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254579,"byte_end":1254584,"line_start":162,"line_end":162,"column_start":15,"column_end":20},"name":"BYTES","qualname":"::meta::magic_number::BYTES","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The first four bytes of each exr file.\n","sig":null,"attributes":[{"value":"/ The first four bytes of each exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254522,"byte_end":1254564,"line_start":161,"line_end":161,"column_start":5,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254702,"byte_end":1254707,"line_start":165,"line_end":165,"column_start":12,"column_end":17},"name":"write","qualname":"::meta::magic_number::write","value":"fn write<'_, impl Write>(&'_ mut impl Write) -> Result<()> where\nimpl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254627,"byte_end":1254690,"line_start":164,"line_end":164,"column_start":5,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254955,"byte_end":1254961,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"is_exr","qualname":"::meta::magic_number::is_exr","value":"fn is_exr<'_, impl Read>(&'_ mut impl Read) -> Result<bool> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Consumes four bytes from the reader and returns whether the file may be an exr file.\n","sig":null,"attributes":[{"value":"/ Consumes four bytes from the reader and returns whether the file may be an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254804,"byte_end":1254892,"line_start":169,"line_end":169,"column_start":5,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255208,"byte_end":1255220,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"validate_exr","qualname":"::meta::magic_number::validate_exr","value":"fn validate_exr<'_, impl Read>(&'_ mut impl Read) -> UnitResult where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Validate this image. If it is an exr file, return `Ok(())`.\n","sig":null,"attributes":[{"value":"/ Validate this image. If it is an exr file, return `Ok(())`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255133,"byte_end":1255196,"line_start":177,"line_end":177,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":972},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255454,"byte_end":1255466,"line_start":189,"line_end":189,"column_start":9,"column_end":21},"name":"sequence_end","qualname":"::meta::sequence_end","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":977}],"decl_id":null,"docs":" A `0_u8` at the end of a sequence.\n","sig":null,"attributes":[{"value":"/ A `0_u8` at the end of a sequence.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255407,"byte_end":1255445,"line_start":188,"line_end":188,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255558,"byte_end":1255567,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"byte_size","qualname":"::meta::sequence_end::byte_size","value":"fn byte_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes this would consume in an exr file.\n","sig":null,"attributes":[{"value":"/ Number of bytes this would consume in an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255492,"byte_end":1255546,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255677,"byte_end":1255682,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"write","qualname":"::meta::sequence_end::write","value":"fn write<W, '_>(&'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255602,"byte_end":1255665,"line_start":197,"line_end":197,"column_start":5,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255848,"byte_end":1255856,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"has_come","qualname":"::meta::sequence_end::has_come","value":"fn has_come<'_, impl Read>(&'_ mut PeekRead<impl Read>) -> Result<bool> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Peeks the next byte. If it is zero, consumes the byte and returns true.\n","sig":null,"attributes":[{"value":"/ Peeks the next byte. If it is zero, consumes the byte and returns true.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1255761,"byte_end":1255836,"line_start":202,"line_end":202,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":980},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256136,"byte_end":1256155,"line_start":214,"line_end":214,"column_start":8,"column_end":27},"name":"compute_block_count","qualname":"::meta::compute_block_count","value":"fn compute_block_count(usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the number of tiles required to contain all values.\n","sig":null,"attributes":[{"value":"/ Compute the number of tiles required to contain all values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256065,"byte_end":1256128,"line_start":213,"line_end":213,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256487,"byte_end":1256520,"line_start":222,"line_end":222,"column_start":8,"column_end":41},"name":"calculate_block_position_and_size","qualname":"::meta::calculate_block_position_and_size","value":"fn calculate_block_position_and_size(usize, usize, usize)\n-> Result<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Compute the start position and size of a block inside a dimension.\n","sig":null,"attributes":[{"value":"/ Compute the start position and size of a block inside a dimension.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256399,"byte_end":1256469,"line_start":220,"line_end":220,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256470,"byte_end":1256479,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257018,"byte_end":1257038,"line_start":235,"line_end":235,"column_start":8,"column_end":28},"name":"calculate_block_size","qualname":"::meta::calculate_block_size","value":"fn calculate_block_size(usize, usize, usize) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size of a single block. If this is the last block,\n this only returns the required size, which is always smaller than the default block size.\n","sig":null,"attributes":[{"value":"/ Calculate the size of a single block. If this is the last block,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256772,"byte_end":1256840,"line_start":231,"line_end":231,"column_start":1,"column_end":69}},{"value":"/ this only returns the required size, which is always smaller than the default block size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1256841,"byte_end":1256934,"line_start":232,"line_end":232,"column_start":1,"column_end":94}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257001,"byte_end":1257010,"line_start":234,"line_end":234,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257478,"byte_end":1257497,"line_start":251,"line_end":251,"column_start":8,"column_end":27},"name":"compute_level_count","qualname":"::meta::compute_level_count","value":"fn compute_level_count(RoundingMode, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate number of mip levels in a given resolution.\n","sig":null,"attributes":[{"value":"/ Calculate number of mip levels in a given resolution.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257355,"byte_end":1257412,"line_start":249,"line_end":249,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257749,"byte_end":1257767,"line_start":257,"line_end":257,"column_start":8,"column_end":26},"name":"compute_level_size","qualname":"::meta::compute_level_size","value":"fn compute_level_size(RoundingMode, usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size of a single mip level by index.\n","sig":null,"attributes":[{"value":"/ Calculate the size of a single mip level by index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1257629,"byte_end":1257683,"line_start":255,"line_end":255,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1258266,"byte_end":1258280,"line_start":266,"line_end":266,"column_start":8,"column_end":22},"name":"rip_map_levels","qualname":"::meta::rip_map_levels","value":"fn rip_map_levels(RoundingMode, Vec2<usize>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all rip map level resolutions of a given size, including the indices of each level.\n The order of iteration conforms to `LineOrder::Increasing`.\n","sig":null,"attributes":[{"value":"/ Iterates over all rip map level resolutions of a given size, including the indices of each level.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1258006,"byte_end":1258107,"line_start":262,"line_end":262,"column_start":1,"column_end":102}},{"value":"/ The order of iteration conforms to `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1258108,"byte_end":1258171,"line_start":263,"line_end":263,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1259047,"byte_end":1259061,"line_start":279,"line_end":279,"column_start":8,"column_end":22},"name":"mip_map_levels","qualname":"::meta::mip_map_levels","value":"fn mip_map_levels(RoundingMode, Vec2<usize>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all mip map level resolutions of a given size, including the indices of each level.\n The order of iteration conforms to `LineOrder::Increasing`.\n","sig":null,"attributes":[{"value":"/ Iterates over all mip map level resolutions of a given size, including the indices of each level.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1258736,"byte_end":1258837,"line_start":275,"line_end":275,"column_start":1,"column_end":102}},{"value":"/ The order of iteration conforms to `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1258838,"byte_end":1258901,"line_start":276,"line_end":276,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1259656,"byte_end":1259671,"line_start":291,"line_end":291,"column_start":8,"column_end":23},"name":"rip_map_indices","qualname":"::meta::rip_map_indices","value":"fn rip_map_indices(RoundingMode, Vec2<usize>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all rip map level indices of a given size.\n The order of iteration conforms to `LineOrder::Increasing`.\n","sig":null,"attributes":[{"value":"/ Iterates over all rip map level indices of a given size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1259524,"byte_end":1259584,"line_start":289,"line_end":289,"column_start":1,"column_end":61}},{"value":"/ The order of iteration conforms to `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1259585,"byte_end":1259648,"line_start":290,"line_end":290,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1260183,"byte_end":1260198,"line_start":306,"line_end":306,"column_start":8,"column_end":23},"name":"mip_map_indices","qualname":"::meta::mip_map_indices","value":"fn mip_map_indices(RoundingMode, Vec2<usize>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all mip map level indices of a given size.\n The order of iteration conforms to `LineOrder::Increasing`.\n","sig":null,"attributes":[{"value":"/ Iterates over all mip map level indices of a given size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1260051,"byte_end":1260111,"line_start":304,"line_end":304,"column_start":1,"column_end":61}},{"value":"/ The order of iteration conforms to `LineOrder::Increasing`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1260112,"byte_end":1260175,"line_start":305,"line_end":305,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1260652,"byte_end":1260671,"line_start":314,"line_end":314,"column_start":8,"column_end":27},"name":"compute_chunk_count","qualname":"::meta::compute_chunk_count","value":"fn compute_chunk_count(Compression, Vec2<usize>, BlockDescription) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the number of chunks that an image is divided into. May be an expensive operation.\n","sig":null,"attributes":[{"value":"/ Compute the number of chunks that an image is divided into. May be an expensive operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1260370,"byte_end":1260464,"line_start":310,"line_end":310,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262197,"byte_end":1262211,"line_start":357,"line_end":357,"column_start":12,"column_end":26},"name":"read_from_file","qualname":"<MetaData>::read_from_file","value":"fn read_from_file<impl AsRef<::std::path::Path>>(impl AsRef<::std::path::Path>,\nbool) -> Result<Self> where\nimpl AsRef<::std::path::Path>: AsRef<::std::path::Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the exr meta data from a file.\n Use `read_from_unbuffered` instead if you do not have a file.\n Does not validate the meta data.\n","sig":null,"attributes":[{"value":"/ Read the exr meta data from a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262019,"byte_end":1262058,"line_start":353,"line_end":353,"column_start":5,"column_end":44}},{"value":"/ Use `read_from_unbuffered` instead if you do not have a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262063,"byte_end":1262128,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/ Does not validate the meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262133,"byte_end":1262169,"line_start":355,"line_end":355,"column_start":5,"column_end":41}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262174,"byte_end":1262185,"line_start":356,"line_end":356,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262615,"byte_end":1262635,"line_start":366,"line_end":366,"column_start":12,"column_end":32},"name":"read_from_unbuffered","qualname":"<MetaData>::read_from_unbuffered","value":"fn read_from_unbuffered<impl Read>(impl Read, bool) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Buffer the reader and then read the exr meta data from it.\n Use `read_from_buffered` if your reader is an in-memory reader.\n Use `read_from_file` if you have a file path.\n Does not validate the meta data.\n","sig":null,"attributes":[{"value":"/ Buffer the reader and then read the exr meta data from it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262358,"byte_end":1262420,"line_start":361,"line_end":361,"column_start":5,"column_end":67}},{"value":"/ Use `read_from_buffered` if your reader is an in-memory reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262425,"byte_end":1262492,"line_start":362,"line_end":362,"column_start":5,"column_end":72}},{"value":"/ Use `read_from_file` if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262497,"byte_end":1262546,"line_start":363,"line_end":363,"column_start":5,"column_end":54}},{"value":"/ Does not validate the meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262551,"byte_end":1262587,"line_start":364,"line_end":364,"column_start":5,"column_end":41}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262592,"byte_end":1262603,"line_start":365,"line_end":365,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1263010,"byte_end":1263028,"line_start":375,"line_end":375,"column_start":12,"column_end":30},"name":"read_from_buffered","qualname":"<MetaData>::read_from_buffered","value":"fn read_from_buffered<impl Read>(impl Read, bool) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the exr meta data from a reader.\n Use `read_from_file` if you have a file path.\n Use `read_from_unbuffered` if this is not an in-memory reader.\n Does not validate the meta data.\n","sig":null,"attributes":[{"value":"/ Read the exr meta data from a reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262775,"byte_end":1262816,"line_start":370,"line_end":370,"column_start":5,"column_end":46}},{"value":"/ Use `read_from_file` if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262821,"byte_end":1262870,"line_start":371,"line_end":371,"column_start":5,"column_end":54}},{"value":"/ Use `read_from_unbuffered` if this is not an in-memory reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262875,"byte_end":1262941,"line_start":372,"line_end":372,"column_start":5,"column_end":71}},{"value":"/ Does not validate the meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262946,"byte_end":1262982,"line_start":373,"line_end":373,"column_start":5,"column_end":41}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262987,"byte_end":1262998,"line_start":374,"line_end":374,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265068,"byte_end":1265086,"line_start":421,"line_end":421,"column_start":12,"column_end":30},"name":"read_offset_tables","qualname":"<MetaData>::read_offset_tables","value":"fn read_offset_tables<'_, '_,\nimpl Read>(&'_ mut PeekRead<impl Read>, &'_ Headers) -> Result<OffsetTables>\nwhere impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read one offset table from the reader for each header.\n","sig":null,"attributes":[{"value":"/ Read one offset table from the reader for each header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1264998,"byte_end":1265056,"line_start":420,"line_end":420,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265478,"byte_end":1265496,"line_start":429,"line_end":429,"column_start":12,"column_end":30},"name":"skip_offset_tables","qualname":"<MetaData>::skip_offset_tables","value":"fn skip_offset_tables<'_, '_,\nimpl Read>(&'_ mut PeekRead<impl Read>, &'_ Headers) -> Result<usize> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Skip the offset tables by advancing the reader by the required byte count.\n","sig":null,"attributes":[{"value":"/ Skip the offset tables by advancing the reader by the required byte count.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265334,"byte_end":1265412,"line_start":427,"line_end":427,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266263,"byte_end":1266301,"line_start":441,"line_end":441,"column_start":12,"column_end":50},"name":"enumerate_ordered_header_block_indices","qualname":"<MetaData>::enumerate_ordered_header_block_indices","value":"fn enumerate_ordered_header_block_indices<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" This iterator tells you the block indices of all blocks that must be in the image.\n The order of the blocks depends on the `LineOrder` attribute\n (unspecified line order is treated the same as increasing line order).\n The blocks written to the file must be exactly in this order,\n except for when the `LineOrder` is unspecified.\n The index represents the block index, in increasing line order, within the header.\n","sig":null,"attributes":[{"value":"/ This iterator tells you the block indices of all blocks that must be in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265800,"byte_end":1265886,"line_start":435,"line_end":435,"column_start":5,"column_end":91}},{"value":"/ The order of the blocks depends on the `LineOrder` attribute","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265891,"byte_end":1265955,"line_start":436,"line_end":436,"column_start":5,"column_end":69}},{"value":"/ (unspecified line order is treated the same as increasing line order).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1265960,"byte_end":1266034,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ The blocks written to the file must be exactly in this order,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266039,"byte_end":1266104,"line_start":438,"line_end":438,"column_start":5,"column_end":70}},{"value":"/ except for when the `LineOrder` is unspecified.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266109,"byte_end":1266160,"line_start":439,"line_end":439,"column_start":5,"column_end":56}},{"value":"/ The index represents the block index, in increasing line order, within the header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266165,"byte_end":1266251,"line_start":440,"line_end":440,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266747,"byte_end":1266769,"line_start":448,"line_end":448,"column_start":12,"column_end":34},"name":"collect_ordered_blocks","qualname":"<MetaData>::collect_ordered_blocks","value":"fn collect_ordered_blocks<'s,\nimpl 's + FnMut(BlockIndex) -> UncompressedBlock>(&'s Self,\nimpl 's + FnMut(BlockIndex) -> UncompressedBlock) -> /*impl Trait*/ where\nimpl 's + FnMut(BlockIndex) -> UncompressedBlock: 's + FnMut(BlockIndex) ->\nUncompressedBlock","parent":null,"children":[],"decl_id":null,"docs":" Go through all the block indices in the correct order and call the specified closure for each of these blocks.\n That way, the blocks indices are filled with real block data and returned as an iterator.\n The closure returns the an `UncompressedBlock` for each block index.\n","sig":null,"attributes":[{"value":"/ Go through all the block indices in the correct order and call the specified closure for each of these blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266446,"byte_end":1266560,"line_start":445,"line_end":445,"column_start":5,"column_end":119}},{"value":"/ That way, the blocks indices are filled with real block data and returned as an iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266565,"byte_end":1266658,"line_start":446,"line_end":446,"column_start":5,"column_end":98}},{"value":"/ The closure returns the an `UncompressedBlock` for each block index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1266663,"byte_end":1266735,"line_start":447,"line_end":447,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267379,"byte_end":1267405,"line_start":459,"line_end":459,"column_start":12,"column_end":38},"name":"collect_ordered_block_data","qualname":"<MetaData>::collect_ordered_block_data","value":"fn collect_ordered_block_data<'s,\nimpl 's + FnMut(BlockIndex) -> Vec<u8>>(&'s Self,\nimpl 's + FnMut(BlockIndex) -> Vec<u8>) -> /*impl Trait*/ where\nimpl 's + FnMut(BlockIndex) -> Vec<u8>: 's + FnMut(BlockIndex) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Go through all the block indices in the correct order and call the specified closure for each of these blocks.\n That way, the blocks indices are filled with real block data and returned as an iterator.\n The closure returns the byte data for each block index.\n","sig":null,"attributes":[{"value":"/ Go through all the block indices in the correct order and call the specified closure for each of these blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267091,"byte_end":1267205,"line_start":456,"line_end":456,"column_start":5,"column_end":119}},{"value":"/ That way, the blocks indices are filled with real block data and returned as an iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267210,"byte_end":1267303,"line_start":457,"line_end":457,"column_start":5,"column_end":98}},{"value":"/ The closure returns the byte data for each block index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267308,"byte_end":1267367,"line_start":458,"line_end":458,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267797,"byte_end":1267805,"line_start":468,"line_end":468,"column_start":12,"column_end":20},"name":"validate","qualname":"<MetaData>::validate","value":"fn validate<'_>(&'_ [Header], bool) -> Result<Requirements>","parent":null,"children":[],"decl_id":null,"docs":" Validates this meta data. Returns the minimal possible requirements.\n","sig":null,"attributes":[{"value":"/ Validates this meta data. Returns the minimal possible requirements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1267713,"byte_end":1267785,"line_start":467,"line_end":467,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271309,"byte_end":1271322,"line_start":554,"line_end":554,"column_start":12,"column_end":25},"name":"is_multilayer","qualname":"<Requirements>::is_multilayer","value":"fn is_multilayer<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this file declared to contain multiple layers?\n","sig":null,"attributes":[{"value":"/ Is this file declared to contain multiple layers?","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271244,"byte_end":1271297,"line_start":553,"line_end":553,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271434,"byte_end":1271438,"line_start":559,"line_end":559,"column_start":12,"column_end":16},"name":"read","qualname":"<Requirements>::read","value":"fn read<R, '_>(&'_ mut R) -> Result<Self> where R: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271384,"byte_end":1271422,"line_start":558,"line_end":558,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1272842,"byte_end":1272847,"line_start":592,"line_end":592,"column_start":12,"column_end":17},"name":"write","qualname":"<Requirements>::write","value":"fn write<W, '_>(Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1272767,"byte_end":1272830,"line_start":591,"line_end":591,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1273640,"byte_end":1273648,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"validate","qualname":"<Requirements>::validate","value":"fn validate<'_>(&'_ Self) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Validate this instance.\n","sig":null,"attributes":[{"value":"/ Validate this instance.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1273601,"byte_end":1273628,"line_start":610,"line_end":610,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::image","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1615},{"krate":0,"index":2019},{"krate":0,"index":2158},{"krate":0,"index":2187},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2233},{"krate":0,"index":2236},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2246},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2253},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2262},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":6117},{"krate":0,"index":6121},{"krate":0,"index":6124},{"krate":0,"index":6127},{"krate":0,"index":6129},{"krate":0,"index":2271},{"krate":0,"index":6133},{"krate":0,"index":6139},{"krate":0,"index":6142},{"krate":0,"index":6145},{"krate":0,"index":6147},{"krate":0,"index":6151},{"krate":0,"index":6155},{"krate":0,"index":6156},{"krate":0,"index":6158},{"krate":0,"index":6160},{"krate":0,"index":6161},{"krate":0,"index":6164},{"krate":0,"index":6170},{"krate":0,"index":6171},{"krate":0,"index":6173},{"krate":0,"index":6175},{"krate":0,"index":6176},{"krate":0,"index":6179},{"krate":0,"index":6180},{"krate":0,"index":6182},{"krate":0,"index":6187},{"krate":0,"index":6191},{"krate":0,"index":6195},{"krate":0,"index":6198},{"krate":0,"index":6203},{"krate":0,"index":6206},{"krate":0,"index":6210},{"krate":0,"index":6214},{"krate":0,"index":6217},{"krate":0,"index":6220},{"krate":0,"index":6222},{"krate":0,"index":6226},{"krate":0,"index":6232},{"krate":0,"index":6235},{"krate":0,"index":6238},{"krate":0,"index":6240},{"krate":0,"index":6244},{"krate":0,"index":6255},{"krate":0,"index":6258},{"krate":0,"index":6261},{"krate":0,"index":6263},{"krate":0,"index":6267},{"krate":0,"index":6269},{"krate":0,"index":2274},{"krate":0,"index":6272},{"krate":0,"index":6276},{"krate":0,"index":6279},{"krate":0,"index":6282},{"krate":0,"index":6284},{"krate":0,"index":6288},{"krate":0,"index":6290},{"krate":0,"index":6293},{"krate":0,"index":6303},{"krate":0,"index":6305},{"krate":0,"index":6306},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2281},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2296},{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2309},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2329},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":6309},{"krate":0,"index":6314},{"krate":0,"index":2337},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2359},{"krate":0,"index":2366},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":6318},{"krate":0,"index":6323},{"krate":0,"index":6326},{"krate":0,"index":6328},{"krate":0,"index":6331},{"krate":0,"index":6333},{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2385},{"krate":0,"index":2392},{"krate":0,"index":2397},{"krate":0,"index":2408},{"krate":0,"index":2418},{"krate":0,"index":2423},{"krate":0,"index":2425},{"krate":0,"index":2429},{"krate":0,"index":2434},{"krate":0,"index":2442},{"krate":0,"index":2444},{"krate":0,"index":2449},{"krate":0,"index":2454},{"krate":0,"index":2456}],"decl_id":null,"docs":" Data structures that represent a complete exr image.\n Contains generic structs that must be nested to obtain a complete image type.","sig":null,"attributes":[{"value":"/ Data structures that represent a complete exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414160,"byte_end":1414216,"line_start":2,"line_end":2,"column_start":1,"column_end":57}},{"value":"/ Contains generic structs that must be nested to obtain a complete image type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414217,"byte_end":1414298,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414299,"byte_end":1414302,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414303,"byte_end":1414306,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ For example, an rgba image containing multiple layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414307,"byte_end":1414364,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/ can be represented using `Image<Layers<SpecificChannels<MyPixelStorage>>>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414365,"byte_end":1414444,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ An image containing a single layer with arbitrary channels and no deep data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414445,"byte_end":1414524,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ can be represented using `Image<Layer<AnyChannels<FlatSamples>>>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414525,"byte_end":1414595,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414596,"byte_end":1414599,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414600,"byte_end":1414603,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ These and other predefined types are included in this module as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414604,"byte_end":1414671,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ 1. `PixelImage`: A single layer, fixed set of arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414672,"byte_end":1414741,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ 1. `PixelLayersImage`: Multiple layers, fixed set of arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414742,"byte_end":1414818,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ 1. `RgbaImage`: A single layer, fixed set of channels: rgb, optional a.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414819,"byte_end":1414894,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ 1. `RgbaLayersImage`: Multiple layers, fixed set of channels: rgb, optional a.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414895,"byte_end":1414977,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/ 1. `FlatImage`: Multiple layers, any channels, no deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1414978,"byte_end":1415042,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/ 1. `AnyImage`: All supported data (multiple layers, arbitrary channels, no deep data yet)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415043,"byte_end":1415136,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415137,"byte_end":1415140,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ You can also use your own types inside an image,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415141,"byte_end":1415193,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/ for example if you want to use a custom sample storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415194,"byte_end":1415253,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415254,"byte_end":1415257,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This is the high-level interface for the pixels of an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415258,"byte_end":1415322,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ See `exr::blocks` module for a low-level interface.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415323,"byte_end":1415378,"line_start":24,"line_end":24,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::image::read","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1140},{"krate":0,"index":1224},{"krate":0,"index":1286},{"krate":0,"index":1347},{"krate":0,"index":1407},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1603},{"krate":0,"index":4530},{"krate":0,"index":4532},{"krate":0,"index":4533},{"krate":0,"index":4535},{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4540},{"krate":0,"index":4541},{"krate":0,"index":1612},{"krate":0,"index":1613}],"decl_id":null,"docs":" Read an exr image.","sig":null,"attributes":[{"value":"/ Read an exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1470902,"byte_end":1470924,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1470925,"byte_end":1470928,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ For great flexibility and customization, use the `read()` function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1470929,"byte_end":1471000,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/ The return value of the `read()` function must be further customized before reading a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471001,"byte_end":1471096,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471098,"byte_end":1471101,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ For very simple applications, you can alternatively use one of these functions:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471102,"byte_end":1471185,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471186,"byte_end":1471189,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ 1. `read_first_rgba_layer_from_file(path, your_constructor, your_pixel_setter)`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471190,"byte_end":1471274,"line_start":10,"line_end":10,"column_start":1,"column_end":85}},{"value":"/     You specify how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471275,"byte_end":1471319,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/     The first layer containing rgba channels is then loaded from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471320,"byte_end":1471398,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/     Fails if no rgba layer can be found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471399,"byte_end":1471443,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471444,"byte_end":1471447,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ 1. `read_all_rgba_layers_from_file(path, your_constructor, your_pixel_setter)`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471448,"byte_end":1471531,"line_start":15,"line_end":15,"column_start":1,"column_end":84}},{"value":"/     You specify how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471532,"byte_end":1471576,"line_start":16,"line_end":16,"column_start":1,"column_end":45}},{"value":"/     All layers containing rgba channels are then loaded from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471577,"byte_end":1471651,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/     Fails if any layer in the image does not contain rgba channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471652,"byte_end":1471723,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471724,"byte_end":1471727,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 1. `read_first_flat_layer_from_file(path)`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471728,"byte_end":1471775,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/     The first layer containing non-deep data with arbitrary channels is loaded from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471776,"byte_end":1471873,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"/     Fails if no non-deep layer can be found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471874,"byte_end":1471922,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471923,"byte_end":1471926,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ 1. `read_all_flat_layers_from_file(path)`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471927,"byte_end":1471973,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/     All layers containing non-deep data with arbitrary channels are loaded from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1471974,"byte_end":1472067,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/     Fails if any layer in the image contains deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472068,"byte_end":1472127,"line_start":26,"line_end":26,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472128,"byte_end":1472131,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 1. `read_all_data_from_file(path)`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472132,"byte_end":1472171,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/     All layers with arbitrary channels and all resolution levels are extracted from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472172,"byte_end":1472269,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472270,"byte_end":1472273,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/     Note: Currently does not support deep data, and currently fails","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472274,"byte_end":1472345,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/     if any layer in the image contains deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472346,"byte_end":1472399,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1472400,"byte_end":1472403,"line_start":33,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::image::read::image","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":4154},{"krate":0,"index":4161},{"krate":0,"index":4165},{"krate":0,"index":1096},{"krate":0,"index":4169},{"krate":0,"index":4173},{"krate":0,"index":4176},{"krate":0,"index":4179},{"krate":0,"index":4181},{"krate":0,"index":1123},{"krate":0,"index":1129},{"krate":0,"index":1135}],"decl_id":null,"docs":" The last wrapper of image readers, finally containing the [`from_file(path)`] method.\n This completes the builder and reads a complete image.\n","sig":null,"attributes":[{"value":"/ The last wrapper of image readers, finally containing the [`from_file(path)`] method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480093,"byte_end":1480182,"line_start":1,"line_end":1,"column_start":1,"column_end":90}},{"value":"/ This completes the builder and reads a complete image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480183,"byte_end":1480241,"line_start":2,"line_end":2,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480764,"byte_end":1480773,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"ReadImage","qualname":"::image::read::image::ReadImage","value":"ReadImage {  }","parent":null,"children":[{"krate":0,"index":4157},{"krate":0,"index":4158},{"krate":0,"index":4159},{"krate":0,"index":4160}],"decl_id":null,"docs":" Specify whether to read the image in parallel,\n whether to use pedantic error handling,\n and a callback for the reading progress.\n","sig":null,"attributes":[{"value":"/ Specify whether to read the image in parallel,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480589,"byte_end":1480639,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ whether to use pedantic error handling,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480640,"byte_end":1480683,"line_start":16,"line_end":16,"column_start":1,"column_end":44}},{"value":"/ and a callback for the reading progress.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480684,"byte_end":1480728,"line_start":17,"line_end":17,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481025,"byte_end":1481028,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadImage<F, L>>::new","value":"fn new(L, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Uses relaxed error handling and parallel decompression.\n","sig":null,"attributes":[{"value":"/ Uses relaxed error handling and parallel decompression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480954,"byte_end":1481013,"line_start":28,"line_end":28,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482213,"byte_end":1482221,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"pedantic","qualname":"<ReadImage<F, L>>::pedantic","value":"fn pedantic(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify that any missing or unusual information should result in an error.\n Otherwise, `exrs` will try to compute or ignore missing information.","sig":null,"attributes":[{"value":"/ Specify that any missing or unusual information should result in an error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481190,"byte_end":1481268,"line_start":36,"line_end":36,"column_start":5,"column_end":83}},{"value":"/ Otherwise, `exrs` will try to compute or ignore missing information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481273,"byte_end":1481345,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481350,"byte_end":1481353,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ If pedantic is true, then an error will be returned as soon as anything is missing in the file,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481358,"byte_end":1481457,"line_start":39,"line_end":39,"column_start":5,"column_end":104}},{"value":"/ or two values in the image contradict each other. If pedantic is false,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481462,"byte_end":1481537,"line_start":40,"line_end":40,"column_start":5,"column_end":80}},{"value":"/ then only fatal errors will be thrown. By default, reading an image is not pedantic,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481542,"byte_end":1481630,"line_start":41,"line_end":41,"column_start":5,"column_end":93}},{"value":"/ which means that slightly invalid files might still be readable.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481635,"byte_end":1481703,"line_start":42,"line_end":42,"column_start":5,"column_end":73}},{"value":"/ For example, if some attribute is missing but can be recomputed, this flag decides whether an error is thrown.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481708,"byte_end":1481822,"line_start":43,"line_end":43,"column_start":5,"column_end":119}},{"value":"/ Or if the pedantic flag is true and there are still bytes left after the decompression algorithm finished,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481827,"byte_end":1481937,"line_start":44,"line_end":44,"column_start":5,"column_end":115}},{"value":"/ an error is thrown, because this should not happen and something might be wrong with the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1481942,"byte_end":1482040,"line_start":45,"line_end":45,"column_start":5,"column_end":103}},{"value":"/ Or if your application is a target of attacks, or if you want to emulate the original C++ library,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482045,"byte_end":1482147,"line_start":46,"line_end":46,"column_start":5,"column_end":107}},{"value":"/ you might want to switch to pedantic reading.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482152,"byte_end":1482201,"line_start":47,"line_end":47,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482464,"byte_end":1482476,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"non_parallel","qualname":"<ReadImage<F, L>>::non_parallel","value":"fn non_parallel(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify that multiple pixel blocks should never be decompressed using multiple threads at once.\n This might be slower but uses less memory and less synchronization.\n","sig":null,"attributes":[{"value":"/ Specify that multiple pixel blocks should never be decompressed using multiple threads at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482277,"byte_end":1482376,"line_start":50,"line_end":50,"column_start":5,"column_end":104}},{"value":"/ This might be slower but uses less memory and less synchronization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482381,"byte_end":1482452,"line_start":51,"line_end":51,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482699,"byte_end":1482710,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"on_progress","qualname":"<ReadImage<F, L>>::on_progress","value":"fn on_progress<OnProgress>(Self, OnProgress) -> ReadImage<OnProgress, L> where\nOnProgress: FnMut(f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Specify a function to be called regularly throughout the loading process.\n Replaces all previously specified progress functions in this reader.\n","sig":null,"attributes":[{"value":"/ Specify a function to be called regularly throughout the loading process.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482533,"byte_end":1482610,"line_start":54,"line_end":54,"column_start":5,"column_end":82}},{"value":"/ Replaces all previously specified progress functions in this reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1482615,"byte_end":1482687,"line_start":55,"line_end":55,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483169,"byte_end":1483178,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"from_file","qualname":"<ReadImage<F, L>>::from_file","value":"fn from_file<Layers, impl AsRef<Path>>(Self, impl AsRef<Path>)\n-> Result<Image<Layers>> where for<'s> L: ReadLayers<Layers = Layers>,\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the exr image from a file.\n Use [`ReadImage::read_from_unbuffered`] instead, if you do not have a file.\n","sig":null,"attributes":[{"value":"/ Read the exr image from a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483008,"byte_end":1483043,"line_start":68,"line_end":68,"column_start":5,"column_end":40}},{"value":"/ Use [`ReadImage::read_from_unbuffered`] instead, if you do not have a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483048,"byte_end":1483127,"line_start":69,"line_end":69,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483132,"byte_end":1483141,"line_start":70,"line_end":70,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483146,"byte_end":1483157,"line_start":71,"line_end":71,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483643,"byte_end":1483658,"line_start":83,"line_end":83,"column_start":12,"column_end":27},"name":"from_unbuffered","qualname":"<ReadImage<F, L>>::from_unbuffered","value":"fn from_unbuffered<Layers, impl Read + Seek>(Self, impl Read + Seek)\n-> Result<Image<Layers>> where for<'s> L: ReadLayers<Layers = Layers>,\nimpl Read + Seek: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Buffer the reader and then read the exr image from it.\n Use [`ReadImage::read_from_buffered`] instead, if your reader is an in-memory reader.\n Use [`ReadImage::read_from_file`] instead, if you have a file path.\n","sig":null,"attributes":[{"value":"/ Buffer the reader and then read the exr image from it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483373,"byte_end":1483431,"line_start":78,"line_end":78,"column_start":5,"column_end":63}},{"value":"/ Use [`ReadImage::read_from_buffered`] instead, if your reader is an in-memory reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483436,"byte_end":1483525,"line_start":79,"line_end":79,"column_start":5,"column_end":94}},{"value":"/ Use [`ReadImage::read_from_file`] instead, if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483530,"byte_end":1483601,"line_start":80,"line_end":80,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483606,"byte_end":1483615,"line_start":81,"line_end":81,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483620,"byte_end":1483631,"line_start":82,"line_end":82,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484213,"byte_end":1484226,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"from_buffered","qualname":"<ReadImage<F, L>>::from_buffered","value":"fn from_buffered<Layers, impl Read + Seek>(Self, impl Read + Seek)\n-> Result<Image<Layers>> where for<'s> L: ReadLayers<Layers = Layers>,\nimpl Read + Seek: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Read the exr image from a buffered reader.\n Use [`ReadImage::read_from_file`] instead, if you have a file path.\n Use [`ReadImage::read_from_unbuffered`] instead, if this is not an in-memory reader.\n","sig":null,"attributes":[{"value":"/ Read the exr image from a buffered reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483857,"byte_end":1483903,"line_start":89,"line_end":89,"column_start":5,"column_end":51}},{"value":"/ Use [`ReadImage::read_from_file`] instead, if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483908,"byte_end":1483979,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"/ Use [`ReadImage::read_from_unbuffered`] instead, if this is not an in-memory reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1483984,"byte_end":1484072,"line_start":91,"line_end":91,"column_start":5,"column_end":93}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484190,"byte_end":1484201,"line_start":93,"line_end":93,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484892,"byte_end":1484903,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"from_chunks","qualname":"<ReadImage<F, L>>::from_chunks","value":"fn from_chunks<Layers,\nimpl Read + Seek>(Self, crate::block::reader::Reader<impl Read + Seek>)\n-> Result<Image<Layers>> where for<'s> L: ReadLayers<Layers = Layers>,\nimpl Read + Seek: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Read the exr image from an initialized chunks reader\n that has already extracted the meta data from the file.\n Use [`ReadImage::read_from_file`] instead, if you have a file path.\n Use [`ReadImage::read_from_buffered`] instead, if this is an in-memory reader.\n","sig":null,"attributes":[{"value":"/ Read the exr image from an initialized chunks reader","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484468,"byte_end":1484524,"line_start":101,"line_end":101,"column_start":5,"column_end":61}},{"value":"/ that has already extracted the meta data from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484529,"byte_end":1484588,"line_start":102,"line_end":102,"column_start":5,"column_end":64}},{"value":"/ Use [`ReadImage::read_from_file`] instead, if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484593,"byte_end":1484664,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ Use [`ReadImage::read_from_buffered`] instead, if this is an in-memory reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484669,"byte_end":1484751,"line_start":104,"line_end":104,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1484869,"byte_end":1484880,"line_start":106,"line_end":106,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":4169},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486195,"byte_end":1486220,"line_start":139,"line_end":139,"column_start":12,"column_end":37},"name":"ImageWithAttributesReader","qualname":"::image::read::image::ImageWithAttributesReader","value":"ImageWithAttributesReader {  }","parent":null,"children":[{"krate":0,"index":4171},{"krate":0,"index":4172}],"decl_id":null,"docs":" Processes blocks from a file and collects them into a complete `Image`.\n","sig":null,"attributes":[{"value":"/ Processes blocks from a file and collects them into a complete `Image`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486073,"byte_end":1486148,"line_start":137,"line_end":137,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486413,"byte_end":1486416,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageWithAttributesReader<L>>::new","value":"fn new<'_>(&'_ [Header], L) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" A new image reader with image attributes.\n","sig":null,"attributes":[{"value":"/ A new image reader with image attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486356,"byte_end":1486401,"line_start":146,"line_end":146,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487482,"byte_end":1487492,"line_start":176,"line_end":176,"column_start":11,"column_end":21},"name":"ReadLayers","qualname":"::image::read::image::ReadLayers","value":"ReadLayers<'s>","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"decl_id":null,"docs":" A template that creates a `LayerReader` for each layer in the file.\n","sig":null,"attributes":[{"value":"/ A template that creates a `LayerReader` for each layer in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487400,"byte_end":1487471,"line_start":175,"line_end":175,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487550,"byte_end":1487556,"line_start":179,"line_end":179,"column_start":10,"column_end":16},"name":"Layers","qualname":"::image::read::image::ReadLayers::Layers","value":"type Layers;","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" The type of the resulting Layers\n","sig":null,"attributes":[{"value":"/ The type of the resulting Layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487504,"byte_end":1487540,"line_start":178,"line_end":178,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487615,"byte_end":1487621,"line_start":182,"line_end":182,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::read::image::ReadLayers::Reader","value":"type Reader: LayersReader<Layers = Self::Layers>;","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" The type of the temporary layer reader\n","sig":null,"attributes":[{"value":"/ The type of the temporary layer reader","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487563,"byte_end":1487605,"line_start":181,"line_end":181,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487718,"byte_end":1487738,"line_start":185,"line_end":185,"column_start":8,"column_end":28},"name":"create_layers_reader","qualname":"::image::read::image::ReadLayers::create_layers_reader","value":"fn create_layers_reader<'_>(&'s Self, &'_ [Header]) -> Result<Self::Reader>","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" Create a single reader for a single layer\n","sig":null,"attributes":[{"value":"/ Create a single reader for a single layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487665,"byte_end":1487710,"line_start":184,"line_end":184,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487962,"byte_end":1487976,"line_start":189,"line_end":189,"column_start":8,"column_end":22},"name":"all_attributes","qualname":"::image::read::image::ReadLayers::all_attributes","value":"fn all_attributes(Self) -> ReadImage<fn(: f64), Self> where Self: Sized","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" Specify that all attributes should be read from an image.\n Use `from_file(path)` on the return value of this method to actually decode an image.\n","sig":null,"attributes":[{"value":"/ Specify that all attributes should be read from an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487799,"byte_end":1487860,"line_start":187,"line_end":187,"column_start":5,"column_end":66}},{"value":"/ Use `from_file(path)` on the return value of this method to actually decode an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1487865,"byte_end":1487954,"line_start":188,"line_end":188,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488183,"byte_end":1488195,"line_start":195,"line_end":195,"column_start":11,"column_end":23},"name":"LayersReader","qualname":"::image::read::image::LayersReader","value":"LayersReader","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a single image layer.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a single image layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488086,"byte_end":1488172,"line_start":194,"line_end":194,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488245,"byte_end":1488251,"line_start":198,"line_end":198,"column_start":10,"column_end":16},"name":"Layers","qualname":"::image::read::image::LayersReader::Layers","value":"type Layers;","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" The type of resulting layers\n","sig":null,"attributes":[{"value":"/ The type of resulting layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488203,"byte_end":1488235,"line_start":197,"line_end":197,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488341,"byte_end":1488353,"line_start":201,"line_end":201,"column_start":8,"column_end":20},"name":"filter_block","qualname":"::image::read::image::LayersReader::filter_block","value":"fn filter_block<'_, '_>(&'_ Self, &'_ MetaData, TileCoordinates, BlockIndex)\n-> bool","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Specify whether a single block of pixels should be loaded from the file\n","sig":null,"attributes":[{"value":"/ Specify whether a single block of pixels should be loaded from the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488258,"byte_end":1488333,"line_start":200,"line_end":200,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488541,"byte_end":1488551,"line_start":204,"line_end":204,"column_start":8,"column_end":18},"name":"read_block","qualname":"::image::read::image::LayersReader::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ [Header], UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Load a single pixel block, which has not been filtered, into the reader, accumulating the layer\n","sig":null,"attributes":[{"value":"/ Load a single pixel block, which has not been filtered, into the reader, accumulating the layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488434,"byte_end":1488533,"line_start":203,"line_end":203,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488691,"byte_end":1488702,"line_start":207,"line_end":207,"column_start":8,"column_end":19},"name":"into_layers","qualname":"::image::read::image::LayersReader::into_layers","value":"fn into_layers(Self) -> Self::Layers","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":" Deliver the final accumulated layers for the image\n","sig":null,"attributes":[{"value":"/ Deliver the final accumulated layers for the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1488629,"byte_end":1488683,"line_start":206,"line_end":206,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layers","qualname":"::image::read::layers","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":4185},{"krate":0,"index":4188},{"krate":0,"index":4191},{"krate":0,"index":4194},{"krate":0,"index":4196},{"krate":0,"index":4199},{"krate":0,"index":4201},{"krate":0,"index":4205},{"krate":0,"index":4208},{"krate":0,"index":4211},{"krate":0,"index":4214},{"krate":0,"index":4216},{"krate":0,"index":4219},{"krate":0,"index":4221},{"krate":0,"index":1182},{"krate":0,"index":4225},{"krate":0,"index":4229},{"krate":0,"index":4232},{"krate":0,"index":4235},{"krate":0,"index":4237},{"krate":0,"index":4241},{"krate":0,"index":4245},{"krate":0,"index":4248},{"krate":0,"index":4251},{"krate":0,"index":4253},{"krate":0,"index":4257},{"krate":0,"index":4263},{"krate":0,"index":4266},{"krate":0,"index":4269},{"krate":0,"index":4271},{"krate":0,"index":1188},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1203},{"krate":0,"index":1210},{"krate":0,"index":1218}],"decl_id":null,"docs":" How to read either a single or a list of layers.\n","sig":null,"attributes":[{"value":"/ How to read either a single or a list of layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1488939,"byte_end":1488991,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489498,"byte_end":1489511,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ReadAllLayers","qualname":"::image::read::layers::ReadAllLayers","value":"ReadAllLayers { read_channels }","parent":null,"children":[{"krate":0,"index":4187}],"decl_id":null,"docs":" Specify to read all channels, aborting if any one is invalid.\n [`ReadRgbaChannels`] or [`ReadAnyChannels<ReadFlatSamples>`].\n","sig":null,"attributes":[{"value":"/ Specify to read all channels, aborting if any one is invalid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489316,"byte_end":1489381,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"/ [`ReadRgbaChannels`] or [`ReadAnyChannels<ReadFlatSamples>`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489382,"byte_end":1489447,"line_start":13,"line_end":13,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489579,"byte_end":1489592,"line_start":18,"line_end":18,"column_start":9,"column_end":22},"name":"read_channels","qualname":"::image::read::layers::ReadAllLayers::read_channels","value":"ReadChannels","parent":{"krate":0,"index":4185},"children":[],"decl_id":null,"docs":" The channel reading specification\n","sig":null,"attributes":[{"value":"/ The channel reading specification","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489533,"byte_end":1489570,"line_start":17,"line_end":17,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4205},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489811,"byte_end":1489830,"line_start":24,"line_end":24,"column_start":12,"column_end":31},"name":"ReadFirstValidLayer","qualname":"::image::read::layers::ReadFirstValidLayer","value":"ReadFirstValidLayer { read_channels }","parent":null,"children":[{"krate":0,"index":4207}],"decl_id":null,"docs":" Specify to read only the first layer which meets the previously specified requirements\n","sig":null,"attributes":[{"value":"/ Specify to read only the first layer which meets the previously specified requirements","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489611,"byte_end":1489701,"line_start":21,"line_end":21,"column_start":1,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":4207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489898,"byte_end":1489911,"line_start":27,"line_end":27,"column_start":9,"column_end":22},"name":"read_channels","qualname":"::image::read::layers::ReadFirstValidLayer::read_channels","value":"ReadChannels","parent":{"krate":0,"index":4205},"children":[],"decl_id":null,"docs":" The channel reading specification\n","sig":null,"attributes":[{"value":"/ The channel reading specification","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489852,"byte_end":1489889,"line_start":26,"line_end":26,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490022,"byte_end":1490034,"line_start":31,"line_end":31,"column_start":11,"column_end":23},"name":"ReadChannels","qualname":"::image::read::layers::ReadChannels","value":"ReadChannels<'s>","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"decl_id":null,"docs":" A template that creates a [`ChannelsReader`] once for all channels per layer.\n","sig":null,"attributes":[{"value":"/ A template that creates a [`ChannelsReader`] once for all channels per layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1489930,"byte_end":1490011,"line_start":30,"line_end":30,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490101,"byte_end":1490107,"line_start":34,"line_end":34,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::read::layers::ReadChannels::Reader","value":"type Reader: ChannelsReader;","parent":{"krate":0,"index":1182},"children":[],"decl_id":null,"docs":" The type of the temporary channels reader\n","sig":null,"attributes":[{"value":"/ The type of the temporary channels reader","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490046,"byte_end":1490091,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490201,"byte_end":1490223,"line_start":37,"line_end":37,"column_start":8,"column_end":30},"name":"create_channels_reader","qualname":"::image::read::layers::ReadChannels::create_channels_reader","value":"fn create_channels_reader<'_>(&'s Self, &'_ Header) -> Result<Self::Reader>","parent":{"krate":0,"index":1182},"children":[],"decl_id":null,"docs":" Create a single reader for all channels of a specific layer\n","sig":null,"attributes":[{"value":"/ Create a single reader for all channels of a specific layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490130,"byte_end":1490193,"line_start":36,"line_end":36,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490571,"byte_end":1490588,"line_start":44,"line_end":44,"column_start":8,"column_end":25},"name":"first_valid_layer","qualname":"::image::read::layers::ReadChannels::first_valid_layer","value":"fn first_valid_layer(Self) -> ReadFirstValidLayer<Self> where Self: Sized","parent":{"krate":0,"index":1182},"children":[],"decl_id":null,"docs":" Read only the first layer which meets the previously specified requirements\n For example, skips layers with deep data, if specified earlier.\n Aborts if the image contains no layers.\n","sig":null,"attributes":[{"value":"/ Read only the first layer which meets the previously specified requirements","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490282,"byte_end":1490361,"line_start":40,"line_end":40,"column_start":5,"column_end":84}},{"value":"/ For example, skips layers with deep data, if specified earlier.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490366,"byte_end":1490433,"line_start":41,"line_end":41,"column_start":5,"column_end":72}},{"value":"/ Aborts if the image contains no layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490438,"byte_end":1490481,"line_start":42,"line_end":42,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490915,"byte_end":1490925,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"all_layers","qualname":"::image::read::layers::ReadChannels::all_layers","value":"fn all_layers(Self) -> ReadAllLayers<Self> where Self: Sized","parent":{"krate":0,"index":1182},"children":[],"decl_id":null,"docs":" Reads all layers, including an empty list. Aborts if any of the layers are invalid,\n even if only one of the layers contains unexpected data.\n","sig":null,"attributes":[{"value":"/ Reads all layers, including an empty list. Aborts if any of the layers are invalid,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490755,"byte_end":1490842,"line_start":49,"line_end":49,"column_start":5,"column_end":92}},{"value":"/ even if only one of the layers contains unexpected data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1490847,"byte_end":1490907,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":4225},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491382,"byte_end":1491397,"line_start":61,"line_end":61,"column_start":12,"column_end":27},"name":"AllLayersReader","qualname":"::image::read::layers::AllLayersReader","value":"AllLayersReader {  }","parent":null,"children":[{"krate":0,"index":4227}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a list of layers.\n For example, `ChannelsReader` can be\n [`SpecificChannelsReader`] or [`AnyChannelsReader<FlatSamplesReader>`].\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a list of layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491136,"byte_end":1491218,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ For example, `ChannelsReader` can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491219,"byte_end":1491259,"line_start":58,"line_end":58,"column_start":1,"column_end":41}},{"value":"/ [`SpecificChannelsReader`] or [`AnyChannelsReader<FlatSamplesReader>`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491260,"byte_end":1491335,"line_start":59,"line_end":59,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":4241},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491768,"byte_end":1491789,"line_start":69,"line_end":69,"column_start":12,"column_end":33},"name":"FirstValidLayerReader","qualname":"::image::read::layers::FirstValidLayerReader","value":"FirstValidLayerReader {  }","parent":null,"children":[{"krate":0,"index":4243},{"krate":0,"index":4244}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a single layers, using only the first.\n For example, `ChannelsReader` can be\n `SpecificChannelsReader` or `AnyChannelsReader<FlatSamplesReader>`.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a single layers, using only the first.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491505,"byte_end":1491608,"line_start":65,"line_end":65,"column_start":1,"column_end":104}},{"value":"/ For example, `ChannelsReader` can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491609,"byte_end":1491649,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/ `SpecificChannelsReader` or `AnyChannelsReader<FlatSamplesReader>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491650,"byte_end":1491721,"line_start":67,"line_end":67,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":4257},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492123,"byte_end":1492134,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"LayerReader","qualname":"::image::read::layers::LayerReader","value":"LayerReader {  }","parent":null,"children":[{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4261},{"krate":0,"index":4262}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a single layers.\n For example, `ChannelsReader` can be\n `SpecificChannelsReader` or `AnyChannelsReader<FlatSamplesReader>`.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a single layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491882,"byte_end":1491963,"line_start":74,"line_end":74,"column_start":1,"column_end":82}},{"value":"/ For example, `ChannelsReader` can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1491964,"byte_end":1492004,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"/ `SpecificChannelsReader` or `AnyChannelsReader<FlatSamplesReader>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492005,"byte_end":1492076,"line_start":76,"line_end":76,"column_start":1,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492376,"byte_end":1492390,"line_start":86,"line_end":86,"column_start":11,"column_end":25},"name":"ChannelsReader","qualname":"::image::read::layers::ChannelsReader","value":"ChannelsReader","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into multiple channels per layer.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into multiple channels per layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492272,"byte_end":1492365,"line_start":85,"line_end":85,"column_start":1,"column_end":94}}]},{"kind":"Type","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492456,"byte_end":1492464,"line_start":89,"line_end":89,"column_start":10,"column_end":18},"name":"Channels","qualname":"::image::read::layers::ChannelsReader::Channels","value":"type Channels;","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":" The type of the resulting channel collection\n","sig":null,"attributes":[{"value":"/ The type of the resulting channel collection","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492398,"byte_end":1492446,"line_start":88,"line_end":88,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492554,"byte_end":1492566,"line_start":92,"line_end":92,"column_start":8,"column_end":20},"name":"filter_block","qualname":"::image::read::layers::ChannelsReader::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":" Specify whether a single block of pixels should be loaded from the file\n","sig":null,"attributes":[{"value":"/ Specify whether a single block of pixels should be loaded from the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492471,"byte_end":1492546,"line_start":91,"line_end":91,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492725,"byte_end":1492735,"line_start":95,"line_end":95,"column_start":8,"column_end":18},"name":"read_block","qualname":"::image::read::layers::ChannelsReader::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ Header, UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":" Load a single pixel block, which has not been filtered, into the reader, accumulating the channel data\n","sig":null,"attributes":[{"value":"/ Load a single pixel block, which has not been filtered, into the reader, accumulating the channel data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492611,"byte_end":1492717,"line_start":94,"line_end":94,"column_start":5,"column_end":111}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492884,"byte_end":1492897,"line_start":98,"line_end":98,"column_start":8,"column_end":21},"name":"into_channels","qualname":"::image::read::layers::ChannelsReader::into_channels","value":"fn into_channels(Self) -> Self::Channels","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":" Deliver the final accumulated channel collection for the image\n","sig":null,"attributes":[{"value":"/ Deliver the final accumulated channel collection for the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492810,"byte_end":1492876,"line_start":97,"line_end":97,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1493793,"byte_end":1493813,"line_start":124,"line_end":124,"column_start":8,"column_end":28},"name":"create_layers_reader","qualname":"<ReadAllLayers<C> as image::read::image::ReadLayers>::create_layers_reader","value":"fn create_layers_reader<'_>(&'s Self, &'_ [Header]) -> Result<Self::Reader>","parent":{"krate":0,"index":1129},"children":[],"decl_id":{"krate":0,"index":1133},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1494249,"byte_end":1494261,"line_start":138,"line_end":138,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<AllLayersReader<C> as image::read::image::LayersReader>::filter_block","value":"fn filter_block<'_, '_>(&'_ Self, &'_ MetaData, TileCoordinates, BlockIndex)\n-> bool","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1137},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1494494,"byte_end":1494504,"line_start":143,"line_end":143,"column_start":8,"column_end":18},"name":"read_block","qualname":"<AllLayersReader<C> as image::read::image::LayersReader>::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ [Header], UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1138},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1494817,"byte_end":1494828,"line_start":149,"line_end":149,"column_start":8,"column_end":19},"name":"into_layers","qualname":"<AllLayersReader<C> as image::read::image::LayersReader>::into_layers","value":"fn into_layers(Self) -> Self::Layers","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1139},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1495384,"byte_end":1495404,"line_start":167,"line_end":167,"column_start":8,"column_end":28},"name":"create_layers_reader","qualname":"<ReadFirstValidLayer<C> as image::read::image::ReadLayers>::create_layers_reader","value":"fn create_layers_reader<'_>(&'s Self, &'_ [Header]) -> Result<Self::Reader>","parent":{"krate":0,"index":1129},"children":[],"decl_id":{"krate":0,"index":1133},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1496096,"byte_end":1496108,"line_start":186,"line_end":186,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<FirstValidLayerReader<C> as image::read::image::LayersReader>::filter_block","value":"fn filter_block<'_, '_>(&'_ Self, &'_ MetaData, TileCoordinates, BlockIndex)\n-> bool","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1137},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1496292,"byte_end":1496302,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"read_block","qualname":"<FirstValidLayerReader<C> as image::read::image::LayersReader>::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ [Header], UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1138},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1496580,"byte_end":1496591,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"into_layers","qualname":"<FirstValidLayerReader<C> as image::read::image::LayersReader>::into_layers","value":"fn into_layers(Self) -> Self::Layers","parent":{"krate":0,"index":1135},"children":[],"decl_id":{"krate":0,"index":1139},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"any_channels","qualname":"::image::read::any_channels","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1261},{"krate":0,"index":4275},{"krate":0,"index":4278},{"krate":0,"index":4281},{"krate":0,"index":4284},{"krate":0,"index":4286},{"krate":0,"index":4289},{"krate":0,"index":4291},{"krate":0,"index":1264},{"krate":0,"index":4295},{"krate":0,"index":4299},{"krate":0,"index":4302},{"krate":0,"index":4305},{"krate":0,"index":4307},{"krate":0,"index":4311},{"krate":0,"index":4313},{"krate":0,"index":4317},{"krate":0,"index":4323},{"krate":0,"index":4326},{"krate":0,"index":4329},{"krate":0,"index":4331},{"krate":0,"index":4334},{"krate":0,"index":4336},{"krate":0,"index":1267},{"krate":0,"index":1272},{"krate":0,"index":1278}],"decl_id":null,"docs":" How to read arbitrary channels.\n","sig":null,"attributes":[{"value":"/ How to read arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497078,"byte_end":1497113,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":4275},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497742,"byte_end":1497757,"line_start":17,"line_end":17,"column_start":12,"column_end":27},"name":"ReadAnyChannels","qualname":"::image::read::any_channels::ReadAnyChannels","value":"ReadAnyChannels { read_samples }","parent":null,"children":[{"krate":0,"index":4277}],"decl_id":null,"docs":" A template that creates an [AnyChannelsReader] for each layer in the image.\n This loads all channels for each layer.\n The `ReadSamples` can, for example, be [ReadFlatSamples] or [ReadAllLevels<ReadFlatSamples>].\n","sig":null,"attributes":[{"value":"/ A template that creates an [AnyChannelsReader] for each layer in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497470,"byte_end":1497549,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ This loads all channels for each layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497550,"byte_end":1497593,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ The `ReadSamples` can, for example, be [ReadFlatSamples] or [ReadAllLevels<ReadFlatSamples>].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497594,"byte_end":1497691,"line_start":15,"line_end":15,"column_start":1,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":4277},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497823,"byte_end":1497835,"line_start":20,"line_end":20,"column_start":9,"column_end":21},"name":"read_samples","qualname":"::image::read::any_channels::ReadAnyChannels::read_samples","value":"ReadSamples","parent":{"krate":0,"index":4275},"children":[],"decl_id":null,"docs":" The sample reading specification\n","sig":null,"attributes":[{"value":"/ The sample reading specification","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497778,"byte_end":1497814,"line_start":19,"line_end":19,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497945,"byte_end":1497956,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"ReadSamples","qualname":"::image::read::any_channels::ReadSamples","value":"ReadSamples","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266}],"decl_id":null,"docs":" A template that creates a new [`SampleReader`] for each channel in each layer.\n","sig":null,"attributes":[{"value":"/ A template that creates a new [`SampleReader`] for each channel in each layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497852,"byte_end":1497934,"line_start":23,"line_end":23,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498018,"byte_end":1498024,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::read::any_channels::ReadSamples::Reader","value":"type Reader: SamplesReader;","parent":{"krate":0,"index":1264},"children":[],"decl_id":null,"docs":" The type of the temporary samples reader\n","sig":null,"attributes":[{"value":"/ The type of the temporary samples reader","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1497964,"byte_end":1498008,"line_start":26,"line_end":26,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498112,"byte_end":1498132,"line_start":30,"line_end":30,"column_start":8,"column_end":28},"name":"create_sample_reader","qualname":"::image::read::any_channels::ReadSamples::create_sample_reader","value":"fn create_sample_reader<'_, '_,\n'_>(&'_ Self, &'_ Header, &'_ ChannelDescription) -> Result<Self::Reader>","parent":{"krate":0,"index":1264},"children":[],"decl_id":null,"docs":" Create a single reader for a single channel of a layer\n","sig":null,"attributes":[{"value":"/ Create a single reader for a single channel of a layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498046,"byte_end":1498104,"line_start":29,"line_end":29,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4295},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498405,"byte_end":1498422,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"AnyChannelsReader","qualname":"::image::read::any_channels::AnyChannelsReader","value":"AnyChannelsReader {  }","parent":null,"children":[{"krate":0,"index":4297}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a collection of arbitrary channels.\n Loads all channels for each layer.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a collection of arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498215,"byte_end":1498315,"line_start":33,"line_end":33,"column_start":1,"column_end":101}},{"value":"/ Loads all channels for each layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498316,"byte_end":1498354,"line_start":34,"line_end":34,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4317},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498728,"byte_end":1498744,"line_start":44,"line_end":44,"column_start":12,"column_end":28},"name":"AnyChannelReader","qualname":"::image::read::any_channels::AnyChannelReader","value":"AnyChannelReader {  }","parent":null,"children":[{"krate":0,"index":4319},{"krate":0,"index":4320},{"krate":0,"index":4321},{"krate":0,"index":4322}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a single arbitrary channel.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a single arbitrary channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1498585,"byte_end":1498677,"line_start":42,"line_end":42,"column_start":1,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":1267},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499257,"byte_end":1499270,"line_start":61,"line_end":61,"column_start":11,"column_end":24},"name":"SamplesReader","qualname":"::image::read::any_channels::SamplesReader","value":"SamplesReader","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a single pixel channel.\n For example, stores thousands of \"Red\" pixel values for a single layer.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a single pixel channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499082,"byte_end":1499170,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ For example, stores thousands of \"Red\" pixel values for a single layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499171,"byte_end":1499246,"line_start":60,"line_end":60,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":1268},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499328,"byte_end":1499335,"line_start":64,"line_end":64,"column_start":10,"column_end":17},"name":"Samples","qualname":"::image::read::any_channels::SamplesReader::Samples","value":"type Samples;","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" The type of resulting sample storage\n","sig":null,"attributes":[{"value":"/ The type of resulting sample storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499278,"byte_end":1499318,"line_start":63,"line_end":63,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499425,"byte_end":1499437,"line_start":67,"line_end":67,"column_start":8,"column_end":20},"name":"filter_block","qualname":"::image::read::any_channels::SamplesReader::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Specify whether a single block of pixels should be loaded from the file\n","sig":null,"attributes":[{"value":"/ Specify whether a single block of pixels should be loaded from the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499342,"byte_end":1499417,"line_start":66,"line_end":66,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499594,"byte_end":1499603,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"read_line","qualname":"::image::read::any_channels::SamplesReader::read_line","value":"fn read_line<'_, '_>(&'_ mut Self, LineRef) -> UnitResult","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Load a single pixel line, which has not been filtered, into the reader, accumulating the sample data\n","sig":null,"attributes":[{"value":"/ Load a single pixel line, which has not been filtered, into the reader, accumulating the sample data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499482,"byte_end":1499586,"line_start":69,"line_end":69,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499724,"byte_end":1499736,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"into_samples","qualname":"::image::read::any_channels::SamplesReader::into_samples","value":"fn into_samples(Self) -> Self::Samples","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Deliver the final accumulated sample storage for the image\n","sig":null,"attributes":[{"value":"/ Deliver the final accumulated sample storage for the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499654,"byte_end":1499716,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499893,"byte_end":1499915,"line_start":80,"line_end":80,"column_start":8,"column_end":30},"name":"create_channels_reader","qualname":"<ReadAnyChannels<S> as image::read::layers::ReadChannels>::create_channels_reader","value":"fn create_channels_reader<'_, '_>(&'_ Self, &'_ Header)\n-> Result<Self::Reader>","parent":{"krate":0,"index":1182},"children":[],"decl_id":{"krate":0,"index":1185},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1500569,"byte_end":1500581,"line_start":97,"line_end":97,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<AnyChannelsReader<S> as image::read::layers::ChannelsReader>::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1500729,"byte_end":1500739,"line_start":101,"line_end":101,"column_start":8,"column_end":18},"name":"read_block","qualname":"<AnyChannelsReader<S> as image::read::layers::ChannelsReader>::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ Header, UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1191},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1501310,"byte_end":1501323,"line_start":115,"line_end":115,"column_start":8,"column_end":21},"name":"into_channels","qualname":"<AnyChannelsReader<S> as image::read::layers::ChannelsReader>::into_channels","value":"fn into_channels(Self) -> Self::Channels","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1192},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1286},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"levels","qualname":"::image::read::levels","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","parent":null,"children":[{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":4340},{"krate":0,"index":4343},{"krate":0,"index":4346},{"krate":0,"index":4349},{"krate":0,"index":4351},{"krate":0,"index":4354},{"krate":0,"index":4356},{"krate":0,"index":1308},{"krate":0,"index":4360},{"krate":0,"index":4363},{"krate":0,"index":4366},{"krate":0,"index":4369},{"krate":0,"index":4371},{"krate":0,"index":4374},{"krate":0,"index":4376},{"krate":0,"index":1327},{"krate":0,"index":4380},{"krate":0,"index":4383},{"krate":0,"index":4386},{"krate":0,"index":4389},{"krate":0,"index":4391},{"krate":0,"index":4394},{"krate":0,"index":4396},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1339}],"decl_id":null,"docs":" How to read a set of resolution levels.\n","sig":null,"attributes":[{"value":"/ How to read a set of resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1501947,"byte_end":1501990,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":4340},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502691,"byte_end":1502707,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"ReadLargestLevel","qualname":"::image::read::levels::ReadLargestLevel","value":"ReadLargestLevel { read_samples }","parent":null,"children":[{"krate":0,"index":4342}],"decl_id":null,"docs":" Specify to read only the highest resolution level, skipping all smaller variations.\n The sample storage can be [`ReadFlatSamples`].\n","sig":null,"attributes":[{"value":"/ Specify to read only the highest resolution level, skipping all smaller variations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502502,"byte_end":1502589,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/ The sample storage can be [`ReadFlatSamples`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502590,"byte_end":1502640,"line_start":20,"line_end":20,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4342},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502779,"byte_end":1502791,"line_start":25,"line_end":25,"column_start":9,"column_end":21},"name":"read_samples","qualname":"::image::read::levels::ReadLargestLevel::read_samples","value":"DeepOrFlatSamples","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" The sample reading specification\n","sig":null,"attributes":[{"value":"/ The sample reading specification","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502734,"byte_end":1502770,"line_start":24,"line_end":24,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503031,"byte_end":1503043,"line_start":35,"line_end":35,"column_start":12,"column_end":24},"name":"all_channels","qualname":"<ReadLargestLevel<DeepOrFlatSamples>>::all_channels","value":"fn all_channels(Self) -> ReadAnyChannels<DeepOrFlatSamples>","parent":null,"children":[],"decl_id":null,"docs":" Read all arbitrary channels in each layer.\n","sig":null,"attributes":[{"value":"/ Read all arbitrary channels in each layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502973,"byte_end":1503019,"line_start":34,"line_end":34,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503906,"byte_end":1503919,"line_start":47,"line_end":47,"column_start":12,"column_end":25},"name":"rgba_channels","qualname":"<ReadLargestLevel<DeepOrFlatSamples>>::rgba_channels","value":"fn rgba_channels<R, G, B, A, Create, Set, Pixels>(Self, Create, Set)\n->\n    CollectPixels<ReadOptionalChannel<ReadRequiredChannel<ReadRequiredChannel<ReadRequiredChannel<NoneMore,\n    R>, G>, B>, A>, (R, G, B, A), Pixels, Create, Set> where\nR: FromNativeSample, G: FromNativeSample, B: FromNativeSample,\nA: FromNativeSample, Create: for<'_> Fn(Vec2<usize>, &'_ RgbaChannels) ->\nPixels, Set: for<'_> Fn(&'_ mut Pixels, Vec2<usize>, (R, G, B, A)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read only layers that contain rgba channels. Skips any other channels in the layer.\n The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","sig":null,"attributes":[{"value":"/ Read only layers that contain rgba channels. Skips any other channels in the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503205,"byte_end":1503292,"line_start":37,"line_end":37,"column_start":5,"column_end":92}},{"value":"/ The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503297,"byte_end":1503394,"line_start":38,"line_end":38,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503399,"byte_end":1503402,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Using two closures, define how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503407,"byte_end":1503462,"line_start":40,"line_end":40,"column_start":5,"column_end":60}},{"value":"/ The first closure creates an image, and the second closure inserts a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503467,"byte_end":1503553,"line_start":41,"line_end":41,"column_start":5,"column_end":91}},{"value":"/ The type of the pixel can be defined by the second closure;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503558,"byte_end":1503621,"line_start":42,"line_end":42,"column_start":5,"column_end":68}},{"value":"/ it must be a tuple containing four values, each being either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503626,"byte_end":1503723,"line_start":43,"line_end":43,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503728,"byte_end":1503731,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Throws an error for images with deep data or subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503736,"byte_end":1503797,"line_start":45,"line_end":45,"column_start":5,"column_end":66}},{"value":"/ Use `specific_channels` or `all_channels` if you want to read something other than rgba.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1503802,"byte_end":1503894,"line_start":46,"line_end":46,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505221,"byte_end":1505233,"line_start":73,"line_end":73,"column_start":12,"column_end":24},"name":"rgb_channels","qualname":"<ReadLargestLevel<DeepOrFlatSamples>>::rgb_channels","value":"fn rgb_channels<R, G, B, Create, Set, Pixels>(Self, Create, Set)\n->\n    CollectPixels<ReadRequiredChannel<ReadRequiredChannel<ReadRequiredChannel<NoneMore,\n    R>, G>, B>, (R, G, B), Pixels, Create, Set> where R: FromNativeSample,\nG: FromNativeSample, B: FromNativeSample,\nCreate: for<'_> Fn(Vec2<usize>, &'_ RgbChannels) -> Pixels,\nSet: for<'_> Fn(&'_ mut Pixels, Vec2<usize>, (R, G, B)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read only layers that contain rgb channels. Skips any other channels in the layer.","sig":null,"attributes":[{"value":"/ Read only layers that contain rgb channels. Skips any other channels in the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504623,"byte_end":1504709,"line_start":64,"line_end":64,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504714,"byte_end":1504717,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Using two closures, define how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504722,"byte_end":1504777,"line_start":66,"line_end":66,"column_start":5,"column_end":60}},{"value":"/ The first closure creates an image, and the second closure inserts a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504782,"byte_end":1504868,"line_start":67,"line_end":67,"column_start":5,"column_end":91}},{"value":"/ The type of the pixel can be defined by the second closure;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504873,"byte_end":1504936,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/ it must be a tuple containing three values, each being either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1504941,"byte_end":1505039,"line_start":69,"line_end":69,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505044,"byte_end":1505047,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Throws an error for images with deep data or subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505052,"byte_end":1505113,"line_start":71,"line_end":71,"column_start":5,"column_end":66}},{"value":"/ Use `specific_channels` or `all_channels` if you want to read something other than rgb.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505118,"byte_end":1505209,"line_start":72,"line_end":72,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506302,"byte_end":1506319,"line_start":95,"line_end":95,"column_start":12,"column_end":29},"name":"specific_channels","qualname":"<ReadLargestLevel<DeepOrFlatSamples>>::specific_channels","value":"fn specific_channels(Self) -> ReadZeroChannels","parent":null,"children":[],"decl_id":null,"docs":" Read only layers that contain the specified channels, skipping any other channels in the layer.\n Further specify which channels should be included by calling `.required(\"ChannelName\")`\n or `.optional(\"ChannelName\", default_value)` on the result of this function.\n Call `collect_pixels` afterwards to define the pixel container for your set of channels.","sig":null,"attributes":[{"value":"/ Read only layers that contain the specified channels, skipping any other channels in the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505839,"byte_end":1505938,"line_start":89,"line_end":89,"column_start":5,"column_end":104}},{"value":"/ Further specify which channels should be included by calling `.required(\"ChannelName\")`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1505943,"byte_end":1506034,"line_start":90,"line_end":90,"column_start":5,"column_end":96}},{"value":"/ or `.optional(\"ChannelName\", default_value)` on the result of this function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506039,"byte_end":1506119,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ Call `collect_pixels` afterwards to define the pixel container for your set of channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506124,"byte_end":1506216,"line_start":92,"line_end":92,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506221,"byte_end":1506224,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Throws an error for images with deep data or subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506229,"byte_end":1506290,"line_start":94,"line_end":94,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4360},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506512,"byte_end":1506525,"line_start":102,"line_end":102,"column_start":12,"column_end":25},"name":"ReadAllLevels","qualname":"::image::read::levels::ReadAllLevels","value":"ReadAllLevels { read_samples }","parent":null,"children":[{"krate":0,"index":4362}],"decl_id":null,"docs":" Specify to read all contained resolution levels from the image, if any.\n","sig":null,"attributes":[{"value":"/ Specify to read all contained resolution levels from the image, if any.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506386,"byte_end":1506461,"line_start":100,"line_end":100,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":4362},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506597,"byte_end":1506609,"line_start":105,"line_end":105,"column_start":9,"column_end":21},"name":"read_samples","qualname":"::image::read::levels::ReadAllLevels::read_samples","value":"DeepOrFlatSamples","parent":{"krate":0,"index":4360},"children":[],"decl_id":null,"docs":" The sample reading specification\n","sig":null,"attributes":[{"value":"/ The sample reading specification","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506552,"byte_end":1506588,"line_start":104,"line_end":104,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506762,"byte_end":1506774,"line_start":111,"line_end":111,"column_start":12,"column_end":24},"name":"all_channels","qualname":"<ReadAllLevels<ReadDeepOrFlatSamples>>::all_channels","value":"fn all_channels(Self) -> ReadAnyChannels<Self>","parent":null,"children":[],"decl_id":null,"docs":" Read all arbitrary channels in each layer.\n","sig":null,"attributes":[{"value":"/ Read all arbitrary channels in each layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506704,"byte_end":1506750,"line_start":110,"line_end":110,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":4380},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507114,"byte_end":1507129,"line_start":123,"line_end":123,"column_start":12,"column_end":27},"name":"AllLevelsReader","qualname":"::image::read::levels::AllLevelsReader","value":"AllLevelsReader {  }","parent":null,"children":[{"krate":0,"index":4382}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into multiple levels per channel.\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into multiple levels per channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506970,"byte_end":1507063,"line_start":121,"line_end":121,"column_start":1,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507275,"byte_end":1507291,"line_start":128,"line_end":128,"column_start":11,"column_end":27},"name":"ReadSamplesLevel","qualname":"::image::read::levels::ReadSamplesLevel","value":"ReadSamplesLevel","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332}],"decl_id":null,"docs":" A template that creates a [`SamplesReader`] once for each resolution level.\n","sig":null,"attributes":[{"value":"/ A template that creates a [`SamplesReader`] once for each resolution level.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507185,"byte_end":1507264,"line_start":127,"line_end":127,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507351,"byte_end":1507357,"line_start":131,"line_end":131,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::read::levels::ReadSamplesLevel::Reader","value":"type Reader: SamplesReader;","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The type of the temporary level reader\n","sig":null,"attributes":[{"value":"/ The type of the temporary level reader","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507299,"byte_end":1507341,"line_start":130,"line_end":130,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507443,"byte_end":1507470,"line_start":134,"line_end":134,"column_start":8,"column_end":35},"name":"create_samples_level_reader","qualname":"::image::read::levels::ReadSamplesLevel::create_samples_level_reader","value":"fn create_samples_level_reader<'_, '_,\n'_>(&'_ Self, &'_ Header, &'_ ChannelDescription, Vec2<usize>, Vec2<usize>)\n-> Result<Self::Reader>","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" Create a single reader for a single resolution level\n","sig":null,"attributes":[{"value":"/ Create a single reader for a single resolution level","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507379,"byte_end":1507435,"line_start":133,"line_end":133,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507714,"byte_end":1507734,"line_start":141,"line_end":141,"column_start":8,"column_end":28},"name":"create_sample_reader","qualname":"<ReadAllLevels<S> as image::read::any_channels::ReadSamples>::create_sample_reader","value":"fn create_sample_reader<'_, '_,\n'_>(&'_ Self, &'_ Header, &'_ ChannelDescription) -> Result<Self::Reader>","parent":{"krate":0,"index":1264},"children":[],"decl_id":{"krate":0,"index":1266},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1510192,"byte_end":1510204,"line_start":195,"line_end":195,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<AllLevelsReader<S> as image::read::any_channels::SamplesReader>::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1269},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1510269,"byte_end":1510278,"line_start":199,"line_end":199,"column_start":8,"column_end":17},"name":"read_line","qualname":"<AllLevelsReader<S> as image::read::any_channels::SamplesReader>::read_line","value":"fn read_line<'_, '_>(&'_ mut Self, LineRef) -> UnitResult","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1270},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1510411,"byte_end":1510423,"line_start":203,"line_end":203,"column_start":8,"column_end":20},"name":"into_samples","qualname":"<AllLevelsReader<S> as image::read::any_channels::SamplesReader>::into_samples","value":"fn into_samples(Self) -> Self::Samples","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1271},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"samples","qualname":"::image::read::samples","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":4400},{"krate":0,"index":4402},{"krate":0,"index":4404},{"krate":0,"index":4405},{"krate":0,"index":4407},{"krate":0,"index":4408},{"krate":0,"index":4410},{"krate":0,"index":4411},{"krate":0,"index":1393},{"krate":0,"index":4413},{"krate":0,"index":4417},{"krate":0,"index":4419},{"krate":0,"index":4421},{"krate":0,"index":4422},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1402}],"decl_id":null,"docs":" How to read samples (a grid of `f32`, `f16` or `u32` values).\n","sig":null,"attributes":[{"value":"/ How to read samples (a grid of `f32`, `f16` or `u32` values).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1511313,"byte_end":1511378,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4400},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512012,"byte_end":1512027,"line_start":17,"line_end":17,"column_start":12,"column_end":27},"name":"ReadFlatSamples","qualname":"::image::read::samples::ReadFlatSamples","value":"","parent":null,"children":[],"decl_id":null,"docs":" Specify to read only flat samples and no \"deep data\"\n","sig":null,"attributes":[{"value":"/ Specify to read only flat samples and no \"deep data\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1511840,"byte_end":1511896,"line_start":14,"line_end":14,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512342,"byte_end":1512366,"line_start":27,"line_end":27,"column_start":12,"column_end":36},"name":"largest_resolution_level","qualname":"<ReadFlatSamples>::largest_resolution_level","value":"fn largest_resolution_level(Self) -> ReadLargestLevel<Self>","parent":null,"children":[],"decl_id":null,"docs":" Specify to read only the highest resolution level, skipping all smaller variations.\n","sig":null,"attributes":[{"value":"/ Specify to read only the highest resolution level, skipping all smaller variations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512243,"byte_end":1512330,"line_start":26,"line_end":26,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512535,"byte_end":1512556,"line_start":30,"line_end":30,"column_start":12,"column_end":33},"name":"all_resolution_levels","qualname":"<ReadFlatSamples>::all_resolution_levels","value":"fn all_resolution_levels(Self) -> ReadAllLevels<Self>","parent":null,"children":[],"decl_id":null,"docs":" Specify to read all contained resolution levels from the image, if any.\n","sig":null,"attributes":[{"value":"/ Specify to read all contained resolution levels from the image, if any.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512448,"byte_end":1512523,"line_start":29,"line_end":29,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513056,"byte_end":1513073,"line_start":43,"line_end":43,"column_start":12,"column_end":29},"name":"FlatSamplesReader","qualname":"::image::read::samples::FlatSamplesReader","value":"FlatSamplesReader {  }","parent":null,"children":[{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4416}],"decl_id":null,"docs":" Processes pixel blocks from a file and accumulates them into a grid of samples, for example \"Red\" or \"Alpha\".\n","sig":null,"attributes":[{"value":"/ Processes pixel blocks from a file and accumulates them into a grid of samples, for example \"Red\" or \"Alpha\".","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512896,"byte_end":1513009,"line_start":41,"line_end":41,"column_start":1,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513313,"byte_end":1513333,"line_start":54,"line_end":54,"column_start":8,"column_end":28},"name":"create_sample_reader","qualname":"<ReadFlatSamples as image::read::any_channels::ReadSamples>::create_sample_reader","value":"fn create_sample_reader<'_, '_,\n'_>(&'_ Self, &'_ Header, &'_ ChannelDescription) -> Result<Self::Reader>","parent":{"krate":0,"index":1264},"children":[],"decl_id":{"krate":0,"index":1266},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513601,"byte_end":1513628,"line_start":62,"line_end":62,"column_start":8,"column_end":35},"name":"create_samples_level_reader","qualname":"<ReadFlatSamples as image::read::levels::ReadSamplesLevel>::create_samples_level_reader","value":"fn create_samples_level_reader<'_, '_,\n'_>(&'_ Self, &'_ Header, &'_ ChannelDescription, Vec2<usize>, Vec2<usize>)\n-> Result<Self::Reader>","parent":{"krate":0,"index":1330},"children":[],"decl_id":{"krate":0,"index":1332},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1514254,"byte_end":1514266,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<FlatSamplesReader as image::read::any_channels::SamplesReader>::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1269},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1514360,"byte_end":1514369,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"read_line","qualname":"<FlatSamplesReader as image::read::any_channels::SamplesReader>::read_line","value":"fn read_line<'_, '_>(&'_ mut Self, LineRef) -> UnitResult","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1270},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1515918,"byte_end":1515930,"line_start":118,"line_end":118,"column_start":8,"column_end":20},"name":"into_samples","qualname":"<FlatSamplesReader as image::read::any_channels::SamplesReader>::into_samples","value":"fn into_samples(Self) -> FlatSamples","parent":{"krate":0,"index":1267},"children":[],"decl_id":{"krate":0,"index":1271},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"specific_channels","qualname":"::image::read::specific_channels","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1444},{"krate":0,"index":4425},{"krate":0,"index":4431},{"krate":0,"index":4435},{"krate":0,"index":4439},{"krate":0,"index":4445},{"krate":0,"index":4449},{"krate":0,"index":4453},{"krate":0,"index":4463},{"krate":0,"index":4469},{"krate":0,"index":4476},{"krate":0,"index":1452},{"krate":0,"index":1456},{"krate":0,"index":1460},{"krate":0,"index":4483},{"krate":0,"index":4492},{"krate":0,"index":4497},{"krate":0,"index":4503},{"krate":0,"index":1469},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1490},{"krate":0,"index":4509},{"krate":0,"index":4514},{"krate":0,"index":4517},{"krate":0,"index":4520},{"krate":0,"index":4524},{"krate":0,"index":4527},{"krate":0,"index":1497},{"krate":0,"index":1503},{"krate":0,"index":1511},{"krate":0,"index":1523}],"decl_id":null,"docs":" How to read arbitrary but specific selection of arbitrary channels.\n This is not a zero-cost abstraction.\n","sig":null,"attributes":[{"value":"/ How to read arbitrary but specific selection of arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516107,"byte_end":1516178,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ This is not a zero-cost abstraction.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516179,"byte_end":1516219,"line_start":2,"line_end":2,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516803,"byte_end":1516822,"line_start":20,"line_end":20,"column_start":11,"column_end":30},"name":"ReadSpecificChannel","qualname":"::image::read::specific_channels::ReadSpecificChannel","value":"ReadSpecificChannel: Sized + CheckDuplicates","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1439}],"decl_id":null,"docs":" Can be attached one more channel reader.\n Call `required` or `optional` on this object to declare another channel to be read from the file.\n Call `collect_pixels` at last to define how the previously declared pixels should be stored.\n","sig":null,"attributes":[{"value":"/ Can be attached one more channel reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516549,"byte_end":1516593,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/ Call `required` or `optional` on this object to declare another channel to be read from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516594,"byte_end":1516695,"line_start":18,"line_end":18,"column_start":1,"column_end":102}},{"value":"/ Call `collect_pixels` at last to define how the previously declared pixels should be stored.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516696,"byte_end":1516792,"line_start":19,"line_end":19,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517029,"byte_end":1517049,"line_start":24,"line_end":24,"column_start":10,"column_end":30},"name":"RecursivePixelReader","qualname":"::image::read::specific_channels::ReadSpecificChannel::RecursivePixelReader","value":"type RecursivePixelReader: RecursivePixelReader;","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" A separate internal reader for the pixels. Will be of type `Recursive<_, SampleReader<_>>`,\n depending on the pixels of the specific channel combination.\n","sig":null,"attributes":[{"value":"/ A separate internal reader for the pixels. Will be of type `Recursive<_, SampleReader<_>>`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516855,"byte_end":1516950,"line_start":22,"line_end":22,"column_start":5,"column_end":100}},{"value":"/ depending on the pixels of the specific channel combination.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516955,"byte_end":1517019,"line_start":23,"line_end":23,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517175,"byte_end":1517198,"line_start":27,"line_end":27,"column_start":8,"column_end":31},"name":"create_recursive_reader","qualname":"::image::read::specific_channels::ReadSpecificChannel::create_recursive_reader","value":"fn create_recursive_reader<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Result<Self::RecursivePixelReader>","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" Create a separate internal reader for the pixels of the specific channel combination.\n","sig":null,"attributes":[{"value":"/ Create a separate internal reader for the pixels of the specific channel combination.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517078,"byte_end":1517167,"line_start":26,"line_end":26,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517559,"byte_end":1517567,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"required","qualname":"::image::read::specific_channels::ReadSpecificChannel::required","value":"fn required<Sample, impl Into<Text>>(Self, impl Into<Text>)\n-> ReadRequiredChannel<Self, Sample> where impl Into<Text>: Into<Text>","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" Plan to read an additional channel from the image, with the specified name.\n If the channel cannot be found in the image when the image is read, the image will not be loaded.\n The generic parameter can usually be inferred from the closure in `collect_pixels`.\n","sig":null,"attributes":[{"value":"/ Plan to read an additional channel from the image, with the specified name.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517274,"byte_end":1517353,"line_start":29,"line_end":29,"column_start":5,"column_end":84}},{"value":"/ If the channel cannot be found in the image when the image is read, the image will not be loaded.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517358,"byte_end":1517459,"line_start":30,"line_end":30,"column_start":5,"column_end":106}},{"value":"/ The generic parameter can usually be inferred from the closure in `collect_pixels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517464,"byte_end":1517551,"line_start":31,"line_end":31,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518380,"byte_end":1518388,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"optional","qualname":"::image::read::specific_channels::ReadSpecificChannel::optional","value":"fn optional<Sample, impl Into<Text>>(Self, impl Into<Text>, Sample)\n-> ReadOptionalChannel<Self, Sample> where impl Into<Text>: Into<Text>","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" Plan to read an additional channel from the image, with the specified name.\n If the file does not contain this channel, the specified default sample will be returned instead.\n You can check whether the channel has been loaded by\n checking the presence of the optional channel description before instantiating your own image.\n The generic parameter can usually be inferred from the closure in `collect_pixels`.\n","sig":null,"attributes":[{"value":"/ Plan to read an additional channel from the image, with the specified name.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1517931,"byte_end":1518010,"line_start":38,"line_end":38,"column_start":5,"column_end":84}},{"value":"/ If the file does not contain this channel, the specified default sample will be returned instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518015,"byte_end":1518116,"line_start":39,"line_end":39,"column_start":5,"column_end":106}},{"value":"/ You can check whether the channel has been loaded by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518121,"byte_end":1518177,"line_start":40,"line_end":40,"column_start":5,"column_end":61}},{"value":"/ checking the presence of the optional channel description before instantiating your own image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518182,"byte_end":1518280,"line_start":41,"line_end":41,"column_start":5,"column_end":103}},{"value":"/ The generic parameter can usually be inferred from the closure in `collect_pixels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518285,"byte_end":1518372,"line_start":42,"line_end":42,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1519127,"byte_end":1519141,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"collect_pixels","qualname":"::image::read::specific_channels::ReadSpecificChannel::collect_pixels","value":"fn collect_pixels<Pixel, PixelStorage, CreatePixels,\nSetPixel>(Self, CreatePixels, SetPixel)\n-> CollectPixels<Self, Pixel, PixelStorage, CreatePixels, SetPixel> where\n<Self::RecursivePixelReader as\nRecursivePixelReader>::RecursivePixel: IntoTuple<Pixel>,\n<Self::RecursivePixelReader as\nRecursivePixelReader>::RecursiveChannelDescriptions: IntoNonRecursive,\nCreatePixels: for<'_> Fn(Vec2<usize>,\n&'_ <<Self::RecursivePixelReader as\nRecursivePixelReader>::RecursiveChannelDescriptions as\nIntoNonRecursive>::NonRecursive) -> PixelStorage,\nSetPixel: for<'_> Fn(&'_ mut PixelStorage, Vec2<usize>, Pixel) -> ()","parent":{"krate":0,"index":1430},"children":[],"decl_id":null,"docs":" Using two closures, define how to store the pixels.\n The first closure creates an image, and the second closure inserts a single pixel.\n The type of the pixel can be defined by the second closure;\n it must be a tuple containing `f16`, `f32`, `u32` or `Sample` values.\n See the examples for more information.\n","sig":null,"attributes":[{"value":"/ Using two closures, define how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518780,"byte_end":1518835,"line_start":51,"line_end":51,"column_start":5,"column_end":60}},{"value":"/ The first closure creates an image, and the second closure inserts a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518840,"byte_end":1518926,"line_start":52,"line_end":52,"column_start":5,"column_end":91}},{"value":"/ The type of the pixel can be defined by the second closure;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518931,"byte_end":1518994,"line_start":53,"line_end":53,"column_start":5,"column_end":68}},{"value":"/ it must be a tuple containing `f16`, `f32`, `u32` or `Sample` values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1518999,"byte_end":1519072,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ See the examples for more information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1519077,"byte_end":1519119,"line_start":55,"line_end":55,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520044,"byte_end":1520064,"line_start":73,"line_end":73,"column_start":11,"column_end":31},"name":"RecursivePixelReader","qualname":"::image::read::specific_channels::RecursivePixelReader","value":"RecursivePixelReader","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448}],"decl_id":null,"docs":" A reader containing sub-readers for reading the pixel content of an image.\n","sig":null,"attributes":[{"value":"/ A reader containing sub-readers for reading the pixel content of an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1519955,"byte_end":1520033,"line_start":72,"line_end":72,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520230,"byte_end":1520258,"line_start":77,"line_end":77,"column_start":10,"column_end":38},"name":"RecursiveChannelDescriptions","qualname":"::image::read::specific_channels::RecursivePixelReader::RecursiveChannelDescriptions","value":"type RecursiveChannelDescriptions;","parent":{"krate":0,"index":1444},"children":[],"decl_id":null,"docs":" The channel descriptions from the image.\n Will be converted to a tuple before being stored in `SpecificChannels<_, ChannelDescriptions>`.\n","sig":null,"attributes":[{"value":"/ The channel descriptions from the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520072,"byte_end":1520116,"line_start":75,"line_end":75,"column_start":5,"column_end":49}},{"value":"/ Will be converted to a tuple before being stored in `SpecificChannels<_, ChannelDescriptions>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520121,"byte_end":1520220,"line_start":76,"line_end":76,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520344,"byte_end":1520360,"line_start":80,"line_end":80,"column_start":8,"column_end":24},"name":"get_descriptions","qualname":"::image::read::specific_channels::RecursivePixelReader::get_descriptions","value":"fn get_descriptions<'_>(&'_ Self) -> Self::RecursiveChannelDescriptions","parent":{"krate":0,"index":1444},"children":[],"decl_id":null,"docs":" Returns the channel descriptions based on the channels in the file.\n","sig":null,"attributes":[{"value":"/ Returns the channel descriptions based on the channels in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520265,"byte_end":1520336,"line_start":79,"line_end":79,"column_start":5,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":1447},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520497,"byte_end":1520511,"line_start":83,"line_end":83,"column_start":10,"column_end":24},"name":"RecursivePixel","qualname":"::image::read::specific_channels::RecursivePixelReader::RecursivePixel","value":"type RecursivePixel: Copy + Default + 'static;","parent":{"krate":0,"index":1444},"children":[],"decl_id":null,"docs":" The pixel type. Will be converted to a tuple at the end of the process.\n","sig":null,"attributes":[{"value":"/ The pixel type. Will be converted to a tuple at the end of the process.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520412,"byte_end":1520487,"line_start":82,"line_end":82,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520580,"byte_end":1520591,"line_start":86,"line_end":86,"column_start":8,"column_end":19},"name":"read_pixels","qualname":"::image::read::specific_channels::RecursivePixelReader::read_pixels","value":"fn read_pixels<'s, FullPixel, '_, '_,\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel>(&'_ Self, &'s [u8],\n&'_ mut [FullPixel], impl Fn(&mut FullPixel) -> &mut Self::RecursivePixel)\nwhere\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel: for<'_> Fn(&'_ mut FullPixel)\n-> &'_ mut Self::RecursivePixel","parent":{"krate":0,"index":1444},"children":[],"decl_id":null,"docs":" Read the line of pixels.\n","sig":null,"attributes":[{"value":"/ Read the line of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520544,"byte_end":1520572,"line_start":85,"line_end":85,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":4425},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520993,"byte_end":1521012,"line_start":96,"line_end":96,"column_start":12,"column_end":31},"name":"ReadOptionalChannel","qualname":"::image::read::specific_channels::ReadOptionalChannel","value":"ReadOptionalChannel {  }","parent":null,"children":[{"krate":0,"index":4428},{"krate":0,"index":4429},{"krate":0,"index":4430}],"decl_id":null,"docs":" Used to read another specific channel from an image.\n Contains the previous `ReadChannels` objects.\n","sig":null,"attributes":[{"value":"/ Used to read another specific channel from an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520851,"byte_end":1520907,"line_start":93,"line_end":93,"column_start":1,"column_end":57}},{"value":"/ Contains the previous `ReadChannels` objects.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1520908,"byte_end":1520957,"line_start":94,"line_end":94,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":4439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521375,"byte_end":1521394,"line_start":106,"line_end":106,"column_start":12,"column_end":31},"name":"ReadRequiredChannel","qualname":"::image::read::specific_channels::ReadRequiredChannel","value":"ReadRequiredChannel {  }","parent":null,"children":[{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444}],"decl_id":null,"docs":" Used to read another specific channel from an image.\n Contains the previous `ReadChannels` objects.\n","sig":null,"attributes":[{"value":"/ Used to read another specific channel from an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521233,"byte_end":1521289,"line_start":103,"line_end":103,"column_start":1,"column_end":57}},{"value":"/ Contains the previous `ReadChannels` objects.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521290,"byte_end":1521339,"line_start":104,"line_end":104,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":4453},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521645,"byte_end":1521658,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"CollectPixels","qualname":"::image::read::specific_channels::CollectPixels","value":"CollectPixels {  }","parent":null,"children":[{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4462}],"decl_id":null,"docs":" Specifies how to collect all the specified channels into a number of individual pixels.\n","sig":null,"attributes":[{"value":"/ Specifies how to collect all the specified channels into a number of individual pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521512,"byte_end":1521603,"line_start":112,"line_end":112,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521959,"byte_end":1521975,"line_start":122,"line_end":122,"column_start":8,"column_end":24},"name":"already_contains","qualname":"<ReadRequiredChannel<Inner, Sample> as image::CheckDuplicates>::already_contains","value":"fn already_contains<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":0,"index":2337},"children":[],"decl_id":{"krate":0,"index":2338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1522200,"byte_end":1522216,"line_start":128,"line_end":128,"column_start":8,"column_end":24},"name":"already_contains","qualname":"<ReadOptionalChannel<Inner, Sample> as image::CheckDuplicates>::already_contains","value":"fn already_contains<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":0,"index":2337},"children":[],"decl_id":{"krate":0,"index":2338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1523187,"byte_end":1523209,"line_start":148,"line_end":148,"column_start":8,"column_end":30},"name":"create_channels_reader","qualname":"<CollectPixels<InnerChannels, Pixel, PixelStorage, CreatePixels, SetPixel> as image::read::layers::ReadChannels>::create_channels_reader","value":"fn create_channels_reader<'_>(&'s Self, &'_ Header) -> Result<Self::Reader>","parent":{"krate":0,"index":1182},"children":[],"decl_id":{"krate":0,"index":1185},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4483},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1524019,"byte_end":1524041,"line_start":168,"line_end":168,"column_start":12,"column_end":34},"name":"SpecificChannelsReader","qualname":"::image::read::specific_channels::SpecificChannelsReader","value":"SpecificChannelsReader {  }","parent":null,"children":[{"krate":0,"index":4488},{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4491}],"decl_id":null,"docs":" The reader that holds the temporary data that is required to read some specified channels.\n","sig":null,"attributes":[{"value":"/ The reader that holds the temporary data that is required to read some specified channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1523883,"byte_end":1523977,"line_start":166,"line_end":166,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1524701,"byte_end":1524713,"line_start":184,"line_end":184,"column_start":8,"column_end":20},"name":"filter_block","qualname":"<SpecificChannelsReader<PixelStorage, SetPixel, PxReader, Pixel> as image::read::layers::ChannelsReader>::filter_block","value":"fn filter_block<'_>(&'_ Self, TileCoordinates) -> bool","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1190},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1524818,"byte_end":1524828,"line_start":186,"line_end":186,"column_start":8,"column_end":18},"name":"read_block","qualname":"<SpecificChannelsReader<PixelStorage, SetPixel, PxReader, Pixel> as image::read::layers::ChannelsReader>::read_block","value":"fn read_block<'_, '_>(&'_ mut Self, &'_ Header, UncompressedBlock)\n-> UnitResult","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1191},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1525829,"byte_end":1525842,"line_start":205,"line_end":205,"column_start":8,"column_end":21},"name":"into_channels","qualname":"<SpecificChannelsReader<PixelStorage, SetPixel, PxReader, Pixel> as image::read::layers::ChannelsReader>::into_channels","value":"fn into_channels(Self) -> Self::Channels","parent":{"krate":0,"index":1188},"children":[],"decl_id":{"krate":0,"index":1192},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526133,"byte_end":1526149,"line_start":213,"line_end":213,"column_start":10,"column_end":26},"name":"ReadZeroChannels","qualname":"::image::read::specific_channels::ReadZeroChannels","value":"NoneMore","parent":null,"children":[],"decl_id":null,"docs":" Read zero channels from an image. Call `with_named_channel` on this object\n to read as many channels as desired.\n","sig":null,"attributes":[{"value":"/ Read zero channels from an image. Call `with_named_channel` on this object","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526004,"byte_end":1526082,"line_start":211,"line_end":211,"column_start":1,"column_end":79}},{"value":"/ to read as many channels as desired.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526083,"byte_end":1526123,"line_start":212,"line_end":212,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526252,"byte_end":1526275,"line_start":217,"line_end":217,"column_start":8,"column_end":31},"name":"create_recursive_reader","qualname":"<NoneMore as image::read::specific_channels::ReadSpecificChannel>::create_recursive_reader","value":"fn create_recursive_reader<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Result<Self::RecursivePixelReader>","parent":{"krate":0,"index":1430},"children":[],"decl_id":{"krate":0,"index":1432},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526679,"byte_end":1526702,"line_start":225,"line_end":225,"column_start":8,"column_end":31},"name":"create_recursive_reader","qualname":"<ReadOptionalChannel<ReadChannels, DefaultSample> as image::read::specific_channels::ReadSpecificChannel>::create_recursive_reader","value":"fn create_recursive_reader<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Result<Self::RecursivePixelReader>","parent":{"krate":0,"index":1430},"children":[],"decl_id":{"krate":0,"index":1432},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1527751,"byte_end":1527774,"line_start":247,"line_end":247,"column_start":8,"column_end":31},"name":"create_recursive_reader","qualname":"<ReadRequiredChannel<ReadChannels, Sample> as image::read::specific_channels::ReadSpecificChannel>::create_recursive_reader","value":"fn create_recursive_reader<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Result<Self::RecursivePixelReader>","parent":{"krate":0,"index":1430},"children":[],"decl_id":{"krate":0,"index":1432},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1528580,"byte_end":1528592,"line_start":262,"line_end":262,"column_start":12,"column_end":24},"name":"SampleReader","qualname":"::image::read::specific_channels::SampleReader","value":"SampleReader {  }","parent":null,"children":[{"krate":0,"index":4511},{"krate":0,"index":4512},{"krate":0,"index":4513}],"decl_id":null,"docs":" Reader for a single channel. Generic over the concrete sample type (f16, f32, u32).\n","sig":null,"attributes":[{"value":"/ Reader for a single channel. Generic over the concrete sample type (f16, f32, u32).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1528457,"byte_end":1528544,"line_start":260,"line_end":260,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":4520},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1528941,"byte_end":1528961,"line_start":274,"line_end":274,"column_start":12,"column_end":32},"name":"OptionalSampleReader","qualname":"::image::read::specific_channels::OptionalSampleReader","value":"OptionalSampleReader {  }","parent":null,"children":[{"krate":0,"index":4522},{"krate":0,"index":4523}],"decl_id":null,"docs":" Reader for a single channel. Generic over the concrete sample type (f16, f32, u32).\n Can also skip reading a channel if it could not be found in the image.\n","sig":null,"attributes":[{"value":"/ Reader for a single channel. Generic over the concrete sample type (f16, f32, u32).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1528743,"byte_end":1528830,"line_start":271,"line_end":271,"column_start":1,"column_end":88}},{"value":"/ Can also skip reading a channel if it could not be found in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1528831,"byte_end":1528905,"line_start":272,"line_end":272,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530506,"byte_end":1530522,"line_start":312,"line_end":312,"column_start":8,"column_end":24},"name":"get_descriptions","qualname":"<NoneMore as image::read::specific_channels::RecursivePixelReader>::get_descriptions","value":"fn get_descriptions<'_>(&'_ Self) -> Self::RecursiveChannelDescriptions","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530626,"byte_end":1530637,"line_start":316,"line_end":316,"column_start":8,"column_end":19},"name":"read_pixels","qualname":"<NoneMore as image::read::specific_channels::RecursivePixelReader>::read_pixels","value":"fn read_pixels<'s, FullPixel, '_, '_,\nimpl Fn(&mut FullPixel) -> &mut NoneMore>(&'_ Self, &'s [u8],\n&'_ mut [FullPixel], impl Fn(&mut FullPixel) -> &mut NoneMore) where\nimpl Fn(&mut FullPixel) -> &mut NoneMore: for<'_> Fn(&'_ mut FullPixel) ->\n&'_ mut NoneMore","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1448},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1531059,"byte_end":1531075,"line_start":328,"line_end":328,"column_start":8,"column_end":24},"name":"get_descriptions","qualname":"<Recursive<InnerReader, SampleReader<Sample>> as image::read::specific_channels::RecursivePixelReader>::get_descriptions","value":"fn get_descriptions<'_>(&'_ Self) -> Self::RecursiveChannelDescriptions","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1531282,"byte_end":1531293,"line_start":332,"line_end":332,"column_start":8,"column_end":19},"name":"read_pixels","qualname":"<Recursive<InnerReader, SampleReader<Sample>> as image::read::specific_channels::RecursivePixelReader>::read_pixels","value":"fn read_pixels<'s, FullPixel, '_, '_,\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel>(&'_ Self, &'s [u8],\n&'_ mut [FullPixel], impl Fn(&mut FullPixel) -> &mut Self::RecursivePixel)\nwhere\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel: for<'_> Fn(&'_ mut FullPixel)\n-> &'_ mut Self::RecursivePixel","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1448},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1531919,"byte_end":1531935,"line_start":347,"line_end":347,"column_start":8,"column_end":24},"name":"get_descriptions","qualname":"<Recursive<InnerReader, OptionalSampleReader<Sample>> as image::read::specific_channels::RecursivePixelReader>::get_descriptions","value":"fn get_descriptions<'_>(&'_ Self) -> Self::RecursiveChannelDescriptions","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1532193,"byte_end":1532204,"line_start":353,"line_end":353,"column_start":8,"column_end":19},"name":"read_pixels","qualname":"<Recursive<InnerReader, OptionalSampleReader<Sample>> as image::read::specific_channels::RecursivePixelReader>::read_pixels","value":"fn read_pixels<'s, FullPixel, '_, '_,\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel>(&'_ Self, &'s [u8],\n&'_ mut [FullPixel], impl Fn(&mut FullPixel) -> &mut Self::RecursivePixel)\nwhere\nimpl Fn(&mut FullPixel) -> &mut Self::RecursivePixel: for<'_> Fn(&'_ mut FullPixel)\n-> &'_ mut Self::RecursivePixel","parent":{"krate":0,"index":1444},"children":[],"decl_id":{"krate":0,"index":1448},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473822,"byte_end":1473845,"line_start":66,"line_end":66,"column_start":8,"column_end":31},"name":"read_all_data_from_file","qualname":"::image::read::read_all_data_from_file","value":"fn read_all_data_from_file<impl AsRef<Path>>(impl AsRef<Path>)\n-> Result<AnyImage> where impl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" All resolution levels, all channels, all layers.\n Does not support deep data yet. Uses parallel decompression and relaxed error handling.\n Inspect the source code of this function if you need customization.\n","sig":null,"attributes":[{"value":"/ All resolution levels, all channels, all layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473598,"byte_end":1473650,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/ Does not support deep data yet. Uses parallel decompression and relaxed error handling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473651,"byte_end":1473742,"line_start":64,"line_end":64,"column_start":1,"column_end":92}},{"value":"/ Inspect the source code of this function if you need customization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473743,"byte_end":1473814,"line_start":65,"line_end":65,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474342,"byte_end":1474372,"line_start":80,"line_end":80,"column_start":8,"column_end":38},"name":"read_all_flat_layers_from_file","qualname":"::image::read::read_all_flat_layers_from_file","value":"fn read_all_flat_layers_from_file<impl AsRef<Path>>(impl AsRef<Path>)\n-> Result<FlatImage> where impl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" No deep data, no resolution levels, all channels, all layers.\n Uses parallel decompression and relaxed error handling.\n Inspect the source code of this function if you need customization.\n","sig":null,"attributes":[{"value":"/ No deep data, no resolution levels, all channels, all layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474137,"byte_end":1474202,"line_start":77,"line_end":77,"column_start":1,"column_end":66}},{"value":"/ Uses parallel decompression and relaxed error handling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474203,"byte_end":1474262,"line_start":78,"line_end":78,"column_start":1,"column_end":60}},{"value":"/ Inspect the source code of this function if you need customization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474263,"byte_end":1474334,"line_start":79,"line_end":79,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474797,"byte_end":1474828,"line_start":93,"line_end":93,"column_start":8,"column_end":39},"name":"read_first_flat_layer_from_file","qualname":"::image::read::read_first_flat_layer_from_file","value":"fn read_first_flat_layer_from_file<impl AsRef<Path>>(impl AsRef<Path>)\n-> Result<Image<Layer<AnyChannels<FlatSamples>>>> where\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" No deep data, no resolution levels, all channels, first layer.\n Uses parallel decompression and relaxed error handling.\n Inspect the source code of this function if you need customization.\n","sig":null,"attributes":[{"value":"/ No deep data, no resolution levels, all channels, first layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474591,"byte_end":1474657,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ Uses parallel decompression and relaxed error handling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474658,"byte_end":1474717,"line_start":91,"line_end":91,"column_start":1,"column_end":60}},{"value":"/ Inspect the source code of this function if you need customization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1474718,"byte_end":1474789,"line_start":92,"line_end":92,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475908,"byte_end":1475938,"line_start":115,"line_end":115,"column_start":8,"column_end":38},"name":"read_all_rgba_layers_from_file","qualname":"::image::read::read_all_rgba_layers_from_file","value":"fn read_all_rgba_layers_from_file<R, G, B, A, Set, Create, Pixels,\nimpl AsRef<Path>>(impl AsRef<Path>, Create, Set)\n-> Result<PixelLayersImage<Pixels, RgbaChannels>> where Set: 'static,\nCreate: 'static, Pixels: 'static, R: FromNativeSample, G: FromNativeSample,\nB: FromNativeSample, A: FromNativeSample,\nCreate: for<'_> Fn(Vec2<usize>, &'_ RgbaChannels) -> Pixels,\nSet: for<'_> Fn(&'_ mut Pixels, Vec2<usize>, (R, G, B, A)) -> (),\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" No deep data, no resolution levels, rgba channels, all layers.\n If a single layer does not contain rgba data, this method returns an error.\n Uses parallel decompression and relaxed error handling.\n `Create` and `Set` can be closures, see the examples for more information.\n Inspect the source code of this function if you need customization.\n The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","sig":null,"attributes":[{"value":"/ No deep data, no resolution levels, rgba channels, all layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475083,"byte_end":1475149,"line_start":103,"line_end":103,"column_start":1,"column_end":67}},{"value":"/ If a single layer does not contain rgba data, this method returns an error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475150,"byte_end":1475229,"line_start":104,"line_end":104,"column_start":1,"column_end":80}},{"value":"/ Uses parallel decompression and relaxed error handling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475230,"byte_end":1475289,"line_start":105,"line_end":105,"column_start":1,"column_end":60}},{"value":"/ `Create` and `Set` can be closures, see the examples for more information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475290,"byte_end":1475368,"line_start":106,"line_end":106,"column_start":1,"column_end":79}},{"value":"/ Inspect the source code of this function if you need customization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475369,"byte_end":1475440,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/ The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475441,"byte_end":1475538,"line_start":108,"line_end":108,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475539,"byte_end":1475542,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Using two closures, define how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475543,"byte_end":1475598,"line_start":110,"line_end":110,"column_start":1,"column_end":56}},{"value":"/ The first closure creates an image, and the second closure inserts a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475599,"byte_end":1475685,"line_start":111,"line_end":111,"column_start":1,"column_end":87}},{"value":"/ The type of the pixel can be defined by the second closure;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475686,"byte_end":1475749,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/ it must be a tuple containing four values, each being either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1475750,"byte_end":1475847,"line_start":113,"line_end":113,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":1603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1477346,"byte_end":1477377,"line_start":144,"line_end":144,"column_start":8,"column_end":39},"name":"read_first_rgba_layer_from_file","qualname":"::image::read::read_first_rgba_layer_from_file","value":"fn read_first_rgba_layer_from_file<R, G, B, A, Set, Create, Pixels,\nimpl AsRef<Path>>(impl AsRef<Path>, Create, Set)\n-> Result<PixelImage<Pixels, RgbaChannels>> where Set: 'static,\nCreate: 'static, Pixels: 'static, R: FromNativeSample, G: FromNativeSample,\nB: FromNativeSample, A: FromNativeSample,\nCreate: for<'_> Fn(Vec2<usize>, &'_ RgbaChannels) -> Pixels,\nSet: for<'_> Fn(&'_ mut Pixels, Vec2<usize>, (R, G, B, A)) -> (),\nimpl AsRef<Path>: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" No deep data, no resolution levels, rgba channels, choosing the first layer with rgba channels.\n Uses parallel decompression and relaxed error handling.\n `Create` and `Set` can be closures, see the examples for more information.\n Inspect the source code of this function if you need customization.\n The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","sig":null,"attributes":[{"value":"/ No deep data, no resolution levels, rgba channels, choosing the first layer with rgba channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476568,"byte_end":1476667,"line_start":133,"line_end":133,"column_start":1,"column_end":100}},{"value":"/ Uses parallel decompression and relaxed error handling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476668,"byte_end":1476727,"line_start":134,"line_end":134,"column_start":1,"column_end":60}},{"value":"/ `Create` and `Set` can be closures, see the examples for more information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476728,"byte_end":1476806,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ Inspect the source code of this function if you need customization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476807,"byte_end":1476878,"line_start":136,"line_end":136,"column_start":1,"column_end":72}},{"value":"/ The alpha channel will contain the value `1.0` if no alpha channel can be found in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476879,"byte_end":1476976,"line_start":137,"line_end":137,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476977,"byte_end":1476980,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Using two closures, define how to store the pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1476981,"byte_end":1477036,"line_start":139,"line_end":139,"column_start":1,"column_end":56}},{"value":"/ The first closure creates an image, and the second closure inserts a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1477037,"byte_end":1477123,"line_start":140,"line_end":140,"column_start":1,"column_end":87}},{"value":"/ The type of the pixel can be defined by the second closure;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1477124,"byte_end":1477187,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"/ it must be a tuple containing four values, each being either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1477188,"byte_end":1477285,"line_start":142,"line_end":142,"column_start":1,"column_end":98}}]},{"kind":"Struct","id":{"krate":0,"index":4530},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478156,"byte_end":1478167,"line_start":165,"line_end":165,"column_start":12,"column_end":23},"name":"ReadBuilder","qualname":"::image::read::ReadBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":" Utilizes the builder pattern to configure an image reader. This is the initial struct.\n","sig":null,"attributes":[{"value":"/ Utilizes the builder pattern to configure an image reader. This is the initial struct.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478009,"byte_end":1478099,"line_start":163,"line_end":163,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479212,"byte_end":1479216,"line_start":191,"line_end":191,"column_start":8,"column_end":12},"name":"read","qualname":"::image::read::read","value":"fn read() -> ReadBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a reader which can be used to load an exr image.\n Allows you to exactly specify how to load the image, for example:","sig":null,"attributes":[{"value":"/ Create a reader which can be used to load an exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478170,"byte_end":1478229,"line_start":167,"line_end":167,"column_start":1,"column_end":60}},{"value":"/ Allows you to exactly specify how to load the image, for example:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478230,"byte_end":1478299,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478300,"byte_end":1478303,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478304,"byte_end":1478317,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/     use exr::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478318,"byte_end":1478346,"line_start":171,"line_end":171,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478347,"byte_end":1478350,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/     // the type of the this image depends on the chosen options","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478351,"byte_end":1478418,"line_start":173,"line_end":173,"column_start":1,"column_end":68}},{"value":"/     let image = read()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478419,"byte_end":1478445,"line_start":174,"line_end":174,"column_start":1,"column_end":27}},{"value":"/         .no_deep_data() // (currently required)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478446,"byte_end":1478497,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/         .largest_resolution_level() // or `all_resolution_levels()`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478498,"byte_end":1478569,"line_start":176,"line_end":176,"column_start":1,"column_end":72}},{"value":"/         .all_channels() // or `rgba_channels(constructor, setter)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478570,"byte_end":1478640,"line_start":177,"line_end":177,"column_start":1,"column_end":71}},{"value":"/         .all_layers() // or `first_valid_layer()`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478641,"byte_end":1478694,"line_start":178,"line_end":178,"column_start":1,"column_end":54}},{"value":"/         .all_attributes() // (currently required)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478695,"byte_end":1478748,"line_start":179,"line_end":179,"column_start":1,"column_end":54}},{"value":"/         .on_progress(|progress| println!(\"progress: {:.1}\", progress*100.0)) // optional","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478749,"byte_end":1478841,"line_start":180,"line_end":180,"column_start":1,"column_end":93}},{"value":"/         .from_file(\"image.exr\").unwrap(); // or `from_buffered(my_byte_slice)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478842,"byte_end":1478924,"line_start":181,"line_end":181,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478925,"byte_end":1478932,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478933,"byte_end":1478936,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ You can alternatively use one of the following simpler functions:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1478937,"byte_end":1479006,"line_start":184,"line_end":184,"column_start":1,"column_end":70}},{"value":"/ 1. `read_first_flat_layer_from_file`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479007,"byte_end":1479047,"line_start":185,"line_end":185,"column_start":1,"column_end":41}},{"value":"/ 1. `read_all_rgba_layers_from_file`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479048,"byte_end":1479087,"line_start":186,"line_end":186,"column_start":1,"column_end":40}},{"value":"/ 1. `read_all_flat_layers_from_file`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479088,"byte_end":1479127,"line_start":187,"line_end":187,"column_start":1,"column_end":40}},{"value":"/ 1. `read_all_data_from_file`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479128,"byte_end":1479160,"line_start":188,"line_end":188,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479161,"byte_end":1479164,"line_start":189,"line_end":189,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479404,"byte_end":1479416,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"no_deep_data","qualname":"<ReadBuilder>::no_deep_data","value":"fn no_deep_data(Self) -> ReadFlatSamples","parent":null,"children":[],"decl_id":null,"docs":" Specify to handle only one sample per channel, disabling \"deep data\".\n","sig":null,"attributes":[{"value":"/ Specify to handle only one sample per channel, disabling \"deep data\".","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479275,"byte_end":1479348,"line_start":195,"line_end":195,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":1615},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::image::write","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","parent":null,"children":[{"krate":0,"index":1616},{"krate":0,"index":1717},{"krate":0,"index":1806},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1986},{"krate":0,"index":1993},{"krate":0,"index":1997},{"krate":0,"index":4701},{"krate":0,"index":4709},{"krate":0,"index":4714},{"krate":0,"index":4719},{"krate":0,"index":4723},{"krate":0,"index":2001}],"decl_id":null,"docs":" Write an exr image to a file.","sig":null,"attributes":[{"value":"/ Write an exr image to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533214,"byte_end":1533247,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533248,"byte_end":1533251,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ First, call `my_image.write()`. The resulting value can be customized, like this:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533252,"byte_end":1533337,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533338,"byte_end":1533351,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/     use exr::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533352,"byte_end":1533380,"line_start":6,"line_end":6,"column_start":1,"column_end":29}},{"value":"/ #   let my_image: FlatImage = unimplemented!();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533381,"byte_end":1533432,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533433,"byte_end":1533436,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/     my_image.write()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533437,"byte_end":1533461,"line_start":9,"line_end":9,"column_start":1,"column_end":25}},{"value":"/            .on_progress(|progress| println!(\"progress: {:.1}\", progress*100.0))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533462,"byte_end":1533545,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/            .to_file(\"image.exr\").unwrap();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533546,"byte_end":1533592,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533593,"byte_end":1533600,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533601,"byte_end":1533604,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layers","qualname":"::image::write::layers","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1638},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1663},{"krate":0,"index":1668},{"krate":0,"index":4543},{"krate":0,"index":4547},{"krate":0,"index":4550},{"krate":0,"index":4553},{"krate":0,"index":4555},{"krate":0,"index":4559},{"krate":0,"index":4561},{"krate":0,"index":4565},{"krate":0,"index":4568},{"krate":0,"index":4571},{"krate":0,"index":4574},{"krate":0,"index":4576},{"krate":0,"index":4579},{"krate":0,"index":4581},{"krate":0,"index":1670},{"krate":0,"index":1676},{"krate":0,"index":1680},{"krate":0,"index":1684},{"krate":0,"index":1690},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1701},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1713}],"decl_id":null,"docs":" How to write either a single or a list of layers.\n","sig":null,"attributes":[{"value":"/ How to write either a single or a list of layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1540948,"byte_end":1541001,"line_start":1,"line_end":1,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":1663},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541459,"byte_end":1541473,"line_start":13,"line_end":13,"column_start":11,"column_end":25},"name":"WritableLayers","qualname":"::image::write::layers::WritableLayers","value":"WritableLayers<'slf>","parent":null,"children":[{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667}],"decl_id":null,"docs":" Enables an image containing this list of layers to be written to a file.\n","sig":null,"attributes":[{"value":"/ Enables an image containing this list of layers to be written to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541372,"byte_end":1541448,"line_start":12,"line_end":12,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541550,"byte_end":1541563,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"infer_headers","qualname":"::image::write::layers::WritableLayers::infer_headers","value":"fn infer_headers<'_, '_>(&'_ Self, &'_ ImageAttributes) -> Headers","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" Generate the file meta data for this list of layers\n","sig":null,"attributes":[{"value":"/ Generate the file meta data for this list of layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541487,"byte_end":1541542,"line_start":15,"line_end":15,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":1666},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541666,"byte_end":1541672,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Writer","qualname":"::image::write::layers::WritableLayers::Writer","value":"type Writer: LayersWriter;","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" The type of temporary writer\n","sig":null,"attributes":[{"value":"/ The type of temporary writer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541624,"byte_end":1541656,"line_start":18,"line_end":18,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541754,"byte_end":1541767,"line_start":22,"line_end":22,"column_start":8,"column_end":21},"name":"create_writer","qualname":"::image::write::layers::WritableLayers::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ [Header]) -> Self::Writer","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" Create a temporary writer for this list of layers\n","sig":null,"attributes":[{"value":"/ Create a temporary writer for this list of layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541693,"byte_end":1541746,"line_start":21,"line_end":21,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1668},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541876,"byte_end":1541888,"line_start":26,"line_end":26,"column_start":11,"column_end":23},"name":"LayersWriter","qualname":"::image::write::layers::LayersWriter","value":"LayersWriter: Sync","parent":null,"children":[{"krate":0,"index":1669}],"decl_id":null,"docs":" A temporary writer for a list of channels\n","sig":null,"attributes":[{"value":"/ A temporary writer for a list of channels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541820,"byte_end":1541865,"line_start":25,"line_end":25,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541984,"byte_end":1542010,"line_start":29,"line_end":29,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"::image::write::layers::LayersWriter::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ [Header], BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1668},"children":[],"decl_id":null,"docs":" Deliver a block of pixels from a single layer to be stored in the file\n","sig":null,"attributes":[{"value":"/ Deliver a block of pixels from a single layer to be stored in the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541902,"byte_end":1541976,"line_start":28,"line_end":28,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":4543},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542177,"byte_end":1542192,"line_start":34,"line_end":34,"column_start":12,"column_end":27},"name":"AllLayersWriter","qualname":"::image::write::layers::AllLayersWriter","value":"AllLayersWriter {  }","parent":null,"children":[{"krate":0,"index":4545}],"decl_id":null,"docs":" A temporary writer for an arbitrary list of layers\n","sig":null,"attributes":[{"value":"/ A temporary writer for an arbitrary list of layers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542072,"byte_end":1542126,"line_start":32,"line_end":32,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":4565},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542361,"byte_end":1542372,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"LayerWriter","qualname":"::image::write::layers::LayerWriter","value":"LayerWriter {  }","parent":null,"children":[{"krate":0,"index":4567}],"decl_id":null,"docs":" A temporary writer for a single layer\n","sig":null,"attributes":[{"value":"/ A temporary writer for a single layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542269,"byte_end":1542310,"line_start":38,"line_end":38,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542585,"byte_end":1542598,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"infer_headers","qualname":"<Layers<Channels> as image::write::layers::WritableLayers>::infer_headers","value":"fn infer_headers<'_, '_>(&'_ Self, &'_ ImageAttributes) -> Headers","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1665},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542785,"byte_end":1542798,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<Layers<Channels> as image::write::layers::WritableLayers>::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ [Header]) -> Self::Writer","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1667},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1543644,"byte_end":1543657,"line_start":76,"line_end":76,"column_start":8,"column_end":21},"name":"infer_headers","qualname":"<Layer<Channels> as image::write::layers::WritableLayers>::infer_headers","value":"fn infer_headers<'_, '_>(&'_ Self, &'_ ImageAttributes) -> Headers","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1665},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1544898,"byte_end":1544911,"line_start":111,"line_end":111,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<Layer<Channels> as image::write::layers::WritableLayers>::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ [Header]) -> Self::Writer","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1667},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545226,"byte_end":1545252,"line_start":120,"line_end":120,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<AllLayersWriter<C> as image::write::layers::LayersWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ [Header], BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1668},"children":[],"decl_id":{"krate":0,"index":1669},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545532,"byte_end":1545558,"line_start":126,"line_end":126,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<LayerWriter<C> as image::write::layers::LayersWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ [Header], BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1668},"children":[],"decl_id":{"krate":0,"index":1669},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545818,"byte_end":1545831,"line_start":136,"line_end":136,"column_start":8,"column_end":21},"name":"infer_headers","qualname":"<NoneMore as image::write::layers::WritableLayers>::infer_headers","value":"fn infer_headers<'_, '_>(&'_ Self, &'_ ImageAttributes) -> Headers","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1665},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545927,"byte_end":1545940,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<NoneMore as image::write::layers::WritableLayers>::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ [Header]) -> Self::Writer","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1667},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1546185,"byte_end":1546198,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"infer_headers","qualname":"<Recursive<InnerLayers, Layer<Channels>> as image::write::layers::WritableLayers>::infer_headers","value":"fn infer_headers<'_, '_>(&'_ Self, &'_ ImageAttributes) -> Headers","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1665},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1546530,"byte_end":1546543,"line_start":153,"line_end":153,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<Recursive<InnerLayers, Layer<Channels>> as image::write::layers::WritableLayers>::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ [Header]) -> Self::Writer","parent":{"krate":0,"index":1663},"children":[],"decl_id":{"krate":0,"index":1667},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547162,"byte_end":1547188,"line_start":168,"line_end":168,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<NoneMore as image::write::layers::LayersWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ [Header], BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1668},"children":[],"decl_id":{"krate":0,"index":1669},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547475,"byte_end":1547501,"line_start":176,"line_end":176,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<RecursiveLayersWriter<InnerLayersWriter, Channels> as image::write::layers::LayersWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ [Header], BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1668},"children":[],"decl_id":{"krate":0,"index":1669},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1717},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"samples","qualname":"::image::write::samples","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","parent":null,"children":[{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1722},{"krate":0,"index":1725},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1767},{"krate":0,"index":1773},{"krate":0,"index":1778},{"krate":0,"index":4585},{"krate":0,"index":4589},{"krate":0,"index":4592},{"krate":0,"index":4594},{"krate":0,"index":4597},{"krate":0,"index":4599},{"krate":0,"index":1780},{"krate":0,"index":1786},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":4604},{"krate":0,"index":4607},{"krate":0,"index":4610},{"krate":0,"index":4613},{"krate":0,"index":4615},{"krate":0,"index":4618},{"krate":0,"index":4620},{"krate":0,"index":1803}],"decl_id":null,"docs":" How to write samples (a grid of `f32`, `f16` or `u32` values).\n","sig":null,"attributes":[{"value":"/ How to write samples (a grid of `f32`, `f16` or `u32` values).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548128,"byte_end":1548194,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548696,"byte_end":1548711,"line_start":13,"line_end":13,"column_start":11,"column_end":26},"name":"WritableSamples","qualname":"::image::write::samples::WritableSamples","value":"WritableSamples<'slf>","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" Enable an image with this sample grid to be written to a file.\n Also can contain multiple resolution levels.\n Usually contained within `Channels`.\n","sig":null,"attributes":[{"value":"/ Enable an image with this sample grid to be written to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548529,"byte_end":1548595,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ Also can contain multiple resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548596,"byte_end":1548644,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ Usually contained within `Channels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548645,"byte_end":1548685,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548840,"byte_end":1548851,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"sample_type","qualname":"::image::write::samples::WritableSamples::sample_type","value":"fn sample_type<'_>(&'_ Self) -> SampleType","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Generate the file meta data regarding the number type of this storage\n","sig":null,"attributes":[{"value":"/ Generate the file meta data regarding the number type of this storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548759,"byte_end":1548832,"line_start":16,"line_end":16,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548946,"byte_end":1548963,"line_start":20,"line_end":20,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"::image::write::samples::WritableSamples::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Generate the file meta data regarding resolution levels\n","sig":null,"attributes":[{"value":"/ Generate the file meta data regarding resolution levels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1548879,"byte_end":1548938,"line_start":19,"line_end":19,"column_start":5,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1771},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549076,"byte_end":1549082,"line_start":23,"line_end":23,"column_start":10,"column_end":16},"name":"Writer","qualname":"::image::write::samples::WritableSamples::Writer","value":"type Writer: SamplesWriter;","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" The type of the temporary writer for this sample storage\n","sig":null,"attributes":[{"value":"/ The type of the temporary writer for this sample storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549006,"byte_end":1549066,"line_start":22,"line_end":22,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549165,"byte_end":1549186,"line_start":26,"line_end":26,"column_start":8,"column_end":29},"name":"create_samples_writer","qualname":"::image::write::samples::WritableSamples::create_samples_writer","value":"fn create_samples_writer<'_>(&'slf Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Create a temporary writer for this sample storage\n","sig":null,"attributes":[{"value":"/ Create a temporary writer for this sample storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549104,"byte_end":1549157,"line_start":25,"line_end":25,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1773},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549362,"byte_end":1549375,"line_start":31,"line_end":31,"column_start":11,"column_end":24},"name":"WritableLevel","qualname":"::image::write::samples::WritableLevel","value":"WritableLevel<'slf>","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777}],"decl_id":null,"docs":" Enable an image with this single level sample grid to be written to a file.\n Only contained within `Levels`.\n","sig":null,"attributes":[{"value":"/ Enable an image with this single level sample grid to be written to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549236,"byte_end":1549315,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"/ Only contained within `Levels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549316,"byte_end":1549351,"line_start":30,"line_end":30,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549471,"byte_end":1549482,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"sample_type","qualname":"::image::write::samples::WritableLevel::sample_type","value":"fn sample_type<'_>(&'_ Self) -> SampleType","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Generate the file meta data regarding the number type of these samples\n","sig":null,"attributes":[{"value":"/ Generate the file meta data regarding the number type of these samples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549389,"byte_end":1549463,"line_start":33,"line_end":33,"column_start":5,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549589,"byte_end":1549595,"line_start":37,"line_end":37,"column_start":10,"column_end":16},"name":"Writer","qualname":"::image::write::samples::WritableLevel::Writer","value":"type Writer: SamplesWriter;","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" The type of the temporary writer for this single level of samples\n","sig":null,"attributes":[{"value":"/ The type of the temporary writer for this single level of samples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549510,"byte_end":1549579,"line_start":36,"line_end":36,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549687,"byte_end":1549706,"line_start":40,"line_end":40,"column_start":8,"column_end":27},"name":"create_level_writer","qualname":"::image::write::samples::WritableLevel::create_level_writer","value":"fn create_level_writer(&'slf Self, Vec2<usize>) -> Self::Writer","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":" Create a temporary writer for this single level of samples\n","sig":null,"attributes":[{"value":"/ Create a temporary writer for this single level of samples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549617,"byte_end":1549679,"line_start":39,"line_end":39,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549844,"byte_end":1549857,"line_start":44,"line_end":44,"column_start":11,"column_end":24},"name":"SamplesWriter","qualname":"::image::write::samples::SamplesWriter","value":"SamplesWriter: Sync","parent":null,"children":[{"krate":0,"index":1779}],"decl_id":null,"docs":" A temporary writer for one or more resolution levels containing samples\n","sig":null,"attributes":[{"value":"/ A temporary writer for one or more resolution levels containing samples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549758,"byte_end":1549833,"line_start":43,"line_end":43,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549956,"byte_end":1549968,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"extract_line","qualname":"::image::write::samples::SamplesWriter::extract_line","value":"fn extract_line<'_, '_>(&'_ Self, LineRefMut)","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" Deliver a single short horizontal list of samples for a specific channel.\n","sig":null,"attributes":[{"value":"/ Deliver a single short horizontal list of samples for a specific channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549871,"byte_end":1549948,"line_start":46,"line_end":46,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":4585},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550118,"byte_end":1550135,"line_start":52,"line_end":52,"column_start":12,"column_end":29},"name":"FlatSamplesWriter","qualname":"::image::write::samples::FlatSamplesWriter","value":"FlatSamplesWriter {  }","parent":null,"children":[{"krate":0,"index":4587},{"krate":0,"index":4588}],"decl_id":null,"docs":" A temporary writer for a predefined non-deep sample storage\n","sig":null,"attributes":[{"value":"/ A temporary writer for a predefined non-deep sample storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550002,"byte_end":1550065,"line_start":50,"line_end":50,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550396,"byte_end":1550407,"line_start":61,"line_end":61,"column_start":8,"column_end":19},"name":"sample_type","qualname":"<FlatSamples as image::write::samples::WritableSamples>::sample_type","value":"fn sample_type<'_>(&'_ Self) -> SampleType","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1769},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550632,"byte_end":1550649,"line_start":69,"line_end":69,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"<FlatSamples as image::write::samples::WritableSamples>::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1770},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550806,"byte_end":1550827,"line_start":72,"line_end":72,"column_start":8,"column_end":29},"name":"create_samples_writer","qualname":"<FlatSamples as image::write::samples::WritableSamples>::create_samples_writer","value":"fn create_samples_writer<'_>(&'samples Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1772},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551129,"byte_end":1551140,"line_start":82,"line_end":82,"column_start":8,"column_end":19},"name":"sample_type","qualname":"<FlatSamples as image::write::samples::WritableLevel>::sample_type","value":"fn sample_type<'_>(&'_ Self) -> SampleType","parent":{"krate":0,"index":1773},"children":[],"decl_id":{"krate":0,"index":1775},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551412,"byte_end":1551431,"line_start":91,"line_end":91,"column_start":8,"column_end":27},"name":"create_level_writer","qualname":"<FlatSamples as image::write::samples::WritableLevel>::create_level_writer","value":"fn create_level_writer(&'samples Self, Vec2<usize>) -> Self::Writer","parent":{"krate":0,"index":1773},"children":[],"decl_id":{"krate":0,"index":1777},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551658,"byte_end":1551670,"line_start":100,"line_end":100,"column_start":8,"column_end":20},"name":"extract_line","qualname":"<FlatSamplesWriter as image::write::samples::SamplesWriter>::extract_line","value":"fn extract_line<'_, '_>(&'_ Self, LineRefMut)","parent":{"krate":0,"index":1778},"children":[],"decl_id":{"krate":0,"index":1779},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1552784,"byte_end":1552795,"line_start":125,"line_end":125,"column_start":8,"column_end":19},"name":"sample_type","qualname":"<Levels<LevelSamples> as image::write::samples::WritableSamples>::sample_type","value":"fn sample_type<'_>(&'_ Self) -> SampleType","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1769},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1553142,"byte_end":1553159,"line_start":136,"line_end":136,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"<Levels<LevelSamples> as image::write::samples::WritableSamples>::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1770},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1553547,"byte_end":1553568,"line_start":145,"line_end":145,"column_start":8,"column_end":29},"name":"create_samples_writer","qualname":"<Levels<LevelSamples> as image::write::samples::WritableSamples>::create_samples_writer","value":"fn create_samples_writer<'_>(&'samples Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1767},"children":[],"decl_id":{"krate":0,"index":1772},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4604},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1556082,"byte_end":1556094,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"LevelsWriter","qualname":"::image::write::samples::LevelsWriter","value":"LevelsWriter {  }","parent":null,"children":[{"krate":0,"index":4606}],"decl_id":null,"docs":" A temporary writer for multiple resolution levels\n","sig":null,"attributes":[{"value":"/ A temporary writer for multiple resolution levels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1555978,"byte_end":1556031,"line_start":194,"line_end":194,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1556242,"byte_end":1556254,"line_start":201,"line_end":201,"column_start":8,"column_end":20},"name":"extract_line","qualname":"<LevelsWriter<Samples> as image::write::samples::SamplesWriter>::extract_line","value":"fn extract_line<'_, '_>(&'_ Self, LineRefMut)","parent":{"krate":0,"index":1778},"children":[],"decl_id":{"krate":0,"index":1779},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"channels","qualname":"::image::write::channels","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1836},{"krate":0,"index":4625},{"krate":0,"index":4629},{"krate":0,"index":4632},{"krate":0,"index":4635},{"krate":0,"index":4637},{"krate":0,"index":4641},{"krate":0,"index":4643},{"krate":0,"index":1845},{"krate":0,"index":1849},{"krate":0,"index":4648},{"krate":0,"index":4655},{"krate":0,"index":4661},{"krate":0,"index":4667},{"krate":0,"index":4672},{"krate":0,"index":4678},{"krate":0,"index":4683},{"krate":0,"index":1858},{"krate":0,"index":1866},{"krate":0,"index":1872},{"krate":0,"index":1877},{"krate":0,"index":1887},{"krate":0,"index":1899},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":4690},{"krate":0,"index":4695},{"krate":0,"index":4698},{"krate":0,"index":1910},{"krate":0,"index":1914},{"krate":0,"index":1918},{"krate":0,"index":1927}],"decl_id":null,"docs":" How to read arbitrary channels and rgb channels.\n","sig":null,"attributes":[{"value":"/ How to read arbitrary channels and rgb channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1556658,"byte_end":1556710,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557059,"byte_end":1557075,"line_start":16,"line_end":16,"column_start":11,"column_end":27},"name":"WritableChannels","qualname":"::image::write::channels::WritableChannels","value":"WritableChannels<'slf>","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825}],"decl_id":null,"docs":" Enables an image containing this list of channels to be written to a file.\n","sig":null,"attributes":[{"value":"/ Enables an image containing this list of channels to be written to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1556970,"byte_end":1557048,"line_start":15,"line_end":15,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557153,"byte_end":1557171,"line_start":19,"line_end":19,"column_start":8,"column_end":26},"name":"infer_channel_list","qualname":"::image::write::channels::WritableChannels::infer_channel_list","value":"fn infer_channel_list<'_>(&'_ Self) -> ChannelList","parent":{"krate":0,"index":1820},"children":[],"decl_id":null,"docs":" Generate the file meta data for this list of channel\n","sig":null,"attributes":[{"value":"/ Generate the file meta data for this list of channel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557089,"byte_end":1557145,"line_start":18,"line_end":18,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557306,"byte_end":1557323,"line_start":22,"line_end":22,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"::image::write::channels::WritableChannels::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1820},"children":[],"decl_id":null,"docs":"  Generate the file meta data of whether and how resolution levels should be stored in the file\n","sig":null,"attributes":[{"value":"/  Generate the file meta data of whether and how resolution levels should be stored in the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557200,"byte_end":1557298,"line_start":21,"line_end":21,"column_start":5,"column_end":103}}]},{"kind":"Type","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557408,"byte_end":1557414,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Writer","qualname":"::image::write::channels::WritableChannels::Writer","value":"type Writer: ChannelsWriter;","parent":{"krate":0,"index":1820},"children":[],"decl_id":null,"docs":" The type of temporary writer\n","sig":null,"attributes":[{"value":"/ The type of temporary writer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557366,"byte_end":1557398,"line_start":24,"line_end":24,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557500,"byte_end":1557513,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"create_writer","qualname":"::image::write::channels::WritableChannels::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1820},"children":[],"decl_id":null,"docs":" Create a temporary writer for this list of channels\n","sig":null,"attributes":[{"value":"/ Create a temporary writer for this list of channels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557437,"byte_end":1557492,"line_start":27,"line_end":27,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557619,"byte_end":1557633,"line_start":32,"line_end":32,"column_start":11,"column_end":25},"name":"ChannelsWriter","qualname":"::image::write::channels::ChannelsWriter","value":"ChannelsWriter: Sync","parent":null,"children":[{"krate":0,"index":1827}],"decl_id":null,"docs":" A temporary writer for a list of channels\n","sig":null,"attributes":[{"value":"/ A temporary writer for a list of channels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557563,"byte_end":1557608,"line_start":31,"line_end":31,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557739,"byte_end":1557765,"line_start":35,"line_end":35,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"::image::write::channels::ChannelsWriter::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ Header, BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" Deliver a block of pixels, containing all channel data, to be stored in the file\n","sig":null,"attributes":[{"value":"/ Deliver a block of pixels, containing all channel data, to be stored in the file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557647,"byte_end":1557731,"line_start":34,"line_end":34,"column_start":5,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558002,"byte_end":1558010,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"GetPixel","qualname":"::image::write::channels::GetPixel","value":"GetPixel: Sync","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830}],"decl_id":null,"docs":" Define how to get a pixel from your custom pixel storage.\n Can be a closure of type [`Sync + Fn(Vec2<usize>) -> YourPixel`].\n","sig":null,"attributes":[{"value":"/ Define how to get a pixel from your custom pixel storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557860,"byte_end":1557921,"line_start":39,"line_end":39,"column_start":1,"column_end":62}},{"value":"/ Can be a closure of type [`Sync + Fn(Vec2<usize>) -> YourPixel`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557922,"byte_end":1557991,"line_start":40,"line_end":40,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558185,"byte_end":1558190,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::write::channels::GetPixel::Pixel","value":"type Pixel;","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":" The pixel tuple containing `f32`, `f16`, `u32` and `Sample` values.\n The length of the tuple must match the number of channels in the image.\n","sig":null,"attributes":[{"value":"/ The pixel tuple containing `f32`, `f16`, `u32` and `Sample` values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558024,"byte_end":1558095,"line_start":43,"line_end":43,"column_start":5,"column_end":76}},{"value":"/ The length of the tuple must match the number of channels in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558100,"byte_end":1558175,"line_start":44,"line_end":44,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558446,"byte_end":1558455,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::write::channels::GetPixel::get_pixel","value":"fn get_pixel<'_>(&'_ Self, Vec2<usize>) -> Self::Pixel","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":" Inspect a single pixel at the requested position.\n Will be called exactly once for each pixel in the image.\n The position will not exceed the image dimensions.\n Might be called from multiple threads at the same time.\n","sig":null,"attributes":[{"value":"/ Inspect a single pixel at the requested position.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558197,"byte_end":1558250,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/ Will be called exactly once for each pixel in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558255,"byte_end":1558315,"line_start":48,"line_end":48,"column_start":5,"column_end":65}},{"value":"/ The position will not exceed the image dimensions.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558320,"byte_end":1558374,"line_start":49,"line_end":49,"column_start":5,"column_end":59}},{"value":"/ Might be called from multiple threads at the same time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558379,"byte_end":1558438,"line_start":50,"line_end":50,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558597,"byte_end":1558606,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<F as image::write::channels::GetPixel>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, Vec2<usize>) -> P","parent":{"krate":0,"index":1828},"children":[],"decl_id":{"krate":0,"index":1830},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558805,"byte_end":1558823,"line_start":62,"line_end":62,"column_start":8,"column_end":26},"name":"infer_channel_list","qualname":"<AnyChannels<Samples> as image::write::channels::WritableChannels>::infer_channel_list","value":"fn infer_channel_list<'_>(&'_ Self) -> ChannelList","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1822},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1559158,"byte_end":1559175,"line_start":71,"line_end":71,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"<AnyChannels<Samples> as image::write::channels::WritableChannels>::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1823},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1559686,"byte_end":1559699,"line_start":85,"line_end":85,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<AnyChannels<Samples> as image::write::channels::WritableChannels>::create_writer","value":"fn create_writer<'_>(&'samples Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1825},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4625},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560043,"byte_end":1560060,"line_start":96,"line_end":96,"column_start":12,"column_end":29},"name":"AnyChannelsWriter","qualname":"::image::write::channels::AnyChannelsWriter","value":"AnyChannelsWriter {  }","parent":null,"children":[{"krate":0,"index":4627}],"decl_id":null,"docs":" A temporary writer for an arbitrary list of channels\n","sig":null,"attributes":[{"value":"/ A temporary writer for an arbitrary list of channels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1559936,"byte_end":1559992,"line_start":94,"line_end":94,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560222,"byte_end":1560248,"line_start":101,"line_end":101,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<AnyChannelsWriter<Samples> as image::write::channels::ChannelsWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ Header, BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1826},"children":[],"decl_id":{"krate":0,"index":1827},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560848,"byte_end":1560866,"line_start":121,"line_end":121,"column_start":8,"column_end":26},"name":"infer_channel_list","qualname":"<SpecificChannels<Storage, Channels> as image::write::channels::WritableChannels>::infer_channel_list","value":"fn infer_channel_list<'_>(&'_ Self) -> ChannelList","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1822},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1561375,"byte_end":1561392,"line_start":134,"line_end":134,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"<SpecificChannels<Storage, Channels> as image::write::channels::WritableChannels>::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1823},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1561743,"byte_end":1561756,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<SpecificChannels<Storage, Channels> as image::write::channels::WritableChannels>::create_writer","value":"fn create_writer<'_>(&'c Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1825},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4648},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1562123,"byte_end":1562145,"line_start":157,"line_end":157,"column_start":12,"column_end":34},"name":"SpecificChannelsWriter","qualname":"::image::write::channels::SpecificChannelsWriter","value":"SpecificChannelsWriter {  }","parent":null,"children":[{"krate":0,"index":4653},{"krate":0,"index":4654}],"decl_id":null,"docs":" A temporary writer for a layer of channels, alpha being optional\n","sig":null,"attributes":[{"value":"/ A temporary writer for a layer of channels, alpha being optional","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1562004,"byte_end":1562072,"line_start":155,"line_end":155,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1562712,"byte_end":1562738,"line_start":171,"line_end":171,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<SpecificChannelsWriter as image::write::channels::ChannelsWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ Header, BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1826},"children":[],"decl_id":{"krate":0,"index":1827},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564044,"byte_end":1564071,"line_start":200,"line_end":200,"column_start":11,"column_end":38},"name":"WritableChannelsDescription","qualname":"::image::write::channels::WritableChannelsDescription","value":"WritableChannelsDescription<Pixel>: Sync","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870}],"decl_id":null,"docs":" A tuple containing either `ChannelsDescription` or `Option<ChannelsDescription>` entries.\n Use an `Option` if you want to dynamically omit a single channel (probably only for roundtrip tests).\n The number of entries must match the number of channels.\n","sig":null,"attributes":[{"value":"/ A tuple containing either `ChannelsDescription` or `Option<ChannelsDescription>` entries.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1563773,"byte_end":1563866,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/ Use an `Option` if you want to dynamically omit a single channel (probably only for roundtrip tests).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1563867,"byte_end":1563972,"line_start":198,"line_end":198,"column_start":1,"column_end":106}},{"value":"/ The number of entries must match the number of channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1563973,"byte_end":1564033,"line_start":199,"line_end":199,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564220,"byte_end":1564235,"line_start":204,"line_end":204,"column_start":10,"column_end":25},"name":"RecursiveWriter","qualname":"::image::write::channels::WritableChannelsDescription::RecursiveWriter","value":"type RecursiveWriter: RecursivePixelWriter<Pixel>;","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" A type that has a recursive entry for each channel in the image,\n which must accept the desired pixel type.\n","sig":null,"attributes":[{"value":"/ A type that has a recursive entry for each channel in the image,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564092,"byte_end":1564160,"line_start":202,"line_end":202,"column_start":5,"column_end":73}},{"value":"/ which must accept the desired pixel type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564165,"byte_end":1564210,"line_start":203,"line_end":203,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564383,"byte_end":1564406,"line_start":207,"line_end":207,"column_start":8,"column_end":31},"name":"create_recursive_writer","qualname":"::image::write::channels::WritableChannelsDescription::create_recursive_writer","value":"fn create_recursive_writer<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Self::RecursiveWriter","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Create the temporary writer, accepting the sorted list of channels from `channel_descriptions_list`.\n","sig":null,"attributes":[{"value":"/ Create the temporary writer, accepting the sorted list of channels from `channel_descriptions_list`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564271,"byte_end":1564375,"line_start":206,"line_end":206,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564560,"byte_end":1564585,"line_start":210,"line_end":210,"column_start":8,"column_end":33},"name":"channel_descriptions_list","qualname":"::image::write::channels::WritableChannelsDescription::channel_descriptions_list","value":"fn channel_descriptions_list<'_>(&'_ Self) -> SmallVec<[ChannelDescription; ]>","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Return all the channels that should actually end up in the image, in any order.\n","sig":null,"attributes":[{"value":"/ Return all the channels that should actually end up in the image, in any order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564469,"byte_end":1564552,"line_start":209,"line_end":209,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564736,"byte_end":1564759,"line_start":215,"line_end":215,"column_start":8,"column_end":31},"name":"create_recursive_writer","qualname":"<NoneMore as image::write::channels::WritableChannelsDescription>::create_recursive_writer","value":"fn create_recursive_writer<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Self::RecursiveWriter","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1869},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564829,"byte_end":1564854,"line_start":216,"line_end":216,"column_start":8,"column_end":33},"name":"channel_descriptions_list","qualname":"<NoneMore as image::write::channels::WritableChannelsDescription>::channel_descriptions_list","value":"fn channel_descriptions_list<'_>(&'_ Self) -> SmallVec<[ChannelDescription; ]>","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1870},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1565271,"byte_end":1565294,"line_start":226,"line_end":226,"column_start":8,"column_end":31},"name":"create_recursive_writer","qualname":"<Recursive<InnerDescriptions, ChannelDescription> as image::write::channels::WritableChannelsDescription>::create_recursive_writer","value":"fn create_recursive_writer<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Self::RecursiveWriter","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1869},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1565966,"byte_end":1565991,"line_start":239,"line_end":239,"column_start":8,"column_end":33},"name":"channel_descriptions_list","qualname":"<Recursive<InnerDescriptions, ChannelDescription> as image::write::channels::WritableChannelsDescription>::channel_descriptions_list","value":"fn channel_descriptions_list<'_>(&'_ Self) -> SmallVec<[ChannelDescription; ]>","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1870},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1566537,"byte_end":1566560,"line_start":253,"line_end":253,"column_start":8,"column_end":31},"name":"create_recursive_writer","qualname":"<Recursive<InnerDescriptions, Option<ChannelDescription>> as image::write::channels::WritableChannelsDescription>::create_recursive_writer","value":"fn create_recursive_writer<'_, '_>(&'_ Self, &'_ ChannelList)\n-> Self::RecursiveWriter","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1869},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567377,"byte_end":1567402,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"channel_descriptions_list","qualname":"<Recursive<InnerDescriptions, Option<ChannelDescription>> as image::write::channels::WritableChannelsDescription>::channel_descriptions_list","value":"fn channel_descriptions_list<'_>(&'_ Self) -> SmallVec<[ChannelDescription; ]>","parent":{"krate":0,"index":1866},"children":[],"decl_id":{"krate":0,"index":1870},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567767,"byte_end":1567787,"line_start":281,"line_end":281,"column_start":11,"column_end":31},"name":"RecursivePixelWriter","qualname":"::image::write::channels::RecursivePixelWriter","value":"RecursivePixelWriter<Pixel>: Sync","parent":null,"children":[{"krate":0,"index":1901}],"decl_id":null,"docs":" Write pixels to a slice of bytes. The top level writer contains all the other channels,\n the most inner channel is `NoneMore`.\n","sig":null,"attributes":[{"value":"/ Write pixels to a slice of bytes. The top level writer contains all the other channels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567623,"byte_end":1567714,"line_start":279,"line_end":279,"column_start":1,"column_end":92}},{"value":"/ the most inner channel is `NoneMore`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567715,"byte_end":1567756,"line_start":280,"line_end":280,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567891,"byte_end":1567903,"line_start":284,"line_end":284,"column_start":8,"column_end":20},"name":"write_pixels","qualname":"::image::write::channels::RecursivePixelWriter::write_pixels","value":"fn write_pixels<FullPixel, '_, '_, '_,\nimpl Fn(&FullPixel) -> &Pixel>(&'_ Self, &'_ mut [u8], &'_ [FullPixel],\nimpl Fn(&FullPixel) -> &Pixel) where\nimpl Fn(&FullPixel) -> &Pixel: for<'_> Fn(&'_ FullPixel) -> &'_ Pixel","parent":{"krate":0,"index":1899},"children":[],"decl_id":null,"docs":" Write pixels to a slice of bytes. Recursively do this for all channels.\n","sig":null,"attributes":[{"value":"/ Write pixels to a slice of bytes. Recursively do this for all channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567808,"byte_end":1567883,"line_start":283,"line_end":283,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4690},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1568330,"byte_end":1568342,"line_start":292,"line_end":292,"column_start":12,"column_end":24},"name":"SampleWriter","qualname":"::image::write::channels::SampleWriter","value":"SampleWriter {  }","parent":null,"children":[{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":4694}],"decl_id":null,"docs":" Write the pixels of a single channel, unconditionally. Generic over the concrete sample type (f16, f32, u32).\n","sig":null,"attributes":[{"value":"/ Write the pixels of a single channel, unconditionally. Generic over the concrete sample type (f16, f32, u32).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1568181,"byte_end":1568294,"line_start":290,"line_end":290,"column_start":1,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1569693,"byte_end":1569705,"line_start":319,"line_end":319,"column_start":8,"column_end":20},"name":"write_pixels","qualname":"<NoneMore as image::write::channels::RecursivePixelWriter>::write_pixels","value":"fn write_pixels<FullPixel, '_, '_, '_,\nimpl Fn(&FullPixel) -> &NoneMore>(&'_ Self, &'_ mut [u8], &'_ [FullPixel],\nimpl Fn(&FullPixel) -> &NoneMore) where\nimpl Fn(&FullPixel) -> &NoneMore: for<'_> Fn(&'_ FullPixel) -> &'_ NoneMore","parent":{"krate":0,"index":1899},"children":[],"decl_id":{"krate":0,"index":1901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1570060,"byte_end":1570072,"line_start":328,"line_end":328,"column_start":8,"column_end":20},"name":"write_pixels","qualname":"<RecursiveWriter<Inner, Sample> as image::write::channels::RecursivePixelWriter>::write_pixels","value":"fn write_pixels<FullPixel, '_, '_, '_,\nimpl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>>(&'_ Self, &'_ mut [u8],\n&'_ [FullPixel], impl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>) where\nimpl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>: for<'_> Fn(&'_ FullPixel)\n-> &'_ Recursive<InnerPixel, Sample>","parent":{"krate":0,"index":1899},"children":[],"decl_id":{"krate":0,"index":1901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1570596,"byte_end":1570608,"line_start":339,"line_end":339,"column_start":8,"column_end":20},"name":"write_pixels","qualname":"<OptionalRecursiveWriter<Inner, Sample> as image::write::channels::RecursivePixelWriter>::write_pixels","value":"fn write_pixels<FullPixel, '_, '_, '_,\nimpl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>>(&'_ Self, &'_ mut [u8],\n&'_ [FullPixel], impl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>) where\nimpl Fn(&FullPixel) -> &Recursive<InnerPixel, Sample>: for<'_> Fn(&'_ FullPixel)\n-> &'_ Recursive<InnerPixel, Sample>","parent":{"krate":0,"index":1899},"children":[],"decl_id":{"krate":0,"index":1901},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534359,"byte_end":1534374,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"write_rgba_file","qualname":"::image::write::write_rgba_file","value":"fn write_rgba_file<R, G, B, A, impl AsRef<std::path::Path>,\nimpl Sync + Fn(usize, usize) -> (R, G, B, A)>(impl AsRef<std::path::Path>,\nusize, usize, impl Sync + Fn(usize, usize) -> (R, G, B, A)) -> UnitResult\nwhere R: IntoSample, G: IntoSample, B: IntoSample, A: IntoSample,\nimpl AsRef<std::path::Path>: AsRef<std::path::Path>,\nimpl Sync + Fn(usize, usize) -> (R, G, B, A): Sync + Fn(usize, usize) ->\n(R, G, B, A)","parent":null,"children":[],"decl_id":null,"docs":" An oversimplified function for \"just write the damn file already\" use cases.\n Have a look at the examples to see how you can write an image with more flexibility (it's not that hard).\n Use `write_rgb_file` if you do not need an alpha channel.","sig":null,"attributes":[{"value":"/ An oversimplified function for \"just write the damn file already\" use cases.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533973,"byte_end":1534053,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ Have a look at the examples to see how you can write an image with more flexibility (it's not that hard).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534054,"byte_end":1534163,"line_start":31,"line_end":31,"column_start":1,"column_end":110}},{"value":"/ Use `write_rgb_file` if you do not need an alpha channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534164,"byte_end":1534225,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534226,"byte_end":1534229,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Each of `R`, `G`, `B` and `A` can be either `f16`, `f32`, `u32`, or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534230,"byte_end":1534311,"line_start":34,"line_end":34,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535125,"byte_end":1535139,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"write_rgb_file","qualname":"::image::write::write_rgb_file","value":"fn write_rgb_file<R, G, B, impl AsRef<std::path::Path>,\nimpl Sync + Fn(usize, usize) -> (R, G, B)>(impl AsRef<std::path::Path>, usize,\nusize, impl Sync + Fn(usize, usize) -> (R, G, B)) -> UnitResult where\nR: IntoSample, G: IntoSample, B: IntoSample,\nimpl AsRef<std::path::Path>: AsRef<std::path::Path>,\nimpl Sync + Fn(usize, usize) -> (R, G, B): Sync + Fn(usize, usize) ->\n(R, G, B)","parent":null,"children":[],"decl_id":null,"docs":" An oversimplified function for \"just write the damn file already\" use cases.\n Have a look at the examples to see how you can write an image with more flexibility (it's not that hard).\n Use `write_rgb_file` if you do not need an alpha channel.","sig":null,"attributes":[{"value":"/ An oversimplified function for \"just write the damn file already\" use cases.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534743,"byte_end":1534823,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ Have a look at the examples to see how you can write an image with more flexibility (it's not that hard).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534824,"byte_end":1534933,"line_start":47,"line_end":47,"column_start":1,"column_end":110}},{"value":"/ Use `write_rgb_file` if you do not need an alpha channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534934,"byte_end":1534995,"line_start":48,"line_end":48,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1534996,"byte_end":1534999,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Each of `R`, `G`, and `B` can be either `f16`, `f32`, `u32`, or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535000,"byte_end":1535077,"line_start":50,"line_end":50,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535598,"byte_end":1535611,"line_start":65,"line_end":65,"column_start":11,"column_end":24},"name":"WritableImage","qualname":"::image::write::WritableImage","value":"WritableImage<'img, WritableLayers>: Sized","parent":null,"children":[{"krate":0,"index":1996}],"decl_id":null,"docs":" Enables an image to be written to a file. Call `image.write()` where this trait is implemented.\n","sig":null,"attributes":[{"value":"/ Enables an image to be written to a file. Call `image.write()` where this trait is implemented.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535488,"byte_end":1535587,"line_start":64,"line_end":64,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535748,"byte_end":1535753,"line_start":68,"line_end":68,"column_start":8,"column_end":13},"name":"write","qualname":"::image::write::WritableImage::write","value":"fn write(Self) -> WriteImageWithOptions","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":" Create a temporary writer which can be configured and used to write the image to a file.\n","sig":null,"attributes":[{"value":"/ Create a temporary writer which can be configured and used to write the image to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535648,"byte_end":1535740,"line_start":67,"line_end":67,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535924,"byte_end":1535929,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"write","qualname":"<&'img Image<WritableLayers> as image::write::WritableImage>::write","value":"fn write(Self) -> WriteImageWithOptions","parent":{"krate":0,"index":1993},"children":[],"decl_id":{"krate":0,"index":1996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4701},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536342,"byte_end":1536363,"line_start":85,"line_end":85,"column_start":12,"column_end":33},"name":"WriteImageWithOptions","qualname":"::image::write::WriteImageWithOptions","value":"WriteImageWithOptions {  }","parent":null,"children":[{"krate":0,"index":4705},{"krate":0,"index":4706},{"krate":0,"index":4707},{"krate":0,"index":4708}],"decl_id":null,"docs":" A temporary writer which can be configured and used to write an image to a file.\n","sig":null,"attributes":[{"value":"/ A temporary writer which can be configured and used to write an image to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536178,"byte_end":1536262,"line_start":82,"line_end":82,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536727,"byte_end":1536742,"line_start":97,"line_end":97,"column_start":12,"column_end":27},"name":"infer_meta_data","qualname":"<WriteImageWithOptions>::infer_meta_data","value":"fn infer_meta_data<'_>(&'_ Self) -> Headers","parent":null,"children":[],"decl_id":null,"docs":" Generate file meta data for this image. The meta data structure is close to the data in the file.\n","sig":null,"attributes":[{"value":"/ Generate file meta data for this image. The meta data structure is close to the data in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536614,"byte_end":1536715,"line_start":96,"line_end":96,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537084,"byte_end":1537096,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"non_parallel","qualname":"<WriteImageWithOptions>::non_parallel","value":"fn non_parallel(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Do not compress multiple pixel blocks on multiple threads at once.\n Might use less memory and synchronization, but will be slower in most situations.\n","sig":null,"attributes":[{"value":"/ Do not compress multiple pixel blocks on multiple threads at once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536912,"byte_end":1536982,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/ Might use less memory and synchronization, but will be slower in most situations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536987,"byte_end":1537072,"line_start":102,"line_end":102,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537801,"byte_end":1537826,"line_start":113,"line_end":113,"column_start":12,"column_end":37},"name":"skip_compatibility_checks","qualname":"<WriteImageWithOptions>::skip_compatibility_checks","value":"fn skip_compatibility_checks(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Skip some checks that ensure a file can be opened by other exr software.\n For example, it is no longer checked that no two headers or two attributes have the same name,\n which might be an expensive check for images with an exorbitant number of headers.","sig":null,"attributes":[{"value":"/ Skip some checks that ensure a file can be opened by other exr software.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537153,"byte_end":1537229,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/ For example, it is no longer checked that no two headers or two attributes have the same name,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537234,"byte_end":1537332,"line_start":106,"line_end":106,"column_start":5,"column_end":103}},{"value":"/ which might be an expensive check for images with an exorbitant number of headers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537337,"byte_end":1537423,"line_start":107,"line_end":107,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537428,"byte_end":1537431,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ If you write an uncompressed file and need maximum speed, it might save a millisecond to disable the checks,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537436,"byte_end":1537548,"line_start":109,"line_end":109,"column_start":5,"column_end":117}},{"value":"/ if you know that your file is not invalid any ways. I do not recommend this though,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537553,"byte_end":1537640,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/ as the file might not be readably by any other exr library after that.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537645,"byte_end":1537719,"line_start":111,"line_end":111,"column_start":5,"column_end":79}},{"value":"/ __You must care for not producing an invalid file yourself.__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537724,"byte_end":1537789,"line_start":112,"line_end":112,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538060,"byte_end":1538071,"line_start":117,"line_end":117,"column_start":12,"column_end":23},"name":"on_progress","qualname":"<WriteImageWithOptions>::on_progress","value":"fn on_progress<OnProgress>(Self, OnProgress) -> WriteImageWithOptions where\nOnProgress: FnMut(f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Specify a function to be called regularly throughout the writing process.\n Replaces all previously specified progress functions in this reader.\n","sig":null,"attributes":[{"value":"/ Specify a function to be called regularly throughout the writing process.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537894,"byte_end":1537971,"line_start":115,"line_end":115,"column_start":5,"column_end":82}},{"value":"/ Replaces all previously specified progress functions in this reader.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1537976,"byte_end":1538048,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538623,"byte_end":1538630,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"to_file","qualname":"<WriteImageWithOptions>::to_file","value":"fn to_file<impl AsRef<std::path::Path>>(Self, impl AsRef<std::path::Path>)\n-> UnitResult where impl AsRef<std::path::Path>: AsRef<std::path::Path>","parent":null,"children":[],"decl_id":null,"docs":" Write the exr image to a file.\n Use `to_unbuffered` instead, if you do not have a file.\n If an error occurs, attempts to delete the partially written file.\n","sig":null,"attributes":[{"value":"/ Write the exr image to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538408,"byte_end":1538442,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ Use `to_unbuffered` instead, if you do not have a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538447,"byte_end":1538506,"line_start":129,"line_end":129,"column_start":5,"column_end":64}},{"value":"/ If an error occurs, attempts to delete the partially written file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538511,"byte_end":1538581,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538586,"byte_end":1538595,"line_start":131,"line_end":131,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538600,"byte_end":1538611,"line_start":132,"line_end":132,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539168,"byte_end":1539181,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"to_unbuffered","qualname":"<WriteImageWithOptions>::to_unbuffered","value":"fn to_unbuffered<impl Write + Seek>(Self, impl Write + Seek) -> UnitResult\nwhere impl Write + Seek: Write + Seek","parent":null,"children":[],"decl_id":null,"docs":" Buffer the writer and then write the exr image to it.\n Use `to_buffered` instead, if your writer is an in-memory buffer.\n Use `to_file` instead, if you have a file path.\n If your writer cannot seek, you can write to an in-memory vector of bytes first, using `to_buffered`.\n","sig":null,"attributes":[{"value":"/ Buffer the writer and then write the exr image to it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538829,"byte_end":1538886,"line_start":139,"line_end":139,"column_start":5,"column_end":62}},{"value":"/ Use `to_buffered` instead, if your writer is an in-memory buffer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538891,"byte_end":1538960,"line_start":140,"line_end":140,"column_start":5,"column_end":74}},{"value":"/ Use `to_file` instead, if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1538965,"byte_end":1539016,"line_start":141,"line_end":141,"column_start":5,"column_end":56}},{"value":"/ If your writer cannot seek, you can write to an in-memory vector of bytes first, using `to_buffered`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539021,"byte_end":1539126,"line_start":142,"line_end":142,"column_start":5,"column_end":110}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539131,"byte_end":1539140,"line_start":143,"line_end":143,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539145,"byte_end":1539156,"line_start":144,"line_end":144,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539581,"byte_end":1539592,"line_start":154,"line_end":154,"column_start":12,"column_end":23},"name":"to_buffered","qualname":"<WriteImageWithOptions>::to_buffered","value":"fn to_buffered<impl Write + Seek>(Self, impl Write + Seek) -> UnitResult where\nimpl Write + Seek: Write + Seek","parent":null,"children":[],"decl_id":null,"docs":" Write the exr image to a writer.\n Use `to_file` instead, if you have a file path.\n Use `to_unbuffered` instead, if this is not an in-memory writer.\n If your writer cannot seek, you can write to an in-memory vector of bytes first.\n","sig":null,"attributes":[{"value":"/ Write the exr image to a writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539299,"byte_end":1539335,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ Use `to_file` instead, if you have a file path.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539340,"byte_end":1539391,"line_start":150,"line_end":150,"column_start":5,"column_end":56}},{"value":"/ Use `to_unbuffered` instead, if this is not an in-memory writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539396,"byte_end":1539464,"line_start":151,"line_end":151,"column_start":5,"column_end":73}},{"value":"/ If your writer cannot seek, you can write to an in-memory vector of bytes first.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539469,"byte_end":1539553,"line_start":152,"line_end":152,"column_start":5,"column_end":89}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1539558,"byte_end":1539569,"line_start":153,"line_end":153,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"crop","qualname":"::image::crop","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","parent":null,"children":[{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2024},{"krate":0,"index":2027},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2041},{"krate":0,"index":2044},{"krate":0,"index":2047},{"krate":0,"index":2050},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2060},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2070},{"krate":0,"index":2073},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":4729},{"krate":0,"index":4737},{"krate":0,"index":4741},{"krate":0,"index":4745},{"krate":0,"index":4748},{"krate":0,"index":4751},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":2085},{"krate":0,"index":2093},{"krate":0,"index":2097},{"krate":0,"index":4763},{"krate":0,"index":4768},{"krate":0,"index":4771},{"krate":0,"index":4774},{"krate":0,"index":4776},{"krate":0,"index":4779},{"krate":0,"index":4781},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":4785},{"krate":0,"index":4789},{"krate":0,"index":4792},{"krate":0,"index":4795},{"krate":0,"index":4797},{"krate":0,"index":2117},{"krate":0,"index":2121},{"krate":0,"index":2126},{"krate":0,"index":2129},{"krate":0,"index":2132},{"krate":0,"index":2140},{"krate":0,"index":2150},{"krate":0,"index":2153}],"decl_id":null,"docs":" Crop away unwanted pixels. Includes automatic detection of bounding rectangle.\n Currently does not support deep data and resolution levels.\n","sig":null,"attributes":[{"value":"/ Crop away unwanted pixels. Includes automatic detection of bounding rectangle.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1572907,"byte_end":1572989,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ Currently does not support deep data and resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1572990,"byte_end":1573053,"line_start":2,"line_end":2,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":2076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573497,"byte_end":1573506,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"GetBounds","qualname":"::image::crop::GetBounds","value":"GetBounds","parent":null,"children":[{"krate":0,"index":2077}],"decl_id":null,"docs":" Something that has a two-dimensional rectangular shape\n","sig":null,"attributes":[{"value":"/ Something that has a two-dimensional rectangular shape","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573428,"byte_end":1573486,"line_start":11,"line_end":11,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573568,"byte_end":1573574,"line_start":15,"line_end":15,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::crop::GetBounds::bounds","value":"fn bounds<'_>(&'_ Self) -> IntegerBounds","parent":{"krate":0,"index":2076},"children":[],"decl_id":null,"docs":" The bounding rectangle of this pixel grid.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this pixel grid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573514,"byte_end":1573560,"line_start":14,"line_end":14,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573687,"byte_end":1573700,"line_start":19,"line_end":19,"column_start":11,"column_end":24},"name":"InspectSample","qualname":"::image::crop::InspectSample","value":"InspectSample: GetBounds","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2080}],"decl_id":null,"docs":" Inspect the pixels in this image to determine where to crop some away\n","sig":null,"attributes":[{"value":"/ Inspect the pixels in this image to determine where to crop some away","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573603,"byte_end":1573676,"line_start":18,"line_end":18,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573770,"byte_end":1573776,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Sample","qualname":"::image::crop::InspectSample::Sample","value":"type Sample;","parent":{"krate":0,"index":2078},"children":[],"decl_id":null,"docs":" The type of pixel in this pixel grid.\n","sig":null,"attributes":[{"value":"/ The type of pixel in this pixel grid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573719,"byte_end":1573760,"line_start":21,"line_end":21,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573920,"byte_end":1573934,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"inspect_sample","qualname":"::image::crop::InspectSample::inspect_sample","value":"fn inspect_sample<'_>(&'_ Self, Vec2<usize>) -> Self::Sample","parent":{"krate":0,"index":2078},"children":[],"decl_id":null,"docs":" Index is not in world coordinates, but within the data window.\n Position `(0,0)` always represents the top left pixel.\n","sig":null,"attributes":[{"value":"/ Index is not in world coordinates, but within the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573783,"byte_end":1573849,"line_start":24,"line_end":24,"column_start":5,"column_end":71}},{"value":"/ Position `(0,0)` always represents the top left pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573854,"byte_end":1573912,"line_start":25,"line_end":25,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574060,"byte_end":1574064,"line_start":30,"line_end":30,"column_start":11,"column_end":15},"name":"Crop","qualname":"::image::crop::Crop","value":"Crop: Sized","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084}],"decl_id":null,"docs":" Crop some pixels ways when specifying a smaller rectangle\n","sig":null,"attributes":[{"value":"/ Crop some pixels ways when specifying a smaller rectangle","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573988,"byte_end":1574049,"line_start":29,"line_end":29,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":2082},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574161,"byte_end":1574168,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"name":"Cropped","qualname":"::image::crop::Crop::Cropped","value":"type Cropped;","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" The type of  this image after cropping (probably the same as before)\n","sig":null,"attributes":[{"value":"/ The type of  this image after cropping (probably the same as before)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574079,"byte_end":1574151,"line_start":32,"line_end":32,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574553,"byte_end":1574557,"line_start":40,"line_end":40,"column_start":8,"column_end":12},"name":"crop","qualname":"::image::crop::Crop::crop","value":"fn crop(Self, IntegerBounds) -> Self::Cropped","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Crop the image to exclude unwanted pixels.\n Panics for invalid (larger than previously) bounds.\n The bounds are specified in absolute coordinates.\n Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.\n Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.\n","sig":null,"attributes":[{"value":"/ Crop the image to exclude unwanted pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574175,"byte_end":1574221,"line_start":35,"line_end":35,"column_start":5,"column_end":51}},{"value":"/ Panics for invalid (larger than previously) bounds.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574226,"byte_end":1574281,"line_start":36,"line_end":36,"column_start":5,"column_end":60}},{"value":"/ The bounds are specified in absolute coordinates.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574286,"byte_end":1574339,"line_start":37,"line_end":37,"column_start":5,"column_end":58}},{"value":"/ Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574344,"byte_end":1574449,"line_start":38,"line_end":38,"column_start":5,"column_end":110}},{"value":"/ Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574454,"byte_end":1574545,"line_start":39,"line_end":39,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574974,"byte_end":1574982,"line_start":46,"line_end":46,"column_start":8,"column_end":16},"name":"try_crop","qualname":"::image::crop::Crop::try_crop","value":"fn try_crop(Self, Option<IntegerBounds>) -> CropResult<Self::Cropped, Self>","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" Reduce your image to a smaller part, usually to save memory.\n Crop if bounds are specified, return the original if no bounds are specified.\n Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.\n Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.\n","sig":null,"attributes":[{"value":"/ Reduce your image to a smaller part, usually to save memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574610,"byte_end":1574674,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/ Crop if bounds are specified, return the original if no bounds are specified.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574679,"byte_end":1574760,"line_start":43,"line_end":43,"column_start":5,"column_end":86}},{"value":"/ Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574765,"byte_end":1574870,"line_start":44,"line_end":44,"column_start":5,"column_end":110}},{"value":"/ Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574875,"byte_end":1574966,"line_start":45,"line_end":45,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4732},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575557,"byte_end":1575564,"line_start":61,"line_end":61,"column_start":5,"column_end":12},"name":"Cropped","qualname":"::image::crop::CropResult::Cropped","value":"CropResult::Cropped(Cropped)","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":" The image contained some pixels and has been cropped or left untouched\n","sig":null,"attributes":[{"value":"/ The image contained some pixels and has been cropped or left untouched","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575478,"byte_end":1575552,"line_start":60,"line_end":60,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":4734},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575566,"byte_end":1575573,"line_start":61,"line_end":61,"column_start":14,"column_end":21},"name":"0","qualname":"::image::crop::CropResult::Cropped::0","value":"Cropped","parent":{"krate":0,"index":4732},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":4735},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575658,"byte_end":1575663,"line_start":64,"line_end":64,"column_start":5,"column_end":10},"name":"Empty","qualname":"::image::crop::CropResult::Empty","value":"CropResult::Empty { original }","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":" All pixels in the image would be discarded, removing the whole image\n","sig":null,"attributes":[{"value":"/ All pixels in the image would be discarded, removing the whole image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575581,"byte_end":1575653,"line_start":63,"line_end":63,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":4736},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575747,"byte_end":1575755,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"name":"original","qualname":"::image::crop::CropResult::Empty::original","value":"Old","parent":{"krate":0,"index":4735},"children":[],"decl_id":null,"docs":" The fully discarded image which caused the cropping to fail\n","sig":null,"attributes":[{"value":"/ The fully discarded image which caused the cropping to fail","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575675,"byte_end":1575738,"line_start":66,"line_end":66,"column_start":9,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":4729},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575446,"byte_end":1575456,"line_start":58,"line_end":58,"column_start":10,"column_end":20},"name":"CropResult","qualname":"::image::crop::CropResult","value":"enum CropResult<Cropped, Old> {\n    Cropped(Cropped),\n    Empty {\n            original: Old,\n        },\n}","parent":null,"children":[{"krate":0,"index":4732},{"krate":0,"index":4735}],"decl_id":null,"docs":" Cropping an image fails if the image is fully transparent.\n Use [`or_crop_to_1x1_if_empty`] or [`or_none_if_empty`] to obtain a normal image again.\n","sig":null,"attributes":[{"value":"/ Cropping an image fails if the image is fully transparent.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575225,"byte_end":1575287,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ Use [`or_crop_to_1x1_if_empty`] or [`or_none_if_empty`] to obtain a normal image again.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575288,"byte_end":1575379,"line_start":55,"line_end":55,"column_start":1,"column_end":92}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575380,"byte_end":1575391,"line_start":56,"line_end":56,"column_start":1,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575860,"byte_end":1575869,"line_start":72,"line_end":72,"column_start":11,"column_end":20},"name":"CropWhere","qualname":"::image::crop::CropWhere","value":"CropWhere<Sample>: Sized","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092}],"decl_id":null,"docs":" Crop away unwanted pixels from the border if they match the specified rule.\n","sig":null,"attributes":[{"value":"/ Crop away unwanted pixels from the border if they match the specified rule.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575770,"byte_end":1575849,"line_start":71,"line_end":71,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575978,"byte_end":1575985,"line_start":75,"line_end":75,"column_start":10,"column_end":17},"name":"Cropped","qualname":"::image::crop::CropWhere::Cropped","value":"type Cropped;","parent":{"krate":0,"index":2085},"children":[],"decl_id":null,"docs":" The type of the cropped image (probably the same as the original image).\n","sig":null,"attributes":[{"value":"/ The type of the cropped image (probably the same as the original image).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575892,"byte_end":1575968,"line_start":74,"line_end":74,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576285,"byte_end":1576295,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"crop_where","qualname":"::image::crop::CropWhere::crop_where","value":"fn crop_where<impl Fn(Sample) -> bool>(Self, impl Fn(Sample) -> bool)\n-> CropResult<Self::Cropped, Self> where impl Fn(Sample) -> bool: Fn(Sample)\n-> bool","parent":{"krate":0,"index":2085},"children":[],"decl_id":null,"docs":" Crop away unwanted pixels from the border if they match the specified rule.\n Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.\n Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.\n","sig":null,"attributes":[{"value":"/ Crop away unwanted pixels from the border if they match the specified rule.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575992,"byte_end":1576071,"line_start":77,"line_end":77,"column_start":5,"column_end":84}},{"value":"/ Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576076,"byte_end":1576181,"line_start":78,"line_end":78,"column_start":5,"column_end":110}},{"value":"/ Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576186,"byte_end":1576277,"line_start":79,"line_end":79,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576760,"byte_end":1576773,"line_start":86,"line_end":86,"column_start":8,"column_end":21},"name":"crop_where_eq","qualname":"::image::crop::CropWhere::crop_where_eq","value":"fn crop_where_eq<impl Into<Sample>>(Self, impl Into<Sample>)\n-> CropResult<Self::Cropped, Self> where Sample: PartialEq,\nimpl Into<Sample>: Into<Sample>","parent":{"krate":0,"index":2085},"children":[],"decl_id":null,"docs":" Crop away unwanted pixels from the border if they match the specified color.\n If you want discard based on a rule, use `crop_where` with a closure instead.\n Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.\n Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.\n","sig":null,"attributes":[{"value":"/ Crop away unwanted pixels from the border if they match the specified color.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576380,"byte_end":1576460,"line_start":82,"line_end":82,"column_start":5,"column_end":85}},{"value":"/ If you want discard based on a rule, use `crop_where` with a closure instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576465,"byte_end":1576546,"line_start":83,"line_end":83,"column_start":5,"column_end":86}},{"value":"/ Does not reduce allocation size of the current image, but instead only adjust a few boundary numbers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576551,"byte_end":1576656,"line_start":84,"line_end":84,"column_start":5,"column_end":110}},{"value":"/ Use `reallocate_cropped()` on the return value to actually reduce the memory footprint.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576661,"byte_end":1576752,"line_start":85,"line_end":85,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576955,"byte_end":1576967,"line_start":89,"line_end":89,"column_start":8,"column_end":20},"name":"crop_nowhere","qualname":"::image::crop::CropWhere::crop_nowhere","value":"fn crop_nowhere(Self) -> Self::Cropped","parent":{"krate":0,"index":2085},"children":[],"decl_id":null,"docs":" Convert this data to cropped data without discarding any pixels.\n","sig":null,"attributes":[{"value":"/ Convert this data to cropped data without discarding any pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1576879,"byte_end":1576947,"line_start":88,"line_end":88,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577098,"byte_end":1577102,"line_start":95,"line_end":95,"column_start":8,"column_end":12},"name":"crop","qualname":"<Layer<Channels> as image::crop::Crop>::crop","value":"fn crop(Self, IntegerBounds) -> Self::Cropped","parent":{"krate":0,"index":2081},"children":[],"decl_id":{"krate":0,"index":2083},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577329,"byte_end":1577339,"line_start":103,"line_end":103,"column_start":8,"column_end":18},"name":"crop_where","qualname":"<T as image::crop::CropWhere>::crop_where","value":"fn crop_where<impl Fn(T::Sample) -> bool>(Self, impl Fn(T::Sample) -> bool)\n-> CropResult<Self::Cropped, Self> where\nimpl Fn(T::Sample) -> bool: Fn(T::Sample) -> bool","parent":{"krate":0,"index":2085},"children":[],"decl_id":{"krate":0,"index":2088},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577659,"byte_end":1577672,"line_start":112,"line_end":112,"column_start":8,"column_end":21},"name":"crop_where_eq","qualname":"<T as image::crop::CropWhere>::crop_where_eq","value":"fn crop_where_eq<impl Into<T::Sample>>(Self, impl Into<T::Sample>)\n-> CropResult<Self::Cropped, Self> where T::Sample: PartialEq,\nimpl Into<T::Sample>: Into<T::Sample>","parent":{"krate":0,"index":2085},"children":[],"decl_id":{"krate":0,"index":2090},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577913,"byte_end":1577925,"line_start":117,"line_end":117,"column_start":8,"column_end":20},"name":"crop_nowhere","qualname":"<T as image::crop::CropWhere>::crop_nowhere","value":"fn crop_nowhere(Self) -> Self::Cropped","parent":{"krate":0,"index":2085},"children":[],"decl_id":{"krate":0,"index":2092},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4763},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578140,"byte_end":1578155,"line_start":125,"line_end":125,"column_start":12,"column_end":27},"name":"CroppedChannels","qualname":"::image::crop::CroppedChannels","value":"CroppedChannels { full_channels, full_bounds, cropped_bounds }","parent":null,"children":[{"krate":0,"index":4765},{"krate":0,"index":4766},{"krate":0,"index":4767}],"decl_id":null,"docs":" A smaller window into an existing pixel storage\n","sig":null,"attributes":[{"value":"/ A smaller window into an existing pixel storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578038,"byte_end":1578089,"line_start":123,"line_end":123,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4765},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578213,"byte_end":1578226,"line_start":128,"line_end":128,"column_start":9,"column_end":22},"name":"full_channels","qualname":"::image::crop::CroppedChannels::full_channels","value":"Channels","parent":{"krate":0,"index":4763},"children":[],"decl_id":null,"docs":" The uncropped pixel storage\n","sig":null,"attributes":[{"value":"/ The uncropped pixel storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578173,"byte_end":1578204,"line_start":127,"line_end":127,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4766},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578290,"byte_end":1578301,"line_start":131,"line_end":131,"column_start":9,"column_end":20},"name":"full_bounds","qualname":"::image::crop::CroppedChannels::full_bounds","value":"meta::attribute::IntegerBounds","parent":{"krate":0,"index":4763},"children":[],"decl_id":null,"docs":" The uncropped pixel storage bounds\n","sig":null,"attributes":[{"value":"/ The uncropped pixel storage bounds","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578243,"byte_end":1578281,"line_start":130,"line_end":130,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":4767},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578368,"byte_end":1578382,"line_start":134,"line_end":134,"column_start":9,"column_end":23},"name":"cropped_bounds","qualname":"::image::crop::CroppedChannels::cropped_bounds","value":"meta::attribute::IntegerBounds","parent":{"krate":0,"index":4763},"children":[],"decl_id":null,"docs":" The cropped pixel storage bounds\n","sig":null,"attributes":[{"value":"/ The cropped pixel storage bounds","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578323,"byte_end":1578359,"line_start":133,"line_end":133,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578555,"byte_end":1578565,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"crop_layer","qualname":"<CroppedChannels<Channels>>::crop_layer","value":"fn crop_layer(IntegerBounds, Layer<Channels>)\n-> Layer<CroppedChannels<Channels>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a layer in a cropped view with adjusted bounds, but without reallocating your pixels\n","sig":null,"attributes":[{"value":"/ Wrap a layer in a cropped view with adjusted bounds, but without reallocating your pixels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578450,"byte_end":1578543,"line_start":139,"line_end":139,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1579364,"byte_end":1579382,"line_start":165,"line_end":165,"column_start":8,"column_end":26},"name":"infer_channel_list","qualname":"<CroppedChannels<Channels> as image::write::channels::WritableChannels>::infer_channel_list","value":"fn infer_channel_list<'_>(&'_ Self) -> ChannelList","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1822},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1579547,"byte_end":1579564,"line_start":169,"line_end":169,"column_start":8,"column_end":25},"name":"infer_level_modes","qualname":"<CroppedChannels<Channels> as image::write::channels::WritableChannels>::infer_level_modes","value":"fn infer_level_modes<'_>(&'_ Self) -> (LevelMode, RoundingMode)","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1823},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1579716,"byte_end":1579729,"line_start":175,"line_end":175,"column_start":8,"column_end":21},"name":"create_writer","qualname":"<CroppedChannels<Channels> as image::write::channels::WritableChannels>::create_writer","value":"fn create_writer<'_>(&'slf Self, &'_ Header) -> Self::Writer","parent":{"krate":0,"index":1820},"children":[],"decl_id":{"krate":0,"index":1825},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580114,"byte_end":1580127,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"CroppedWriter","qualname":"::image::crop::CroppedWriter","value":"CroppedWriter {  }","parent":null,"children":[{"krate":0,"index":4787},{"krate":0,"index":4788}],"decl_id":null,"docs":" A writer for the cropped view layer\n","sig":null,"attributes":[{"value":"/ A writer for the cropped view layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580028,"byte_end":1580067,"line_start":183,"line_end":183,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580305,"byte_end":1580331,"line_start":191,"line_end":191,"column_start":8,"column_end":34},"name":"extract_uncompressed_block","qualname":"<CroppedWriter<Channels> as image::write::channels::ChannelsWriter>::extract_uncompressed_block","value":"fn extract_uncompressed_block<'_, '_>(&'_ Self, &'_ Header, BlockIndex)\n-> Vec<u8>","parent":{"krate":0,"index":1826},"children":[],"decl_id":{"krate":0,"index":1827},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580743,"byte_end":1580757,"line_start":203,"line_end":203,"column_start":8,"column_end":22},"name":"inspect_sample","qualname":"<Layer<SpecificChannels<Samples, Channels>> as image::crop::InspectSample>::inspect_sample","value":"fn inspect_sample<'_>(&'_ Self, Vec2<usize>) -> Samples::Pixel","parent":{"krate":0,"index":2078},"children":[],"decl_id":{"krate":0,"index":2080},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580977,"byte_end":1580991,"line_start":211,"line_end":211,"column_start":8,"column_end":22},"name":"inspect_sample","qualname":"<Layer<AnyChannels<FlatSamples>> as image::crop::InspectSample>::inspect_sample","value":"fn inspect_sample<'_>(&'_ Self, Vec2<usize>) -> FlatSamplesPixel","parent":{"krate":0,"index":2078},"children":[],"decl_id":{"krate":0,"index":2080},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581469,"byte_end":1581485,"line_start":223,"line_end":223,"column_start":11,"column_end":27},"name":"ApplyCroppedView","qualname":"::image::crop::ApplyCroppedView","value":"ApplyCroppedView","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2131}],"decl_id":null,"docs":" Realize a cropped view of the original data,\n by actually removing the unwanted original pixels,\n reducing the memory consumption.\n Currently not supported for `SpecificChannels`.\n","sig":null,"attributes":[{"value":"/ Realize a cropped view of the original data,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581266,"byte_end":1581314,"line_start":219,"line_end":219,"column_start":1,"column_end":49}},{"value":"/ by actually removing the unwanted original pixels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581315,"byte_end":1581369,"line_start":220,"line_end":220,"column_start":1,"column_end":55}},{"value":"/ reducing the memory consumption.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581370,"byte_end":1581406,"line_start":221,"line_end":221,"column_start":1,"column_end":37}},{"value":"/ Currently not supported for `SpecificChannels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581407,"byte_end":1581458,"line_start":222,"line_end":222,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2130},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581550,"byte_end":1581561,"line_start":226,"line_end":226,"column_start":10,"column_end":21},"name":"Reallocated","qualname":"::image::crop::ApplyCroppedView::Reallocated","value":"type Reallocated;","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" The simpler type after cropping is realized\n","sig":null,"attributes":[{"value":"/ The simpler type after cropping is realized","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581493,"byte_end":1581540,"line_start":225,"line_end":225,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581752,"byte_end":1581770,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"reallocate_cropped","qualname":"::image::crop::ApplyCroppedView::reallocate_cropped","value":"fn reallocate_cropped(Self) -> Self::Reallocated","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" Make the cropping real by reallocating the underlying storage,\n with the goal of reducing total memory usage.\n Currently not supported for `SpecificChannels`.\n","sig":null,"attributes":[{"value":"/ Make the cropping real by reallocating the underlying storage,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581568,"byte_end":1581634,"line_start":228,"line_end":228,"column_start":5,"column_end":71}},{"value":"/ with the goal of reducing total memory usage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581639,"byte_end":1581688,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/ Currently not supported for `SpecificChannels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581693,"byte_end":1581744,"line_start":230,"line_end":230,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581943,"byte_end":1581961,"line_start":237,"line_end":237,"column_start":8,"column_end":26},"name":"reallocate_cropped","qualname":"<Layer<CroppedChannels<AnyChannels<FlatSamples>>> as image::crop::ApplyCroppedView>::reallocate_cropped","value":"fn reallocate_cropped(Self) -> Self::Reallocated","parent":{"krate":0,"index":2129},"children":[],"decl_id":{"krate":0,"index":2131},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1585255,"byte_end":1585278,"line_start":300,"line_end":300,"column_start":8,"column_end":31},"name":"try_find_smaller_bounds","qualname":"::image::crop::try_find_smaller_bounds","value":"fn try_find_smaller_bounds<impl Fn(Vec2<usize>) -> bool>(IntegerBounds,\nimpl Fn(Vec2<usize>) -> bool) -> Option<IntegerBounds> where\nimpl Fn(Vec2<usize>) -> bool: Fn(Vec2<usize>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return the smallest bounding rectangle including all pixels that satisfy the predicate.\n Worst case: Fully transparent image, visits each pixel once.\n Best case: Fully opaque image, visits two pixels.\n Returns `None` if the image is fully transparent.\n Returns `[(0,0), size]` if the image is fully opaque.\n Designed to be cache-friendly linear search. Optimized for row-major image vectors.\n","sig":null,"attributes":[{"value":"/ Return the smallest bounding rectangle including all pixels that satisfy the predicate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1584837,"byte_end":1584928,"line_start":294,"line_end":294,"column_start":1,"column_end":92}},{"value":"/ Worst case: Fully transparent image, visits each pixel once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1584929,"byte_end":1584993,"line_start":295,"line_end":295,"column_start":1,"column_end":65}},{"value":"/ Best case: Fully opaque image, visits two pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1584994,"byte_end":1585047,"line_start":296,"line_end":296,"column_start":1,"column_end":54}},{"value":"/ Returns `None` if the image is fully transparent.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1585048,"byte_end":1585101,"line_start":297,"line_end":297,"column_start":1,"column_end":54}},{"value":"/ Returns `[(0,0), size]` if the image is fully opaque.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1585102,"byte_end":1585159,"line_start":298,"line_end":298,"column_start":1,"column_end":58}},{"value":"/ Designed to be cache-friendly linear search. Optimized for row-major image vectors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1585160,"byte_end":1585247,"line_start":299,"line_end":299,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588239,"byte_end":1588245,"line_start":360,"line_end":360,"column_start":8,"column_end":14},"name":"bounds","qualname":"<Layer<S> as image::crop::GetBounds>::bounds","value":"fn bounds<'_>(&'_ Self) -> IntegerBounds","parent":{"krate":0,"index":2076},"children":[],"decl_id":{"krate":0,"index":2077},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588473,"byte_end":1588489,"line_start":368,"line_end":368,"column_start":12,"column_end":28},"name":"or_none_if_empty","qualname":"<CropResult<Cropped, Original>>::or_none_if_empty","value":"fn or_none_if_empty(Self) -> Option<Cropped>","parent":null,"children":[],"decl_id":null,"docs":" If the image was fully empty, return `None`, otherwise return `Some(cropped_image)`.\n","sig":null,"attributes":[{"value":"/ If the image was fully empty, return `None`, otherwise return `Some(cropped_image)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588373,"byte_end":1588461,"line_start":367,"line_end":367,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588836,"byte_end":1588859,"line_start":377,"line_end":377,"column_start":12,"column_end":35},"name":"or_crop_to_1x1_if_empty","qualname":"<CropResult<Cropped, Original>>::or_crop_to_1x1_if_empty","value":"fn or_crop_to_1x1_if_empty(Self) -> Cropped where Original: Crop<Cropped =\nCropped> + GetBounds","parent":null,"children":[],"decl_id":null,"docs":" If the image was fully empty, crop to one single pixel of all the transparent pixels instead,\n leaving the layer intact while reducing memory usage.\n","sig":null,"attributes":[{"value":"/ If the image was fully empty, crop to one single pixel of all the transparent pixels instead,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588665,"byte_end":1588762,"line_start":375,"line_end":375,"column_start":5,"column_end":102}},{"value":"/ leaving the layer intact while reducing memory usage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588767,"byte_end":1588824,"line_start":376,"line_end":376,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pixel_vec","qualname":"::image::pixel_vec","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":4801},{"krate":0,"index":4805},{"krate":0,"index":4807},{"krate":0,"index":4810},{"krate":0,"index":4812},{"krate":0,"index":4816},{"krate":0,"index":2160},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2183},{"krate":0,"index":2184}],"decl_id":null,"docs":" Provides a predefined pixel storage.\n Currently only contains a simple flattened vector storage.\n Use the functions `create_pixel_vec::<YourPixelTuple>` and\n `set_pixel_in_vec::<YourPixelTuple>` for reading a predefined pixel vector.\n Use the function `PixelVec::new` to create a pixel vector which can be written to a file.\n","sig":null,"attributes":[{"value":"/ Provides a predefined pixel storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600346,"byte_end":1600386,"line_start":2,"line_end":2,"column_start":1,"column_end":41}},{"value":"/ Currently only contains a simple flattened vector storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600387,"byte_end":1600449,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ Use the functions `create_pixel_vec::<YourPixelTuple>` and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600450,"byte_end":1600512,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ `set_pixel_in_vec::<YourPixelTuple>` for reading a predefined pixel vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600513,"byte_end":1600592,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"/ Use the function `PixelVec::new` to create a pixel vector which can be written to a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600593,"byte_end":1600686,"line_start":6,"line_end":6,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":4801},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601185,"byte_end":1601193,"line_start":21,"line_end":21,"column_start":12,"column_end":20},"name":"PixelVec","qualname":"::image::pixel_vec::PixelVec","value":"PixelVec { resolution, pixels }","parent":null,"children":[{"krate":0,"index":4803},{"krate":0,"index":4804}],"decl_id":null,"docs":" Store all samples in a single array.\n All samples will be converted to the type `T`.\n This supports all the sample types, `f16`, `f32`, and `u32`.","sig":null,"attributes":[{"value":"/ Store all samples in a single array.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600703,"byte_end":1600743,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/ All samples will be converted to the type `T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600744,"byte_end":1600794,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/ This supports all the sample types, `f16`, `f32`, and `u32`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600795,"byte_end":1600859,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600860,"byte_end":1600863,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The flattened vector contains all rows one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600864,"byte_end":1600925,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ In each row, for each pixel, its red, green, blue, and then alpha","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600926,"byte_end":1600995,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ samples are stored one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1600996,"byte_end":1601037,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601038,"byte_end":1601041,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Use `PixelVec.compute_pixel_index(position)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601042,"byte_end":1601090,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/ to compute the flat index of a specific pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601091,"byte_end":1601141,"line_start":19,"line_end":19,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4803},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601246,"byte_end":1601256,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"name":"resolution","qualname":"::image::pixel_vec::PixelVec::resolution","value":"math::Vec2<usize>","parent":{"krate":0,"index":4801},"children":[],"decl_id":null,"docs":" The resolution of this layer.\n","sig":null,"attributes":[{"value":"/ The resolution of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601204,"byte_end":1601237,"line_start":23,"line_end":23,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":4804},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601591,"byte_end":1601597,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"pixels","qualname":"::image::pixel_vec::PixelVec::pixels","value":"std::vec::Vec<T>","parent":{"krate":0,"index":4801},"children":[],"decl_id":null,"docs":" The flattened vector contains all rows one after another.\n In each row, for each pixel, its red, green, blue, and then alpha\n samples are stored one after another.","sig":null,"attributes":[{"value":"/ The flattened vector contains all rows one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601276,"byte_end":1601337,"line_start":26,"line_end":26,"column_start":5,"column_end":66}},{"value":"/ In each row, for each pixel, its red, green, blue, and then alpha","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601342,"byte_end":1601411,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"/ samples are stored one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601416,"byte_end":1601457,"line_start":28,"line_end":28,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601462,"byte_end":1601465,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Use `Flattened::compute_pixel_index(image, position)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601470,"byte_end":1601527,"line_start":30,"line_end":30,"column_start":5,"column_end":62}},{"value":"/ to compute the flat index of a specific pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601532,"byte_end":1601582,"line_start":31,"line_end":31,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601855,"byte_end":1601866,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"constructor","qualname":"<PixelVec<Pixel>>::constructor","value":"fn constructor<Channels, '_>(Vec2<usize>, &'_ Channels) -> Self where\nPixel: Default + Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a new flattened pixel storage, filled with default pixels.\n Accepts a `Channels` parameter, which is not used, so that it can be passed as a function pointer instead of calling it.\n","sig":null,"attributes":[{"value":"/ Create a new flattened pixel storage, filled with default pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601645,"byte_end":1601714,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ Accepts a `Channels` parameter, which is not used, so that it can be passed as a function pointer instead of calling it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601719,"byte_end":1601843,"line_start":38,"line_end":38,"column_start":5,"column_end":129}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602204,"byte_end":1602213,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<PixelVec<Pixel>>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, Vec2<usize>) -> &'_ Pixel where Pixel: Sync","parent":null,"children":[],"decl_id":null,"docs":" Examine a pixel of a `PixelVec<T>` image.\n Can usually be used as a function reference instead of calling it directly.\n","sig":null,"attributes":[{"value":"/ Examine a pixel of a `PixelVec<T>` image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602049,"byte_end":1602094,"line_start":43,"line_end":43,"column_start":5,"column_end":50}},{"value":"/ Can usually be used as a function reference instead of calling it directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602099,"byte_end":1602178,"line_start":44,"line_end":44,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602183,"byte_end":1602192,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602496,"byte_end":1602505,"line_start":53,"line_end":53,"column_start":12,"column_end":21},"name":"set_pixel","qualname":"<PixelVec<Pixel>>::set_pixel","value":"fn set_pixel<'_>(&'_ mut Self, Vec2<usize>, Pixel)","parent":null,"children":[],"decl_id":null,"docs":" Update a pixel of a `PixelVec<T>` image.\n Can usually be used as a function reference instead of calling it directly.\n","sig":null,"attributes":[{"value":"/ Update a pixel of a `PixelVec<T>` image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602342,"byte_end":1602386,"line_start":50,"line_end":50,"column_start":5,"column_end":49}},{"value":"/ Can usually be used as a function reference instead of calling it directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602391,"byte_end":1602470,"line_start":51,"line_end":51,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602475,"byte_end":1602484,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602763,"byte_end":1602766,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<PixelVec<Pixel>>::new","value":"fn new<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>, Vec<Pixel>) -> Self\nwhere impl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new flattened pixel storage, checking the length of the provided pixels vector.\n","sig":null,"attributes":[{"value":"/ Create a new flattened pixel storage, checking the length of the provided pixels vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1602659,"byte_end":1602751,"line_start":58,"line_end":58,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603279,"byte_end":1603298,"line_start":69,"line_end":69,"column_start":12,"column_end":31},"name":"compute_pixel_index","qualname":"<PixelVec<Pixel>>::compute_pixel_index","value":"fn compute_pixel_index<'_>(&'_ Self, Vec2<usize>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the flat index of a specific pixel. Returns a range of either 3 or 4 samples.\n The computed index can be used with `PixelVec.samples[index]`.\n Panics for invalid sample coordinates.\n","sig":null,"attributes":[{"value":"/ Compute the flat index of a specific pixel. Returns a range of either 3 or 4 samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603046,"byte_end":1603135,"line_start":65,"line_end":65,"column_start":5,"column_end":94}},{"value":"/ The computed index can be used with `PixelVec.samples[index]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603140,"byte_end":1603206,"line_start":66,"line_end":66,"column_start":5,"column_end":71}},{"value":"/ Panics for invalid sample coordinates.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603211,"byte_end":1603253,"line_start":67,"line_end":67,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603258,"byte_end":1603267,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603551,"byte_end":1603566,"line_start":77,"line_end":77,"column_start":8,"column_end":23},"name":"validate_result","qualname":"<PixelVec<Px> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603951,"byte_end":1603960,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<PixelVec<Px> as image::write::channels::GetPixel>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, Vec2<usize>) -> Self::Pixel","parent":{"krate":0,"index":1828},"children":[],"decl_id":{"krate":0,"index":1830},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1604125,"byte_end":1604128,"line_start":93,"line_end":93,"column_start":18,"column_end":21},"name":"fmt","qualname":"<PixelVec<T> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> std::fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1604112,"byte_end":1604121,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recursive","qualname":"::image::recursive","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","parent":null,"children":[{"krate":0,"index":4819},{"krate":0,"index":4821},{"krate":0,"index":4822},{"krate":0,"index":4824},{"krate":0,"index":4826},{"krate":0,"index":4828},{"krate":0,"index":4829},{"krate":0,"index":4831},{"krate":0,"index":4832},{"krate":0,"index":4834},{"krate":0,"index":4839},{"krate":0,"index":4842},{"krate":0,"index":4846},{"krate":0,"index":4850},{"krate":0,"index":4854},{"krate":0,"index":4857},{"krate":0,"index":4861},{"krate":0,"index":4864},{"krate":0,"index":2188},{"krate":0,"index":2192},{"krate":0,"index":2195},{"krate":0,"index":2198},{"krate":0,"index":2201},{"krate":0,"index":2204},{"krate":0,"index":2209},{"krate":0,"index":2212},{"krate":0,"index":2215},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":4869},{"krate":0,"index":4873},{"krate":0,"index":4877},{"krate":0,"index":4882},{"krate":0,"index":4887},{"krate":0,"index":4893},{"krate":0,"index":4899},{"krate":0,"index":4906},{"krate":0,"index":4913},{"krate":0,"index":4921},{"krate":0,"index":4929},{"krate":0,"index":4938},{"krate":0,"index":4947},{"krate":0,"index":4957},{"krate":0,"index":4967},{"krate":0,"index":4978},{"krate":0,"index":4989},{"krate":0,"index":5001},{"krate":0,"index":5013},{"krate":0,"index":5026},{"krate":0,"index":5039},{"krate":0,"index":5053},{"krate":0,"index":5067},{"krate":0,"index":5082},{"krate":0,"index":5097},{"krate":0,"index":5113},{"krate":0,"index":5129},{"krate":0,"index":5146},{"krate":0,"index":5163},{"krate":0,"index":5181},{"krate":0,"index":5199},{"krate":0,"index":5218},{"krate":0,"index":5237},{"krate":0,"index":5257},{"krate":0,"index":5277},{"krate":0,"index":5298},{"krate":0,"index":5319},{"krate":0,"index":5341},{"krate":0,"index":5363},{"krate":0,"index":5386},{"krate":0,"index":5409},{"krate":0,"index":5433},{"krate":0,"index":5457},{"krate":0,"index":5482},{"krate":0,"index":5507},{"krate":0,"index":5533},{"krate":0,"index":5559},{"krate":0,"index":5586},{"krate":0,"index":5613},{"krate":0,"index":5641},{"krate":0,"index":5669},{"krate":0,"index":5698},{"krate":0,"index":5727},{"krate":0,"index":5757},{"krate":0,"index":5787},{"krate":0,"index":5818},{"krate":0,"index":5849},{"krate":0,"index":5881},{"krate":0,"index":5913},{"krate":0,"index":5946},{"krate":0,"index":5979},{"krate":0,"index":6013},{"krate":0,"index":6047},{"krate":0,"index":6082}],"decl_id":null,"docs":" A generic wrapper which can be used to represent recursive types.\n Supports conversion from and to tuples of the same size.\n","sig":null,"attributes":[{"value":"/ A generic wrapper which can be used to represent recursive types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604381,"byte_end":1604450,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ Supports conversion from and to tuples of the same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604451,"byte_end":1604511,"line_start":2,"line_end":2,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4819},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604663,"byte_end":1604671,"line_start":6,"line_end":6,"column_start":12,"column_end":20},"name":"NoneMore","qualname":"::image::recursive::NoneMore","value":"","parent":null,"children":[],"decl_id":null,"docs":" No more recursion. Can be used within any `Recursive<NoneMore, YourValue>` type.\n","sig":null,"attributes":[{"value":"/ No more recursion. Can be used within any `Recursive<NoneMore, YourValue>` type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604513,"byte_end":1604597,"line_start":4,"line_end":4,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":4834},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604955,"byte_end":1604964,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::image::recursive::Recursive","value":"Recursive { inner, value }","parent":null,"children":[{"krate":0,"index":4837},{"krate":0,"index":4838}],"decl_id":null,"docs":" A recursive type-level linked list of `Value` entries.\n Mainly used to represent an arbitrary number of channels.\n The recursive architecture removes the need to implement traits for many different tuples.\n","sig":null,"attributes":[{"value":"/ A recursive type-level linked list of `Value` entries.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604674,"byte_end":1604732,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/ Mainly used to represent an arbitrary number of channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604733,"byte_end":1604794,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/ The recursive architecture removes the need to implement traits for many different tuples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604795,"byte_end":1604889,"line_start":10,"line_end":10,"column_start":1,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":4837},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605137,"byte_end":1605142,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"inner","qualname":"::image::recursive::Recursive::inner","value":"Inner","parent":{"krate":0,"index":4834},"children":[],"decl_id":null,"docs":" The remaining values of this linked list,\n probably either `NoneMore` or another instance of the same `Recursive<Inner - 1, Value>`.\n","sig":null,"attributes":[{"value":"/ The remaining values of this linked list,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1604985,"byte_end":1605030,"line_start":13,"line_end":13,"column_start":5,"column_end":50}},{"value":"/ probably either `NoneMore` or another instance of the same `Recursive<Inner - 1, Value>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605035,"byte_end":1605128,"line_start":14,"line_end":14,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":4838},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605203,"byte_end":1605208,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"value","qualname":"::image::recursive::Recursive::value","value":"Value","parent":{"krate":0,"index":4834},"children":[],"decl_id":null,"docs":" The next item in this linked list.\n","sig":null,"attributes":[{"value":"/ The next item in this linked list.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605156,"byte_end":1605194,"line_start":17,"line_end":17,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605369,"byte_end":1605372,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Recursive<Inner, Value>>::new","value":"fn new(Inner, Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new recursive type. Equivalent to the manual constructor, but less verbose.\n","sig":null,"attributes":[{"value":"/ Create a new recursive type. Equivalent to the manual constructor, but less verbose.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605269,"byte_end":1605357,"line_start":22,"line_end":22,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605637,"byte_end":1605646,"line_start":29,"line_end":29,"column_start":11,"column_end":20},"name":"IntoTuple","qualname":"::image::recursive::IntoTuple","value":"IntoTuple<Tuple>","parent":null,"children":[{"krate":0,"index":2194}],"decl_id":null,"docs":" Convert this recursive type into a tuple.\n This is nice as it will require less typing for the same type.\n A type might or might not be convertible to the specified `Tuple` type.\n","sig":null,"attributes":[{"value":"/ Convert this recursive type into a tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605438,"byte_end":1605483,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"/ This is nice as it will require less typing for the same type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605484,"byte_end":1605550,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ A type might or might not be convertible to the specified `Tuple` type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605551,"byte_end":1605626,"line_start":28,"line_end":28,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605716,"byte_end":1605726,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"into_tuple","qualname":"::image::recursive::IntoTuple::into_tuple","value":"fn into_tuple(Self) -> Tuple","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" Convert this recursive type to a nice tuple.\n","sig":null,"attributes":[{"value":"/ Convert this recursive type to a nice tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605660,"byte_end":1605708,"line_start":30,"line_end":30,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":2195},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605942,"byte_end":1605958,"line_start":37,"line_end":37,"column_start":11,"column_end":27},"name":"IntoNonRecursive","qualname":"::image::recursive::IntoNonRecursive","value":"IntoNonRecursive","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197}],"decl_id":null,"docs":" Convert this recursive type into a tuple.\n This is nice as it will require less typing for the same type.\n A type will be converted to the specified `Self::NonRecursive` type.\n","sig":null,"attributes":[{"value":"/ Convert this recursive type into a tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605746,"byte_end":1605791,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/ This is nice as it will require less typing for the same type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605792,"byte_end":1605858,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ A type will be converted to the specified `Self::NonRecursive` type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605859,"byte_end":1605931,"line_start":36,"line_end":36,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606004,"byte_end":1606016,"line_start":39,"line_end":39,"column_start":10,"column_end":22},"name":"NonRecursive","qualname":"::image::recursive::IntoNonRecursive::NonRecursive","value":"type NonRecursive;","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The resulting tuple type.\n","sig":null,"attributes":[{"value":"/ The resulting tuple type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605965,"byte_end":1605994,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606079,"byte_end":1606097,"line_start":42,"line_end":42,"column_start":8,"column_end":26},"name":"into_non_recursive","qualname":"::image::recursive::IntoNonRecursive::into_non_recursive","value":"fn into_non_recursive(Self) -> Self::NonRecursive","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" Convert this recursive type to a nice tuple.\n","sig":null,"attributes":[{"value":"/ Convert this recursive type to a nice tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606023,"byte_end":1606071,"line_start":41,"line_end":41,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606185,"byte_end":1606198,"line_start":46,"line_end":46,"column_start":11,"column_end":24},"name":"IntoRecursive","qualname":"::image::recursive::IntoRecursive","value":"IntoRecursive","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":" Create a recursive type from this tuple.\n","sig":null,"attributes":[{"value":"/ Create a recursive type from this tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606130,"byte_end":1606174,"line_start":45,"line_end":45,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606264,"byte_end":1606273,"line_start":48,"line_end":48,"column_start":10,"column_end":19},"name":"Recursive","qualname":"::image::recursive::IntoRecursive::Recursive","value":"type Recursive;","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The recursive type resulting from this tuple.\n","sig":null,"attributes":[{"value":"/ The recursive type resulting from this tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606205,"byte_end":1606254,"line_start":47,"line_end":47,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606332,"byte_end":1606346,"line_start":51,"line_end":51,"column_start":8,"column_end":22},"name":"into_recursive","qualname":"::image::recursive::IntoRecursive::into_recursive","value":"fn into_recursive(Self) -> Self::Recursive","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" Create a recursive type from this tuple.\n","sig":null,"attributes":[{"value":"/ Create a recursive type from this tuple.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606280,"byte_end":1606324,"line_start":50,"line_end":50,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606444,"byte_end":1606458,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"into_recursive","qualname":"<NoneMore as image::recursive::IntoRecursive>::into_recursive","value":"fn into_recursive(Self) -> Self::Recursive","parent":{"krate":0,"index":2198},"children":[],"decl_id":{"krate":0,"index":2200},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606638,"byte_end":1606652,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"into_recursive","qualname":"<Recursive<Inner, Value> as image::recursive::IntoRecursive>::into_recursive","value":"fn into_recursive(Self) -> Self::Recursive","parent":{"krate":0,"index":2198},"children":[],"decl_id":{"krate":0,"index":2200},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606893,"byte_end":1606903,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"into_tuple","qualname":"<I as image::recursive::IntoTuple>::into_tuple","value":"fn into_tuple(Self) -> <I as IntoNonRecursive>::NonRecursive","parent":{"krate":0,"index":2192},"children":[],"decl_id":{"krate":0,"index":2194},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1607132,"byte_end":1607146,"line_start":74,"line_end":74,"column_start":8,"column_end":22},"name":"into_recursive","qualname":"<() as image::recursive::IntoRecursive>::into_recursive","value":"fn into_recursive(Self) -> Self::Recursive","parent":{"krate":0,"index":2198},"children":[],"decl_id":{"krate":0,"index":2200},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1607261,"byte_end":1607279,"line_start":80,"line_end":80,"column_start":8,"column_end":26},"name":"into_non_recursive","qualname":"<NoneMore as image::recursive::IntoNonRecursive>::into_non_recursive","value":"fn into_non_recursive(Self) -> Self::NonRecursive","parent":{"krate":0,"index":2195},"children":[],"decl_id":{"krate":0,"index":2197},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415962,"byte_end":1415970,"line_start":47,"line_end":47,"column_start":10,"column_end":18},"name":"AnyImage","qualname":"::image::AnyImage","value":"Image<Layers<AnyChannels<Levels<FlatSamples>>>>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains all supported exr features and can represent almost any image.\n It currently does not support deep data yet.\n","sig":null,"attributes":[{"value":"/ This image type contains all supported exr features and can represent almost any image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415812,"byte_end":1415903,"line_start":45,"line_end":45,"column_start":1,"column_end":92}},{"value":"/ It currently does not support deep data yet.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415904,"byte_end":1415952,"line_start":46,"line_end":46,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416200,"byte_end":1416209,"line_start":51,"line_end":51,"column_start":10,"column_end":19},"name":"FlatImage","qualname":"::image::FlatImage","value":"Image<Layers<AnyChannels<FlatSamples>>>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains the most common exr features and can represent almost any plain image.\n Does not contain resolution levels. Does not support deep data.\n","sig":null,"attributes":[{"value":"/ This image type contains the most common exr features and can represent almost any plain image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416023,"byte_end":1416122,"line_start":49,"line_end":49,"column_start":1,"column_end":100}},{"value":"/ Does not contain resolution levels. Does not support deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416123,"byte_end":1416190,"line_start":50,"line_end":50,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":2259},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416367,"byte_end":1416383,"line_start":54,"line_end":54,"column_start":10,"column_end":26},"name":"PixelLayersImage","qualname":"::image::PixelLayersImage","value":"Image<Layers<SpecificChannels<Storage, Channels>>>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains multiple layers, with each layer containing a user-defined type of pixels.\n","sig":null,"attributes":[{"value":"/ This image type contains multiple layers, with each layer containing a user-defined type of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416254,"byte_end":1416357,"line_start":53,"line_end":53,"column_start":1,"column_end":104}}]},{"kind":"Type","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416553,"byte_end":1416563,"line_start":57,"line_end":57,"column_start":10,"column_end":20},"name":"PixelImage","qualname":"::image::PixelImage","value":"Image<Layer<SpecificChannels<Storage, Channels>>>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains a single layer containing a user-defined type of pixels.\n","sig":null,"attributes":[{"value":"/ This image type contains a single layer containing a user-defined type of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416458,"byte_end":1416543,"line_start":56,"line_end":56,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416755,"byte_end":1416770,"line_start":60,"line_end":60,"column_start":10,"column_end":25},"name":"RgbaLayersImage","qualname":"::image::RgbaLayersImage","value":"PixelLayersImage<Storage, RgbaChannels>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains multiple layers, with each layer containing a user-defined type of rgba pixels.\n","sig":null,"attributes":[{"value":"/ This image type contains multiple layers, with each layer containing a user-defined type of rgba pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416637,"byte_end":1416745,"line_start":59,"line_end":59,"column_start":1,"column_end":109}}]},{"kind":"Type","id":{"krate":0,"index":2267},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416924,"byte_end":1416933,"line_start":63,"line_end":63,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::image::RgbaImage","value":"PixelImage<Storage, RgbaChannels>","parent":null,"children":[],"decl_id":null,"docs":" This image type contains a single layer containing a user-defined type of rgba pixels.\n","sig":null,"attributes":[{"value":"/ This image type contains a single layer containing a user-defined type of rgba pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416824,"byte_end":1416914,"line_start":62,"line_end":62,"column_start":1,"column_end":91}}]},{"kind":"Type","id":{"krate":0,"index":2269},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417194,"byte_end":1417206,"line_start":67,"line_end":67,"column_start":10,"column_end":22},"name":"RgbaChannels","qualname":"::image::RgbaChannels","value":"(ChannelDescription, ChannelDescription, ChannelDescription,\nOption<ChannelDescription>)","parent":null,"children":[],"decl_id":null,"docs":" Contains information about the channels in an rgba image, in the order `(red, green, blue, alpha)`.\n The alpha channel is not required. May be `None` if the image did not contain an alpha channel.\n","sig":null,"attributes":[{"value":"/ Contains information about the channels in an rgba image, in the order `(red, green, blue, alpha)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1416981,"byte_end":1417084,"line_start":65,"line_end":65,"column_start":1,"column_end":104}},{"value":"/ The alpha channel is not required. May be `None` if the image did not contain an alpha channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417085,"byte_end":1417184,"line_start":66,"line_end":66,"column_start":1,"column_end":100}}]},{"kind":"Type","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417405,"byte_end":1417416,"line_start":70,"line_end":70,"column_start":10,"column_end":21},"name":"RgbChannels","qualname":"::image::RgbChannels","value":"(ChannelDescription, ChannelDescription, ChannelDescription)","parent":null,"children":[],"decl_id":null,"docs":" Contains information about the channels in an rgb image, in the order `(red, green, blue)`.\n","sig":null,"attributes":[{"value":"/ Contains information about the channels in an rgb image, in the order `(red, green, blue)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417300,"byte_end":1417395,"line_start":69,"line_end":69,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":6117},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417613,"byte_end":1417618,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"Image","qualname":"::image::Image","value":"Image { attributes, layer_data }","parent":null,"children":[{"krate":0,"index":6119},{"krate":0,"index":6120}],"decl_id":null,"docs":" The complete exr image.\n `Layers` can be either a single `Layer` or `Layers`.\n","sig":null,"attributes":[{"value":"/ The complete exr image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417482,"byte_end":1417509,"line_start":72,"line_end":72,"column_start":1,"column_end":28}},{"value":"/ `Layers` can be either a single `Layer` or `Layers`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417510,"byte_end":1417566,"line_start":73,"line_end":73,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417852,"byte_end":1417862,"line_start":81,"line_end":81,"column_start":9,"column_end":19},"name":"attributes","qualname":"::image::Image::attributes","value":"meta::header::ImageAttributes","parent":{"krate":0,"index":6117},"children":[],"decl_id":null,"docs":" Attributes that apply to the whole image file.\n These attributes appear in each layer of the file.\n Excludes technical meta data.\n Each layer in this image also has its own attributes.\n","sig":null,"attributes":[{"value":"/ Attributes that apply to the whole image file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417634,"byte_end":1417684,"line_start":77,"line_end":77,"column_start":5,"column_end":55}},{"value":"/ These attributes appear in each layer of the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417689,"byte_end":1417743,"line_start":78,"line_end":78,"column_start":5,"column_end":59}},{"value":"/ Excludes technical meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417748,"byte_end":1417781,"line_start":79,"line_end":79,"column_start":5,"column_end":38}},{"value":"/ Each layer in this image also has its own attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417786,"byte_end":1417843,"line_start":80,"line_end":80,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":6120},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417998,"byte_end":1418008,"line_start":85,"line_end":85,"column_start":9,"column_end":19},"name":"layer_data","qualname":"::image::Image::layer_data","value":"Layers","parent":{"krate":0,"index":6117},"children":[],"decl_id":null,"docs":" The layers contained in the image file.\n Can be either a single `Layer` or a list of layers.\n","sig":null,"attributes":[{"value":"/ The layers contained in the image file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417886,"byte_end":1417929,"line_start":83,"line_end":83,"column_start":5,"column_end":48}},{"value":"/ Can be either a single `Layer` or a list of layers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1417934,"byte_end":1417989,"line_start":84,"line_end":84,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418107,"byte_end":1418113,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"Layers","qualname":"::image::Layers","value":"SmallVec<[Layer<Channels>; ]>","parent":null,"children":[],"decl_id":null,"docs":" A list of layers. `Channels` can be `SpecificChannels` or `AnyChannels`.\n","sig":null,"attributes":[{"value":"/ A list of layers. `Channels` can be `SpecificChannels` or `AnyChannels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418021,"byte_end":1418097,"line_start":88,"line_end":88,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":6133},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418343,"byte_end":1418348,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Layer","qualname":"::image::Layer","value":"Layer { channel_data, attributes, size, encoding }","parent":null,"children":[{"krate":0,"index":6135},{"krate":0,"index":6136},{"krate":0,"index":6137},{"krate":0,"index":6138}],"decl_id":null,"docs":" A single Layer, including fancy attributes and compression settings.\n `Channels` can be either `SpecificChannels` or `AnyChannels`\n","sig":null,"attributes":[{"value":"/ A single Layer, including fancy attributes and compression settings.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418159,"byte_end":1418231,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ `Channels` can be either `SpecificChannels` or `AnyChannels`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418232,"byte_end":1418296,"line_start":92,"line_end":92,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6135},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418444,"byte_end":1418456,"line_start":97,"line_end":97,"column_start":9,"column_end":21},"name":"channel_data","qualname":"::image::Layer::channel_data","value":"Channels","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" The actual pixel data. Either `SpecificChannels` or `AnyChannels`\n","sig":null,"attributes":[{"value":"/ The actual pixel data. Either `SpecificChannels` or `AnyChannels`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418366,"byte_end":1418435,"line_start":96,"line_end":96,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418801,"byte_end":1418811,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"attributes","qualname":"::image::Layer::attributes","value":"meta::header::LayerAttributes","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" Attributes that apply to this layer.\n May still contain attributes that should be considered global for an image file.\n Excludes technical meta data: Does not contain data window size, line order, tiling, or compression attributes.\n The image also has attributes, which do not differ per layer.\n","sig":null,"attributes":[{"value":"/ Attributes that apply to this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418473,"byte_end":1418513,"line_start":99,"line_end":99,"column_start":5,"column_end":45}},{"value":"/ May still contain attributes that should be considered global for an image file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418518,"byte_end":1418602,"line_start":100,"line_end":100,"column_start":5,"column_end":89}},{"value":"/ Excludes technical meta data: Does not contain data window size, line order, tiling, or compression attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418607,"byte_end":1418722,"line_start":101,"line_end":101,"column_start":5,"column_end":120}},{"value":"/ The image also has attributes, which do not differ per layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418727,"byte_end":1418792,"line_start":102,"line_end":102,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":6137},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418968,"byte_end":1418972,"line_start":107,"line_end":107,"column_start":9,"column_end":13},"name":"size","qualname":"::image::Layer::size","value":"math::Vec2<usize>","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" The pixel resolution of this layer.\n See `layer.attributes` for more attributes, like for example layer position.\n","sig":null,"attributes":[{"value":"/ The pixel resolution of this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418835,"byte_end":1418874,"line_start":105,"line_end":105,"column_start":5,"column_end":44}},{"value":"/ See `layer.attributes` for more attributes, like for example layer position.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418879,"byte_end":1418959,"line_start":106,"line_end":106,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":6138},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419048,"byte_end":1419056,"line_start":110,"line_end":110,"column_start":9,"column_end":17},"name":"encoding","qualname":"::image::Layer::encoding","value":"image::Encoding","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" How the pixels are split up and compressed.\n","sig":null,"attributes":[{"value":"/ How the pixels are split up and compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1418992,"byte_end":1419039,"line_start":109,"line_end":109,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":6151},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419170,"byte_end":1419178,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::image::Encoding","value":"Encoding { compression, blocks, line_order }","parent":null,"children":[{"krate":0,"index":6152},{"krate":0,"index":6153},{"krate":0,"index":6154}],"decl_id":null,"docs":" How the pixels are split up and compressed.\n","sig":null,"attributes":[{"value":"/ How the pixels are split up and compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419070,"byte_end":1419117,"line_start":113,"line_end":113,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":6152},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419350,"byte_end":1419361,"line_start":119,"line_end":119,"column_start":9,"column_end":20},"name":"compression","qualname":"::image::Encoding::compression","value":"compression::Compression","parent":{"krate":0,"index":6151},"children":[],"decl_id":null,"docs":" How the pixel data of all channels in this layer is compressed. May be `Compression::Uncompressed`.\n See `layer.attributes` for more attributes.\n","sig":null,"attributes":[{"value":"/ How the pixel data of all channels in this layer is compressed. May be `Compression::Uncompressed`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419186,"byte_end":1419289,"line_start":117,"line_end":117,"column_start":5,"column_end":108}},{"value":"/ See `layer.attributes` for more attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419294,"byte_end":1419341,"line_start":118,"line_end":118,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6153},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419648,"byte_end":1419654,"line_start":124,"line_end":124,"column_start":9,"column_end":15},"name":"blocks","qualname":"::image::Encoding::blocks","value":"image::Blocks","parent":{"krate":0,"index":6151},"children":[],"decl_id":null,"docs":" Describes how the pixels of this layer are divided into smaller blocks.\n Either splits the image into its scan lines or splits the image into tiles of the specified size.\n A single block can be loaded without processing all bytes of a file.\n","sig":null,"attributes":[{"value":"/ Describes how the pixels of this layer are divided into smaller blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419381,"byte_end":1419456,"line_start":121,"line_end":121,"column_start":5,"column_end":80}},{"value":"/ Either splits the image into its scan lines or splits the image into tiles of the specified size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419461,"byte_end":1419562,"line_start":122,"line_end":122,"column_start":5,"column_end":106}},{"value":"/ A single block can be loaded without processing all bytes of a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419567,"byte_end":1419639,"line_start":123,"line_end":123,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":6154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419845,"byte_end":1419855,"line_start":129,"line_end":129,"column_start":9,"column_end":19},"name":"line_order","qualname":"::image::Encoding::line_order","value":"meta::attribute::LineOrder","parent":{"krate":0,"index":6151},"children":[],"decl_id":null,"docs":" In what order the tiles of this header occur in the file.\n Does not change any actual image orientation.\n See `layer.attributes` for more attributes.\n","sig":null,"attributes":[{"value":"/ In what order the tiles of this header occur in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419669,"byte_end":1419730,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ Does not change any actual image orientation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419735,"byte_end":1419784,"line_start":127,"line_end":127,"column_start":5,"column_end":54}},{"value":"/ See `layer.attributes` for more attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419789,"byte_end":1419836,"line_start":128,"line_end":128,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6165},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420130,"byte_end":1420139,"line_start":138,"line_end":138,"column_start":5,"column_end":14},"name":"ScanLines","qualname":"::image::Blocks::ScanLines","value":"Blocks::ScanLines","parent":{"krate":0,"index":6164},"children":[],"decl_id":null,"docs":" The image is divided into scan line blocks.\n The number of scan lines in a block depends on the compression method.\n","sig":null,"attributes":[{"value":"/ The image is divided into scan line blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419999,"byte_end":1420046,"line_start":136,"line_end":136,"column_start":5,"column_end":52}},{"value":"/ The number of scan lines in a block depends on the compression method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420051,"byte_end":1420125,"line_start":137,"line_end":137,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420444,"byte_end":1420449,"line_start":146,"line_end":146,"column_start":5,"column_end":10},"name":"Tiles","qualname":"::image::Blocks::Tiles","value":"Blocks::Tiles(Vec2<usize>)","parent":{"krate":0,"index":6164},"children":[],"decl_id":null,"docs":" The image is divided into tile blocks.\n Also specifies the size of each tile in the image\n and whether this image contains multiple resolution levels.","sig":null,"attributes":[{"value":"/ The image is divided into tile blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420146,"byte_end":1420188,"line_start":140,"line_end":140,"column_start":5,"column_end":47}},{"value":"/ Also specifies the size of each tile in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420193,"byte_end":1420246,"line_start":141,"line_end":141,"column_start":5,"column_end":58}},{"value":"/ and whether this image contains multiple resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420251,"byte_end":1420314,"line_start":142,"line_end":142,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420319,"byte_end":1420322,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ The inner `Vec2` describes the size of each tile.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420327,"byte_end":1420380,"line_start":144,"line_end":144,"column_start":5,"column_end":58}},{"value":"/ Stays the same number of pixels across all levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420385,"byte_end":1420439,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6169},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420451,"byte_end":1420462,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"0","qualname":"::image::Blocks::Tiles::0","value":"math::Vec2<usize>","parent":{"krate":0,"index":6167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419985,"byte_end":1419991,"line_start":134,"line_end":134,"column_start":10,"column_end":16},"name":"Blocks","qualname":"::image::Blocks","value":"enum Blocks { ScanLines, Tiles(Vec2<usize>), }","parent":null,"children":[{"krate":0,"index":6165},{"krate":0,"index":6167}],"decl_id":null,"docs":" How the image pixels are split up into separate blocks.\n","sig":null,"attributes":[{"value":"/ How the image pixels are split up into separate blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1419871,"byte_end":1419930,"line_start":132,"line_end":132,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420783,"byte_end":1420799,"line_start":154,"line_end":154,"column_start":12,"column_end":28},"name":"SpecificChannels","qualname":"::image::SpecificChannels","value":"SpecificChannels { channels, pixels }","parent":null,"children":[{"krate":0,"index":6185},{"krate":0,"index":6186}],"decl_id":null,"docs":" A grid of pixels. The pixels are written to your custom pixel storage.\n `PixelStorage` can be anything, from a flat `Vec<f16>` to `Vec<Vec<AnySample>>`, as desired.\n In order to write this image to a file, your `PixelStorage` must implement [`GetPixel`].\n","sig":null,"attributes":[{"value":"/ A grid of pixels. The pixels are written to your custom pixel storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420468,"byte_end":1420542,"line_start":150,"line_end":150,"column_start":1,"column_end":75}},{"value":"/ `PixelStorage` can be anything, from a flat `Vec<f16>` to `Vec<Vec<AnySample>>`, as desired.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420543,"byte_end":1420639,"line_start":151,"line_end":151,"column_start":1,"column_end":97}},{"value":"/ In order to write this image to a file, your `PixelStorage` must implement [`GetPixel`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420640,"byte_end":1420732,"line_start":152,"line_end":152,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":6185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421030,"byte_end":1421038,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"name":"channels","qualname":"::image::SpecificChannels::channels","value":"ChannelsDescription","parent":{"krate":0,"index":6182},"children":[],"decl_id":null,"docs":" A description of the channels in the file, as opposed to the channels in memory.\n Should always be a tuple containing `ChannelDescription`s, one description for each channel.\n","sig":null,"attributes":[{"value":"/ A description of the channels in the file, as opposed to the channels in memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420836,"byte_end":1420920,"line_start":156,"line_end":156,"column_start":5,"column_end":89}},{"value":"/ Should always be a tuple containing `ChannelDescription`s, one description for each channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1420925,"byte_end":1421021,"line_start":157,"line_end":157,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":6186},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421283,"byte_end":1421289,"line_start":162,"line_end":162,"column_start":9,"column_end":15},"name":"pixels","qualname":"::image::SpecificChannels::pixels","value":"Pixels","parent":{"krate":0,"index":6182},"children":[],"decl_id":null,"docs":" Your custom pixel storage\n","sig":null,"attributes":[{"value":"/ Your custom pixel storage","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421164,"byte_end":1421193,"line_start":160,"line_end":160,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":6210},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421495,"byte_end":1421506,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"AnyChannels","qualname":"::image::AnyChannels","value":"AnyChannels { list }","parent":null,"children":[{"krate":0,"index":6212}],"decl_id":null,"docs":" A dynamic list of arbitrary channels.\n `Samples` can currently only be `FlatSamples` or `Levels<FlatSamples>`.\n","sig":null,"attributes":[{"value":"/ A dynamic list of arbitrary channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421331,"byte_end":1421372,"line_start":166,"line_end":166,"column_start":1,"column_end":42}},{"value":"/ `Samples` can currently only be `FlatSamples` or `Levels<FlatSamples>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421373,"byte_end":1421448,"line_start":167,"line_end":167,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":6212},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421650,"byte_end":1421654,"line_start":173,"line_end":173,"column_start":9,"column_end":13},"name":"list","qualname":"::image::AnyChannels::list","value":"smallvec::SmallVec<[image::AnyChannel<Samples>; 4]>","parent":{"krate":0,"index":6210},"children":[],"decl_id":null,"docs":" This list must be sorted alphabetically, by channel name.\n Use `AnyChannels::sorted` for automatic sorting.\n","sig":null,"attributes":[{"value":"/ This list must be sorted alphabetically, by channel name.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421523,"byte_end":1421584,"line_start":171,"line_end":171,"column_start":5,"column_end":66}},{"value":"/ Use `AnyChannels::sorted` for automatic sorting.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421589,"byte_end":1421641,"line_start":172,"line_end":172,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":6226},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421847,"byte_end":1421857,"line_start":179,"line_end":179,"column_start":12,"column_end":22},"name":"AnyChannel","qualname":"::image::AnyChannel","value":"AnyChannel { name, sample_data, quantize_linearly, sampling }","parent":null,"children":[{"krate":0,"index":6228},{"krate":0,"index":6229},{"krate":0,"index":6230},{"krate":0,"index":6231}],"decl_id":null,"docs":" A single arbitrary channel.\n `Samples` can currently only be `FlatSamples` or `Levels<FlatSamples>`\n","sig":null,"attributes":[{"value":"/ A single arbitrary channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421694,"byte_end":1421725,"line_start":176,"line_end":176,"column_start":1,"column_end":32}},{"value":"/ `Samples` can currently only be `FlatSamples` or `Levels<FlatSamples>`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421726,"byte_end":1421800,"line_start":177,"line_end":177,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6228},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421928,"byte_end":1421932,"line_start":182,"line_end":182,"column_start":9,"column_end":13},"name":"name","qualname":"::image::AnyChannel::name","value":"meta::attribute::Text","parent":{"krate":0,"index":6226},"children":[],"decl_id":null,"docs":" One of \"R\", \"G\", or \"B\" most of the time.\n","sig":null,"attributes":[{"value":"/ One of \"R\", \"G\", or \"B\" most of the time.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421874,"byte_end":1421919,"line_start":181,"line_end":181,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6229},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422035,"byte_end":1422046,"line_start":186,"line_end":186,"column_start":9,"column_end":20},"name":"sample_data","qualname":"::image::AnyChannel::sample_data","value":"Samples","parent":{"krate":0,"index":6226},"children":[],"decl_id":null,"docs":" The actual pixel data.\n Can be `FlatSamples` or `Levels<FlatSamples>`.\n","sig":null,"attributes":[{"value":"/ The actual pixel data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421945,"byte_end":1421971,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/ Can be `FlatSamples` or `Levels<FlatSamples>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1421976,"byte_end":1422026,"line_start":185,"line_end":185,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":6230},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422384,"byte_end":1422401,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"quantize_linearly","qualname":"::image::AnyChannel::quantize_linearly","value":"bool","parent":{"krate":0,"index":6226},"children":[],"decl_id":null,"docs":" This attribute only tells lossy compression methods\n whether this value should be quantized exponentially or linearly.","sig":null,"attributes":[{"value":"/ This attribute only tells lossy compression methods","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422062,"byte_end":1422117,"line_start":188,"line_end":188,"column_start":5,"column_end":60}},{"value":"/ whether this value should be quantized exponentially or linearly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422122,"byte_end":1422191,"line_start":189,"line_end":189,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422196,"byte_end":1422199,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Should be `false` for red, green, blue and luma channels, as they are not perceived linearly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422204,"byte_end":1422301,"line_start":191,"line_end":191,"column_start":5,"column_end":102}},{"value":"/ Should be `true` for hue, chroma, saturation, and alpha channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422306,"byte_end":1422375,"line_start":192,"line_end":192,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6231},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422764,"byte_end":1422772,"line_start":200,"line_end":200,"column_start":9,"column_end":17},"name":"sampling","qualname":"::image::AnyChannel::sampling","value":"math::Vec2<usize>","parent":{"krate":0,"index":6226},"children":[],"decl_id":null,"docs":" How many of the samples are skipped compared to the other channels in this layer.","sig":null,"attributes":[{"value":"/ How many of the samples are skipped compared to the other channels in this layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422414,"byte_end":1422499,"line_start":195,"line_end":195,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422504,"byte_end":1422507,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Can be used for chroma subsampling for manual lossy data compression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422512,"byte_end":1422585,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ Values other than 1 are allowed only in flat, scan-line based images.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422590,"byte_end":1422663,"line_start":198,"line_end":198,"column_start":5,"column_end":78}},{"value":"/ If an image is deep or tiled, the sampling rates for all of its channels must be 1.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422668,"byte_end":1422755,"line_start":199,"line_end":199,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6246},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423122,"byte_end":1423130,"line_start":210,"line_end":210,"column_start":5,"column_end":13},"name":"Singular","qualname":"::image::Levels::Singular","value":"Levels::Singular(Samples)","parent":{"krate":0,"index":6244},"children":[],"decl_id":null,"docs":" A single image without smaller versions of itself.\n If you only want to handle exclusively this case, use `Samples` directly, and not `Levels<Samples>`.\n","sig":null,"attributes":[{"value":"/ A single image without smaller versions of itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422954,"byte_end":1423008,"line_start":208,"line_end":208,"column_start":5,"column_end":59}},{"value":"/ If you only want to handle exclusively this case, use `Samples` directly, and not `Levels<Samples>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423013,"byte_end":1423117,"line_start":209,"line_end":209,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":6248},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423131,"byte_end":1423138,"line_start":210,"line_end":210,"column_start":14,"column_end":21},"name":"0","qualname":"::image::Levels::Singular::0","value":"Samples","parent":{"krate":0,"index":6246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6249},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423214,"byte_end":1423217,"line_start":213,"line_end":213,"column_start":5,"column_end":8},"name":"Mip","qualname":"::image::Levels::Mip","value":"Levels::Mip { rounding_mode, level_data }","parent":{"krate":0,"index":6244},"children":[],"decl_id":null,"docs":" Contains uniformly scaled smaller versions of the original.\n","sig":null,"attributes":[{"value":"/ Contains uniformly scaled smaller versions of the original.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423146,"byte_end":1423209,"line_start":212,"line_end":212,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6250},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423305,"byte_end":1423318,"line_start":216,"line_end":216,"column_start":9,"column_end":22},"name":"rounding_mode","qualname":"::image::Levels::Mip::rounding_mode","value":"math::RoundingMode","parent":{"krate":0,"index":6249},"children":[],"decl_id":null,"docs":" Whether to round up or down when calculating Mip/Rip levels.\n","sig":null,"attributes":[{"value":"/ Whether to round up or down when calculating Mip/Rip levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423232,"byte_end":1423296,"line_start":215,"line_end":215,"column_start":9,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":6251},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423393,"byte_end":1423403,"line_start":219,"line_end":219,"column_start":9,"column_end":19},"name":"level_data","qualname":"::image::Levels::Mip::level_data","value":"std::vec::Vec<Samples>","parent":{"krate":0,"index":6249},"children":[],"decl_id":null,"docs":" The smaller versions of the original.\n","sig":null,"attributes":[{"value":"/ The smaller versions of the original.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423343,"byte_end":1423384,"line_start":218,"line_end":218,"column_start":9,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":6252},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423515,"byte_end":1423518,"line_start":223,"line_end":223,"column_start":5,"column_end":8},"name":"Rip","qualname":"::image::Levels::Rip","value":"Levels::Rip { rounding_mode, level_data }","parent":{"krate":0,"index":6244},"children":[],"decl_id":null,"docs":" Contains any possible combination of smaller versions of the original.\n","sig":null,"attributes":[{"value":"/ Contains any possible combination of smaller versions of the original.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423436,"byte_end":1423510,"line_start":222,"line_end":222,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6253},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423606,"byte_end":1423619,"line_start":226,"line_end":226,"column_start":9,"column_end":22},"name":"rounding_mode","qualname":"::image::Levels::Rip::rounding_mode","value":"math::RoundingMode","parent":{"krate":0,"index":6252},"children":[],"decl_id":null,"docs":" Whether to round up or down when calculating Mip/Rip levels.\n","sig":null,"attributes":[{"value":"/ Whether to round up or down when calculating Mip/Rip levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423533,"byte_end":1423597,"line_start":225,"line_end":225,"column_start":9,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":6254},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423694,"byte_end":1423704,"line_start":229,"line_end":229,"column_start":9,"column_end":19},"name":"level_data","qualname":"::image::Levels::Rip::level_data","value":"image::RipMaps<Samples>","parent":{"krate":0,"index":6252},"children":[],"decl_id":null,"docs":" The smaller versions of the original.\n","sig":null,"attributes":[{"value":"/ The smaller versions of the original.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423644,"byte_end":1423685,"line_start":228,"line_end":228,"column_start":9,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":6244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422931,"byte_end":1422937,"line_start":206,"line_end":206,"column_start":10,"column_end":16},"name":"Levels","qualname":"::image::Levels","value":"enum Levels<Samples> {\n    Singular(Samples),\n    Mip {\n            rounding_mode: RoundingMode,\n            level_data: LevelMaps<Samples>,\n        },\n    Rip {\n            rounding_mode: RoundingMode,\n            level_data: RipMaps<Samples>,\n        },\n}","parent":null,"children":[{"krate":0,"index":6246},{"krate":0,"index":6249},{"krate":0,"index":6252}],"decl_id":null,"docs":" One or multiple resolution levels of the same image.\n `Samples` can be `FlatSamples`.\n","sig":null,"attributes":[{"value":"/ One or multiple resolution levels of the same image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422790,"byte_end":1422846,"line_start":203,"line_end":203,"column_start":1,"column_end":57}},{"value":"/ `Samples` can be `FlatSamples`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1422847,"byte_end":1422882,"line_start":204,"line_end":204,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423872,"byte_end":1423881,"line_start":235,"line_end":235,"column_start":10,"column_end":19},"name":"LevelMaps","qualname":"::image::LevelMaps","value":"Vec<Samples>","parent":null,"children":[],"decl_id":null,"docs":" A list of resolution levels. `Samples` can currently only be `FlatSamples`.\n","sig":null,"attributes":[{"value":"/ A list of resolution levels. `Samples` can currently only be `FlatSamples`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423733,"byte_end":1423812,"line_start":233,"line_end":233,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6272},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424180,"byte_end":1424187,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"RipMaps","qualname":"::image::RipMaps","value":"RipMaps { map_data, level_count }","parent":null,"children":[{"krate":0,"index":6274},{"krate":0,"index":6275}],"decl_id":null,"docs":" In addition to the full resolution image,\n this layer also contains smaller versions,\n and each smaller version has further versions with varying aspect ratios.\n `Samples` can currently only be `FlatSamples`.\n","sig":null,"attributes":[{"value":"/ In addition to the full resolution image,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423908,"byte_end":1423953,"line_start":237,"line_end":237,"column_start":1,"column_end":46}},{"value":"/ this layer also contains smaller versions,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1423954,"byte_end":1424000,"line_start":238,"line_end":238,"column_start":1,"column_end":47}},{"value":"/ and each smaller version has further versions with varying aspect ratios.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424001,"byte_end":1424078,"line_start":239,"line_end":239,"column_start":1,"column_end":78}},{"value":"/ `Samples` can currently only be `FlatSamples`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424079,"byte_end":1424129,"line_start":240,"line_end":240,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6274},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424266,"byte_end":1424274,"line_start":245,"line_end":245,"column_start":9,"column_end":17},"name":"map_data","qualname":"::image::RipMaps::map_data","value":"std::vec::Vec<Samples>","parent":{"krate":0,"index":6272},"children":[],"decl_id":null,"docs":" A flattened list containing the individual levels\n","sig":null,"attributes":[{"value":"/ A flattened list containing the individual levels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424204,"byte_end":1424257,"line_start":244,"line_end":244,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":6275},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424383,"byte_end":1424394,"line_start":248,"line_end":248,"column_start":9,"column_end":20},"name":"level_count","qualname":"::image::RipMaps::level_count","value":"math::Vec2<usize>","parent":{"krate":0,"index":6272},"children":[],"decl_id":null,"docs":" The number of levels that were generated along the x-axis and y-axis.\n","sig":null,"attributes":[{"value":"/ The number of levels that were generated along the x-axis and y-axis.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424301,"byte_end":1424374,"line_start":247,"line_end":247,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6294},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425058,"byte_end":1425061,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"F16","qualname":"::image::FlatSamples::F16","value":"FlatSamples::F16(Vec<f16>)","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" A vector of non-deep `f16` values.\n","sig":null,"attributes":[{"value":"/ A vector of non-deep `f16` values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425015,"byte_end":1425053,"line_start":270,"line_end":270,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6296},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425062,"byte_end":1425070,"line_start":271,"line_end":271,"column_start":9,"column_end":17},"name":"0","qualname":"::image::FlatSamples::F16::0","value":"std::vec::Vec<half::f16>","parent":{"krate":0,"index":6294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6297},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425121,"byte_end":1425124,"line_start":274,"line_end":274,"column_start":5,"column_end":8},"name":"F32","qualname":"::image::FlatSamples::F32","value":"FlatSamples::F32(Vec<f32>)","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" A vector of non-deep `f32` values.\n","sig":null,"attributes":[{"value":"/ A vector of non-deep `f32` values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425078,"byte_end":1425116,"line_start":273,"line_end":273,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6299},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425125,"byte_end":1425133,"line_start":274,"line_end":274,"column_start":9,"column_end":17},"name":"0","qualname":"::image::FlatSamples::F32::0","value":"std::vec::Vec<f32>","parent":{"krate":0,"index":6297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6300},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425184,"byte_end":1425187,"line_start":277,"line_end":277,"column_start":5,"column_end":8},"name":"U32","qualname":"::image::FlatSamples::U32","value":"FlatSamples::U32(Vec<u32>)","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" A vector of non-deep `u32` values.\n","sig":null,"attributes":[{"value":"/ A vector of non-deep `u32` values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425141,"byte_end":1425179,"line_start":276,"line_end":276,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6302},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425188,"byte_end":1425196,"line_start":277,"line_end":277,"column_start":9,"column_end":17},"name":"0","qualname":"::image::FlatSamples::U32::0","value":"std::vec::Vec<u32>","parent":{"krate":0,"index":6300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6293},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424996,"byte_end":1425007,"line_start":268,"line_end":268,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::image::FlatSamples","value":"enum FlatSamples { F16(Vec<f16>), F32(Vec<f32>), U32(Vec<u32>), }","parent":null,"children":[{"krate":0,"index":6294},{"krate":0,"index":6297},{"krate":0,"index":6300}],"decl_id":null,"docs":" A vector of non-deep values (one value per pixel per channel).\n Stores row after row in a single vector.\n The precision of all values is either `f16`, `f32` or `u32`.","sig":null,"attributes":[{"value":"/ A vector of non-deep values (one value per pixel per channel).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424541,"byte_end":1424607,"line_start":259,"line_end":259,"column_start":1,"column_end":67}},{"value":"/ Stores row after row in a single vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424608,"byte_end":1424652,"line_start":260,"line_end":260,"column_start":1,"column_end":45}},{"value":"/ The precision of all values is either `f16`, `f32` or `u32`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424653,"byte_end":1424717,"line_start":261,"line_end":261,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424718,"byte_end":1424721,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ Since this is close to the pixel layout in the byte file,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424722,"byte_end":1424783,"line_start":263,"line_end":263,"column_start":1,"column_end":62}},{"value":"/ this will most likely be the fastest storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424784,"byte_end":1424833,"line_start":264,"line_end":264,"column_start":1,"column_end":50}},{"value":"/ Using a different storage, for example `SpecificChannels`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424834,"byte_end":1424896,"line_start":265,"line_end":265,"column_start":1,"column_end":63}},{"value":"/ will probably be slower.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1424897,"byte_end":1424925,"line_start":266,"line_end":266,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425925,"byte_end":1425940,"line_start":305,"line_end":305,"column_start":12,"column_end":27},"name":"absolute_bounds","qualname":"<Layer<Channels>>::absolute_bounds","value":"fn absolute_bounds<'_>(&'_ Self) -> IntegerBounds","parent":null,"children":[],"decl_id":null,"docs":" Sometimes called \"data window\"\n","sig":null,"attributes":[{"value":"/ Sometimes called \"data window\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425879,"byte_end":1425913,"line_start":304,"line_end":304,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426383,"byte_end":1426386,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"new","qualname":"<SpecificChannels<SampleStorage, Channels>>::new","value":"fn new(Channels, SampleStorage) -> Self where SampleStorage: GetPixel,\nSampleStorage::Pixel: IntoRecursive, Channels: Sync + Clone + IntoRecursive,\n<Channels as\nIntoRecursive>::Recursive: WritableChannelsDescription<<SampleStorage::Pixel\nas IntoRecursive>::Recursive>","parent":null,"children":[],"decl_id":null,"docs":" Create some pixels with channel information.\n The `Channels` must be a tuple containing either `ChannelDescription` or `Option<ChannelDescription>`.\n The length of the tuple dictates the number of channels in the sample storage.\n","sig":null,"attributes":[{"value":"/ Create some pixels with channel information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426125,"byte_end":1426173,"line_start":312,"line_end":312,"column_start":5,"column_end":53}},{"value":"/ The `Channels` must be a tuple containing either `ChannelDescription` or `Option<ChannelDescription>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426178,"byte_end":1426284,"line_start":313,"line_end":313,"column_start":5,"column_end":111}},{"value":"/ The length of the tuple dictates the number of channels in the sample storage.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426289,"byte_end":1426371,"line_start":314,"line_end":314,"column_start":5,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426973,"byte_end":1426983,"line_start":328,"line_end":328,"column_start":11,"column_end":21},"name":"IntoSample","qualname":"::image::IntoSample","value":"IntoSample: IntoNativeSample","parent":null,"children":[{"krate":0,"index":2330}],"decl_id":null,"docs":" Convert this type into one of the known sample types.\n Also specify the preferred native type, which dictates the default sample type in the image.\n","sig":null,"attributes":[{"value":"/ Convert this type into one of the known sample types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426808,"byte_end":1426865,"line_start":326,"line_end":326,"column_start":1,"column_end":58}},{"value":"/ Also specify the preferred native type, which dictates the default sample type in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426866,"byte_end":1426962,"line_start":327,"line_end":327,"column_start":1,"column_end":97}}]},{"kind":"Const","id":{"krate":0,"index":2330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427086,"byte_end":1427107,"line_start":331,"line_end":331,"column_start":11,"column_end":32},"name":"PREFERRED_SAMPLE_TYPE","qualname":"::image::IntoSample::PREFERRED_SAMPLE_TYPE","value":"SampleType","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" The native sample types that this type should be converted to.\n","sig":null,"attributes":[{"value":"/ The native sample types that this type should be converted to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427009,"byte_end":1427075,"line_start":330,"line_end":330,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":2332},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427156,"byte_end":1427177,"line_start":334,"line_end":334,"column_start":33,"column_end":54},"name":"PREFERRED_SAMPLE_TYPE","qualname":"::<half::f16 as image::IntoSample>::PREFERRED_SAMPLE_TYPE","value":"SampleType","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427243,"byte_end":1427264,"line_start":335,"line_end":335,"column_start":33,"column_end":54},"name":"PREFERRED_SAMPLE_TYPE","qualname":"::<f32 as image::IntoSample>::PREFERRED_SAMPLE_TYPE","value":"SampleType","parent":{"krate":0,"index":2333},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2336},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427330,"byte_end":1427351,"line_start":336,"line_end":336,"column_start":33,"column_end":54},"name":"PREFERRED_SAMPLE_TYPE","qualname":"::<u32 as image::IntoSample>::PREFERRED_SAMPLE_TYPE","value":"SampleType","parent":{"krate":0,"index":2335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6309},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427568,"byte_end":1427591,"line_start":342,"line_end":342,"column_start":12,"column_end":35},"name":"SpecificChannelsBuilder","qualname":"::image::SpecificChannelsBuilder","value":"SpecificChannelsBuilder {  }","parent":null,"children":[{"krate":0,"index":6312},{"krate":0,"index":6313}],"decl_id":null,"docs":" Used to construct a `SpecificChannels`.\n Call `with_named_channel` as many times as desired,\n and then call `with_pixels` to define the colors.\n","sig":null,"attributes":[{"value":"/ Used to construct a `SpecificChannels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427386,"byte_end":1427429,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/ Call `with_named_channel` as many times as desired,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427430,"byte_end":1427485,"line_start":339,"line_end":339,"column_start":1,"column_end":56}},{"value":"/ and then call `with_pixels` to define the colors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427486,"byte_end":1427539,"line_start":340,"line_end":340,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":2337},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427836,"byte_end":1427851,"line_start":349,"line_end":349,"column_start":11,"column_end":26},"name":"CheckDuplicates","qualname":"::image::CheckDuplicates","value":"CheckDuplicates","parent":null,"children":[{"krate":0,"index":2338}],"decl_id":null,"docs":" This check can be executed at compile time\n if the channel names are `&'static str` and the compiler is smart enough.\n","sig":null,"attributes":[{"value":"/ This check can be executed at compile time","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427701,"byte_end":1427747,"line_start":347,"line_end":347,"column_start":1,"column_end":47}},{"value":"/ if the channel names are `&'static str` and the compiler is smart enough.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427748,"byte_end":1427825,"line_start":348,"line_end":348,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427905,"byte_end":1427921,"line_start":352,"line_end":352,"column_start":8,"column_end":24},"name":"already_contains","qualname":"::image::CheckDuplicates::already_contains","value":"fn already_contains<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":0,"index":2337},"children":[],"decl_id":null,"docs":" Check for duplicate channel names.\n","sig":null,"attributes":[{"value":"/ Check for duplicate channel names.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427859,"byte_end":1427897,"line_start":351,"line_end":351,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427997,"byte_end":1428013,"line_start":356,"line_end":356,"column_start":8,"column_end":24},"name":"already_contains","qualname":"<NoneMore as image::CheckDuplicates>::already_contains","value":"fn already_contains<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":0,"index":2337},"children":[],"decl_id":{"krate":0,"index":2338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428147,"byte_end":1428163,"line_start":360,"line_end":360,"column_start":8,"column_end":24},"name":"already_contains","qualname":"<Recursive<Inner, ChannelDescription> as image::CheckDuplicates>::already_contains","value":"fn already_contains<'_, '_>(&'_ Self, &'_ Text) -> bool","parent":{"krate":0,"index":2337},"children":[],"decl_id":{"krate":0,"index":2338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428512,"byte_end":1428517,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"build","qualname":"<SpecificChannels<(), ()>>::build","value":"fn build() -> SpecificChannelsBuilder<NoneMore, NoneMore>","parent":null,"children":[],"decl_id":null,"docs":" Start building some specific channels. On the result of this function,\n call `with_named_channel` as many times as desired,\n and then call `with_pixels` to define the colors.\n","sig":null,"attributes":[{"value":"/ Start building some specific channels. On the result of this function,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428308,"byte_end":1428382,"line_start":367,"line_end":367,"column_start":5,"column_end":79}},{"value":"/ call `with_named_channel` as many times as desired,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428387,"byte_end":1428442,"line_start":368,"line_end":368,"column_start":5,"column_end":60}},{"value":"/ and then call `with_pixels` to define the colors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428447,"byte_end":1428500,"line_start":369,"line_end":369,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429316,"byte_end":1429328,"line_start":384,"line_end":384,"column_start":12,"column_end":24},"name":"with_channel","qualname":"<SpecificChannelsBuilder<RecursiveChannels, RecursivePixel>>::with_channel","value":"fn with_channel<Sample, impl Into<Text>>(Self, impl Into<Text>)\n->\n    SpecificChannelsBuilder<Recursive<RecursiveChannels, ChannelDescription>,\n    Recursive<RecursivePixel, Sample>> where Sample: IntoSample,\nimpl Into<Text>: Into<Text>","parent":null,"children":[],"decl_id":null,"docs":" Add another channel to this image. Does not add the actual pixels,\n but instead only declares the presence of the channel.\n Panics if the name contains unsupported characters.\n Panics if a channel with the same name already exists.\n Use `Text::new_or_none()` to manually handle these cases.\n Use `with_channel_details` instead if you want to specify more options than just the name of the channel.\n The generic parameter can usually be inferred from the closure in `with_pixels`.\n","sig":null,"attributes":[{"value":"/ Add another channel to this image. Does not add the actual pixels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428779,"byte_end":1428849,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/ but instead only declares the presence of the channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428854,"byte_end":1428912,"line_start":378,"line_end":378,"column_start":5,"column_end":63}},{"value":"/ Panics if the name contains unsupported characters.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428917,"byte_end":1428972,"line_start":379,"line_end":379,"column_start":5,"column_end":60}},{"value":"/ Panics if a channel with the same name already exists.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428977,"byte_end":1429035,"line_start":380,"line_end":380,"column_start":5,"column_end":63}},{"value":"/ Use `Text::new_or_none()` to manually handle these cases.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429040,"byte_end":1429101,"line_start":381,"line_end":381,"column_start":5,"column_end":66}},{"value":"/ Use `with_channel_details` instead if you want to specify more options than just the name of the channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429106,"byte_end":1429215,"line_start":382,"line_end":382,"column_start":5,"column_end":114}},{"value":"/ The generic parameter can usually be inferred from the closure in `with_pixels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429220,"byte_end":1429304,"line_start":383,"line_end":383,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430044,"byte_end":1430064,"line_start":395,"line_end":395,"column_start":12,"column_end":32},"name":"with_channel_details","qualname":"<SpecificChannelsBuilder<RecursiveChannels, RecursivePixel>>::with_channel_details","value":"fn with_channel_details<Sample>(Self, ChannelDescription)\n->\n    SpecificChannelsBuilder<Recursive<RecursiveChannels, ChannelDescription>,\n    Recursive<RecursivePixel, Sample>> where Sample: Into<Sample>","parent":null,"children":[],"decl_id":null,"docs":" Add another channel to this image. Does not add the actual pixels,\n but instead only declares the presence of the channel.\n Use `with_channel` instead if you only want to specify the name of the channel.\n Panics if a channel with the same name already exists.\n The generic parameter can usually be inferred from the closure in `with_pixels`.\n","sig":null,"attributes":[{"value":"/ Add another channel to this image. Does not add the actual pixels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429659,"byte_end":1429729,"line_start":390,"line_end":390,"column_start":5,"column_end":75}},{"value":"/ but instead only declares the presence of the channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429734,"byte_end":1429792,"line_start":391,"line_end":391,"column_start":5,"column_end":63}},{"value":"/ Use `with_channel` instead if you only want to specify the name of the channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429797,"byte_end":1429880,"line_start":392,"line_end":392,"column_start":5,"column_end":88}},{"value":"/ Panics if a channel with the same name already exists.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429885,"byte_end":1429943,"line_start":393,"line_end":393,"column_start":5,"column_end":63}},{"value":"/ The generic parameter can usually be inferred from the closure in `with_pixels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1429948,"byte_end":1430032,"line_start":394,"line_end":394,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431181,"byte_end":1431192,"line_start":413,"line_end":413,"column_start":12,"column_end":23},"name":"with_pixels","qualname":"<SpecificChannelsBuilder<RecursiveChannels, RecursivePixel>>::with_pixels","value":"fn with_pixels<Pixels>(Self, Pixels)\n-> SpecificChannels<Pixels, RecursiveChannels> where Pixels: GetPixel,\n<Pixels as GetPixel>::Pixel: IntoRecursive<Recursive = RecursivePixel>","parent":null,"children":[],"decl_id":null,"docs":" Specify the actual pixel contents of the image.\n You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> Pixel`),\n or you can pass your own image if it implements `GetPixel`.\n The pixel type must be a tuple with the correct number of entries, depending on the number of channels.\n The tuple entries can be either `f16`, `f32`, `u32` or `Sample`.\n Use `with_pixel_fn` instead of this function, to get extra type safety for your pixel closure.\n","sig":null,"attributes":[{"value":"/ Specify the actual pixel contents of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430665,"byte_end":1430716,"line_start":407,"line_end":407,"column_start":5,"column_end":56}},{"value":"/ You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> Pixel`),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430721,"byte_end":1430813,"line_start":408,"line_end":408,"column_start":5,"column_end":97}},{"value":"/ or you can pass your own image if it implements `GetPixel`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430818,"byte_end":1430881,"line_start":409,"line_end":409,"column_start":5,"column_end":68}},{"value":"/ The pixel type must be a tuple with the correct number of entries, depending on the number of channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430886,"byte_end":1430993,"line_start":410,"line_end":410,"column_start":5,"column_end":112}},{"value":"/ The tuple entries can be either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1430998,"byte_end":1431066,"line_start":411,"line_end":411,"column_start":5,"column_end":73}},{"value":"/ Use `with_pixel_fn` instead of this function, to get extra type safety for your pixel closure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431071,"byte_end":1431169,"line_start":412,"line_end":412,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432110,"byte_end":1432123,"line_start":430,"line_end":430,"column_start":12,"column_end":25},"name":"with_pixel_fn","qualname":"<SpecificChannelsBuilder<RecursiveChannels, RecursivePixel>>::with_pixel_fn","value":"fn with_pixel_fn<Pixel, Pixels>(Self, Pixels)\n-> SpecificChannels<Pixels, RecursiveChannels> where Pixels: Sync +\nFn(Vec2<usize>) -> Pixel, Pixel: IntoRecursive<Recursive = RecursivePixel>","parent":null,"children":[],"decl_id":null,"docs":" Specify the contents of the image.\n The pixel type must be a tuple with the correct number of entries, depending on the number of channels.\n The tuple entries can be either `f16`, `f32`, `u32` or `Sample`.\n Use `with_pixels` instead of this function, if you want to pass an object that is not a closure.","sig":null,"attributes":[{"value":"/ Specify the contents of the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431496,"byte_end":1431534,"line_start":422,"line_end":422,"column_start":5,"column_end":43}},{"value":"/ The pixel type must be a tuple with the correct number of entries, depending on the number of channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431539,"byte_end":1431646,"line_start":423,"line_end":423,"column_start":5,"column_end":112}},{"value":"/ The tuple entries can be either `f16`, `f32`, `u32` or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431651,"byte_end":1431719,"line_start":424,"line_end":424,"column_start":5,"column_end":73}},{"value":"/ Use `with_pixels` instead of this function, if you want to pass an object that is not a closure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431724,"byte_end":1431824,"line_start":425,"line_end":425,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431829,"byte_end":1431832,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Usually, the compiler can infer the type of the pixel (for example, `f16,f32,f32`) from the closure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431837,"byte_end":1431941,"line_start":427,"line_end":427,"column_start":5,"column_end":109}},{"value":"/ If that's not possible, you can specify the type of the channels","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1431946,"byte_end":1432014,"line_start":428,"line_end":428,"column_start":5,"column_end":73}},{"value":"/ when declaring the channel (for example, `with_named_channel::<f32>(\"R\")`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432019,"byte_end":1432098,"line_start":429,"line_end":429,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432926,"byte_end":1432930,"line_start":449,"line_end":449,"column_start":12,"column_end":16},"name":"rgba","qualname":"<SpecificChannels<SampleStorage,\n(ChannelDescription, ChannelDescription, ChannelDescription,\nChannelDescription)>>::rgba","value":"fn rgba<R, G, B, A>(SampleStorage) -> Self where R: IntoSample, G: IntoSample,\nB: IntoSample, A: IntoSample, SampleStorage: GetPixel<Pixel = (R, G, B, A)>","parent":null,"children":[],"decl_id":null,"docs":" Create an image with red, green, blue, and alpha channels.\n You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> (R,G,B,A)`),\n or you can pass your own image if it implements `GetPixel<Pixel=(R,G,B,A)>`.\n Each of `R`, `G`, `B` and `A` can be either `f16`, `f32`, `u32`, or `Sample`.\n","sig":null,"attributes":[{"value":"/ Create an image with red, green, blue, and alpha channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432580,"byte_end":1432642,"line_start":445,"line_end":445,"column_start":5,"column_end":67}},{"value":"/ You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> (R,G,B,A)`),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432647,"byte_end":1432743,"line_start":446,"line_end":446,"column_start":5,"column_end":101}},{"value":"/ or you can pass your own image if it implements `GetPixel<Pixel=(R,G,B,A)>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432748,"byte_end":1432828,"line_start":447,"line_end":447,"column_start":5,"column_end":85}},{"value":"/ Each of `R`, `G`, `B` and `A` can be either `f16`, `f32`, `u32`, or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432833,"byte_end":1432914,"line_start":448,"line_end":448,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2368},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434007,"byte_end":1434010,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"rgb","qualname":"<SpecificChannels<SampleStorage,\n(ChannelDescription, ChannelDescription, ChannelDescription)>>::rgb","value":"fn rgb<R, G, B>(SampleStorage) -> Self where R: IntoSample, G: IntoSample,\nB: IntoSample, SampleStorage: GetPixel<Pixel = (R, G, B)>","parent":null,"children":[],"decl_id":null,"docs":" Create an image with red, green, and blue channels.\n You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> (R,G,B)`),\n or you can pass your own image if it implements `GetPixel<Pixel=(R,G,B)>`.\n Each of `R`, `G` and `B` can be either `f16`, `f32`, `u32`, or `Sample`.\n","sig":null,"attributes":[{"value":"/ Create an image with red, green, and blue channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433677,"byte_end":1433732,"line_start":471,"line_end":471,"column_start":5,"column_end":60}},{"value":"/ You can pass a closure that returns a color for each pixel (`Fn(Vec2<usize>) -> (R,G,B)`),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433737,"byte_end":1433831,"line_start":472,"line_end":472,"column_start":5,"column_end":99}},{"value":"/ or you can pass your own image if it implements `GetPixel<Pixel=(R,G,B)>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433836,"byte_end":1433914,"line_start":473,"line_end":473,"column_start":5,"column_end":83}},{"value":"/ Each of `R`, `G` and `B` can be either `f16`, `f32`, `u32`, or `Sample`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433919,"byte_end":1433995,"line_start":474,"line_end":474,"column_start":5,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":2372},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434646,"byte_end":1434662,"line_start":493,"line_end":493,"column_start":10,"column_end":26},"name":"FlatSamplesPixel","qualname":"::image::FlatSamplesPixel","value":"SmallVec<[Sample; ]>","parent":null,"children":[],"decl_id":null,"docs":" A list of samples representing a single pixel.\n Does not heap allocate for images with 8 or fewer channels.\n","sig":null,"attributes":[{"value":"/ A list of samples representing a single pixel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434522,"byte_end":1434572,"line_start":491,"line_end":491,"column_start":1,"column_end":51}},{"value":"/ Does not heap allocate for images with 8 or fewer channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434573,"byte_end":1434636,"line_start":492,"line_end":492,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434826,"byte_end":1434839,"line_start":499,"line_end":499,"column_start":12,"column_end":25},"name":"sample_vec_at","qualname":"<Layer<AnyChannels<FlatSamples>>>::sample_vec_at","value":"fn sample_vec_at<'_>(&'_ Self, Vec2<usize>) -> FlatSamplesPixel","parent":null,"children":[],"decl_id":null,"docs":" Use `samples_at` if you can borrow from this layer\n","sig":null,"attributes":[{"value":"/ Use `samples_at` if you can borrow from this layer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434760,"byte_end":1434814,"line_start":498,"line_end":498,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435013,"byte_end":1435023,"line_start":504,"line_end":504,"column_start":12,"column_end":22},"name":"samples_at","qualname":"<Layer<AnyChannels<FlatSamples>>>::samples_at","value":"fn samples_at<'_>(&'_ Self, Vec2<usize>) -> FlatSampleIterator","parent":null,"children":[],"decl_id":null,"docs":" Lookup all channels of a single pixel in the image\n","sig":null,"attributes":[{"value":"/ Lookup all channels of a single pixel in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434947,"byte_end":1435001,"line_start":503,"line_end":503,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6318},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435319,"byte_end":1435337,"line_start":515,"line_end":515,"column_start":12,"column_end":30},"name":"FlatSampleIterator","qualname":"::image::FlatSampleIterator","value":"FlatSampleIterator {  }","parent":null,"children":[{"krate":0,"index":6320},{"krate":0,"index":6321},{"krate":0,"index":6322}],"decl_id":null,"docs":" Iterate over all channels of a single pixel in the image\n","sig":null,"attributes":[{"value":"/ Iterate over all channels of a single pixel in the image","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435206,"byte_end":1435266,"line_start":513,"line_end":513,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2379},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435523,"byte_end":1435527,"line_start":524,"line_end":524,"column_start":8,"column_end":12},"name":"next","qualname":"<FlatSampleIterator as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1436076,"byte_end":1436080,"line_start":539,"line_end":539,"column_start":12,"column_end":16},"name":"sort","qualname":"<AnyChannels<SampleData>>::sort","value":"fn sort(SmallVec<[AnyChannel<SampleData>; ]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A new list of arbitrary channels. Sorts the list to make it alphabetically stable.\n","sig":null,"attributes":[{"value":"/ A new list of arbitrary channels. Sorts the list to make it alphabetically stable.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435978,"byte_end":1436064,"line_start":538,"line_end":538,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1436445,"byte_end":1436454,"line_start":549,"line_end":549,"column_start":12,"column_end":21},"name":"get_level","qualname":"<Levels<LevelSamples>>::get_level","value":"fn get_level<'_>(&'_ Self, Vec2<usize>) -> Result<&'_ LevelSamples>","parent":null,"children":[],"decl_id":null,"docs":" Get a resolution level by index, sorted by size, decreasing.\n","sig":null,"attributes":[{"value":"/ Get a resolution level by index, sorted by size, decreasing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1436369,"byte_end":1436433,"line_start":548,"line_end":548,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1437264,"byte_end":1437277,"line_start":569,"line_end":569,"column_start":12,"column_end":25},"name":"get_level_mut","qualname":"<Levels<LevelSamples>>::get_level_mut","value":"fn get_level_mut<'_>(&'_ mut Self, Vec2<usize>)\n-> Result<&'_ mut LevelSamples>","parent":null,"children":[],"decl_id":null,"docs":" Get a resolution level by index, sorted by size, decreasing.\n","sig":null,"attributes":[{"value":"/ Get a resolution level by index, sorted by size, decreasing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1437148,"byte_end":1437212,"line_start":567,"line_end":567,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1438076,"byte_end":1438091,"line_start":588,"line_end":588,"column_start":12,"column_end":27},"name":"levels_as_slice","qualname":"<Levels<LevelSamples>>::levels_as_slice","value":"fn levels_as_slice<'_>(&'_ Self) -> &'_ [LevelSamples]","parent":null,"children":[],"decl_id":null,"docs":" Get a slice of all resolution levels, sorted by size, decreasing.\n","sig":null,"attributes":[{"value":"/ Get a slice of all resolution levels, sorted by size, decreasing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1437995,"byte_end":1438064,"line_start":587,"line_end":587,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1438443,"byte_end":1438462,"line_start":597,"line_end":597,"column_start":12,"column_end":31},"name":"levels_as_slice_mut","qualname":"<Levels<LevelSamples>>::levels_as_slice_mut","value":"fn levels_as_slice_mut<'_>(&'_ mut Self) -> &'_ mut [LevelSamples]","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable slice of all resolution levels, sorted by size, decreasing.\n","sig":null,"attributes":[{"value":"/ Get a mutable slice of all resolution levels, sorted by size, decreasing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1438354,"byte_end":1438431,"line_start":596,"line_end":596,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439390,"byte_end":1439400,"line_start":616,"line_end":616,"column_start":12,"column_end":22},"name":"level_mode","qualname":"<Levels<LevelSamples>>::level_mode","value":"fn level_mode<'_>(&'_ Self) -> LevelMode","parent":null,"children":[],"decl_id":null,"docs":" Whether this stores multiple resolution levels.\n","sig":null,"attributes":[{"value":"/ Whether this stores multiple resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439327,"byte_end":1439378,"line_start":615,"line_end":615,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439733,"byte_end":1439748,"line_start":628,"line_end":628,"column_start":12,"column_end":27},"name":"get_level_index","qualname":"<RipMaps<Samples>>::get_level_index","value":"fn get_level_index<'_>(&'_ Self, Vec2<usize>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Flatten the 2D level index to a one dimensional index.\n","sig":null,"attributes":[{"value":"/ Flatten the 2D level index to a one dimensional index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439663,"byte_end":1439721,"line_start":627,"line_end":627,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439934,"byte_end":1439946,"line_start":633,"line_end":633,"column_start":12,"column_end":24},"name":"get_by_level","qualname":"<RipMaps<Samples>>::get_by_level","value":"fn get_by_level<'_>(&'_ Self, Vec2<usize>) -> Option<&'_ Samples>","parent":null,"children":[],"decl_id":null,"docs":" Return a level by level index. Level `0` has the largest resolution.\n","sig":null,"attributes":[{"value":"/ Return a level by level index. Level `0` has the largest resolution.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439850,"byte_end":1439922,"line_start":632,"line_end":632,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440164,"byte_end":1440180,"line_start":638,"line_end":638,"column_start":12,"column_end":28},"name":"get_by_level_mut","qualname":"<RipMaps<Samples>>::get_by_level_mut","value":"fn get_by_level_mut<'_>(&'_ mut Self, Vec2<usize>) -> Option<&'_ mut Samples>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable level reference by level index. Level `0` has the largest resolution.\n","sig":null,"attributes":[{"value":"/ Return a mutable level reference by level index. Level `0` has the largest resolution.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440062,"byte_end":1440152,"line_start":637,"line_end":637,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440491,"byte_end":1440494,"line_start":648,"line_end":648,"column_start":12,"column_end":15},"name":"len","qualname":"<FlatSamples>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of samples in the image. Should be the width times the height.\n Might vary when subsampling is used.\n","sig":null,"attributes":[{"value":"/ The number of samples in the image. Should be the width times the height.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440357,"byte_end":1440434,"line_start":646,"line_end":646,"column_start":5,"column_end":82}},{"value":"/ Might vary when subsampling is used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440439,"byte_end":1440479,"line_start":647,"line_end":647,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440893,"byte_end":1440906,"line_start":659,"line_end":659,"column_start":12,"column_end":25},"name":"values_as_f32","qualname":"<FlatSamples>::values_as_f32","value":"fn values_as_f32<'s>(&'s Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Views all samples in this storage as f32.\n Matches the underlying sample type again for every sample,\n match yourself if performance is critical! Does not allocate.\n","sig":null,"attributes":[{"value":"/ Views all samples in this storage as f32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440699,"byte_end":1440744,"line_start":656,"line_end":656,"column_start":5,"column_end":50}},{"value":"/ Matches the underlying sample type again for every sample,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440749,"byte_end":1440811,"line_start":657,"line_end":657,"column_start":5,"column_end":67}},{"value":"/ match yourself if performance is critical! Does not allocate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440816,"byte_end":1440881,"line_start":658,"line_end":658,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441213,"byte_end":1441219,"line_start":666,"line_end":666,"column_start":12,"column_end":18},"name":"values","qualname":"<FlatSamples>::values","value":"fn values<'s>(&'s Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" All samples in this storage as iterator.\n Matches the underlying sample type again for every sample,\n match yourself if performance is critical! Does not allocate.\n","sig":null,"attributes":[{"value":"/ All samples in this storage as iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441020,"byte_end":1441064,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/ Matches the underlying sample type again for every sample,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441069,"byte_end":1441131,"line_start":664,"line_end":664,"column_start":5,"column_end":67}},{"value":"/ match yourself if performance is critical! Does not allocate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441136,"byte_end":1441201,"line_start":665,"line_end":665,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441551,"byte_end":1441570,"line_start":673,"line_end":673,"column_start":12,"column_end":31},"name":"value_by_flat_index","qualname":"<FlatSamples>::value_by_flat_index","value":"fn value_by_flat_index<'_>(&'_ Self, usize) -> Sample","parent":null,"children":[],"decl_id":null,"docs":" Lookup a single value, by flat index.\n The flat index can be obtained using `Vec2::flatten_for_width`\n which computes the index in a flattened array of pixel rows.\n","sig":null,"attributes":[{"value":"/ Lookup a single value, by flat index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441358,"byte_end":1441399,"line_start":670,"line_end":670,"column_start":5,"column_end":46}},{"value":"/ The flat index can be obtained using `Vec2::flatten_for_width`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441404,"byte_end":1441470,"line_start":671,"line_end":671,"column_start":5,"column_end":71}},{"value":"/ which computes the index in a flattened array of pixel rows.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441475,"byte_end":1441539,"line_start":672,"line_end":672,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1442044,"byte_end":1442047,"line_start":687,"line_end":687,"column_start":12,"column_end":15},"name":"new","qualname":"<Layer<ChannelData>>::new","value":"fn new<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>, LayerAttributes,\nEncoding, ChannelData) -> Self where ChannelData: WritableChannels,\nimpl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Create a layer with the specified size, attributes, encoding and channels.\n The channels can be either `SpecificChannels` or `AnyChannels`.\n","sig":null,"attributes":[{"value":"/ Create a layer with the specified size, attributes, encoding and channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441882,"byte_end":1441960,"line_start":685,"line_end":685,"column_start":5,"column_end":83}},{"value":"/ The channels can be either `SpecificChannels` or `AnyChannels`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441965,"byte_end":1442032,"line_start":686,"line_end":686,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1442437,"byte_end":1442459,"line_start":700,"line_end":700,"column_start":12,"column_end":34},"name":"levels_with_resolution","qualname":"<Layer<ChannelData>>::levels_with_resolution","value":"fn levels_with_resolution<'l, L, '_>(&'_ Self, &'l Levels<L>)\n-> Box<dyn Iterator<Item = (&'l L, Vec2<usize>)> + 'l>","parent":null,"children":[],"decl_id":null,"docs":" Panics for images with Scanline encoding.\n","sig":null,"attributes":[{"value":"/ Panics for images with Scanline encoding.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1442380,"byte_end":1442425,"line_start":699,"line_end":699,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2419},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443264,"byte_end":1443276,"line_start":721,"line_end":721,"column_start":15,"column_end":27},"name":"UNCOMPRESSED","qualname":"::image::Encoding::UNCOMPRESSED","value":"Encoding","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" No compression. Massive space requirements.\n Fast, because it minimizes data shuffling and reallocation.\n","sig":null,"attributes":[{"value":"/ No compression. Massive space requirements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443134,"byte_end":1443181,"line_start":719,"line_end":719,"column_start":5,"column_end":52}},{"value":"/ Fast, because it minimizes data shuffling and reallocation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443186,"byte_end":1443249,"line_start":720,"line_end":720,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":2420},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443706,"byte_end":1443719,"line_start":729,"line_end":729,"column_start":15,"column_end":28},"name":"FAST_LOSSLESS","qualname":"::image::Encoding::FAST_LOSSLESS","value":"Encoding","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" Run-length encoding with tiles of 64x64 pixels. This is the recommended default encoding.\n Almost as fast as uncompressed data, but optimizes single-colored areas such as mattes and masks.\n","sig":null,"attributes":[{"value":"/ Run-length encoding with tiles of 64x64 pixels. This is the recommended default encoding.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443492,"byte_end":1443585,"line_start":727,"line_end":727,"column_start":5,"column_end":98}},{"value":"/ Almost as fast as uncompressed data, but optimizes single-colored areas such as mattes and masks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443590,"byte_end":1443691,"line_start":728,"line_end":728,"column_start":5,"column_end":106}}]},{"kind":"Const","id":{"krate":0,"index":2421},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444031,"byte_end":1444045,"line_start":736,"line_end":736,"column_start":15,"column_end":29},"name":"SMALL_LOSSLESS","qualname":"::image::Encoding::SMALL_LOSSLESS","value":"Encoding","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" ZIP compression with blocks of 16 lines. Slow, but produces small files without visible artefacts.\n","sig":null,"attributes":[{"value":"/ ZIP compression with blocks of 16 lines. Slow, but produces small files without visible artefacts.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443914,"byte_end":1444016,"line_start":735,"line_end":735,"column_start":5,"column_end":107}}]},{"kind":"Const","id":{"krate":0,"index":2422},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444363,"byte_end":1444382,"line_start":743,"line_end":743,"column_start":15,"column_end":34},"name":"SMALL_FAST_LOSSLESS","qualname":"::image::Encoding::SMALL_FAST_LOSSLESS","value":"Encoding","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":" PIZ compression with tiles of 256x256 pixels. Small images, not too slow.\n","sig":null,"attributes":[{"value":"/ PIZ compression with tiles of 256x256 pixels. Small images, not too slow.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444271,"byte_end":1444348,"line_start":742,"line_end":742,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444580,"byte_end":1444587,"line_start":751,"line_end":751,"column_start":8,"column_end":15},"name":"default","qualname":"<Encoding as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444857,"byte_end":1444860,"line_start":756,"line_end":756,"column_start":12,"column_end":15},"name":"new","qualname":"<Image<LayerData>>::new","value":"fn new(ImageAttributes, LayerData) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an image with one or multiple layers. The layer can be a `Layer`, or `Layers` small vector, or `Vec<Layer>` or `&[Layer]`.\n","sig":null,"attributes":[{"value":"/ Create an image with one or multiple layers. The layer can be a `Layer`, or `Layers` small vector, or `Vec<Layer>` or `&[Layer]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444712,"byte_end":1444845,"line_start":755,"line_end":755,"column_start":5,"column_end":138}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445234,"byte_end":1445245,"line_start":764,"line_end":764,"column_start":12,"column_end":23},"name":"from_layers","qualname":"<Image<Layers<Channels>>>::from_layers","value":"fn from_layers<impl Into<Layers<Channels>>>(ImageAttributes,\nimpl Into<Layers<Channels>>) -> Self where\nimpl Into<Layers<Channels>>: Into<Layers<Channels>>","parent":null,"children":[],"decl_id":null,"docs":" Create an image with multiple layers. The layer can be a `Vec<Layer>` or `Layers` (a small vector).\n","sig":null,"attributes":[{"value":"/ Create an image with multiple layers. The layer can be a `Vec<Layer>` or `Layers` (a small vector).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445119,"byte_end":1445222,"line_start":763,"line_end":763,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":2437},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445592,"byte_end":1445602,"line_start":773,"line_end":773,"column_start":12,"column_end":22},"name":"from_layer","qualname":"<Image<Layer<ChannelData>>>::from_layer","value":"fn from_layer(Layer<ChannelData>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Uses the display position and size to the channel position and size of the layer.\n","sig":null,"attributes":[{"value":"/ Uses the display position and size to the channel position and size of the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445495,"byte_end":1445580,"line_start":772,"line_end":772,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445830,"byte_end":1445851,"line_start":779,"line_end":779,"column_start":12,"column_end":33},"name":"from_encoded_channels","qualname":"<Image<Layer<ChannelData>>>::from_encoded_channels","value":"fn from_encoded_channels<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>,\nEncoding, ChannelData) -> Self where impl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Uses empty attributes.\n","sig":null,"attributes":[{"value":"/ Uses empty attributes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445792,"byte_end":1445818,"line_start":778,"line_end":778,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446158,"byte_end":1446171,"line_start":785,"line_end":785,"column_start":12,"column_end":25},"name":"from_channels","qualname":"<Image<Layer<ChannelData>>>::from_channels","value":"fn from_channels<impl Into<Vec2<usize>>>(impl Into<Vec2<usize>>, ChannelData)\n-> Self where impl Into<Vec2<usize>>: Into<Vec2<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Uses empty attributes and fast compression.\n","sig":null,"attributes":[{"value":"/ Uses empty attributes and fast compression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446099,"byte_end":1446146,"line_start":784,"line_end":784,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2443},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446554,"byte_end":1446559,"line_start":795,"line_end":795,"column_start":12,"column_end":17},"name":"empty","qualname":"<Image<NoneMore>>::empty","value":"fn empty(ImageAttributes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty image, to be filled with layers later on. Add at least one layer to obtain a valid image.\n Call `with_layer(another_layer)` for each layer you want to add to this image.\n","sig":null,"attributes":[{"value":"/ Create an empty image, to be filled with layers later on. Add at least one layer to obtain a valid image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446346,"byte_end":1446455,"line_start":793,"line_end":793,"column_start":5,"column_end":114}},{"value":"/ Call `with_layer(another_layer)` for each layer you want to add to this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446460,"byte_end":1446542,"line_start":794,"line_end":794,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446869,"byte_end":1446879,"line_start":803,"line_end":803,"column_start":12,"column_end":22},"name":"with_layer","qualname":"<Image<InnerLayers>>::with_layer","value":"fn with_layer<NewChannels>(Self, Layer<NewChannels>)\n-> Image<Recursive<InnerLayers, Layer<NewChannels>>> where NewChannels: 's +\nWritableChannels","parent":null,"children":[],"decl_id":null,"docs":" Add another layer to this image. The layer type does\n not have to equal the existing layers in this image.\n","sig":null,"attributes":[{"value":"/ Add another layer to this image. The layer type does","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446740,"byte_end":1446796,"line_start":801,"line_end":801,"column_start":5,"column_end":61}},{"value":"/ not have to equal the existing layers in this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446801,"byte_end":1446857,"line_start":802,"line_end":802,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447597,"byte_end":1447600,"line_start":823,"line_end":823,"column_start":12,"column_end":15},"name":"new","qualname":"<AnyChannel<SampleData>>::new","value":"fn new<impl Into<Text>>(impl Into<Text>, SampleData) -> Self where\nSampleData: WritableSamples, impl Into<Text>: Into<Text>","parent":null,"children":[],"decl_id":null,"docs":" Create a new channel without subsampling.","sig":null,"attributes":[{"value":"/ Create a new channel without subsampling.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447241,"byte_end":1447286,"line_start":817,"line_end":817,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447291,"byte_end":1447294,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ Automatically flags this channel for specialized compression","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447299,"byte_end":1447363,"line_start":819,"line_end":819,"column_start":5,"column_end":69}},{"value":"/ if the name is \"R\", \"G\", \"B\", \"Y\", or \"L\",","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447368,"byte_end":1447414,"line_start":820,"line_end":820,"column_start":5,"column_end":51}},{"value":"/ as they typically encode values that are perceived non-linearly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447419,"byte_end":1447487,"line_start":821,"line_end":821,"column_start":5,"column_end":73}},{"value":"/ Construct the value yourself using `AnyChannel { .. }`, if you want to control this flag.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447492,"byte_end":1447585,"line_start":822,"line_end":822,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2455},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1448272,"byte_end":1448275,"line_start":842,"line_end":842,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FlatSamples as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449095,"byte_end":1449111,"line_start":865,"line_end":865,"column_start":9,"column_end":25},"name":"validate_results","qualname":"::image::validate_results","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","parent":null,"children":[{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2465},{"krate":0,"index":2468},{"krate":0,"index":2471},{"krate":0,"index":6337},{"krate":0,"index":6340},{"krate":0,"index":6342},{"krate":0,"index":6344},{"krate":0,"index":6345},{"krate":0,"index":6347},{"krate":0,"index":6348},{"krate":0,"index":6351},{"krate":0,"index":6354},{"krate":0,"index":6355},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2478},{"krate":0,"index":2482},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":2492},{"krate":0,"index":2496},{"krate":0,"index":2499},{"krate":0,"index":2502},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2517},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2529},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538}],"decl_id":null,"docs":" Compare the result of a round trip test with the original method.\n Supports lossy compression methods.\n","sig":null,"attributes":[{"value":"/ Compare the result of a round trip test with the original method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1448934,"byte_end":1449003,"line_start":862,"line_end":862,"column_start":1,"column_end":70}},{"value":"/ Supports lossy compression methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449004,"byte_end":1449043,"line_start":863,"line_end":863,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":2471},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449449,"byte_end":1449463,"line_start":876,"line_end":876,"column_start":15,"column_end":29},"name":"ValidateResult","qualname":"::image::validate_results::ValidateResult","value":"ValidateResult","parent":null,"children":[{"krate":0,"index":2472},{"krate":0,"index":2473}],"decl_id":null,"docs":" Compare two objects, but with a few special quirks.\n Intended mainly for unit testing.\n","sig":null,"attributes":[{"value":"/ Compare two objects, but with a few special quirks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449337,"byte_end":1449392,"line_start":874,"line_end":874,"column_start":5,"column_end":60}},{"value":"/ Intended mainly for unit testing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449397,"byte_end":1449434,"line_start":875,"line_end":875,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450047,"byte_end":1450067,"line_start":888,"line_end":888,"column_start":12,"column_end":32},"name":"assert_equals_result","qualname":"::image::validate_results::ValidateResult::assert_equals_result","value":"fn assert_equals_result<'_, '_>(&'_ Self, &'_ Self)","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Compare self with the other. Panics if not equal.","sig":null,"attributes":[{"value":"/ Compare self with the other. Panics if not equal.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449475,"byte_end":1449528,"line_start":878,"line_end":878,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449537,"byte_end":1449540,"line_start":879,"line_end":879,"column_start":9,"column_end":12}},{"value":"/ Exceptional behaviour:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449549,"byte_end":1449575,"line_start":880,"line_end":880,"column_start":9,"column_end":35}},{"value":"/ This does not work the other way around! This method is not symmetrical!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449584,"byte_end":1449660,"line_start":881,"line_end":881,"column_start":9,"column_end":85}},{"value":"/ Returns whether the result is correct for this image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449669,"byte_end":1449726,"line_start":882,"line_end":882,"column_start":9,"column_end":66}},{"value":"/ For lossy compression methods, uses approximate equality.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449735,"byte_end":1449796,"line_start":883,"line_end":883,"column_start":9,"column_end":70}},{"value":"/ Intended for unit testing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449805,"byte_end":1449835,"line_start":884,"line_end":884,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449844,"byte_end":1449847,"line_start":885,"line_end":885,"column_start":9,"column_end":12}},{"value":"/ Warning: If you use `SpecificChannels`, the comparison might be inaccurate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449856,"byte_end":1449934,"line_start":886,"line_end":886,"column_start":9,"column_end":87}},{"value":"/ for images with mixed compression methods. This is to be used with `AnyChannels` mainly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1449943,"byte_end":1450035,"line_start":887,"line_end":887,"column_start":9,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450784,"byte_end":1450799,"line_start":900,"line_end":900,"column_start":12,"column_end":27},"name":"validate_result","qualname":"::image::validate_results::ValidateResult::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Compare self with the other.\n Exceptional behaviour:\n - Any two NaN values are considered equal, regardless of bit representation.\n - If a `lossy` is specified, any two values that differ only by a small amount will be considered equal.\n - If `nan_to_zero` is true, and __self is NaN/Infinite and the other value is zero, they are considered equal__\n   (because some compression methods replace nan with zero)","sig":null,"attributes":[{"value":"/ Compare self with the other.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450207,"byte_end":1450239,"line_start":892,"line_end":892,"column_start":9,"column_end":41}},{"value":"/ Exceptional behaviour:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450248,"byte_end":1450274,"line_start":893,"line_end":893,"column_start":9,"column_end":35}},{"value":"/ - Any two NaN values are considered equal, regardless of bit representation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450283,"byte_end":1450363,"line_start":894,"line_end":894,"column_start":9,"column_end":89}},{"value":"/ - If a `lossy` is specified, any two values that differ only by a small amount will be considered equal.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450372,"byte_end":1450480,"line_start":895,"line_end":895,"column_start":9,"column_end":117}},{"value":"/ - If `nan_to_zero` is true, and __self is NaN/Infinite and the other value is zero, they are considered equal__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450489,"byte_end":1450604,"line_start":896,"line_end":896,"column_start":9,"column_end":124}},{"value":"/   (because some compression methods replace nan with zero)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450613,"byte_end":1450675,"line_start":897,"line_end":897,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450684,"byte_end":1450687,"line_start":898,"line_end":898,"column_start":9,"column_end":12}},{"value":"/ This does not work the other way around! This method is not symmetrical!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450696,"byte_end":1450772,"line_start":899,"line_end":899,"column_start":9,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":6337},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451084,"byte_end":1451101,"line_start":909,"line_end":909,"column_start":16,"column_end":33},"name":"ValidationOptions","qualname":"::image::validate_results::ValidationOptions","value":"ValidationOptions {  }","parent":null,"children":[{"krate":0,"index":6338},{"krate":0,"index":6339}],"decl_id":null,"docs":" Whether to do accurate or approximate comparison.\n","sig":null,"attributes":[{"value":"/ Whether to do accurate or approximate comparison.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1450951,"byte_end":1451004,"line_start":907,"line_end":907,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":2474},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451236,"byte_end":1451252,"line_start":915,"line_end":915,"column_start":14,"column_end":30},"name":"ValidationResult","qualname":"::image::validate_results::ValidationResult","value":"std::result::Result<(), String>","parent":null,"children":[],"decl_id":null,"docs":" If invalid, contains the error message.\n","sig":null,"attributes":[{"value":"/ If invalid, contains the error message.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451179,"byte_end":1451222,"line_start":914,"line_end":914,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451367,"byte_end":1451382,"line_start":919,"line_end":919,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Image<C> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2481},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451845,"byte_end":1451860,"line_start":928,"line_end":928,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Layer<AnyChannels<S>> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1453591,"byte_end":1453606,"line_start":961,"line_end":961,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Layer<SpecificChannels<Px, Desc>> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":" This does an approximate comparison for all channels,\n even if some channels can be compressed without loss.\n","sig":null,"attributes":[{"value":"/ This does an approximate comparison for all channels,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1453456,"byte_end":1453513,"line_start":959,"line_end":959,"column_start":9,"column_end":66}},{"value":"/ even if some channels can be compressed without loss.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1453522,"byte_end":1453579,"line_start":960,"line_end":960,"column_start":9,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1454892,"byte_end":1454907,"line_start":985,"line_end":985,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<AnyChannels<S> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455166,"byte_end":1455181,"line_start":991,"line_end":991,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<AnyChannel<S> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455815,"byte_end":1455830,"line_start":1002,"line_end":1002,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<SpecificChannels<Pxs, Chans> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456211,"byte_end":1456226,"line_start":1009,"line_end":1009,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Levels<S> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456496,"byte_end":1456511,"line_start":1015,"line_end":1015,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<FlatSamples as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1457375,"byte_end":1457390,"line_start":1027,"line_end":1027,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<&'_ [T] as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1457944,"byte_end":1457959,"line_start":1039,"line_end":1039,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<SmallVec<A> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1458223,"byte_end":1458238,"line_start":1045,"line_end":1045,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Vec<A> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1458599,"byte_end":1458614,"line_start":1051,"line_end":1051,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<(A, B, C, D) as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1458972,"byte_end":1458987,"line_start":1057,"line_end":1057,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<(A, B, C) as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459742,"byte_end":1459757,"line_start":1076,"line_end":1076,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<NoneMore as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459964,"byte_end":1459979,"line_start":1080,"line_end":1080,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Recursive<Inner, T> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1460348,"byte_end":1460363,"line_start":1088,"line_end":1088,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Option<S> as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1460755,"byte_end":1460770,"line_start":1098,"line_end":1098,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<f32 as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1461720,"byte_end":1461735,"line_start":1120,"line_end":1120,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<f16 as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1462050,"byte_end":1462065,"line_start":1128,"line_end":1128,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<u32 as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1462418,"byte_end":1462433,"line_start":1136,"line_end":1136,"column_start":12,"column_end":27},"name":"validate_result","qualname":"<Sample as image::validate_results::ValidateResult>::validate_result","value":"fn validate_result<'_, '_>(&'_ Self, &'_ Self, ValidationOptions, String)\n-> ValidationResult","parent":{"krate":0,"index":2471},"children":[],"decl_id":{"krate":0,"index":2473},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2551},{"krate":0,"index":2554},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2563},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":6357},{"krate":0,"index":6369},{"krate":0,"index":2569},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588}],"decl_id":null,"docs":" Error type definitions.\n","sig":null,"attributes":[{"value":"/ Error type definitions.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1613867,"byte_end":1613894,"line_start":2,"line_end":2,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":2566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614174,"byte_end":1614180,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A result that may contain an exr error.\n","sig":null,"attributes":[{"value":"/ A result that may contain an exr error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614121,"byte_end":1614164,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614308,"byte_end":1614318,"line_start":20,"line_end":20,"column_start":10,"column_end":20},"name":"UnitResult","qualname":"::error::UnitResult","value":"Result<()>","parent":null,"children":[],"decl_id":null,"docs":" A result that, if ok, contains nothing, and otherwise contains an exr error.\n","sig":null,"attributes":[{"value":"/ A result that, if ok, contains nothing, and otherwise contains an exr error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614218,"byte_end":1614298,"line_start":19,"line_end":19,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6358},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614785,"byte_end":1614792,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"Aborted","qualname":"::error::Error::Aborted","value":"Error::Aborted","parent":{"krate":0,"index":6357},"children":[],"decl_id":null,"docs":" Reading or Writing the file has been aborted by the caller.\n This error will never be triggered by this crate itself,\n only by users of this library.\n It exists to be returned from a progress callback.\n","sig":null,"attributes":[{"value":"/ Reading or Writing the file has been aborted by the caller.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614554,"byte_end":1614617,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ This error will never be triggered by this crate itself,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614622,"byte_end":1614682,"line_start":30,"line_end":30,"column_start":5,"column_end":65}},{"value":"/ only by users of this library.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614687,"byte_end":1614721,"line_start":31,"line_end":31,"column_start":5,"column_end":39}},{"value":"/ It exists to be returned from a progress callback.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614726,"byte_end":1614780,"line_start":32,"line_end":32,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6360},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614984,"byte_end":1614996,"line_start":38,"line_end":38,"column_start":5,"column_end":17},"name":"NotSupported","qualname":"::error::Error::NotSupported","value":"Error::NotSupported(Cow)","parent":{"krate":0,"index":6357},"children":[],"decl_id":null,"docs":" The contents of the file are not supported by\n this specific implementation of open exr,\n even though the data may be valid.\n","sig":null,"attributes":[{"value":"/ The contents of the file are not supported by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614837,"byte_end":1614886,"line_start":35,"line_end":35,"column_start":5,"column_end":54}},{"value":"/ this specific implementation of open exr,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614891,"byte_end":1614936,"line_start":36,"line_end":36,"column_start":5,"column_end":50}},{"value":"/ even though the data may be valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614941,"byte_end":1614979,"line_start":37,"line_end":37,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6362},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614997,"byte_end":1615014,"line_start":38,"line_end":38,"column_start":18,"column_end":35},"name":"0","qualname":"::error::Error::NotSupported::0","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":6360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6363},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615152,"byte_end":1615159,"line_start":42,"line_end":42,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::error::Error::Invalid","value":"Error::Invalid(Cow)","parent":{"krate":0,"index":6357},"children":[],"decl_id":null,"docs":" The contents of the image are contradicting or insufficient.\n Also returned for `ErrorKind::UnexpectedEof` errors.\n","sig":null,"attributes":[{"value":"/ The contents of the image are contradicting or insufficient.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615022,"byte_end":1615086,"line_start":40,"line_end":40,"column_start":5,"column_end":69}},{"value":"/ Also returned for `ErrorKind::UnexpectedEof` errors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615091,"byte_end":1615147,"line_start":41,"line_end":41,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":6365},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615160,"byte_end":1615177,"line_start":42,"line_end":42,"column_start":13,"column_end":30},"name":"0","qualname":"::error::Error::Invalid::0","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":6363},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6366},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615304,"byte_end":1615306,"line_start":46,"line_end":46,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::Error::Io","value":"Error::Io(IoError)","parent":{"krate":0,"index":6357},"children":[],"decl_id":null,"docs":" The underlying byte stream could not be read successfully,\n probably due to file system related errors.\n","sig":null,"attributes":[{"value":"/ The underlying byte stream could not be read successfully,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615185,"byte_end":1615247,"line_start":44,"line_end":44,"column_start":5,"column_end":67}},{"value":"/ probably due to file system related errors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615252,"byte_end":1615299,"line_start":45,"line_end":45,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6368},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615307,"byte_end":1615314,"line_start":46,"line_end":46,"column_start":8,"column_end":15},"name":"0","qualname":"::error::Error::Io::0","value":"std::io::Error","parent":{"krate":0,"index":6366},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614541,"byte_end":1614546,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"enum Error { Aborted, NotSupported(Cow), Invalid(Cow), Io(IoError), }","parent":null,"children":[{"krate":0,"index":6358},{"krate":0,"index":6360},{"krate":0,"index":6363},{"krate":0,"index":6366}],"decl_id":null,"docs":" An error that may happen while reading or writing an exr file.\n Distinguishes between three types of errors:\n unsupported features, invalid data, and file system errors.\n","sig":null,"attributes":[{"value":"/ An error that may happen while reading or writing an exr file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614335,"byte_end":1614401,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ Distinguishes between three types of errors:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614402,"byte_end":1614450,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/ unsupported features, invalid data, and file system errors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1614451,"byte_end":1614514,"line_start":25,"line_end":25,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615787,"byte_end":1615791,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(IoError) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616093,"byte_end":1616097,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(TryFromIntError) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616213,"byte_end":1616219,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"source","qualname":"<Error as std::error::Error>::source","value":"fn source<'_>(&'_ Self) -> Option<&'_ dyn error::Error + 'static>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2581},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616416,"byte_end":1616419,"line_start":92,"line_end":92,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10305},"children":[],"decl_id":{"krate":2,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2589},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2710},{"krate":0,"index":2868},{"krate":0,"index":2931},{"krate":0,"index":3001},{"krate":0,"index":3072},{"krate":0,"index":3073},{"krate":0,"index":3076},{"krate":0,"index":3079},{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3086},{"krate":0,"index":3089},{"krate":0,"index":3092},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3099},{"krate":0,"index":3102},{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3108},{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3115},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3134},{"krate":0,"index":3137},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":6617},{"krate":0,"index":6622},{"krate":0,"index":6624},{"krate":0,"index":6625},{"krate":0,"index":6626},{"krate":0,"index":6628},{"krate":0,"index":6631},{"krate":0,"index":6632},{"krate":0,"index":6635},{"krate":0,"index":6637},{"krate":0,"index":6640},{"krate":0,"index":6642},{"krate":0,"index":6643},{"krate":0,"index":6645},{"krate":0,"index":6646},{"krate":0,"index":6649},{"krate":0,"index":3146},{"krate":0,"index":3148},{"krate":0,"index":3151},{"krate":0,"index":3155}],"decl_id":null,"docs":" This is the low-level interface for the raw blocks of an image.\n See `exr::image` module for a high-level interface.","sig":null,"attributes":[{"value":"/ This is the low-level interface for the raw blocks of an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1617876,"byte_end":1617943,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ See `exr::image` module for a high-level interface.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1617944,"byte_end":1617999,"line_start":2,"line_end":2,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618000,"byte_end":1618003,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Handle compressed and uncompressed pixel byte blocks. Includes compression and decompression,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618004,"byte_end":1618101,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ and reading a complete image into blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618102,"byte_end":1618147,"line_start":5,"line_end":5,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618148,"byte_end":1618151,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Start with the `block::read(...)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618152,"byte_end":1618189,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/ and `block::write(...)` functions.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618190,"byte_end":1618228,"line_start":8,"line_end":8,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":2590},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::block::writer","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","parent":null,"children":[{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2633},{"krate":0,"index":2636},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2643},{"krate":0,"index":2646},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":6371},{"krate":0,"index":6378},{"krate":0,"index":6381},{"krate":0,"index":6388},{"krate":0,"index":2655},{"krate":0,"index":2668},{"krate":0,"index":2672},{"krate":0,"index":2679},{"krate":0,"index":6393},{"krate":0,"index":6400},{"krate":0,"index":2685},{"krate":0,"index":6404},{"krate":0,"index":6409},{"krate":0,"index":2693},{"krate":0,"index":6413},{"krate":0,"index":6425},{"krate":0,"index":2699}],"decl_id":null,"docs":" Composable structures to handle writing an image.\n","sig":null,"attributes":[{"value":"/ Composable structures to handle writing an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1628903,"byte_end":1628956,"line_start":1,"line_end":1,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":2652},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1629619,"byte_end":1629636,"line_start":22,"line_end":22,"column_start":8,"column_end":25},"name":"write_chunks_with","qualname":"::block::writer::write_chunks_with","value":"fn write_chunks_with<W,\nimpl FnOnce(MetaData, &mut ChunkWriter<W>) -> UnitResult>(W, Headers, bool,\nimpl FnOnce(MetaData, &mut ChunkWriter<W>) -> UnitResult) -> UnitResult where\nW: Write + Seek,\nimpl FnOnce(MetaData, &mut ChunkWriter<W>) -> UnitResult: for<'_> FnOnce(MetaData,\n&'_ mut ChunkWriter<W>) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Write an exr file by writing one chunk after another in a closure.\n In the closure, you are provided a chunk writer, which should be used to write all the chunks.\n Assumes the your write destination is buffered.\n","sig":null,"attributes":[{"value":"/ Write an exr file by writing one chunk after another in a closure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1629390,"byte_end":1629460,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ In the closure, you are provided a chunk writer, which should be used to write all the chunks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1629461,"byte_end":1629559,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ Assumes the your write destination is buffered.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1629560,"byte_end":1629611,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":6371},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630475,"byte_end":1630486,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"ChunkWriter","qualname":"::block::writer::ChunkWriter","value":"ChunkWriter {  }","parent":null,"children":[{"krate":0,"index":6373},{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6376},{"krate":0,"index":6377}],"decl_id":null,"docs":" Can consume compressed pixel chunks, writing them a file.\n Use `sequential_blocks_compressor` or `parallel_blocks_compressor` to compress your data,\n or use `compress_all_blocks_sequential` or `compress_all_blocks_parallel`.\n Use `on_progress` to obtain a new writer\n that triggers a callback for each block.\n","sig":null,"attributes":[{"value":"/ Can consume compressed pixel chunks, writing them a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630095,"byte_end":1630156,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/ Use `sequential_blocks_compressor` or `parallel_blocks_compressor` to compress your data,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630157,"byte_end":1630250,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ or use `compress_all_blocks_sequential` or `compress_all_blocks_parallel`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630251,"byte_end":1630329,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ Use `on_progress` to obtain a new writer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630330,"byte_end":1630374,"line_start":35,"line_end":35,"column_start":1,"column_end":45}},{"value":"/ that triggers a callback for each block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630375,"byte_end":1630419,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630452,"byte_end":1630463,"line_start":39,"line_end":39,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6381},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630824,"byte_end":1630845,"line_start":52,"line_end":52,"column_start":12,"column_end":33},"name":"OnProgressChunkWriter","qualname":"::block::writer::OnProgressChunkWriter","value":"OnProgressChunkWriter {  }","parent":null,"children":[{"krate":0,"index":6385},{"krate":0,"index":6386},{"krate":0,"index":6387}],"decl_id":null,"docs":" A new writer that triggers a callback\n for each block written to the inner writer.\n","sig":null,"attributes":[{"value":"/ A new writer that triggers a callback","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630694,"byte_end":1630735,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/ for each block written to the inner writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630736,"byte_end":1630783,"line_start":49,"line_end":49,"column_start":1,"column_end":48}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630801,"byte_end":1630812,"line_start":51,"line_end":51,"column_start":1,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631047,"byte_end":1631059,"line_start":60,"line_end":60,"column_start":11,"column_end":23},"name":"ChunksWriter","qualname":"::block::writer::ChunksWriter","value":"ChunksWriter: Sized","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666}],"decl_id":null,"docs":" Write chunks to a byte destination.\n Then write each chunk with `writer.write_chunk(chunk)`.\n","sig":null,"attributes":[{"value":"/ Write chunks to a byte destination.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630937,"byte_end":1630976,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/ Then write each chunk with `writer.write_chunk(chunk)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1630977,"byte_end":1631036,"line_start":59,"line_end":59,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631149,"byte_end":1631167,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"total_chunks_count","qualname":"::block::writer::ChunksWriter::total_chunks_count","value":"fn total_chunks_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" The total number of chunks that the complete file will contain.\n","sig":null,"attributes":[{"value":"/ The total number of chunks that the complete file will contain.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631074,"byte_end":1631141,"line_start":62,"line_end":62,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2657},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631460,"byte_end":1631471,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"write_chunk","qualname":"::block::writer::ChunksWriter::write_chunk","value":"fn write_chunk<'_>(&'_ mut Self, usize, Chunk) -> UnitResult","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Any more calls will result in an error and have no effect.\n If writing results in an error, the file and the writer\n may remain in an invalid state and should not be used further.\n Errors when the chunk at this index was already written.\n","sig":null,"attributes":[{"value":"/ Any more calls will result in an error and have no effect.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631190,"byte_end":1631252,"line_start":65,"line_end":65,"column_start":5,"column_end":67}},{"value":"/ If writing results in an error, the file and the writer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631257,"byte_end":1631316,"line_start":66,"line_end":66,"column_start":5,"column_end":64}},{"value":"/ may remain in an invalid state and should not be used further.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631321,"byte_end":1631387,"line_start":67,"line_end":67,"column_start":5,"column_end":71}},{"value":"/ Errors when the chunk at this index was already written.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631392,"byte_end":1631452,"line_start":68,"line_end":68,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631665,"byte_end":1631676,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"on_progress","qualname":"::block::writer::ChunksWriter::on_progress","value":"fn on_progress<F, '_>(&'_ mut Self, F) -> OnProgressChunkWriter where\nF: FnMut(f64) -> ()","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Obtain a new writer that calls the specified closure for each block that is written to this writer.\n","sig":null,"attributes":[{"value":"/ Obtain a new writer that calls the specified closure for each block that is written to this writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631554,"byte_end":1631657,"line_start":71,"line_end":71,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631968,"byte_end":1631996,"line_start":77,"line_end":77,"column_start":8,"column_end":36},"name":"sequential_blocks_compressor","qualname":"::block::writer::ChunksWriter::sequential_blocks_compressor","value":"fn sequential_blocks_compressor<'w>(&'w mut Self, &'w MetaData)\n-> SequentialBlocksCompressor","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Obtain a new writer that can compress blocks to chunks, which are then passed to this writer.\n","sig":null,"attributes":[{"value":"/ Obtain a new writer that can compress blocks to chunks, which are then passed to this writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631863,"byte_end":1631960,"line_start":76,"line_end":76,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632404,"byte_end":1632430,"line_start":83,"line_end":83,"column_start":8,"column_end":34},"name":"parallel_blocks_compressor","qualname":"::block::writer::ChunksWriter::parallel_blocks_compressor","value":"fn parallel_blocks_compressor<'w>(&'w mut Self, &'w MetaData)\n-> Option<ParallelBlocksCompressor>","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Obtain a new writer that can compress blocks to chunks on multiple threads, which are then passed to this writer.\n Returns none if the sequential compressor should be used instead (thread pool creation failure or too large performance overhead).\n","sig":null,"attributes":[{"value":"/ Obtain a new writer that can compress blocks to chunks on multiple threads, which are then passed to this writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632140,"byte_end":1632257,"line_start":81,"line_end":81,"column_start":5,"column_end":122}},{"value":"/ Returns none if the sequential compressor should be used instead (thread pool creation failure or too large performance overhead).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632262,"byte_end":1632396,"line_start":82,"line_end":82,"column_start":5,"column_end":139}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1633012,"byte_end":1633042,"line_start":95,"line_end":95,"column_start":8,"column_end":38},"name":"compress_all_blocks_sequential","qualname":"::block::writer::ChunksWriter::compress_all_blocks_sequential","value":"fn compress_all_blocks_sequential<'_,\nimpl Iterator<Item = (usize, UncompressedBlock)>>(Self, &'_ MetaData,\nimpl Iterator<Item = (usize, UncompressedBlock)>) -> UnitResult where\nimpl Iterator<Item = (usize, UncompressedBlock)>: Iterator<Item =\n(usize, UncompressedBlock)>","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Compresses all blocks to the file.\n The index of the block must be in increasing line order within the header.\n Obtain iterator with `MetaData::collect_ordered_blocks(...)` or similar methods.\n","sig":null,"attributes":[{"value":"/ Compresses all blocks to the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632794,"byte_end":1632832,"line_start":92,"line_end":92,"column_start":5,"column_end":43}},{"value":"/ The index of the block must be in increasing line order within the header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632837,"byte_end":1632915,"line_start":93,"line_end":93,"column_start":5,"column_end":83}},{"value":"/ Obtain iterator with `MetaData::collect_ordered_blocks(...)` or similar methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1632920,"byte_end":1633004,"line_start":94,"line_end":94,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1633721,"byte_end":1633749,"line_start":110,"line_end":110,"column_start":8,"column_end":36},"name":"compress_all_blocks_parallel","qualname":"::block::writer::ChunksWriter::compress_all_blocks_parallel","value":"fn compress_all_blocks_parallel<'_,\nimpl Iterator<Item = (usize, UncompressedBlock)>>(Self, &'_ MetaData,\nimpl Iterator<Item = (usize, UncompressedBlock)>) -> UnitResult where\nimpl Iterator<Item = (usize, UncompressedBlock)>: Iterator<Item =\n(usize, UncompressedBlock)>","parent":{"krate":0,"index":2655},"children":[],"decl_id":null,"docs":" Compresses all blocks to the file.\n The index of the block must be in increasing line order within the header.\n Obtain iterator with `MetaData::collect_ordered_blocks(...)` or similar methods.\n","sig":null,"attributes":[{"value":"/ Compresses all blocks to the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1633503,"byte_end":1633541,"line_start":107,"line_end":107,"column_start":5,"column_end":43}},{"value":"/ The index of the block must be in increasing line order within the header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1633546,"byte_end":1633624,"line_start":108,"line_end":108,"column_start":5,"column_end":83}},{"value":"/ Obtain iterator with `MetaData::collect_ordered_blocks(...)` or similar methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1633629,"byte_end":1633713,"line_start":109,"line_end":109,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634517,"byte_end":1634535,"line_start":130,"line_end":130,"column_start":8,"column_end":26},"name":"total_chunks_count","qualname":"<ChunkWriter<W> as block::writer::ChunksWriter>::total_chunks_count","value":"fn total_chunks_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2655},"children":[],"decl_id":{"krate":0,"index":2656},"docs":" The total number of chunks that the complete file will contain.\n","sig":null,"attributes":[{"value":"/ The total number of chunks that the complete file will contain.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634442,"byte_end":1634509,"line_start":129,"line_end":129,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634848,"byte_end":1634859,"line_start":136,"line_end":136,"column_start":8,"column_end":19},"name":"write_chunk","qualname":"<ChunkWriter<W> as block::writer::ChunksWriter>::write_chunk","value":"fn write_chunk<'_>(&'_ mut Self, usize, Chunk) -> UnitResult","parent":{"krate":0,"index":2655},"children":[],"decl_id":{"krate":0,"index":2657},"docs":" Any more calls will result in an error and have no effect.\n If writing results in an error, the file and the writer\n may remain in an invalid state and should not be used further.\n Errors when the chunk at this index was already written.\n","sig":null,"attributes":[{"value":"/ Any more calls will result in an error and have no effect.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634578,"byte_end":1634640,"line_start":132,"line_end":132,"column_start":5,"column_end":67}},{"value":"/ If writing results in an error, the file and the writer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634645,"byte_end":1634704,"line_start":133,"line_end":133,"column_start":5,"column_end":64}},{"value":"/ may remain in an invalid state and should not be used further.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634709,"byte_end":1634775,"line_start":134,"line_end":134,"column_start":5,"column_end":71}},{"value":"/ Errors when the chunk at this index was already written.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634780,"byte_end":1634840,"line_start":135,"line_end":135,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1638502,"byte_end":1638520,"line_start":218,"line_end":218,"column_start":8,"column_end":26},"name":"total_chunks_count","qualname":"<OnProgressChunkWriter as block::writer::ChunksWriter>::total_chunks_count","value":"fn total_chunks_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2655},"children":[],"decl_id":{"krate":0,"index":2656},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1638600,"byte_end":1638611,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"write_chunk","qualname":"<OnProgressChunkWriter as block::writer::ChunksWriter>::write_chunk","value":"fn write_chunk<'_>(&'_ mut Self, usize, Chunk) -> UnitResult","parent":{"krate":0,"index":2655},"children":[],"decl_id":{"krate":0,"index":2657},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6393},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639457,"byte_end":1639475,"line_start":247,"line_end":247,"column_start":12,"column_end":30},"name":"SortedBlocksWriter","qualname":"::block::writer::SortedBlocksWriter","value":"SortedBlocksWriter {  }","parent":null,"children":[{"krate":0,"index":6396},{"krate":0,"index":6397},{"krate":0,"index":6398},{"krate":0,"index":6399}],"decl_id":null,"docs":" Write blocks that appear in any order and reorder them before writing.\n","sig":null,"attributes":[{"value":"/ Write blocks that appear in any order and reorder them before writing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639342,"byte_end":1639416,"line_start":244,"line_end":244,"column_start":1,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639434,"byte_end":1639445,"line_start":246,"line_end":246,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639861,"byte_end":1639864,"line_start":258,"line_end":258,"column_start":12,"column_end":15},"name":"new","qualname":"<SortedBlocksWriter>::new","value":"fn new<'_>(&'_ MetaData, &'w mut W) -> SortedBlocksWriter","parent":null,"children":[],"decl_id":null,"docs":" New sorting writer. Returns `None` if sorting is not required.\n","sig":null,"attributes":[{"value":"/ New sorting writer. Returns `None` if sorting is not required.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639783,"byte_end":1639849,"line_start":257,"line_end":257,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1640466,"byte_end":1640486,"line_start":273,"line_end":273,"column_start":12,"column_end":32},"name":"write_or_stash_chunk","qualname":"<SortedBlocksWriter>::write_or_stash_chunk","value":"fn write_or_stash_chunk<'_>(&'_ mut Self, usize, usize, Chunk) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Write the chunk or stash it. In the closure, write all chunks that can be written now.\n","sig":null,"attributes":[{"value":"/ Write the chunk or stash it. In the closure, write all chunks that can be written now.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1640364,"byte_end":1640454,"line_start":272,"line_end":272,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1641820,"byte_end":1641839,"line_start":304,"line_end":304,"column_start":12,"column_end":31},"name":"inner_chunks_writer","qualname":"<SortedBlocksWriter>::inner_chunks_writer","value":"fn inner_chunks_writer<'_>(&'_ Self) -> &'_ W","parent":null,"children":[],"decl_id":null,"docs":" Where the chunks will be written to.\n","sig":null,"attributes":[{"value":"/ Where the chunks will be written to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1641768,"byte_end":1641808,"line_start":303,"line_end":303,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":6404},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1641987,"byte_end":1642013,"line_start":314,"line_end":314,"column_start":12,"column_end":38},"name":"SequentialBlocksCompressor","qualname":"::block::writer::SequentialBlocksCompressor","value":"SequentialBlocksCompressor {  }","parent":null,"children":[{"krate":0,"index":6407},{"krate":0,"index":6408}],"decl_id":null,"docs":" Compress blocks to a chunk writer in this thread.\n","sig":null,"attributes":[{"value":"/ Compress blocks to a chunk writer in this thread.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1641893,"byte_end":1641946,"line_start":311,"line_end":311,"column_start":1,"column_end":54}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1641964,"byte_end":1641975,"line_start":313,"line_end":313,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642194,"byte_end":1642197,"line_start":322,"line_end":322,"column_start":12,"column_end":15},"name":"new","qualname":"<SequentialBlocksCompressor>::new","value":"fn new(&'w MetaData, &'w mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" New blocks writer.\n","sig":null,"attributes":[{"value":"/ New blocks writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642160,"byte_end":1642182,"line_start":321,"line_end":321,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642358,"byte_end":1642377,"line_start":325,"line_end":325,"column_start":12,"column_end":31},"name":"inner_chunks_writer","qualname":"<SequentialBlocksCompressor>::inner_chunks_writer","value":"fn inner_chunks_writer(&'w Self) -> &'w W","parent":null,"children":[],"decl_id":null,"docs":" This is where the compressed blocks are written to.\n","sig":null,"attributes":[{"value":"/ This is where the compressed blocks are written to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642291,"byte_end":1642346,"line_start":324,"line_end":324,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642534,"byte_end":1642548,"line_start":328,"line_end":328,"column_start":12,"column_end":26},"name":"compress_block","qualname":"<SequentialBlocksCompressor>::compress_block","value":"fn compress_block<'_>(&'_ mut Self, usize, UncompressedBlock) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block immediately. The index of the block must be in increasing line order.\n","sig":null,"attributes":[{"value":"/ Compress a single block immediately. The index of the block must be in increasing line order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642425,"byte_end":1642522,"line_start":327,"line_end":327,"column_start":5,"column_end":102}}]},{"kind":"Struct","id":{"krate":0,"index":6413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642898,"byte_end":1642922,"line_start":339,"line_end":339,"column_start":12,"column_end":36},"name":"ParallelBlocksCompressor","qualname":"::block::writer::ParallelBlocksCompressor","value":"ParallelBlocksCompressor {  }","parent":null,"children":[{"krate":0,"index":6416},{"krate":0,"index":6417},{"krate":0,"index":6418},{"krate":0,"index":6419},{"krate":0,"index":6420},{"krate":0,"index":6421},{"krate":0,"index":6422},{"krate":0,"index":6423},{"krate":0,"index":6424}],"decl_id":null,"docs":" Compress blocks to a chunk writer with multiple threads.\n","sig":null,"attributes":[{"value":"/ Compress blocks to a chunk writer with multiple threads.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642797,"byte_end":1642857,"line_start":336,"line_end":336,"column_start":1,"column_end":61}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642875,"byte_end":1642886,"line_start":338,"line_end":338,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1643535,"byte_end":1643538,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<ParallelBlocksCompressor>::new","value":"fn new(&'w MetaData, &'w mut W, threadpool::ThreadPool) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" New blocks writer. Returns none if sequential compression should be used.\n","sig":null,"attributes":[{"value":"/ New blocks writer. Returns none if sequential compression should be used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1643446,"byte_end":1643523,"line_start":355,"line_end":355,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1644408,"byte_end":1644427,"line_start":378,"line_end":378,"column_start":12,"column_end":31},"name":"inner_chunks_writer","qualname":"<ParallelBlocksCompressor>::inner_chunks_writer","value":"fn inner_chunks_writer(&'w Self) -> &'w W","parent":null,"children":[],"decl_id":null,"docs":" This is where the compressed blocks are written to.\n","sig":null,"attributes":[{"value":"/ This is where the compressed blocks are written to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1644341,"byte_end":1644396,"line_start":377,"line_end":377,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1645536,"byte_end":1645559,"line_start":403,"line_end":403,"column_start":12,"column_end":35},"name":"write_all_queued_chunks","qualname":"<ParallelBlocksCompressor>::write_all_queued_chunks","value":"fn write_all_queued_chunks<'_>(&'_ mut Self) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Wait until all currently compressing chunks in the compressor have been written.\n","sig":null,"attributes":[{"value":"/ Wait until all currently compressing chunks in the compressor have been written.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1645440,"byte_end":1645524,"line_start":402,"line_end":402,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1646278,"byte_end":1646308,"line_start":416,"line_end":416,"column_start":12,"column_end":42},"name":"add_block_to_compression_queue","qualname":"<ParallelBlocksCompressor>::add_block_to_compression_queue","value":"fn add_block_to_compression_queue<'_>(&'_ mut Self, usize, UncompressedBlock)\n-> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Add a single block to the compressor queue. The index of the block must be in increasing line order.\n When calling this function for the last block, this method waits until all the blocks have been written.\n This only works when you write as many blocks as the image expects, otherwise you can use `wait_for_all_remaining_chunks`.\n Waits for a block from the queue to be written, if the queue already has enough items.\n","sig":null,"attributes":[{"value":"/ Add a single block to the compressor queue. The index of the block must be in increasing line order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1645823,"byte_end":1645927,"line_start":412,"line_end":412,"column_start":5,"column_end":109}},{"value":"/ When calling this function for the last block, this method waits until all the blocks have been written.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1645932,"byte_end":1646040,"line_start":413,"line_end":413,"column_start":5,"column_end":113}},{"value":"/ This only works when you write as many blocks as the image expects, otherwise you can use `wait_for_all_remaining_chunks`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1646045,"byte_end":1646171,"line_start":414,"line_end":414,"column_start":5,"column_end":131}},{"value":"/ Waits for a block from the queue to be written, if the queue already has enough items.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1646176,"byte_end":1646266,"line_start":415,"line_end":415,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":2710},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::block::reader","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2731},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2748},{"krate":0,"index":2751},{"krate":0,"index":2754},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2761},{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":6429},{"krate":0,"index":6433},{"krate":0,"index":2774},{"krate":0,"index":2785},{"krate":0,"index":6436},{"krate":0,"index":6442},{"krate":0,"index":6445},{"krate":0,"index":6451},{"krate":0,"index":6454},{"krate":0,"index":6460},{"krate":0,"index":2789},{"krate":0,"index":2802},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2818},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":6464},{"krate":0,"index":6468},{"krate":0,"index":2842},{"krate":0,"index":6471},{"krate":0,"index":6481},{"krate":0,"index":2847},{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2861},{"krate":0,"index":2863}],"decl_id":null,"docs":" Composable structures to handle reading an image.\n","sig":null,"attributes":[{"value":"/ Composable structures to handle reading an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1648273,"byte_end":1648326,"line_start":1,"line_end":1,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6429},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1648959,"byte_end":1648965,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Reader","qualname":"::block::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":6431},{"krate":0,"index":6432}],"decl_id":null,"docs":" Decode the meta data from a byte source, keeping the source ready for further reading.\n Continue decoding the remaining bytes by calling `filtered_chunks` or `all_chunks`.\n","sig":null,"attributes":[{"value":"/ Decode the meta data from a byte source, keeping the source ready for further reading.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1648752,"byte_end":1648842,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"/ Continue decoding the remaining bytes by calling `filtered_chunks` or `all_chunks`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1648843,"byte_end":1648930,"line_start":19,"line_end":19,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649280,"byte_end":1649298,"line_start":31,"line_end":31,"column_start":12,"column_end":30},"name":"read_from_buffered","qualname":"<Reader<R>>::read_from_buffered","value":"fn read_from_buffered(R, bool) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Start the reading process.\n Immediately decodes the meta data into an internal field.\n Access it via`meta_data()`.\n","sig":null,"attributes":[{"value":"/ Start the reading process.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649136,"byte_end":1649166,"line_start":28,"line_end":28,"column_start":5,"column_end":35}},{"value":"/ Immediately decodes the meta data into an internal field.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649171,"byte_end":1649232,"line_start":29,"line_end":29,"column_start":5,"column_end":66}},{"value":"/ Access it via`meta_data()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649237,"byte_end":1649268,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649717,"byte_end":1649726,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"meta_data","qualname":"<Reader<R>>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":null,"children":[],"decl_id":null,"docs":" The decoded exr meta data from the file.\n","sig":null,"attributes":[{"value":"/ The decoded exr meta data from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649661,"byte_end":1649705,"line_start":38,"line_end":38,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649828,"byte_end":1649835,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"headers","qualname":"<Reader<R>>::headers","value":"fn headers<'_>(&'_ Self) -> &'_ [Header]","parent":null,"children":[],"decl_id":null,"docs":" The decoded exr meta data from the file.\n","sig":null,"attributes":[{"value":"/ The decoded exr meta data from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649772,"byte_end":1649816,"line_start":41,"line_end":41,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649936,"byte_end":1649950,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"into_meta_data","qualname":"<Reader<R>>::into_meta_data","value":"fn into_meta_data(Self) -> MetaData","parent":null,"children":[],"decl_id":null,"docs":" Obtain the meta data ownership.\n","sig":null,"attributes":[{"value":"/ Obtain the meta data ownership.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649889,"byte_end":1649924,"line_start":44,"line_end":44,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1650220,"byte_end":1650230,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"all_chunks","qualname":"<Reader<R>>::all_chunks","value":"fn all_chunks(Self, bool) -> Result<AllChunksReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Prepare to read all the chunks from the file.\n Does not decode the chunks now, but returns a decoder.\n Reading all chunks reduces seeking the file, but some chunks might be read without being used.\n","sig":null,"attributes":[{"value":"/ Prepare to read all the chunks from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649993,"byte_end":1650042,"line_start":47,"line_end":47,"column_start":5,"column_end":54}},{"value":"/ Does not decode the chunks now, but returns a decoder.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1650047,"byte_end":1650105,"line_start":48,"line_end":48,"column_start":5,"column_end":63}},{"value":"/ Reading all chunks reduces seeking the file, but some chunks might be read without being used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1650110,"byte_end":1650208,"line_start":49,"line_end":49,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1651408,"byte_end":1651421,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"filter_chunks","qualname":"<Reader<R>>::filter_chunks","value":"fn filter_chunks<impl FnMut(&MetaData, TileCoordinates, BlockIndex) -> bool>(Self,\nbool, impl FnMut(&MetaData, TileCoordinates, BlockIndex) -> bool)\n-> Result<FilteredChunksReader<R>> where\nimpl FnMut(&MetaData, TileCoordinates, BlockIndex) -> bool: for<'_> FnMut(&'_ MetaData,\nTileCoordinates, BlockIndex) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Prepare to read some the chunks from the file.\n Does not decode the chunks now, but returns a decoder.\n Reading only some chunks may seeking the file, potentially skipping many bytes.\n","sig":null,"attributes":[{"value":"/ Prepare to read some the chunks from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1651130,"byte_end":1651180,"line_start":71,"line_end":71,"column_start":5,"column_end":55}},{"value":"/ Does not decode the chunks now, but returns a decoder.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1651185,"byte_end":1651243,"line_start":72,"line_end":72,"column_start":5,"column_end":63}},{"value":"/ Reading only some chunks may seeking the file, potentially skipping many bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1651248,"byte_end":1651331,"line_start":73,"line_end":73,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":6436},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654848,"byte_end":1654868,"line_start":151,"line_end":151,"column_start":12,"column_end":32},"name":"FilteredChunksReader","qualname":"::block::reader::FilteredChunksReader","value":"FilteredChunksReader {  }","parent":null,"children":[{"krate":0,"index":6438},{"krate":0,"index":6439},{"krate":0,"index":6440},{"krate":0,"index":6441}],"decl_id":null,"docs":" Decode the desired chunks and skip the unimportant chunks in the file.\n The decoded chunks can be decompressed by calling\n `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`.\n Call `on_progress` to have a callback with each block.\n Also contains the image meta data.\n","sig":null,"attributes":[{"value":"/ Decode the desired chunks and skip the unimportant chunks in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654484,"byte_end":1654558,"line_start":145,"line_end":145,"column_start":1,"column_end":75}},{"value":"/ The decoded chunks can be decompressed by calling","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654559,"byte_end":1654612,"line_start":146,"line_end":146,"column_start":1,"column_end":54}},{"value":"/ `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654613,"byte_end":1654721,"line_start":147,"line_end":147,"column_start":1,"column_end":109}},{"value":"/ Call `on_progress` to have a callback with each block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654722,"byte_end":1654780,"line_start":148,"line_end":148,"column_start":1,"column_end":59}},{"value":"/ Also contains the image meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1654781,"byte_end":1654819,"line_start":149,"line_end":149,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":6445},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655391,"byte_end":1655406,"line_start":164,"line_end":164,"column_start":12,"column_end":27},"name":"AllChunksReader","qualname":"::block::reader::AllChunksReader","value":"AllChunksReader {  }","parent":null,"children":[{"krate":0,"index":6447},{"krate":0,"index":6448},{"krate":0,"index":6449},{"krate":0,"index":6450}],"decl_id":null,"docs":" Decode all chunks in the file without seeking.\n The decoded chunks can be decompressed by calling\n `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`.\n Call `on_progress` to have a callback with each block.\n Also contains the image meta data.\n","sig":null,"attributes":[{"value":"/ Decode all chunks in the file without seeking.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655051,"byte_end":1655101,"line_start":158,"line_end":158,"column_start":1,"column_end":51}},{"value":"/ The decoded chunks can be decompressed by calling","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655102,"byte_end":1655155,"line_start":159,"line_end":159,"column_start":1,"column_end":54}},{"value":"/ `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655156,"byte_end":1655264,"line_start":160,"line_end":160,"column_start":1,"column_end":109}},{"value":"/ Call `on_progress` to have a callback with each block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655265,"byte_end":1655323,"line_start":161,"line_end":161,"column_start":1,"column_end":59}},{"value":"/ Also contains the image meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655324,"byte_end":1655362,"line_start":162,"line_end":162,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":6454},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655847,"byte_end":1655869,"line_start":177,"line_end":177,"column_start":12,"column_end":34},"name":"OnProgressChunksReader","qualname":"::block::reader::OnProgressChunksReader","value":"OnProgressChunksReader {  }","parent":null,"children":[{"krate":0,"index":6457},{"krate":0,"index":6458},{"krate":0,"index":6459}],"decl_id":null,"docs":" Decode chunks in the file without seeking.\n Calls the supplied closure for each chunk.\n The decoded chunks can be decompressed by calling\n `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`.\n Also contains the image meta data.\n","sig":null,"attributes":[{"value":"/ Decode chunks in the file without seeking.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655550,"byte_end":1655596,"line_start":171,"line_end":171,"column_start":1,"column_end":47}},{"value":"/ Calls the supplied closure for each chunk.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655597,"byte_end":1655643,"line_start":172,"line_end":172,"column_start":1,"column_end":47}},{"value":"/ The decoded chunks can be decompressed by calling","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655644,"byte_end":1655697,"line_start":173,"line_end":173,"column_start":1,"column_end":54}},{"value":"/ `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655698,"byte_end":1655779,"line_start":174,"line_end":174,"column_start":1,"column_end":82}},{"value":"/ Also contains the image meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655780,"byte_end":1655818,"line_start":175,"line_end":175,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":2789},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656222,"byte_end":1656234,"line_start":188,"line_end":188,"column_start":11,"column_end":23},"name":"ChunksReader","qualname":"::block::reader::ChunksReader","value":"ChunksReader: Sized + Iterator<Item = Result<Chunk>> + ExactSizeIterator","parent":null,"children":[{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2801}],"decl_id":null,"docs":" Decode chunks in the file.\n The decoded chunks can be decompressed by calling\n `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`.\n Call `on_progress` to have a callback with each block.\n Also contains the image meta data.\n","sig":null,"attributes":[{"value":"/ Decode chunks in the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655947,"byte_end":1655977,"line_start":183,"line_end":183,"column_start":1,"column_end":31}},{"value":"/ The decoded chunks can be decompressed by calling","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1655978,"byte_end":1656031,"line_start":184,"line_end":184,"column_start":1,"column_end":54}},{"value":"/ `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656032,"byte_end":1656113,"line_start":185,"line_end":185,"column_start":1,"column_end":82}},{"value":"/ Call `on_progress` to have a callback with each block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656114,"byte_end":1656172,"line_start":186,"line_end":186,"column_start":1,"column_end":59}},{"value":"/ Also contains the image meta data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656173,"byte_end":1656211,"line_start":187,"line_end":187,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656352,"byte_end":1656361,"line_start":191,"line_end":191,"column_start":8,"column_end":17},"name":"meta_data","qualname":"::block::reader::ChunksReader::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" The decoded exr meta data from the file.\n","sig":null,"attributes":[{"value":"/ The decoded exr meta data from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656300,"byte_end":1656344,"line_start":190,"line_end":190,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656438,"byte_end":1656445,"line_start":194,"line_end":194,"column_start":8,"column_end":15},"name":"headers","qualname":"::block::reader::ChunksReader::headers","value":"fn headers<'_>(&'_ Self) -> &'_ [Header]","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" The decoded exr headers from the file.\n","sig":null,"attributes":[{"value":"/ The decoded exr headers from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656388,"byte_end":1656430,"line_start":193,"line_end":193,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2792},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656665,"byte_end":1656685,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"expected_chunk_count","qualname":"::block::reader::ChunksReader::expected_chunk_count","value":"fn expected_chunk_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" The number of chunks that this reader will return in total.\n Can be less than the total number of chunks in the file, if some chunks are skipped.\n","sig":null,"attributes":[{"value":"/ The number of chunks that this reader will return in total.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656501,"byte_end":1656564,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/ Can be less than the total number of chunks in the file, if some chunks are skipped.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656569,"byte_end":1656657,"line_start":197,"line_end":197,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656880,"byte_end":1656895,"line_start":203,"line_end":203,"column_start":8,"column_end":23},"name":"read_next_chunk","qualname":"::block::reader::ChunksReader::read_next_chunk","value":"fn read_next_chunk<'_>(&'_ mut Self) -> Option<Result<Chunk>>","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Read the next compressed chunk from the file.\n Equivalent to `.next()`, as this also is an iterator.\n Returns `None` if all chunks have been read.\n","sig":null,"attributes":[{"value":"/ Read the next compressed chunk from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656708,"byte_end":1656757,"line_start":200,"line_end":200,"column_start":5,"column_end":54}},{"value":"/ Equivalent to `.next()`, as this also is an iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656762,"byte_end":1656819,"line_start":201,"line_end":201,"column_start":5,"column_end":62}},{"value":"/ Returns `None` if all chunks have been read.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656824,"byte_end":1656872,"line_start":202,"line_end":202,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657218,"byte_end":1657229,"line_start":209,"line_end":209,"column_start":8,"column_end":19},"name":"on_progress","qualname":"::block::reader::ChunksReader::on_progress","value":"fn on_progress<F>(Self, F) -> OnProgressChunksReader<Self, F> where\nF: FnMut(f64) -> ()","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Create a new reader that calls the provided progress\n callback for each chunk that is read from the file.\n If the file can be successfully decoded,\n the progress will always at least once include 0.0 at the start and 1.0 at the end.\n","sig":null,"attributes":[{"value":"/ Create a new reader that calls the provided progress","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656953,"byte_end":1657009,"line_start":205,"line_end":205,"column_start":5,"column_end":61}},{"value":"/ callback for each chunk that is read from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657014,"byte_end":1657069,"line_start":206,"line_end":206,"column_start":5,"column_end":60}},{"value":"/ If the file can be successfully decoded,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657074,"byte_end":1657118,"line_start":207,"line_end":207,"column_start":5,"column_end":49}},{"value":"/ the progress will always at least once include 0.0 at the start and 1.0 at the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657123,"byte_end":1657210,"line_start":208,"line_end":208,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2796},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657806,"byte_end":1657825,"line_start":217,"line_end":217,"column_start":8,"column_end":27},"name":"decompress_parallel","qualname":"::block::reader::ChunksReader::decompress_parallel","value":"fn decompress_parallel<impl FnMut(&MetaData, UncompressedBlock) -> UnitResult>(Self,\nbool, impl FnMut(&MetaData, UncompressedBlock) -> UnitResult) -> UnitResult\nwhere\nimpl FnMut(&MetaData, UncompressedBlock) -> UnitResult: for<'_> FnMut(&'_ MetaData,\nUncompressedBlock) -> UnitResult","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Decompress all blocks in the file, using multiple cpu cores, and call the supplied closure for each block.\n The order of the blocks is not deterministic.\n You can also use `parallel_decompressor` to obtain an iterator instead.\n","sig":null,"attributes":[{"value":"/ Decompress all blocks in the file, using multiple cpu cores, and call the supplied closure for each block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657420,"byte_end":1657530,"line_start":213,"line_end":213,"column_start":5,"column_end":115}},{"value":"/ The order of the blocks is not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657535,"byte_end":1657584,"line_start":214,"line_end":214,"column_start":5,"column_end":54}},{"value":"/ You can also use `parallel_decompressor` to obtain an iterator instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1657589,"byte_end":1657664,"line_start":215,"line_end":215,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658810,"byte_end":1658831,"line_start":240,"line_end":240,"column_start":8,"column_end":29},"name":"parallel_decompressor","qualname":"::block::reader::ChunksReader::parallel_decompressor","value":"fn parallel_decompressor(Self, bool)\n-> std::result::Result<ParallelBlockDecompressor<Self>, Self>","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Return an iterator that decompresses the chunks with multiple threads.\n The order of the blocks is not deterministic.\n Use `ParallelBlockDecompressor::new` if you want to use your own thread pool.\n By default, this uses as many threads as there are CPUs.\n Returns the `self` if there is no need for parallel decompression.\n","sig":null,"attributes":[{"value":"/ Return an iterator that decompresses the chunks with multiple threads.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658448,"byte_end":1658522,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ The order of the blocks is not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658527,"byte_end":1658576,"line_start":236,"line_end":236,"column_start":5,"column_end":54}},{"value":"/ Use `ParallelBlockDecompressor::new` if you want to use your own thread pool.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658581,"byte_end":1658662,"line_start":237,"line_end":237,"column_start":5,"column_end":86}},{"value":"/ By default, this uses as many threads as there are CPUs.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658667,"byte_end":1658727,"line_start":238,"line_end":238,"column_start":5,"column_end":65}},{"value":"/ Returns the `self` if there is no need for parallel decompression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1658732,"byte_end":1658802,"line_start":239,"line_end":239,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1659373,"byte_end":1659394,"line_start":251,"line_end":251,"column_start":8,"column_end":29},"name":"decompress_sequential","qualname":"::block::reader::ChunksReader::decompress_sequential","value":"fn decompress_sequential<impl FnMut(&MetaData, UncompressedBlock) -> UnitResult>(Self,\nbool, impl FnMut(&MetaData, UncompressedBlock) -> UnitResult) -> UnitResult\nwhere\nimpl FnMut(&MetaData, UncompressedBlock) -> UnitResult: for<'_> FnMut(&'_ MetaData,\nUncompressedBlock) -> UnitResult","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Return an iterator that decompresses the chunks in this thread.\n You can alternatively use `sequential_decompressor` if you prefer an external iterator.\n","sig":null,"attributes":[{"value":"/ Return an iterator that decompresses the chunks in this thread.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1659202,"byte_end":1659269,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/ You can alternatively use `sequential_decompressor` if you prefer an external iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1659274,"byte_end":1659365,"line_start":250,"line_end":250,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1659967,"byte_end":1659990,"line_start":266,"line_end":266,"column_start":8,"column_end":31},"name":"sequential_decompressor","qualname":"::block::reader::ChunksReader::sequential_decompressor","value":"fn sequential_decompressor(Self, bool) -> SequentialBlockDecompressor<Self>","parent":{"krate":0,"index":2789},"children":[],"decl_id":null,"docs":" Prepare reading the chunks sequentially, only a single thread, but with less memory overhead.\n","sig":null,"attributes":[{"value":"/ Prepare reading the chunks sequentially, only a single thread, but with less memory overhead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1659862,"byte_end":1659959,"line_start":265,"line_end":265,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":2805},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660244,"byte_end":1660253,"line_start":272,"line_end":272,"column_start":8,"column_end":17},"name":"meta_data","qualname":"<OnProgressChunksReader<R, F> as block::reader::ChunksReader>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2790},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660316,"byte_end":1660336,"line_start":273,"line_end":273,"column_start":8,"column_end":28},"name":"expected_chunk_count","qualname":"<OnProgressChunksReader<R, F> as block::reader::ChunksReader>::expected_chunk_count","value":"fn expected_chunk_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2792},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660635,"byte_end":1660639,"line_start":280,"line_end":280,"column_start":8,"column_end":12},"name":"next","qualname":"<OnProgressChunksReader<R, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661369,"byte_end":1661378,"line_start":303,"line_end":303,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<OnProgressChunksReader<R, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8614},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661528,"byte_end":1661537,"line_start":309,"line_end":309,"column_start":8,"column_end":17},"name":"meta_data","qualname":"<AllChunksReader<R> as block::reader::ChunksReader>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2790},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661585,"byte_end":1661605,"line_start":310,"line_end":310,"column_start":8,"column_end":28},"name":"expected_chunk_count","qualname":"<AllChunksReader<R> as block::reader::ChunksReader>::expected_chunk_count","value":"fn expected_chunk_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2792},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661814,"byte_end":1661818,"line_start":317,"line_end":317,"column_start":8,"column_end":12},"name":"next","qualname":"<AllChunksReader<R> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662349,"byte_end":1662358,"line_start":330,"line_end":330,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<AllChunksReader<R> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8614},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662547,"byte_end":1662556,"line_start":336,"line_end":336,"column_start":8,"column_end":17},"name":"meta_data","qualname":"<FilteredChunksReader<R> as block::reader::ChunksReader>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2790},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662604,"byte_end":1662624,"line_start":337,"line_end":337,"column_start":8,"column_end":28},"name":"expected_chunk_count","qualname":"<FilteredChunksReader<R> as block::reader::ChunksReader>::expected_chunk_count","value":"fn expected_chunk_count<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":2789},"children":[],"decl_id":{"krate":0,"index":2792},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662852,"byte_end":1662856,"line_start":344,"line_end":344,"column_start":8,"column_end":12},"name":"next","qualname":"<FilteredChunksReader<R> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663583,"byte_end":1663592,"line_start":359,"line_end":359,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<FilteredChunksReader<R> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8614},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6464},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663868,"byte_end":1663895,"line_start":367,"line_end":367,"column_start":12,"column_end":39},"name":"SequentialBlockDecompressor","qualname":"::block::reader::SequentialBlockDecompressor","value":"SequentialBlockDecompressor {  }","parent":null,"children":[{"krate":0,"index":6466},{"krate":0,"index":6467}],"decl_id":null,"docs":" Read all chunks from the file, decompressing each chunk immediately.\n Implements iterator.\n","sig":null,"attributes":[{"value":"/ Read all chunks from the file, decompressing each chunk immediately.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663742,"byte_end":1663814,"line_start":364,"line_end":364,"column_start":1,"column_end":73}},{"value":"/ Implements iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663815,"byte_end":1663839,"line_start":365,"line_end":365,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664090,"byte_end":1664099,"line_start":375,"line_end":375,"column_start":12,"column_end":21},"name":"meta_data","qualname":"<SequentialBlockDecompressor<R>>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":null,"children":[],"decl_id":null,"docs":" The extracted meta data from the image file.\n","sig":null,"attributes":[{"value":"/ The extracted meta data from the image file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664030,"byte_end":1664078,"line_start":374,"line_end":374,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664257,"byte_end":1664278,"line_start":378,"line_end":378,"column_start":12,"column_end":33},"name":"decompress_next_block","qualname":"<SequentialBlockDecompressor<R>>::decompress_next_block","value":"fn decompress_next_block<'_>(&'_ mut Self)\n-> Option<Result<UncompressedBlock>>","parent":null,"children":[],"decl_id":null,"docs":" Read and then decompress a single block of pixels from the byte source.\n","sig":null,"attributes":[{"value":"/ Read and then decompress a single block of pixels from the byte source.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664170,"byte_end":1664245,"line_start":377,"line_end":377,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6471},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664835,"byte_end":1664860,"line_start":391,"line_end":391,"column_start":12,"column_end":37},"name":"ParallelBlockDecompressor","qualname":"::block::reader::ParallelBlockDecompressor","value":"ParallelBlockDecompressor {  }","parent":null,"children":[{"krate":0,"index":6473},{"krate":0,"index":6474},{"krate":0,"index":6475},{"krate":0,"index":6476},{"krate":0,"index":6477},{"krate":0,"index":6478},{"krate":0,"index":6479},{"krate":0,"index":6480}],"decl_id":null,"docs":" Decompress the chunks in a file in parallel.\n The first call to `next` will fill the thread pool with jobs,\n starting to decompress the next few blocks.\n These jobs will finish, even if you stop reading more blocks.\n Implements iterator.\n","sig":null,"attributes":[{"value":"/ Decompress the chunks in a file in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664553,"byte_end":1664601,"line_start":385,"line_end":385,"column_start":1,"column_end":49}},{"value":"/ The first call to `next` will fill the thread pool with jobs,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664602,"byte_end":1664667,"line_start":386,"line_end":386,"column_start":1,"column_end":66}},{"value":"/ starting to decompress the next few blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664668,"byte_end":1664715,"line_start":387,"line_end":387,"column_start":1,"column_end":48}},{"value":"/ These jobs will finish, even if you stop reading more blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664716,"byte_end":1664781,"line_start":388,"line_end":388,"column_start":1,"column_end":66}},{"value":"/ Implements iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1664782,"byte_end":1664806,"line_start":389,"line_end":389,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665455,"byte_end":1665458,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"new","qualname":"<ParallelBlockDecompressor<R>>::new","value":"fn new(R, bool, threadpool::ThreadPool) -> std::result::Result<Self, R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompressor. Does not immediately spawn any tasks.\n Decompression starts after the first call to `next`.\n Returns the chunks if parallel decompression should not be used.\n","sig":null,"attributes":[{"value":"/ Create a new decompressor. Does not immediately spawn any tasks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665241,"byte_end":1665309,"line_start":406,"line_end":406,"column_start":5,"column_end":73}},{"value":"/ Decompression starts after the first call to `next`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665314,"byte_end":1665370,"line_start":407,"line_end":407,"column_start":5,"column_end":61}},{"value":"/ Returns the chunks if parallel decompression should not be used.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665375,"byte_end":1665443,"line_start":408,"line_end":408,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2851},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1666333,"byte_end":1666354,"line_start":433,"line_end":433,"column_start":12,"column_end":33},"name":"decompress_next_block","qualname":"<ParallelBlockDecompressor<R>>::decompress_next_block","value":"fn decompress_next_block<'_>(&'_ mut Self)\n-> Option<Result<UncompressedBlock>>","parent":null,"children":[],"decl_id":null,"docs":" Fill the pool with decompression jobs. Returns the first job that finishes.\n","sig":null,"attributes":[{"value":"/ Fill the pool with decompression jobs. Returns the first job that finishes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1666242,"byte_end":1666321,"line_start":432,"line_end":432,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669281,"byte_end":1669290,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"meta_data","qualname":"<ParallelBlockDecompressor<R>>::meta_data","value":"fn meta_data<'_>(&'_ Self) -> &'_ MetaData","parent":null,"children":[],"decl_id":null,"docs":" The extracted meta data of the image file.\n","sig":null,"attributes":[{"value":"/ The extracted meta data of the image file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669223,"byte_end":1669269,"line_start":501,"line_end":501,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669548,"byte_end":1669552,"line_start":508,"line_end":508,"column_start":8,"column_end":12},"name":"next","qualname":"<SequentialBlockDecompressor<R> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2860},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669626,"byte_end":1669635,"line_start":509,"line_end":509,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<SequentialBlockDecompressor<R> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8614},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669909,"byte_end":1669913,"line_start":515,"line_end":515,"column_start":8,"column_end":12},"name":"next","qualname":"<ParallelBlockDecompressor<R> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8610},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669987,"byte_end":1669996,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ParallelBlockDecompressor<R> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8608},"children":[],"decl_id":{"krate":2,"index":8614},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2868},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lines","qualname":"::block::lines","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","parent":null,"children":[{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2881},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":6484},{"krate":0,"index":6488},{"krate":0,"index":6491},{"krate":0,"index":6493},{"krate":0,"index":6495},{"krate":0,"index":6498},{"krate":0,"index":6500},{"krate":0,"index":6504},{"krate":0,"index":2894},{"krate":0,"index":2896},{"krate":0,"index":6507},{"krate":0,"index":6513},{"krate":0,"index":6515},{"krate":0,"index":6516},{"krate":0,"index":6517},{"krate":0,"index":6519},{"krate":0,"index":6520},{"krate":0,"index":6523},{"krate":0,"index":6525},{"krate":0,"index":2898},{"krate":0,"index":2917},{"krate":0,"index":2924}],"decl_id":null,"docs":" Extract lines from a block of pixel bytes.\n","sig":null,"attributes":[{"value":"/ Extract lines from a block of pixel bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1670698,"byte_end":1670744,"line_start":1,"line_end":1,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":6484},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671091,"byte_end":1671100,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"LineSlice","qualname":"::block::lines::LineSlice","value":"LineSlice { location, value }","parent":null,"children":[{"krate":0,"index":6486},{"krate":0,"index":6487}],"decl_id":null,"docs":" A single line of pixels.\n Use [LineRef] or [LineRefMut] for easier type names.\n","sig":null,"attributes":[{"value":"/ A single line of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1670949,"byte_end":1670977,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/ Use [LineRef] or [LineRefMut] for easier type names.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1670978,"byte_end":1671034,"line_start":13,"line_end":13,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6486},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671265,"byte_end":1671273,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"location","qualname":"::block::lines::LineSlice::location","value":"block::lines::LineIndex","parent":{"krate":0,"index":6484},"children":[],"decl_id":null,"docs":" Where this line is located inside the image.\n","sig":null,"attributes":[{"value":"/ Where this line is located inside the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671208,"byte_end":1671256,"line_start":19,"line_end":19,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":6487},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671472,"byte_end":1671477,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"value","qualname":"::block::lines::LineSlice::value","value":"T","parent":{"krate":0,"index":6484},"children":[],"decl_id":null,"docs":" The raw bytes of the pixel line, either `&[u8]` or `&mut [u8]`.\n Must be re-interpreted as slice of f16, f32, or u32,\n according to the channel data type.\n","sig":null,"attributes":[{"value":"/ The raw bytes of the pixel line, either `&[u8]` or `&mut [u8]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671291,"byte_end":1671358,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ Must be re-interpreted as slice of f16, f32, or u32,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671363,"byte_end":1671419,"line_start":23,"line_end":23,"column_start":5,"column_end":61}},{"value":"/ according to the channel data type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671424,"byte_end":1671463,"line_start":24,"line_end":24,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":2894},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671686,"byte_end":1671693,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"name":"LineRef","qualname":"::block::lines::LineRef","value":"LineSlice<&'s [u8]>","parent":null,"children":[],"decl_id":null,"docs":" An reference to a single line of pixels.\n May go across the whole image or just a tile section of it.","sig":null,"attributes":[{"value":"/ An reference to a single line of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671486,"byte_end":1671530,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/ May go across the whole image or just a tile section of it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671531,"byte_end":1671594,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671595,"byte_end":1671598,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This line contains an immutable slice that all samples will be read from.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671599,"byte_end":1671676,"line_start":32,"line_end":32,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":2896},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671927,"byte_end":1671937,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"name":"LineRefMut","qualname":"::block::lines::LineRefMut","value":"LineSlice<&'s mut [u8]>","parent":null,"children":[],"decl_id":null,"docs":" A reference to a single mutable line of pixels.\n May go across the whole image or just a tile section of it.","sig":null,"attributes":[{"value":"/ A reference to a single mutable line of pixels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671722,"byte_end":1671773,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ May go across the whole image or just a tile section of it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671774,"byte_end":1671837,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671838,"byte_end":1671841,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This line contains a mutable slice that all samples will be written to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671842,"byte_end":1671917,"line_start":38,"line_end":38,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":6507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672197,"byte_end":1672206,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"LineIndex","qualname":"::block::lines::LineIndex","value":"LineIndex { layer, channel, level, position, sample_count }","parent":null,"children":[{"krate":0,"index":6508},{"krate":0,"index":6509},{"krate":0,"index":6510},{"krate":0,"index":6511},{"krate":0,"index":6512}],"decl_id":null,"docs":" Specifies where a row of pixels lies inside an image.\n This is a globally unique identifier which includes\n the layer, channel index, and pixel location.\n","sig":null,"attributes":[{"value":"/ Specifies where a row of pixels lies inside an image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1671971,"byte_end":1672028,"line_start":42,"line_end":42,"column_start":1,"column_end":58}},{"value":"/ This is a globally unique identifier which includes","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672029,"byte_end":1672084,"line_start":43,"line_end":43,"column_start":1,"column_end":56}},{"value":"/ the layer, channel index, and pixel location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672085,"byte_end":1672134,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672246,"byte_end":1672251,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"name":"layer","qualname":"::block::lines::LineIndex::layer","value":"usize","parent":{"krate":0,"index":6507},"children":[],"decl_id":null,"docs":" Index of the layer.\n","sig":null,"attributes":[{"value":"/ Index of the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672214,"byte_end":1672237,"line_start":48,"line_end":48,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":6509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672309,"byte_end":1672316,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"channel","qualname":"::block::lines::LineIndex::channel","value":"usize","parent":{"krate":0,"index":6507},"children":[],"decl_id":null,"docs":" The channel index of the layer.\n","sig":null,"attributes":[{"value":"/ The channel index of the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672265,"byte_end":1672300,"line_start":51,"line_end":51,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":6510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672386,"byte_end":1672391,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"level","qualname":"::block::lines::LineIndex::level","value":"math::Vec2<usize>","parent":{"krate":0,"index":6507},"children":[],"decl_id":null,"docs":" Index of the mip or rip level in the image.\n","sig":null,"attributes":[{"value":"/ Index of the mip or rip level in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672330,"byte_end":1672377,"line_start":54,"line_end":54,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6511},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672467,"byte_end":1672475,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"position","qualname":"::block::lines::LineIndex::position","value":"math::Vec2<usize>","parent":{"krate":0,"index":6507},"children":[],"decl_id":null,"docs":" Position of the most left pixel of the row.\n","sig":null,"attributes":[{"value":"/ Position of the most left pixel of the row.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672411,"byte_end":1672458,"line_start":57,"line_end":57,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6512},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672621,"byte_end":1672633,"line_start":62,"line_end":62,"column_start":9,"column_end":21},"name":"sample_count","qualname":"::block::lines::LineIndex::sample_count","value":"usize","parent":{"krate":0,"index":6507},"children":[],"decl_id":null,"docs":" The width of the line; the number of samples in this row,\n that is, the number of f16, f32, or u32 values.\n","sig":null,"attributes":[{"value":"/ The width of the line; the number of samples in this row,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672495,"byte_end":1672556,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ that is, the number of f16, f32, or u32 values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672561,"byte_end":1672612,"line_start":61,"line_end":61,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2899},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1673162,"byte_end":1673176,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"lines_in_block","qualname":"<LineIndex>::lines_in_block","value":"fn lines_in_block<'_>(BlockIndex, &'_ ChannelList) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates the lines of this block index in interleaved fashion:\n For each line in this block, this iterator steps once through each channel.\n This is how lines are stored in a pixel data block.","sig":null,"attributes":[{"value":"/ Iterates the lines of this block index in interleaved fashion:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672668,"byte_end":1672734,"line_start":68,"line_end":68,"column_start":5,"column_end":71}},{"value":"/ For each line in this block, this iterator steps once through each channel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672739,"byte_end":1672818,"line_start":69,"line_end":69,"column_start":5,"column_end":84}},{"value":"/ This is how lines are stored in a pixel data block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672823,"byte_end":1672878,"line_start":70,"line_end":70,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672883,"byte_end":1672886,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Does not check whether `self.layer_index`, `self.level`, `self.size` and `self.position` are valid indices.__","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672891,"byte_end":1673004,"line_start":72,"line_end":72,"column_start":5,"column_end":118}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1673125,"byte_end":1673134,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1673139,"byte_end":1673150,"line_start":75,"line_end":75,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2919},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675695,"byte_end":1675719,"line_start":151,"line_end":151,"column_start":12,"column_end":36},"name":"write_samples_from_slice","qualname":"<LineRefMut>::write_samples_from_slice","value":"fn write_samples_from_slice<T, '_>(Self, &'_ [T]) -> UnitResult where\nT: crate::io::Data","parent":null,"children":[],"decl_id":null,"docs":" Writes the samples (f16, f32, u32 values) into this line value reference.\n Use `write_samples` if there is not slice available.\n","sig":null,"attributes":[{"value":"/ Writes the samples (f16, f32, u32 values) into this line value reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675515,"byte_end":1675592,"line_start":147,"line_end":147,"column_start":5,"column_end":82}},{"value":"/ Use `write_samples` if there is not slice available.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675597,"byte_end":1675653,"line_start":148,"line_end":148,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675658,"byte_end":1675667,"line_start":149,"line_end":149,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675672,"byte_end":1675683,"line_start":150,"line_end":150,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676449,"byte_end":1676462,"line_start":165,"line_end":165,"column_start":12,"column_end":25},"name":"write_samples","qualname":"<LineRefMut>::write_samples","value":"fn write_samples<T, impl FnMut(usize) -> T>(Self, impl FnMut(usize) -> T)\n-> UnitResult where T: crate::io::Data, impl FnMut(usize) -> T: FnMut(usize)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all samples in this line, from left to right.\n The supplied `get_line` function returns the sample value\n for a given sample index within the line,\n which starts at zero for each individual line.\n Use `write_samples_from_slice` if you already have a slice of samples.\n","sig":null,"attributes":[{"value":"/ Iterate over all samples in this line, from left to right.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676095,"byte_end":1676157,"line_start":158,"line_end":158,"column_start":5,"column_end":67}},{"value":"/ The supplied `get_line` function returns the sample value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676162,"byte_end":1676223,"line_start":159,"line_end":159,"column_start":5,"column_end":66}},{"value":"/ for a given sample index within the line,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676228,"byte_end":1676273,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/ which starts at zero for each individual line.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676278,"byte_end":1676328,"line_start":161,"line_end":161,"column_start":5,"column_end":55}},{"value":"/ Use `write_samples_from_slice` if you already have a slice of samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676333,"byte_end":1676407,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676412,"byte_end":1676421,"line_start":163,"line_end":163,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676426,"byte_end":1676437,"line_start":164,"line_end":164,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1677046,"byte_end":1677069,"line_start":182,"line_end":182,"column_start":12,"column_end":35},"name":"read_samples_into_slice","qualname":"<LineRef>::read_samples_into_slice","value":"fn read_samples_into_slice<T, '_>(Self, &'_ mut [T]) -> UnitResult where\nT: crate::io::Data","parent":null,"children":[],"decl_id":null,"docs":" Read the samples (f16, f32, u32 values) from this line value reference.\n Use `read_samples` if there is not slice available.\n","sig":null,"attributes":[{"value":"/ Read the samples (f16, f32, u32 values) from this line value reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676899,"byte_end":1676974,"line_start":180,"line_end":180,"column_start":5,"column_end":80}},{"value":"/ Use `read_samples` if there is not slice available.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676979,"byte_end":1677034,"line_start":181,"line_end":181,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1677599,"byte_end":1677611,"line_start":191,"line_end":191,"column_start":12,"column_end":24},"name":"read_samples","qualname":"<LineRef>::read_samples","value":"fn read_samples<T, '_>(&'_ Self) -> /*impl Trait*/ where T: crate::io::Data","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all samples in this line, from left to right.\n Use `read_sample_into_slice` if you already have a slice of samples.\n","sig":null,"attributes":[{"value":"/ Iterate over all samples in this line, from left to right.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1677448,"byte_end":1677510,"line_start":189,"line_end":189,"column_start":5,"column_end":67}},{"value":"/ Use `read_sample_into_slice` if you already have a slice of samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1677515,"byte_end":1677587,"line_start":190,"line_end":190,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":2931},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"samples","qualname":"::block::samples","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","parent":null,"children":[{"krate":0,"index":2932},{"krate":0,"index":6528},{"krate":0,"index":6538},{"krate":0,"index":6539},{"krate":0,"index":6541},{"krate":0,"index":2933},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2957},{"krate":0,"index":2959},{"krate":0,"index":2961},{"krate":0,"index":2965},{"krate":0,"index":2969},{"krate":0,"index":2973},{"krate":0,"index":2977},{"krate":0,"index":2981},{"krate":0,"index":2985},{"krate":0,"index":2989},{"krate":0,"index":2993},{"krate":0,"index":2997}],"decl_id":null,"docs":" Extract pixel samples from a block of pixel bytes.\n","sig":null,"attributes":[{"value":"/ Extract pixel samples from a block of pixel bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678158,"byte_end":1678212,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6529},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678370,"byte_end":1678373,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"F16","qualname":"::block::samples::Sample::F16","value":"Sample::F16(f16)","parent":{"krate":0,"index":6528},"children":[],"decl_id":null,"docs":" A 16-bit float sample.\n","sig":null,"attributes":[{"value":"/ A 16-bit float sample.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678339,"byte_end":1678365,"line_start":10,"line_end":10,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6531},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678374,"byte_end":1678377,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"name":"0","qualname":"::block::samples::Sample::F16::0","value":"half::f16","parent":{"krate":0,"index":6529},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6532},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678416,"byte_end":1678419,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"F32","qualname":"::block::samples::Sample::F32","value":"Sample::F32(f32)","parent":{"krate":0,"index":6528},"children":[],"decl_id":null,"docs":" A 32-bit float sample.\n","sig":null,"attributes":[{"value":"/ A 32-bit float sample.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678385,"byte_end":1678411,"line_start":13,"line_end":13,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6534},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678420,"byte_end":1678423,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"0","qualname":"::block::samples::Sample::F32::0","value":"f32","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6535},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678467,"byte_end":1678470,"line_start":17,"line_end":17,"column_start":5,"column_end":8},"name":"U32","qualname":"::block::samples::Sample::U32","value":"Sample::U32(u32)","parent":{"krate":0,"index":6528},"children":[],"decl_id":null,"docs":" An unsigned integer sample.\n","sig":null,"attributes":[{"value":"/ An unsigned integer sample.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678431,"byte_end":1678462,"line_start":16,"line_end":16,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":6537},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678471,"byte_end":1678474,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"0","qualname":"::block::samples::Sample::U32::0","value":"u32","parent":{"krate":0,"index":6535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6528},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678325,"byte_end":1678331,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Sample","qualname":"::block::samples::Sample","value":"enum Sample { F16(f16), F32(f32), U32(u32), }","parent":null,"children":[{"krate":0,"index":6529},{"krate":0,"index":6532},{"krate":0,"index":6535}],"decl_id":null,"docs":" A single red, green, blue, or alpha value.\n","sig":null,"attributes":[{"value":"/ A single red, green, blue, or alpha value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678239,"byte_end":1678285,"line_start":6,"line_end":6,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678556,"byte_end":1678559,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"f32","qualname":"<Sample>::f32","value":"fn f32(f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a sample containing a 32-bit float.\n","sig":null,"attributes":[{"value":"/ Create a sample containing a 32-bit float.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678498,"byte_end":1678544,"line_start":22,"line_end":22,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678662,"byte_end":1678665,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"f16","qualname":"<Sample>::f16","value":"fn f16(f16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a sample containing a 16-bit float.\n","sig":null,"attributes":[{"value":"/ Create a sample containing a 16-bit float.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678604,"byte_end":1678650,"line_start":25,"line_end":25,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678770,"byte_end":1678773,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"u32","qualname":"<Sample>::u32","value":"fn u32(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a sample containing a 32-bit integer.\n","sig":null,"attributes":[{"value":"/ Create a sample containing a 32-bit integer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678710,"byte_end":1678758,"line_start":28,"line_end":28,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679007,"byte_end":1679013,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"to_f16","qualname":"<Sample>::to_f16","value":"fn to_f16(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Convert the sample to an f16 value. This has lower precision than f32.\n Note: An f32 can only represent integers up to `1024` as precise as a u32 could.\n","sig":null,"attributes":[{"value":"/ Convert the sample to an f16 value. This has lower precision than f32.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678818,"byte_end":1678892,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ Note: An f32 can only represent integers up to `1024` as precise as a u32 could.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678897,"byte_end":1678981,"line_start":32,"line_end":32,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678986,"byte_end":1678995,"line_start":33,"line_end":33,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679394,"byte_end":1679400,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Sample>::to_f32","value":"fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Convert the sample to an f32 value.\n Note: An f32 can only represent integers up to `8388608` as precise as a u32 could.\n","sig":null,"attributes":[{"value":"/ Convert the sample to an f32 value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679237,"byte_end":1679276,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/ Note: An f32 can only represent integers up to `8388608` as precise as a u32 could.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679281,"byte_end":1679368,"line_start":43,"line_end":43,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679373,"byte_end":1679382,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679724,"byte_end":1679730,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Sample>::to_u32","value":"fn to_u32(Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Convert the sample to a u32. Rounds floats to integers the same way that `3.1 as u32` does.\n","sig":null,"attributes":[{"value":"/ Convert the sample to a u32. Rounds floats to integers the same way that `3.1 as u32` does.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679603,"byte_end":1679698,"line_start":53,"line_end":53,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679703,"byte_end":1679712,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679997,"byte_end":1680003,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Sample>::is_nan","value":"fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this value not a number?\n","sig":null,"attributes":[{"value":"/ Is this value not a number?","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679940,"byte_end":1679971,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1679976,"byte_end":1679985,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680265,"byte_end":1680272,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Sample>::is_zero","value":"fn is_zero<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this value zero or negative zero?\n","sig":null,"attributes":[{"value":"/ Is this value zero or negative zero?","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680199,"byte_end":1680239,"line_start":73,"line_end":73,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680244,"byte_end":1680253,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680540,"byte_end":1680542,"line_start":85,"line_end":85,"column_start":8,"column_end":10},"name":"eq","qualname":"<Sample as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Self) -> bool","parent":{"krate":2,"index":2920},"children":[],"decl_id":{"krate":2,"index":2922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2945},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680943,"byte_end":1680950,"line_start":96,"line_end":96,"column_start":8,"column_end":15},"name":"default","qualname":"<Sample as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3246},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681026,"byte_end":1681030,"line_start":99,"line_end":99,"column_start":42,"column_end":46},"name":"from","qualname":"<Sample as std::convert::From>::from","value":"fn from(f16) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681013,"byte_end":1681022,"line_start":99,"line_end":99,"column_start":29,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681109,"byte_end":1681113,"line_start":100,"line_end":100,"column_start":42,"column_end":46},"name":"from","qualname":"<Sample as std::convert::From>::from","value":"fn from(f32) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681096,"byte_end":1681105,"line_start":100,"line_end":100,"column_start":29,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681192,"byte_end":1681196,"line_start":101,"line_end":101,"column_start":42,"column_end":46},"name":"from","qualname":"<Sample as std::convert::From>::from","value":"fn from(u32) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681179,"byte_end":1681188,"line_start":101,"line_end":101,"column_start":29,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681321,"byte_end":1681325,"line_start":104,"line_end":104,"column_start":18,"column_end":22},"name":"from","qualname":"<Sample as std::convert::From>::from","value":"fn from(Option<T>) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681308,"byte_end":1681317,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681430,"byte_end":1681434,"line_start":108,"line_end":108,"column_start":42,"column_end":46},"name":"from","qualname":"<f16 as std::convert::From>::from","value":"fn from(Sample) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681417,"byte_end":1681426,"line_start":108,"line_end":108,"column_start":29,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681512,"byte_end":1681516,"line_start":109,"line_end":109,"column_start":42,"column_end":46},"name":"from","qualname":"<f32 as std::convert::From>::from","value":"fn from(Sample) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681499,"byte_end":1681508,"line_start":109,"line_end":109,"column_start":29,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681594,"byte_end":1681598,"line_start":110,"line_end":110,"column_start":42,"column_end":46},"name":"from","qualname":"<u32 as std::convert::From>::from","value":"fn from(Sample) -> Self","parent":{"krate":2,"index":3174},"children":[],"decl_id":{"krate":2,"index":3176},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681581,"byte_end":1681590,"line_start":110,"line_end":110,"column_start":29,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":2961},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681806,"byte_end":1681822,"line_start":115,"line_end":115,"column_start":11,"column_end":27},"name":"FromNativeSample","qualname":"::block::samples::FromNativeSample","value":"FromNativeSample: Sized + Copy + Default + 'static","parent":null,"children":[{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964}],"decl_id":null,"docs":" Create an arbitrary sample type from one of the defined sample types.\n Should be compiled to a no-op where the file contains the predicted sample type.\n","sig":null,"attributes":[{"value":"/ Create an arbitrary sample type from one of the defined sample types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681637,"byte_end":1681710,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ Should be compiled to a no-op where the file contains the predicted sample type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681711,"byte_end":1681795,"line_start":114,"line_end":114,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681951,"byte_end":1681959,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"from_f16","qualname":"::block::samples::FromNativeSample::from_f16","value":"fn from_f16(f16) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":null,"docs":" Create this sample from a f16, trying to represent the same numerical value\n","sig":null,"attributes":[{"value":"/ Create this sample from a f16, trying to represent the same numerical value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681864,"byte_end":1681943,"line_start":117,"line_end":117,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682073,"byte_end":1682081,"line_start":121,"line_end":121,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::block::samples::FromNativeSample::from_f32","value":"fn from_f32(f32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":null,"docs":" Create this sample from a f32, trying to represent the same numerical value\n","sig":null,"attributes":[{"value":"/ Create this sample from a f32, trying to represent the same numerical value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681986,"byte_end":1682065,"line_start":120,"line_end":120,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2964},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682195,"byte_end":1682203,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::block::samples::FromNativeSample::from_u32","value":"fn from_u32(u32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":null,"docs":" Create this sample from a u32, trying to represent the same numerical value\n","sig":null,"attributes":[{"value":"/ Create this sample from a u32, trying to represent the same numerical value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682108,"byte_end":1682187,"line_start":123,"line_end":123,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682362,"byte_end":1682370,"line_start":129,"line_end":129,"column_start":8,"column_end":16},"name":"from_f16","qualname":"<f32 as block::samples::FromNativeSample>::from_f16","value":"fn from_f16(f16) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2962},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682417,"byte_end":1682425,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<f32 as block::samples::FromNativeSample>::from_f32","value":"fn from_f32(f32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2963},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682579,"byte_end":1682587,"line_start":131,"line_end":131,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<f32 as block::samples::FromNativeSample>::from_u32","value":"fn from_u32(u32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2964},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682667,"byte_end":1682675,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"from_f16","qualname":"<u32 as block::samples::FromNativeSample>::from_f16","value":"fn from_f16(f16) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2962},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2971},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682729,"byte_end":1682737,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<u32 as block::samples::FromNativeSample>::from_f32","value":"fn from_f32(f32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2963},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2972},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682782,"byte_end":1682790,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<u32 as block::samples::FromNativeSample>::from_u32","value":"fn from_u32(u32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2964},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682863,"byte_end":1682871,"line_start":141,"line_end":141,"column_start":8,"column_end":16},"name":"from_f16","qualname":"<f16 as block::samples::FromNativeSample>::from_f16","value":"fn from_f16(f16) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2962},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682909,"byte_end":1682917,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<f16 as block::samples::FromNativeSample>::from_f32","value":"fn from_f32(f32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2963},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682970,"byte_end":1682978,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<f16 as block::samples::FromNativeSample>::from_u32","value":"fn from_u32(u32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2964},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683076,"byte_end":1683084,"line_start":147,"line_end":147,"column_start":8,"column_end":16},"name":"from_f16","qualname":"<Sample as block::samples::FromNativeSample>::from_f16","value":"fn from_f16(f16) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2962},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683134,"byte_end":1683142,"line_start":148,"line_end":148,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<Sample as block::samples::FromNativeSample>::from_f32","value":"fn from_f32(f32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2963},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683192,"byte_end":1683200,"line_start":149,"line_end":149,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<Sample as block::samples::FromNativeSample>::from_u32","value":"fn from_u32(u32) -> Self","parent":{"krate":0,"index":2961},"children":[],"decl_id":{"krate":0,"index":2964},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2981},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683402,"byte_end":1683418,"line_start":155,"line_end":155,"column_start":11,"column_end":27},"name":"IntoNativeSample","qualname":"::block::samples::IntoNativeSample","value":"IntoNativeSample: Copy + Default + Sync + 'static","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984}],"decl_id":null,"docs":" Convert any type into one of the supported sample types.\n Should be compiled to a no-op where the file contains the predicted sample type\n","sig":null,"attributes":[{"value":"/ Convert any type into one of the supported sample types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683247,"byte_end":1683307,"line_start":153,"line_end":153,"column_start":1,"column_end":61}},{"value":"/ Should be compiled to a no-op where the file contains the predicted sample type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683308,"byte_end":1683391,"line_start":154,"line_end":154,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2982},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683547,"byte_end":1683553,"line_start":158,"line_end":158,"column_start":8,"column_end":14},"name":"to_f16","qualname":"::block::samples::IntoNativeSample::to_f16","value":"fn to_f16<'_>(&'_ Self) -> f16","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert this sample to an f16, trying to represent the same numerical value.\n","sig":null,"attributes":[{"value":"/ Convert this sample to an f16, trying to represent the same numerical value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683459,"byte_end":1683539,"line_start":157,"line_end":157,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683662,"byte_end":1683668,"line_start":161,"line_end":161,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::block::samples::IntoNativeSample::to_f32","value":"fn to_f32<'_>(&'_ Self) -> f32","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert this sample to an f32, trying to represent the same numerical value.\n","sig":null,"attributes":[{"value":"/ Convert this sample to an f32, trying to represent the same numerical value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683574,"byte_end":1683654,"line_start":160,"line_end":160,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683777,"byte_end":1683783,"line_start":164,"line_end":164,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::block::samples::IntoNativeSample::to_u32","value":"fn to_u32<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Convert this sample to an u16, trying to represent the same numerical value.\n","sig":null,"attributes":[{"value":"/ Convert this sample to an u16, trying to represent the same numerical value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683689,"byte_end":1683769,"line_start":163,"line_end":163,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683841,"byte_end":1683847,"line_start":168,"line_end":168,"column_start":8,"column_end":14},"name":"to_f16","qualname":"<f16 as block::samples::IntoNativeSample>::to_f16","value":"fn to_f16<'_>(&'_ Self) -> f16","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2982},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683894,"byte_end":1683900,"line_start":169,"line_end":169,"column_start":8,"column_end":14},"name":"to_f32","qualname":"<f16 as block::samples::IntoNativeSample>::to_f32","value":"fn to_f32<'_>(&'_ Self) -> f32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2983},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683947,"byte_end":1683953,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"to_u32","qualname":"<f16 as block::samples::IntoNativeSample>::to_u32","value":"fn to_u32<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2984},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684035,"byte_end":1684041,"line_start":174,"line_end":174,"column_start":8,"column_end":14},"name":"to_f16","qualname":"<f32 as block::samples::IntoNativeSample>::to_f16","value":"fn to_f16<'_>(&'_ Self) -> f16","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2982},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684088,"byte_end":1684094,"line_start":175,"line_end":175,"column_start":8,"column_end":14},"name":"to_f32","qualname":"<f32 as block::samples::IntoNativeSample>::to_f32","value":"fn to_f32<'_>(&'_ Self) -> f32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2983},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684141,"byte_end":1684147,"line_start":176,"line_end":176,"column_start":8,"column_end":14},"name":"to_u32","qualname":"<f32 as block::samples::IntoNativeSample>::to_u32","value":"fn to_u32<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2984},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684229,"byte_end":1684235,"line_start":180,"line_end":180,"column_start":8,"column_end":14},"name":"to_f16","qualname":"<u32 as block::samples::IntoNativeSample>::to_f16","value":"fn to_f16<'_>(&'_ Self) -> f16","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2982},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684282,"byte_end":1684288,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"to_f32","qualname":"<u32 as block::samples::IntoNativeSample>::to_f32","value":"fn to_f32<'_>(&'_ Self) -> f32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2983},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684335,"byte_end":1684341,"line_start":182,"line_end":182,"column_start":8,"column_end":14},"name":"to_u32","qualname":"<u32 as block::samples::IntoNativeSample>::to_u32","value":"fn to_u32<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2984},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684426,"byte_end":1684432,"line_start":186,"line_end":186,"column_start":8,"column_end":14},"name":"to_f16","qualname":"<Sample as block::samples::IntoNativeSample>::to_f16","value":"fn to_f16<'_>(&'_ Self) -> f16","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2982},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684480,"byte_end":1684486,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"to_f32","qualname":"<Sample as block::samples::IntoNativeSample>::to_f32","value":"fn to_f32<'_>(&'_ Self) -> f32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2983},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684534,"byte_end":1684540,"line_start":188,"line_end":188,"column_start":8,"column_end":14},"name":"to_u32","qualname":"<Sample as block::samples::IntoNativeSample>::to_u32","value":"fn to_u32<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2981},"children":[],"decl_id":{"krate":0,"index":2984},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3001},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chunk","qualname":"::block::chunk","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","parent":null,"children":[{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":6543},{"krate":0,"index":6546},{"krate":0,"index":6548},{"krate":0,"index":6550},{"krate":0,"index":6563},{"krate":0,"index":6565},{"krate":0,"index":6567},{"krate":0,"index":6570},{"krate":0,"index":6572},{"krate":0,"index":6574},{"krate":0,"index":6577},{"krate":0,"index":6579},{"krate":0,"index":6581},{"krate":0,"index":6584},{"krate":0,"index":6585},{"krate":0,"index":6587},{"krate":0,"index":6589},{"krate":0,"index":6592},{"krate":0,"index":6593},{"krate":0,"index":6595},{"krate":0,"index":6596},{"krate":0,"index":6599},{"krate":0,"index":6604},{"krate":0,"index":6606},{"krate":0,"index":6608},{"krate":0,"index":6613},{"krate":0,"index":6615},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3019},{"krate":0,"index":3022},{"krate":0,"index":3025},{"krate":0,"index":3030},{"krate":0,"index":3035},{"krate":0,"index":3040},{"krate":0,"index":3045},{"krate":0,"index":3046},{"krate":0,"index":3049},{"krate":0,"index":3052},{"krate":0,"index":3055},{"krate":0,"index":3058},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3067}],"decl_id":null,"docs":" Read and write already compressed pixel data blocks.\n Does not include the process of compression and decompression.\n","sig":null,"attributes":[{"value":"/ Read and write already compressed pixel data blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1684780,"byte_end":1684836,"line_start":2,"line_end":2,"column_start":1,"column_end":57}},{"value":"/ Does not include the process of compression and decompression.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1684837,"byte_end":1684903,"line_start":3,"line_end":3,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":6543},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685255,"byte_end":1685260,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::block::chunk::Chunk","value":"Chunk { layer_index, compressed_block }","parent":null,"children":[{"krate":0,"index":6544},{"krate":0,"index":6545}],"decl_id":null,"docs":" A generic block of pixel information.\n Contains pixel data and an index to the corresponding header.\n All pixel data in a file is split into a list of chunks.\n Also contains positioning information that locates this\n data block in the referenced layer.\n","sig":null,"attributes":[{"value":"/ A generic block of pixel information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1684951,"byte_end":1684992,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/ Contains pixel data and an index to the corresponding header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1684993,"byte_end":1685058,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"/ All pixel data in a file is split into a list of chunks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685059,"byte_end":1685119,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ Also contains positioning information that locates this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685120,"byte_end":1685179,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ data block in the referenced layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685180,"byte_end":1685219,"line_start":11,"line_end":11,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":6544},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685461,"byte_end":1685472,"line_start":18,"line_end":18,"column_start":9,"column_end":20},"name":"layer_index","qualname":"::block::chunk::Chunk::layer_index","value":"usize","parent":{"krate":0,"index":6543},"children":[],"decl_id":null,"docs":" The index of the layer that the block belongs to.\n This is required as the pixel data can appear in any order in a file.\n","sig":null,"attributes":[{"value":"/ The index of the layer that the block belongs to.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685268,"byte_end":1685321,"line_start":15,"line_end":15,"column_start":5,"column_end":58}},{"value":"/ This is required as the pixel data can appear in any order in a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685326,"byte_end":1685399,"line_start":16,"line_end":16,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":6545},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685529,"byte_end":1685545,"line_start":21,"line_end":21,"column_start":9,"column_end":25},"name":"compressed_block","qualname":"::block::chunk::Chunk::compressed_block","value":"block::chunk::CompressedBlock","parent":{"krate":0,"index":6543},"children":[],"decl_id":null,"docs":" The compressed pixel contents.\n","sig":null,"attributes":[{"value":"/ The compressed pixel contents.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685486,"byte_end":1685520,"line_start":20,"line_end":20,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6551},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685901,"byte_end":1685909,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"ScanLine","qualname":"::block::chunk::CompressedBlock::ScanLine","value":"CompressedBlock::ScanLine(CompressedScanLineBlock)","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Scan line blocks of flat data.\n","sig":null,"attributes":[{"value":"/ Scan line blocks of flat data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685862,"byte_end":1685896,"line_start":32,"line_end":32,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6553},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685910,"byte_end":1685933,"line_start":33,"line_end":33,"column_start":14,"column_end":37},"name":"0","qualname":"::block::chunk::CompressedBlock::ScanLine::0","value":"block::chunk::CompressedScanLineBlock","parent":{"krate":0,"index":6551},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6554},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685969,"byte_end":1685973,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"Tile","qualname":"::block::chunk::CompressedBlock::Tile","value":"CompressedBlock::Tile(CompressedTileBlock)","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Tiles of flat data.\n","sig":null,"attributes":[{"value":"/ Tiles of flat data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685941,"byte_end":1685964,"line_start":35,"line_end":35,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":6556},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685974,"byte_end":1685993,"line_start":36,"line_end":36,"column_start":10,"column_end":29},"name":"0","qualname":"::block::chunk::CompressedBlock::Tile::0","value":"block::chunk::CompressedTileBlock","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6557},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686040,"byte_end":1686052,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"DeepScanLine","qualname":"::block::chunk::CompressedBlock::DeepScanLine","value":"CompressedBlock::DeepScanLine(CompressedDeepScanLineBlock)","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Scan line blocks of deep data.\n","sig":null,"attributes":[{"value":"/ Scan line blocks of deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686001,"byte_end":1686035,"line_start":38,"line_end":38,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6559},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686053,"byte_end":1686080,"line_start":39,"line_end":39,"column_start":18,"column_end":45},"name":"0","qualname":"::block::chunk::CompressedBlock::DeepScanLine::0","value":"block::chunk::CompressedDeepScanLineBlock","parent":{"krate":0,"index":6557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6560},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686116,"byte_end":1686124,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"DeepTile","qualname":"::block::chunk::CompressedBlock::DeepTile","value":"CompressedBlock::DeepTile(CompressedDeepTileBlock)","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Tiles of deep data.\n","sig":null,"attributes":[{"value":"/ Tiles of deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686088,"byte_end":1686111,"line_start":41,"line_end":41,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":6562},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686125,"byte_end":1686148,"line_start":42,"line_end":42,"column_start":14,"column_end":37},"name":"0","qualname":"::block::chunk::CompressedBlock::DeepTile::0","value":"block::chunk::CompressedDeepTileBlock","parent":{"krate":0,"index":6560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6550},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685839,"byte_end":1685854,"line_start":30,"line_end":30,"column_start":10,"column_end":25},"name":"CompressedBlock","qualname":"::block::chunk::CompressedBlock","value":"enum CompressedBlock {\n    ScanLine(CompressedScanLineBlock),\n    Tile(CompressedTileBlock),\n    DeepScanLine(CompressedDeepScanLineBlock),\n    DeepTile(CompressedDeepTileBlock),\n}","parent":null,"children":[{"krate":0,"index":6551},{"krate":0,"index":6554},{"krate":0,"index":6557},{"krate":0,"index":6560}],"decl_id":null,"docs":" The raw, possibly compressed pixel data of a file.\n Each layer in a file can have a different type.\n Also contains positioning information that locates this\n data block in the corresponding layer.\n Exists inside a `Chunk`.\n","sig":null,"attributes":[{"value":"/ The raw, possibly compressed pixel data of a file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685567,"byte_end":1685621,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/ Each layer in a file can have a different type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685622,"byte_end":1685673,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"/ Also contains positioning information that locates this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685674,"byte_end":1685733,"line_start":26,"line_end":26,"column_start":1,"column_end":60}},{"value":"/ data block in the corresponding layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685734,"byte_end":1685776,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ Exists inside a `Chunk`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1685777,"byte_end":1685805,"line_start":28,"line_end":28,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6567},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686294,"byte_end":1686317,"line_start":48,"line_end":48,"column_start":12,"column_end":35},"name":"CompressedScanLineBlock","qualname":"::block::chunk::CompressedScanLineBlock","value":"CompressedScanLineBlock { y_coordinate, compressed_pixels }","parent":null,"children":[{"krate":0,"index":6568},{"krate":0,"index":6569}],"decl_id":null,"docs":" A `Block` of possibly compressed flat scan lines.\n Corresponds to type attribute `scanlineimage`.\n","sig":null,"attributes":[{"value":"/ A `Block` of possibly compressed flat scan lines.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686154,"byte_end":1686207,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/ Corresponds to type attribute `scanlineimage`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686208,"byte_end":1686258,"line_start":46,"line_end":46,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6568},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686523,"byte_end":1686535,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"name":"y_coordinate","qualname":"::block::chunk::CompressedScanLineBlock::y_coordinate","value":"i32","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" The block's y coordinate is the pixel space y coordinate of the top scan line in the block.\n The top scan line block in the image is aligned with the top edge of the data window.\n","sig":null,"attributes":[{"value":"/ The block's y coordinate is the pixel space y coordinate of the top scan line in the block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686325,"byte_end":1686420,"line_start":50,"line_end":50,"column_start":5,"column_end":100}},{"value":"/ The top scan line block in the image is aligned with the top edge of the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686425,"byte_end":1686514,"line_start":51,"line_end":51,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":6569},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686800,"byte_end":1686817,"line_start":57,"line_end":57,"column_start":9,"column_end":26},"name":"compressed_pixels","qualname":"::block::chunk::CompressedScanLineBlock::compressed_pixels","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" One or more scan lines may be stored together as a scan line block.\n The number of scan lines per block depends on how the pixel data are compressed.\n For each line in the tile, for each channel, the row values are contiguous.\n","sig":null,"attributes":[{"value":"/ One or more scan lines may be stored together as a scan line block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686547,"byte_end":1686618,"line_start":54,"line_end":54,"column_start":5,"column_end":76}},{"value":"/ The number of scan lines per block depends on how the pixel data are compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686623,"byte_end":1686707,"line_start":55,"line_end":55,"column_start":5,"column_end":89}},{"value":"/ For each line in the tile, for each channel, the row values are contiguous.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686712,"byte_end":1686791,"line_start":56,"line_end":56,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":6574},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686966,"byte_end":1686985,"line_start":63,"line_end":63,"column_start":12,"column_end":31},"name":"CompressedTileBlock","qualname":"::block::chunk::CompressedTileBlock","value":"CompressedTileBlock { coordinates, compressed_pixels }","parent":null,"children":[{"krate":0,"index":6575},{"krate":0,"index":6576}],"decl_id":null,"docs":" This `Block` is a tile of flat (non-deep) data.\n Corresponds to type attribute `tiledimage`.\n","sig":null,"attributes":[{"value":"/ This `Block` is a tile of flat (non-deep) data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686831,"byte_end":1686882,"line_start":60,"line_end":60,"column_start":1,"column_end":52}},{"value":"/ Corresponds to type attribute `tiledimage`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686883,"byte_end":1686930,"line_start":61,"line_end":61,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":6575},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687024,"byte_end":1687035,"line_start":66,"line_end":66,"column_start":9,"column_end":20},"name":"coordinates","qualname":"::block::chunk::CompressedTileBlock::coordinates","value":"block::chunk::TileCoordinates","parent":{"krate":0,"index":6574},"children":[],"decl_id":null,"docs":" The tile location.\n","sig":null,"attributes":[{"value":"/ The tile location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1686993,"byte_end":1687015,"line_start":65,"line_end":65,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":6576},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687312,"byte_end":1687329,"line_start":71,"line_end":71,"column_start":9,"column_end":26},"name":"compressed_pixels","qualname":"::block::chunk::CompressedTileBlock::compressed_pixels","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":6574},"children":[],"decl_id":null,"docs":" One or more scan lines may be stored together as a scan line block.\n The number of scan lines per block depends on how the pixel data are compressed.\n For each line in the tile, for each channel, the row values are contiguous.\n","sig":null,"attributes":[{"value":"/ One or more scan lines may be stored together as a scan line block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687059,"byte_end":1687130,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ The number of scan lines per block depends on how the pixel data are compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687135,"byte_end":1687219,"line_start":69,"line_end":69,"column_start":5,"column_end":89}},{"value":"/ For each line in the tile, for each channel, the row values are contiguous.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687224,"byte_end":1687303,"line_start":70,"line_end":70,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":6581},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687490,"byte_end":1687505,"line_start":76,"line_end":76,"column_start":12,"column_end":27},"name":"TileCoordinates","qualname":"::block::chunk::TileCoordinates","value":"TileCoordinates { tile_index, level_index }","parent":null,"children":[{"krate":0,"index":6582},{"krate":0,"index":6583}],"decl_id":null,"docs":" Indicates the position and resolution level of a `TileBlock` or `DeepTileBlock`.\n","sig":null,"attributes":[{"value":"/ Indicates the position and resolution level of a `TileBlock` or `DeepTileBlock`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687343,"byte_end":1687427,"line_start":74,"line_end":74,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":6582},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687564,"byte_end":1687574,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"name":"tile_index","qualname":"::block::chunk::TileCoordinates::tile_index","value":"math::Vec2<usize>","parent":{"krate":0,"index":6581},"children":[],"decl_id":null,"docs":" Index of the tile, not pixel position.\n","sig":null,"attributes":[{"value":"/ Index of the tile, not pixel position.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687513,"byte_end":1687555,"line_start":78,"line_end":78,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6583},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687634,"byte_end":1687645,"line_start":82,"line_end":82,"column_start":9,"column_end":20},"name":"level_index","qualname":"::block::chunk::TileCoordinates::level_index","value":"math::Vec2<usize>","parent":{"krate":0,"index":6581},"children":[],"decl_id":null,"docs":" Index of the Mip/Rip level.\n","sig":null,"attributes":[{"value":"/ Index of the Mip/Rip level.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687594,"byte_end":1687625,"line_start":81,"line_end":81,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":6599},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687806,"byte_end":1687833,"line_start":88,"line_end":88,"column_start":12,"column_end":39},"name":"CompressedDeepScanLineBlock","qualname":"::block::chunk::CompressedDeepScanLineBlock","value":"CompressedDeepScanLineBlock { y_coordinate, decompressed_sample_data_size, compressed_pixel_offset_table, compressed_sample_data }","parent":null,"children":[{"krate":0,"index":6600},{"krate":0,"index":6601},{"krate":0,"index":6602},{"krate":0,"index":6603}],"decl_id":null,"docs":" This `Block` consists of one or more deep scan lines.\n Corresponds to type attribute `deepscanline`.\n","sig":null,"attributes":[{"value":"/ This `Block` consists of one or more deep scan lines.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687663,"byte_end":1687720,"line_start":85,"line_end":85,"column_start":1,"column_end":58}},{"value":"/ Corresponds to type attribute `deepscanline`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687721,"byte_end":1687770,"line_start":86,"line_end":86,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6600},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688039,"byte_end":1688051,"line_start":92,"line_end":92,"column_start":9,"column_end":21},"name":"y_coordinate","qualname":"::block::chunk::CompressedDeepScanLineBlock::y_coordinate","value":"i32","parent":{"krate":0,"index":6599},"children":[],"decl_id":null,"docs":" The block's y coordinate is the pixel space y coordinate of the top scan line in the block.\n The top scan line block in the image is aligned with the top edge of the data window.\n","sig":null,"attributes":[{"value":"/ The block's y coordinate is the pixel space y coordinate of the top scan line in the block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687841,"byte_end":1687936,"line_start":90,"line_end":90,"column_start":5,"column_end":100}},{"value":"/ The top scan line block in the image is aligned with the top edge of the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1687941,"byte_end":1688030,"line_start":91,"line_end":91,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":6601},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688093,"byte_end":1688122,"line_start":95,"line_end":95,"column_start":9,"column_end":38},"name":"decompressed_sample_data_size","qualname":"::block::chunk::CompressedDeepScanLineBlock::decompressed_sample_data_size","value":"usize","parent":{"krate":0,"index":6599},"children":[],"decl_id":null,"docs":" Count of samples.\n","sig":null,"attributes":[{"value":"/ Count of samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688063,"byte_end":1688084,"line_start":94,"line_end":94,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":6602},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688397,"byte_end":1688426,"line_start":100,"line_end":100,"column_start":9,"column_end":38},"name":"compressed_pixel_offset_table","qualname":"::block::chunk::CompressedDeepScanLineBlock::compressed_pixel_offset_table","value":"std::vec::Vec<i8>","parent":{"krate":0,"index":6599},"children":[],"decl_id":null,"docs":" The pixel offset table is a list of integers, one for each pixel column within the data window.\n Each entry in the table indicates the total number of samples required\n to store the pixel in it as well as all pixels to the left of it.\n","sig":null,"attributes":[{"value":"/ The pixel offset table is a list of integers, one for each pixel column within the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688136,"byte_end":1688235,"line_start":97,"line_end":97,"column_start":5,"column_end":104}},{"value":"/ Each entry in the table indicates the total number of samples required","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688240,"byte_end":1688314,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ to store the pixel in it as well as all pixels to the left of it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688319,"byte_end":1688388,"line_start":99,"line_end":99,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6603},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688695,"byte_end":1688717,"line_start":105,"line_end":105,"column_start":9,"column_end":31},"name":"compressed_sample_data","qualname":"::block::chunk::CompressedDeepScanLineBlock::compressed_sample_data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":6599},"children":[],"decl_id":null,"docs":" One or more scan lines may be stored together as a scan line block.\n The number of scan lines per block depends on how the pixel data are compressed.\n For each line in the tile, for each channel, the row values are contiguous.\n","sig":null,"attributes":[{"value":"/ One or more scan lines may be stored together as a scan line block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688442,"byte_end":1688513,"line_start":102,"line_end":102,"column_start":5,"column_end":76}},{"value":"/ The number of scan lines per block depends on how the pixel data are compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688518,"byte_end":1688602,"line_start":103,"line_end":103,"column_start":5,"column_end":89}},{"value":"/ For each line in the tile, for each channel, the row values are contiguous.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688607,"byte_end":1688686,"line_start":104,"line_end":104,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":6608},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688853,"byte_end":1688876,"line_start":111,"line_end":111,"column_start":12,"column_end":35},"name":"CompressedDeepTileBlock","qualname":"::block::chunk::CompressedDeepTileBlock","value":"CompressedDeepTileBlock { coordinates, decompressed_sample_data_size, compressed_pixel_offset_table, compressed_sample_data }","parent":null,"children":[{"krate":0,"index":6609},{"krate":0,"index":6610},{"krate":0,"index":6611},{"krate":0,"index":6612}],"decl_id":null,"docs":" This `Block` is a tile of deep data.\n Corresponds to type attribute `deeptile`.\n","sig":null,"attributes":[{"value":"/ This `Block` is a tile of deep data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688731,"byte_end":1688771,"line_start":108,"line_end":108,"column_start":1,"column_end":41}},{"value":"/ Corresponds to type attribute `deeptile`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688772,"byte_end":1688817,"line_start":109,"line_end":109,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6609},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688915,"byte_end":1688926,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"coordinates","qualname":"::block::chunk::CompressedDeepTileBlock::coordinates","value":"block::chunk::TileCoordinates","parent":{"krate":0,"index":6608},"children":[],"decl_id":null,"docs":" The tile location.\n","sig":null,"attributes":[{"value":"/ The tile location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688884,"byte_end":1688906,"line_start":113,"line_end":113,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":6610},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688980,"byte_end":1689009,"line_start":117,"line_end":117,"column_start":9,"column_end":38},"name":"decompressed_sample_data_size","qualname":"::block::chunk::CompressedDeepTileBlock::decompressed_sample_data_size","value":"usize","parent":{"krate":0,"index":6608},"children":[],"decl_id":null,"docs":" Count of samples.\n","sig":null,"attributes":[{"value":"/ Count of samples.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1688950,"byte_end":1688971,"line_start":116,"line_end":116,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":6611},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689284,"byte_end":1689313,"line_start":122,"line_end":122,"column_start":9,"column_end":38},"name":"compressed_pixel_offset_table","qualname":"::block::chunk::CompressedDeepTileBlock::compressed_pixel_offset_table","value":"std::vec::Vec<i8>","parent":{"krate":0,"index":6608},"children":[],"decl_id":null,"docs":" The pixel offset table is a list of integers, one for each pixel column within the data window.\n Each entry in the table indicates the total number of samples required\n to store the pixel in it as well as all pixels to the left of it.\n","sig":null,"attributes":[{"value":"/ The pixel offset table is a list of integers, one for each pixel column within the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689023,"byte_end":1689122,"line_start":119,"line_end":119,"column_start":5,"column_end":104}},{"value":"/ Each entry in the table indicates the total number of samples required","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689127,"byte_end":1689201,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ to store the pixel in it as well as all pixels to the left of it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689206,"byte_end":1689275,"line_start":121,"line_end":121,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689582,"byte_end":1689604,"line_start":127,"line_end":127,"column_start":9,"column_end":31},"name":"compressed_sample_data","qualname":"::block::chunk::CompressedDeepTileBlock::compressed_sample_data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":6608},"children":[],"decl_id":null,"docs":" One or more scan lines may be stored together as a scan line block.\n The number of scan lines per block depends on how the pixel data are compressed.\n For each line in the tile, for each channel, the row values are contiguous.\n","sig":null,"attributes":[{"value":"/ One or more scan lines may be stored together as a scan line block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689329,"byte_end":1689400,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ The number of scan lines per block depends on how the pixel data are compressed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689405,"byte_end":1689489,"line_start":125,"line_end":125,"column_start":5,"column_end":89}},{"value":"/ For each line in the tile, for each channel, the row values are contiguous.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689494,"byte_end":1689573,"line_start":126,"line_end":126,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689741,"byte_end":1689746,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"write","qualname":"<TileCoordinates>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689666,"byte_end":1689729,"line_start":135,"line_end":135,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1690125,"byte_end":1690129,"line_start":145,"line_end":145,"column_start":12,"column_end":16},"name":"read","qualname":"<TileCoordinates>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1690075,"byte_end":1690113,"line_start":144,"line_end":144,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3012},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1691056,"byte_end":1691071,"line_start":167,"line_end":167,"column_start":12,"column_end":27},"name":"to_data_indices","qualname":"<TileCoordinates>::to_data_indices","value":"fn to_data_indices<'_>(&'_ Self, Vec2<usize>, Vec2<usize>)\n-> Result<IntegerBounds>","parent":null,"children":[],"decl_id":null,"docs":" The indices which can be used to index into the arrays of a data window.\n These coordinates are only valid inside the corresponding one header.\n Will start at 0 and always be positive.\n","sig":null,"attributes":[{"value":"/ The indices which can be used to index into the arrays of a data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1690842,"byte_end":1690918,"line_start":164,"line_end":164,"column_start":5,"column_end":81}},{"value":"/ These coordinates are only valid inside the corresponding one header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1690923,"byte_end":1690996,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ Will start at 0 and always be positive.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1691001,"byte_end":1691044,"line_start":166,"line_end":166,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3013},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1691797,"byte_end":1691816,"line_start":186,"line_end":186,"column_start":12,"column_end":31},"name":"to_absolute_indices","qualname":"<TileCoordinates>::to_absolute_indices","value":"fn to_absolute_indices<'_>(&'_ Self, Vec2<usize>, IntegerBounds)\n-> Result<IntegerBounds>","parent":null,"children":[],"decl_id":null,"docs":" Absolute coordinates inside the global 2D space of a file, may be negative.\n","sig":null,"attributes":[{"value":"/ Absolute coordinates inside the global 2D space of a file, may be negative.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1691706,"byte_end":1691785,"line_start":185,"line_end":185,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692113,"byte_end":1692140,"line_start":192,"line_end":192,"column_start":12,"column_end":39},"name":"is_largest_resolution_level","qualname":"<TileCoordinates>::is_largest_resolution_level","value":"fn is_largest_resolution_level<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if this is the original resolution or a smaller copy.\n","sig":null,"attributes":[{"value":"/ Returns if this is the original resolution or a smaller copy.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692036,"byte_end":1692101,"line_start":191,"line_end":191,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3026},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692389,"byte_end":1692394,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"name":"write","qualname":"<CompressedScanLineBlock>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692314,"byte_end":1692377,"line_start":203,"line_end":203,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3028},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692744,"byte_end":1692748,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"read","qualname":"<CompressedScanLineBlock>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read, usize) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692694,"byte_end":1692732,"line_start":212,"line_end":212,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3031},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693193,"byte_end":1693198,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"write","qualname":"<CompressedTileBlock>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693118,"byte_end":1693181,"line_start":222,"line_end":222,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693541,"byte_end":1693545,"line_start":232,"line_end":232,"column_start":12,"column_end":16},"name":"read","qualname":"<CompressedTileBlock>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read, usize) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693491,"byte_end":1693529,"line_start":231,"line_end":231,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3036},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693999,"byte_end":1694004,"line_start":242,"line_end":242,"column_start":12,"column_end":17},"name":"write","qualname":"<CompressedDeepScanLineBlock>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693924,"byte_end":1693987,"line_start":241,"line_end":241,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1694663,"byte_end":1694667,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"read","qualname":"<CompressedDeepScanLineBlock>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read, usize) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1694613,"byte_end":1694651,"line_start":254,"line_end":254,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1695820,"byte_end":1695825,"line_start":287,"line_end":287,"column_start":12,"column_end":17},"name":"write","qualname":"<CompressedDeepTileBlock>::write","value":"fn write<W, '_, '_>(&'_ Self, &'_ mut W) -> UnitResult where W: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1695745,"byte_end":1695808,"line_start":286,"line_end":286,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1696477,"byte_end":1696481,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"name":"read","qualname":"<CompressedDeepTileBlock>::read","value":"fn read<'_, impl Read>(&'_ mut impl Read, usize) -> Result<Self> where\nimpl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1696427,"byte_end":1696465,"line_start":299,"line_end":299,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1697841,"byte_end":1697846,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"write","qualname":"<Chunk>::write","value":"fn write<'_, '_, impl Write>(&'_ Self, &'_ mut impl Write, usize)\n-> UnitResult where impl Write: Write","parent":null,"children":[],"decl_id":null,"docs":" Without validation, write this instance to the byte stream.\n","sig":null,"attributes":[{"value":"/ Without validation, write this instance to the byte stream.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1697766,"byte_end":1697829,"line_start":333,"line_end":333,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3070},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1698637,"byte_end":1698641,"line_start":349,"line_end":349,"column_start":12,"column_end":16},"name":"read","qualname":"<Chunk>::read","value":"fn read<'_, '_, impl Read>(&'_ mut impl Read, &'_ MetaData) -> Result<Self>\nwhere impl Read: Read","parent":null,"children":[],"decl_id":null,"docs":" Read the value without validating.\n","sig":null,"attributes":[{"value":"/ Read the value without validating.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1698587,"byte_end":1698625,"line_start":348,"line_end":348,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6617},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619026,"byte_end":1619036,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"BlockIndex","qualname":"::block::BlockIndex","value":"BlockIndex { layer, pixel_position, pixel_size, level }","parent":null,"children":[{"krate":0,"index":6618},{"krate":0,"index":6619},{"krate":0,"index":6620},{"krate":0,"index":6621}],"decl_id":null,"docs":" Specifies where a block of pixel data should be placed in the actual image.\n This is a globally unique identifier which\n includes the layer, level index, and pixel location.\n","sig":null,"attributes":[{"value":"/ Specifies where a block of pixel data should be placed in the actual image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618780,"byte_end":1618859,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ This is a globally unique identifier which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618860,"byte_end":1618906,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/ includes the layer, level index, and pixel location.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618907,"byte_end":1618963,"line_start":32,"line_end":32,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6618},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619076,"byte_end":1619081,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"layer","qualname":"::block::BlockIndex::layer","value":"usize","parent":{"krate":0,"index":6617},"children":[],"decl_id":null,"docs":" Index of the layer.\n","sig":null,"attributes":[{"value":"/ Index of the layer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619044,"byte_end":1619067,"line_start":36,"line_end":36,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":6619},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619174,"byte_end":1619188,"line_start":40,"line_end":40,"column_start":9,"column_end":23},"name":"pixel_position","qualname":"::block::BlockIndex::pixel_position","value":"math::Vec2<usize>","parent":{"krate":0,"index":6617},"children":[],"decl_id":null,"docs":" Index of the top left pixel from the block within the data window.\n","sig":null,"attributes":[{"value":"/ Index of the top left pixel from the block within the data window.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619095,"byte_end":1619165,"line_start":39,"line_end":39,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6620},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619343,"byte_end":1619353,"line_start":44,"line_end":44,"column_start":9,"column_end":19},"name":"pixel_size","qualname":"::block::BlockIndex::pixel_size","value":"math::Vec2<usize>","parent":{"krate":0,"index":6617},"children":[],"decl_id":null,"docs":" Number of pixels in this block, extending to the right and downwards.\n Stays the same across all resolution levels.\n","sig":null,"attributes":[{"value":"/ Number of pixels in this block, extending to the right and downwards.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619208,"byte_end":1619281,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ Stays the same across all resolution levels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619286,"byte_end":1619334,"line_start":43,"line_end":43,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":6621},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619429,"byte_end":1619434,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"name":"level","qualname":"::block::BlockIndex::level","value":"math::Vec2<usize>","parent":{"krate":0,"index":6617},"children":[],"decl_id":null,"docs":" Index of the mip or rip level in the image.\n","sig":null,"attributes":[{"value":"/ Index of the mip or rip level in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619373,"byte_end":1619420,"line_start":46,"line_end":46,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":6637},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619595,"byte_end":1619612,"line_start":52,"line_end":52,"column_start":12,"column_end":29},"name":"UncompressedBlock","qualname":"::block::UncompressedBlock","value":"UncompressedBlock { index, data }","parent":null,"children":[{"krate":0,"index":6638},{"krate":0,"index":6639}],"decl_id":null,"docs":" Contains a block of pixel data and where that data should be placed in the actual image.\n","sig":null,"attributes":[{"value":"/ Contains a block of pixel data and where that data should be placed in the actual image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619452,"byte_end":1619544,"line_start":50,"line_end":50,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":6638},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619671,"byte_end":1619676,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"index","qualname":"::block::UncompressedBlock::index","value":"block::BlockIndex","parent":{"krate":0,"index":6637},"children":[],"decl_id":null,"docs":" Location of the data inside the image.\n","sig":null,"attributes":[{"value":"/ Location of the data inside the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619620,"byte_end":1619662,"line_start":54,"line_end":54,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6639},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620082,"byte_end":1620086,"line_start":62,"line_end":62,"column_start":9,"column_end":13},"name":"data","qualname":"::block::UncompressedBlock::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":6637},"children":[],"decl_id":null,"docs":" Uncompressed pixel values of the whole block.\n One or more scan lines may be stored together as a scan line block.\n This byte vector contains all pixel rows, one after another.\n For each line in the tile, for each channel, the row values are contiguous.\n Stores all samples of the first channel, then all samples of the second channel, and so on.\n","sig":null,"attributes":[{"value":"/ Uncompressed pixel values of the whole block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619695,"byte_end":1619744,"line_start":57,"line_end":57,"column_start":5,"column_end":54}},{"value":"/ One or more scan lines may be stored together as a scan line block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619749,"byte_end":1619820,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/ This byte vector contains all pixel rows, one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619825,"byte_end":1619889,"line_start":59,"line_end":59,"column_start":5,"column_end":69}},{"value":"/ For each line in the tile, for each channel, the row values are contiguous.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619894,"byte_end":1619973,"line_start":60,"line_end":60,"column_start":5,"column_end":84}},{"value":"/ Stores all samples of the first channel, then all samples of the second channel, and so on.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1619978,"byte_end":1620073,"line_start":61,"line_end":61,"column_start":5,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":3146},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620431,"byte_end":1620435,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"read","qualname":"::block::read","value":"fn read<R>(R, bool) -> Result<self::reader::Reader<R>> where R: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Immediately reads the meta data from the file.\n Then, returns a reader that can be used to read all pixel blocks.\n From the reader, you can pull each compressed chunk from the file.\n Alternatively, you can create a decompressor, and pull the uncompressed data from it.\n The reader is assumed to be buffered.\n","sig":null,"attributes":[{"value":"/ Immediately reads the meta data from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620100,"byte_end":1620150,"line_start":65,"line_end":65,"column_start":1,"column_end":51}},{"value":"/ Then, returns a reader that can be used to read all pixel blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620151,"byte_end":1620220,"line_start":66,"line_end":66,"column_start":1,"column_end":70}},{"value":"/ From the reader, you can pull each compressed chunk from the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620221,"byte_end":1620291,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/ Alternatively, you can create a decompressor, and pull the uncompressed data from it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620292,"byte_end":1620381,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/ The reader is assumed to be buffered.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620382,"byte_end":1620423,"line_start":69,"line_end":69,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3148},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620963,"byte_end":1620968,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"write","qualname":"::block::write","value":"fn write<W,\nimpl FnOnce(MetaData, &mut self::writer::ChunkWriter<W>) -> UnitResult>(W,\nHeaders, bool,\nimpl FnOnce(MetaData, &mut self::writer::ChunkWriter<W>) -> UnitResult)\n-> UnitResult where W: Write + Seek,\nimpl FnOnce(MetaData, &mut self::writer::ChunkWriter<W>) -> UnitResult: for<'_> FnOnce(MetaData,\n&'_ mut self::writer::ChunkWriter<W>) -> UnitResult","parent":null,"children":[],"decl_id":null,"docs":" Immediately writes the meta data to the file.\n Then, calls a closure with a writer that can be used to write all pixel blocks.\n In the closure, you can push compressed chunks directly into the writer.\n Alternatively, you can create a compressor, wrapping the writer, and push the uncompressed data to it.\n The writer is assumed to be buffered.\n","sig":null,"attributes":[{"value":"/ Immediately writes the meta data to the file.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620596,"byte_end":1620645,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ Then, calls a closure with a writer that can be used to write all pixel blocks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620646,"byte_end":1620729,"line_start":75,"line_end":75,"column_start":1,"column_end":84}},{"value":"/ In the closure, you can push compressed chunks directly into the writer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620730,"byte_end":1620806,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ Alternatively, you can create a compressor, wrapping the writer, and push the uncompressed data to it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620807,"byte_end":1620913,"line_start":77,"line_end":77,"column_start":1,"column_end":107}},{"value":"/ The writer is assumed to be buffered.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1620914,"byte_end":1620955,"line_start":78,"line_end":78,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3151},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621705,"byte_end":1621743,"line_start":95,"line_end":95,"column_start":8,"column_end":46},"name":"enumerate_ordered_header_block_indices","qualname":"::block::enumerate_ordered_header_block_indices","value":"fn enumerate_ordered_header_block_indices<'_>(&'_ [Header]) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" This iterator tells you the block indices of all blocks that must be in the image.\n The order of the blocks depends on the `LineOrder` attribute\n (unspecified line order is treated the same as increasing line order).\n The blocks written to the file must be exactly in this order,\n except for when the `LineOrder` is unspecified.\n The index represents the block index, in increasing line order, within the header.\n","sig":null,"attributes":[{"value":"/ This iterator tells you the block indices of all blocks that must be in the image.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621266,"byte_end":1621352,"line_start":89,"line_end":89,"column_start":1,"column_end":87}},{"value":"/ The order of the blocks depends on the `LineOrder` attribute","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621353,"byte_end":1621417,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ (unspecified line order is treated the same as increasing line order).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621418,"byte_end":1621492,"line_start":91,"line_end":91,"column_start":1,"column_end":75}},{"value":"/ The blocks written to the file must be exactly in this order,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621493,"byte_end":1621558,"line_start":92,"line_end":92,"column_start":1,"column_end":66}},{"value":"/ except for when the `LineOrder` is unspecified.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621559,"byte_end":1621610,"line_start":93,"line_end":93,"column_start":1,"column_end":52}},{"value":"/ The index represents the block index, in increasing line order, within the header.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1621611,"byte_end":1621697,"line_start":94,"line_end":94,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622663,"byte_end":1622679,"line_start":119,"line_end":119,"column_start":12,"column_end":28},"name":"decompress_chunk","qualname":"<UncompressedBlock>::decompress_chunk","value":"fn decompress_chunk<'_>(Chunk, &'_ MetaData, bool) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the possibly compressed chunk and returns an `UncompressedBlock`.\n","sig":null,"attributes":[{"value":"/ Decompress the possibly compressed chunk and returns an `UncompressedBlock`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622465,"byte_end":1622545,"line_start":115,"line_end":115,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622626,"byte_end":1622635,"line_start":117,"line_end":117,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622640,"byte_end":1622651,"line_start":118,"line_end":118,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1624157,"byte_end":1624174,"line_start":150,"line_end":150,"column_start":12,"column_end":29},"name":"compress_to_chunk","qualname":"<UncompressedBlock>::compress_to_chunk","value":"fn compress_to_chunk<'_>(Self, &'_ [Header]) -> Result<Chunk>","parent":null,"children":[],"decl_id":null,"docs":" Consume this block by compressing it, returning a `Chunk`.\n","sig":null,"attributes":[{"value":"/ Consume this block by compressing it, returning a `Chunk`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1623977,"byte_end":1624039,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1624120,"byte_end":1624129,"line_start":148,"line_end":148,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1624134,"byte_end":1624145,"line_start":149,"line_end":149,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1626532,"byte_end":1626537,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"lines","qualname":"<UncompressedBlock>::lines","value":"fn lines<'_, '_>(&'_ Self, &'_ ChannelList) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate all the lines in this block.\n Each line contains the all samples for one of the channels.\n","sig":null,"attributes":[{"value":"/ Iterate all the lines in this block.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1626412,"byte_end":1626452,"line_start":201,"line_end":201,"column_start":5,"column_end":45}},{"value":"/ Each line contains the all samples for one of the channels.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1626457,"byte_end":1626520,"line_start":202,"line_end":202,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1627664,"byte_end":1627693,"line_start":229,"line_end":229,"column_start":12,"column_end":41},"name":"collect_block_data_from_lines","qualname":"<UncompressedBlock>::collect_block_data_from_lines","value":"fn collect_block_data_from_lines<'_,\nimpl FnMut(LineRefMut<'_>)>(&'_ ChannelList, BlockIndex,\nimpl FnMut(LineRefMut<'_>)) -> Vec<u8> where\nimpl FnMut(LineRefMut<'_>): for<'_> FnMut(LineRefMut) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create an uncompressed block byte vector by requesting one line of samples after another.\n","sig":null,"attributes":[{"value":"/ Create an uncompressed block byte vector by requesting one line of samples after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1627559,"byte_end":1627652,"line_start":228,"line_end":228,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":3163},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1628357,"byte_end":1628367,"line_start":248,"line_end":248,"column_start":12,"column_end":22},"name":"from_lines","qualname":"<UncompressedBlock>::from_lines","value":"fn from_lines<'_,\nimpl FnMut(LineRefMut<'_>)>(&'_ ChannelList, BlockIndex,\nimpl FnMut(LineRefMut<'_>)) -> Self where\nimpl FnMut(LineRefMut<'_>): for<'_> FnMut(LineRefMut) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create an uncompressed block by requesting one line of samples after another.\n","sig":null,"attributes":[{"value":"/ Create an uncompressed block by requesting one line of samples after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1628264,"byte_end":1628345,"line_start":247,"line_end":247,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":3166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1302,"byte_end":1309,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3219},{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3229},{"krate":0,"index":3232},{"krate":0,"index":3235},{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3240},{"krate":0,"index":3243},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3257},{"krate":0,"index":3260},{"krate":0,"index":3263},{"krate":0,"index":3266},{"krate":0,"index":3269},{"krate":0,"index":3272},{"krate":0,"index":3275},{"krate":0,"index":3278},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3284},{"krate":0,"index":3285},{"krate":0,"index":3288},{"krate":0,"index":3291},{"krate":0,"index":3294}],"decl_id":null,"docs":" Export the most important items from `exrs`.\n _Note: This includes a type called `Result`, possibly overwriting the default `std::Result` type usage._\n","sig":null,"attributes":[{"value":"/ Export the most important items from `exrs`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1136,"byte_end":1184,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ _Note: This includes a type called `Result`, possibly overwriting the default `std::Result` type usage._","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1185,"byte_end":1293,"line_start":53,"line_end":53,"column_start":1,"column_end":109}}]},{"kind":"Mod","id":{"krate":0,"index":3167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1421,"byte_end":1427,"line_start":57,"line_end":57,"column_start":13,"column_end":19},"name":"traits","qualname":"::prelude::traits","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","parent":null,"children":[{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3172},{"krate":0,"index":3175},{"krate":0,"index":3176},{"krate":0,"index":3179},{"krate":0,"index":3182},{"krate":0,"index":3185},{"krate":0,"index":3188},{"krate":0,"index":3191},{"krate":0,"index":3192},{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3199},{"krate":0,"index":3202},{"krate":0,"index":3205},{"krate":0,"index":3208},{"krate":0,"index":3211}],"decl_id":null,"docs":" Import this specifically if you want to be explicit but still use the extension traits.\n","sig":null,"attributes":[{"value":"/ Import this specifically if you want to be explicit but still use the extension traits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1317,"byte_end":1408,"line_start":56,"line_end":56,"column_start":5,"column_end":96}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4552,"byte_end":4560,"line_start":60,"line_end":60,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4645,"byte_end":4653,"line_start":64,"line_end":64,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4912,"byte_end":4920,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5196,"byte_end":5204,"line_start":82,"line_end":82,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5552,"byte_end":5560,"line_start":99,"line_end":99,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6844,"byte_end":6852,"line_start":137,"line_end":137,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7370,"byte_end":7378,"line_start":155,"line_end":155,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7678,"byte_end":7686,"line_start":166,"line_end":166,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8113,"byte_end":8121,"line_start":185,"line_end":185,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8327,"byte_end":8335,"line_start":193,"line_end":193,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8605,"byte_end":8613,"line_start":205,"line_end":205,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8966,"byte_end":8974,"line_start":219,"line_end":219,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9843,"byte_end":9851,"line_start":240,"line_end":240,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15521,"byte_end":15524,"line_start":392,"line_end":392,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18031,"byte_end":18035,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20105,"byte_end":20109,"line_start":78,"line_end":78,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20427,"byte_end":20431,"line_start":89,"line_end":89,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20758,"byte_end":20762,"line_start":101,"line_end":101,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20965,"byte_end":20969,"line_start":108,"line_end":108,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21172,"byte_end":21176,"line_start":115,"line_end":115,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21379,"byte_end":21383,"line_start":122,"line_end":122,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21559,"byte_end":21563,"line_start":129,"line_end":129,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21717,"byte_end":21721,"line_start":134,"line_end":134,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22873,"byte_end":22885,"line_start":189,"line_end":189,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":73738,"byte_end":73747,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":90897,"byte_end":90910,"line_start":663,"line_end":663,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":91119,"byte_end":91132,"line_start":670,"line_end":670,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30718,"byte_end":30729,"line_start":138,"line_end":138,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":31325,"byte_end":31336,"line_start":157,"line_end":157,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294641,"byte_end":1294645,"line_start":427,"line_end":427,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302437,"byte_end":1302441,"line_start":627,"line_end":627,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302632,"byte_end":1302636,"line_start":639,"line_end":639,"column_start":13,"column_end":17},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302668,"byte_end":1302672,"line_start":641,"line_end":641,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302860,"byte_end":1302864,"line_start":648,"line_end":648,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302976,"byte_end":1302980,"line_start":654,"line_end":654,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303074,"byte_end":1303078,"line_start":660,"line_end":660,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303633,"byte_end":1303637,"line_start":683,"line_end":683,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303845,"byte_end":1303849,"line_start":690,"line_end":690,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304082,"byte_end":1304093,"line_start":703,"line_end":703,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":658},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306194,"byte_end":1306203,"line_start":753,"line_end":753,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307626,"byte_end":1307639,"line_start":794,"line_end":794,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311641,"byte_end":1311650,"line_start":910,"line_end":910,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312454,"byte_end":1312464,"line_start":940,"line_end":940,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313612,"byte_end":1313630,"line_start":979,"line_end":979,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318490,"byte_end":1318501,"line_start":1099,"line_end":1099,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320503,"byte_end":1320511,"line_start":1155,"line_end":1155,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":744},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327182,"byte_end":1327196,"line_start":1310,"line_end":1310,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328177,"byte_end":1328188,"line_start":1344,"line_end":1344,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329331,"byte_end":1329345,"line_start":1386,"line_end":1386,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330109,"byte_end":1330116,"line_start":1415,"line_end":1415,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331152,"byte_end":1331161,"line_start":1447,"line_end":1447,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331975,"byte_end":1331982,"line_start":1481,"line_end":1481,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333813,"byte_end":1333820,"line_start":1539,"line_end":1539,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333993,"byte_end":1334008,"line_start":1545,"line_end":1545,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337906,"byte_end":1337920,"line_start":1649,"line_end":1649,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371865,"byte_end":1371880,"line_start":247,"line_end":247,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373043,"byte_end":1373058,"line_start":285,"line_end":285,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373586,"byte_end":1373592,"line_start":307,"line_end":307,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":900},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409957,"byte_end":1409972,"line_start":1105,"line_end":1105,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1411347,"byte_end":1411362,"line_start":1149,"line_end":1149,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254123,"byte_end":1254139,"line_start":141,"line_end":141,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262003,"byte_end":1262011,"line_start":351,"line_end":351,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1027},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271122,"byte_end":1271134,"line_start":550,"line_end":550,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1043},{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480912,"byte_end":1480921,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1108},{"krate":0,"index":1112},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486298,"byte_end":1486323,"line_start":144,"line_end":144,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492935,"byte_end":1492946,"line_start":102,"line_end":102,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1493627,"byte_end":1493640,"line_start":120,"line_end":120,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1494157,"byte_end":1494172,"line_start":135,"line_end":135,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1495207,"byte_end":1495226,"line_start":163,"line_end":163,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1495999,"byte_end":1496020,"line_start":183,"line_end":183,"column_start":26,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499816,"byte_end":1499831,"line_start":77,"line_end":77,"column_start":52,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1500493,"byte_end":1500510,"line_start":94,"line_end":94,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502930,"byte_end":1502946,"line_start":32,"line_end":32,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1319},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506660,"byte_end":1506673,"line_start":108,"line_end":108,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507641,"byte_end":1507654,"line_start":138,"line_end":138,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1510124,"byte_end":1510139,"line_start":192,"line_end":192,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512065,"byte_end":1512080,"line_start":20,"line_end":20,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513250,"byte_end":1513265,"line_start":51,"line_end":51,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513538,"byte_end":1513553,"line_start":59,"line_end":59,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1514194,"byte_end":1514211,"line_start":75,"line_end":75,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521915,"byte_end":1521934,"line_start":121,"line_end":121,"column_start":58,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1522156,"byte_end":1522175,"line_start":127,"line_end":127,"column_start":58,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1522434,"byte_end":1522447,"line_start":134,"line_end":134,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1524272,"byte_end":1524294,"line_start":176,"line_end":176,"column_start":20,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526192,"byte_end":1526200,"line_start":215,"line_end":215,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526416,"byte_end":1526435,"line_start":220,"line_end":220,"column_start":59,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1527518,"byte_end":1527537,"line_start":242,"line_end":242,"column_start":52,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1529097,"byte_end":1529109,"line_start":279,"line_end":279,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530438,"byte_end":1530446,"line_start":310,"line_end":310,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530846,"byte_end":1530855,"line_start":324,"line_end":324,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1531690,"byte_end":1531699,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479256,"byte_end":1479267,"line_start":193,"line_end":193,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542520,"byte_end":1542526,"line_start":45,"line_end":45,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1543619,"byte_end":1543624,"line_start":75,"line_end":75,"column_start":71,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545174,"byte_end":1545189,"line_start":119,"line_end":119,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545484,"byte_end":1545495,"line_start":125,"line_end":125,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545800,"byte_end":1545808,"line_start":135,"line_end":135,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1546058,"byte_end":1546067,"line_start":142,"line_end":142,"column_start":60,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547144,"byte_end":1547152,"line_start":167,"line_end":167,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547347,"byte_end":1547368,"line_start":173,"line_end":173,"column_start":52,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550375,"byte_end":1550386,"line_start":60,"line_end":60,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551108,"byte_end":1551119,"line_start":81,"line_end":81,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551621,"byte_end":1551638,"line_start":99,"line_end":99,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1793}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1552706,"byte_end":1552712,"line_start":122,"line_end":122,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1556182,"byte_end":1556194,"line_start":200,"line_end":200,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1805}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558529,"byte_end":1558530,"line_start":54,"line_end":54,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558719,"byte_end":1558730,"line_start":59,"line_end":59,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560157,"byte_end":1560174,"line_start":100,"line_end":100,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560566,"byte_end":1560582,"line_start":114,"line_end":114,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1562447,"byte_end":1562469,"line_start":164,"line_end":164,"column_start":5,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564681,"byte_end":1564689,"line_start":213,"line_end":213,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1565055,"byte_end":1565064,"line_start":221,"line_end":221,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1566305,"byte_end":1566314,"line_start":248,"line_end":248,"column_start":5,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1568464,"byte_end":1568476,"line_start":298,"line_end":298,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1569675,"byte_end":1569683,"line_start":318,"line_end":318,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1569912,"byte_end":1569927,"line_start":324,"line_end":324,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1570464,"byte_end":1570487,"line_start":335,"line_end":335,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536525,"byte_end":1536546,"line_start":93,"line_end":93,"column_start":18,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577019,"byte_end":1577024,"line_start":92,"line_end":92,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577243,"byte_end":1577244,"line_start":100,"line_end":100,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2103},{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578417,"byte_end":1578432,"line_start":137,"line_end":137,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1579290,"byte_end":1579305,"line_start":164,"line_end":164,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580241,"byte_end":1580254,"line_start":190,"line_end":190,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580633,"byte_end":1580638,"line_start":201,"line_end":201,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580899,"byte_end":1580904,"line_start":208,"line_end":208,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581828,"byte_end":1581833,"line_start":234,"line_end":234,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2133},{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588221,"byte_end":1588226,"line_start":359,"line_end":359,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588336,"byte_end":1588346,"line_start":365,"line_end":365,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601622,"byte_end":1601630,"line_start":35,"line_end":35,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603504,"byte_end":1603512,"line_start":76,"line_end":76,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603885,"byte_end":1603893,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2181},{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1604094,"byte_end":1604102,"line_start":92,"line_end":92,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605239,"byte_end":1605248,"line_start":21,"line_end":21,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606399,"byte_end":1606407,"line_start":54,"line_end":54,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2202},{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606548,"byte_end":1606557,"line_start":59,"line_end":59,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606882,"byte_end":1606883,"line_start":65,"line_end":65,"column_start":58,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1607214,"byte_end":1607222,"line_start":77,"line_end":77,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425857,"byte_end":1425862,"line_start":303,"line_end":303,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2324}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426077,"byte_end":1426093,"line_start":311,"line_end":311,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427144,"byte_end":1427147,"line_start":334,"line_end":334,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427979,"byte_end":1427987,"line_start":355,"line_end":355,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428101,"byte_end":1428110,"line_start":359,"line_end":359,"column_start":50,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2343}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428278,"byte_end":1428294,"line_start":365,"line_end":365,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2345}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428714,"byte_end":1428737,"line_start":375,"line_end":375,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":2349},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432453,"byte_end":1432469,"line_start":440,"line_end":440,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433570,"byte_end":1433586,"line_start":466,"line_end":466,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2368}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434721,"byte_end":1434726,"line_start":496,"line_end":496,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2375},{"krate":0,"index":2376}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435466,"byte_end":1435484,"line_start":521,"line_end":521,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2378},{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435948,"byte_end":1435959,"line_start":536,"line_end":536,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1436341,"byte_end":1436347,"line_start":546,"line_end":546,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439639,"byte_end":1439646,"line_start":625,"line_end":625,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440338,"byte_end":1440349,"line_start":644,"line_end":644,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2403},{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441856,"byte_end":1441861,"line_start":683,"line_end":683,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443118,"byte_end":1443126,"line_start":717,"line_end":717,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444562,"byte_end":1444570,"line_start":750,"line_end":750,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2424}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444653,"byte_end":1444658,"line_start":754,"line_end":754,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2428}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445052,"byte_end":1445057,"line_start":762,"line_end":762,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445422,"byte_end":1445427,"line_start":770,"line_end":770,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446323,"byte_end":1446328,"line_start":791,"line_end":791,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446672,"byte_end":1446677,"line_start":798,"line_end":798,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2447}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447211,"byte_end":1447221,"line_start":815,"line_end":815,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1448251,"byte_end":1448262,"line_start":841,"line_end":841,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2455}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451321,"byte_end":1451326,"line_start":918,"line_end":918,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2477}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451730,"byte_end":1451735,"line_start":925,"line_end":925,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1453351,"byte_end":1453356,"line_start":956,"line_end":956,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1454840,"byte_end":1454851,"line_start":984,"line_end":984,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2488}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455115,"byte_end":1455125,"line_start":990,"line_end":990,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2491}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455736,"byte_end":1455752,"line_start":1001,"line_end":1001,"column_start":41,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2495}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456164,"byte_end":1456170,"line_start":1008,"line_end":1008,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456471,"byte_end":1456482,"line_start":1014,"line_end":1014,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1457889,"byte_end":1457897,"line_start":1038,"line_end":1038,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1458179,"byte_end":1458182,"line_start":1044,"line_end":1044,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459720,"byte_end":1459728,"line_start":1075,"line_end":1075,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2523}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459884,"byte_end":1459893,"line_start":1079,"line_end":1079,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2527}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1460301,"byte_end":1460307,"line_start":1087,"line_end":1087,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2531}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1461703,"byte_end":1461706,"line_start":1119,"line_end":1119,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2535}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1462398,"byte_end":1462404,"line_start":1135,"line_end":1135,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615326,"byte_end":1615331,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2570},{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615772,"byte_end":1615777,"line_start":64,"line_end":64,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616078,"byte_end":1616083,"line_start":76,"line_end":76,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2577}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616198,"byte_end":1616203,"line_start":82,"line_end":82,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2579}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616401,"byte_end":1616406,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2581}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634398,"byte_end":1634409,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2670},{"krate":0,"index":2671}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1635605,"byte_end":1635616,"line_start":154,"line_end":154,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2677}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1638419,"byte_end":1638440,"line_start":217,"line_end":217,"column_start":33,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2683},{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639728,"byte_end":1639746,"line_start":255,"line_end":255,"column_start":13,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642092,"byte_end":1642118,"line_start":319,"line_end":319,"column_start":13,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1643380,"byte_end":1643404,"line_start":353,"line_end":353,"column_start":13,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649119,"byte_end":1649125,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660169,"byte_end":1660191,"line_start":271,"line_end":271,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2805},{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660435,"byte_end":1660457,"line_start":276,"line_end":276,"column_start":34,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660528,"byte_end":1660550,"line_start":277,"line_end":277,"column_start":25,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661500,"byte_end":1661515,"line_start":308,"line_end":308,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2820},{"krate":0,"index":2821}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661698,"byte_end":1661713,"line_start":313,"line_end":313,"column_start":44,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661754,"byte_end":1661769,"line_start":314,"line_end":314,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2829}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662514,"byte_end":1662534,"line_start":335,"line_end":335,"column_start":39,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2832},{"krate":0,"index":2833}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662726,"byte_end":1662746,"line_start":340,"line_end":340,"column_start":44,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662787,"byte_end":1662807,"line_start":341,"line_end":341,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663992,"byte_end":1664019,"line_start":372,"line_end":372,"column_start":23,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665205,"byte_end":1665230,"line_start":404,"line_end":404,"column_start":23,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2849},{"krate":0,"index":2851},{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669396,"byte_end":1669423,"line_start":505,"line_end":505,"column_start":45,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669465,"byte_end":1669492,"line_start":506,"line_end":506,"column_start":36,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669761,"byte_end":1669786,"line_start":512,"line_end":512,"column_start":45,"column_end":70},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669828,"byte_end":1669853,"line_start":513,"line_end":513,"column_start":36,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672651,"byte_end":1672660,"line_start":66,"line_end":66,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2899}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1673562,"byte_end":1673570,"line_start":85,"line_end":85,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2913},{"krate":0,"index":2914}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675493,"byte_end":1675503,"line_start":145,"line_end":145,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2919},{"krate":0,"index":2921}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676880,"byte_end":1676887,"line_start":178,"line_end":178,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2925},{"krate":0,"index":2927}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678484,"byte_end":1678490,"line_start":20,"line_end":20,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680524,"byte_end":1680530,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2943}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680927,"byte_end":1680933,"line_start":95,"line_end":95,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2945}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681004,"byte_end":1681010,"line_start":99,"line_end":99,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2947}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681087,"byte_end":1681093,"line_start":100,"line_end":100,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2949}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681170,"byte_end":1681176,"line_start":101,"line_end":101,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2951}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681263,"byte_end":1681269,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2954}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681411,"byte_end":1681414,"line_start":108,"line_end":108,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682850,"byte_end":1682853,"line_start":140,"line_end":140,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2976}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683060,"byte_end":1683066,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683828,"byte_end":1683831,"line_start":167,"line_end":167,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684410,"byte_end":1684416,"line_start":185,"line_end":185,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689643,"byte_end":1689658,"line_start":133,"line_end":133,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3008},{"krate":0,"index":3010},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692283,"byte_end":1692306,"line_start":201,"line_end":201,"column_start":6,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3026},{"krate":0,"index":3028}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693091,"byte_end":1693110,"line_start":220,"line_end":220,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3031},{"krate":0,"index":3033}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693889,"byte_end":1693916,"line_start":239,"line_end":239,"column_start":6,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3036},{"krate":0,"index":3038}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1695714,"byte_end":1695737,"line_start":284,"line_end":284,"column_start":6,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3041},{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1697753,"byte_end":1697758,"line_start":331,"line_end":331,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3070}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622440,"byte_end":1622457,"line_start":113,"line_end":113,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3161},{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":945,"byte_end":947,"line_start":39,"line_end":39,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1011,"byte_end":1015,"line_start":41,"line_end":41,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":127}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1025,"byte_end":1036,"line_start":42,"line_end":42,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":202}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1046,"byte_end":1050,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":533}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249551,"byte_end":1249560,"line_start":6,"line_end":6,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":534}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1249570,"byte_end":1249576,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":836}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1060,"byte_end":1065,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1049}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415388,"byte_end":1415392,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1050}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473085,"byte_end":1473090,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1051}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473100,"byte_end":1473106,"line_start":46,"line_end":46,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1140}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473116,"byte_end":1473128,"line_start":47,"line_end":47,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1224}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473138,"byte_end":1473144,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1286}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473154,"byte_end":1473161,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1347}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1473171,"byte_end":1473188,"line_start":50,"line_end":50,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":1407}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415402,"byte_end":1415407,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1615}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533614,"byte_end":1533620,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1616}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533630,"byte_end":1533637,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1717}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1533647,"byte_end":1533655,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1806}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415417,"byte_end":1415421,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2019}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415431,"byte_end":1415440,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2158}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1415450,"byte_end":1415459,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2187}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1076,"byte_end":1081,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2541}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src/lib.rs","byte_start":1091,"byte_end":1096,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2589}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618239,"byte_end":1618245,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2590}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618255,"byte_end":1618261,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2710}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618272,"byte_end":1618277,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2868}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618287,"byte_end":1618294,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2931}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1618304,"byte_end":1618309,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3001}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4552,"byte_end":4560,"line_start":60,"line_end":60,"column_start":29,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3297},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4645,"byte_end":4653,"line_start":64,"line_end":64,"column_start":10,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":4912,"byte_end":4920,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3297},"to":{"krate":1,"index":4724}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5196,"byte_end":5204,"line_start":82,"line_end":82,"column_start":19,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3297},"to":{"krate":1,"index":4742}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":5552,"byte_end":5560,"line_start":99,"line_end":99,"column_start":15,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":6844,"byte_end":6852,"line_start":137,"line_end":137,"column_start":24,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3304},"to":{"krate":1,"index":4667}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7370,"byte_end":7378,"line_start":155,"line_end":155,"column_start":22,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":7678,"byte_end":7686,"line_start":166,"line_end":166,"column_start":15,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8113,"byte_end":8121,"line_start":185,"line_end":185,"column_start":24,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3311},"to":{"krate":1,"index":4667}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8327,"byte_end":8335,"line_start":193,"line_end":193,"column_start":26,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3311},"to":{"krate":1,"index":4724}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8605,"byte_end":8613,"line_start":205,"line_end":205,"column_start":9,"column_end":17},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":8966,"byte_end":8974,"line_start":219,"line_end":219,"column_start":22,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":9843,"byte_end":9851,"line_start":240,"line_end":240,"column_start":23,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10615,"byte_end":10620,"line_start":262,"line_end":262,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10623,"byte_end":10630,"line_start":262,"line_end":262,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3246},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":10633,"byte_end":10638,"line_start":262,"line_end":262,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2887},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\io.rs","byte_start":15521,"byte_end":15524,"line_start":392,"line_end":392,"column_start":15,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":17,"index":818},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":18031,"byte_end":18035,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20105,"byte_end":20109,"line_start":78,"line_end":78,"column_start":6,"column_end":10},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20427,"byte_end":20431,"line_start":89,"line_end":89,"column_start":6,"column_end":10},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20758,"byte_end":20762,"line_start":101,"line_end":101,"column_start":54,"column_end":58},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":20965,"byte_end":20969,"line_start":108,"line_end":108,"column_start":54,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3341}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21172,"byte_end":21176,"line_start":115,"line_end":115,"column_start":54,"column_end":58},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3351}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21379,"byte_end":21383,"line_start":122,"line_end":122,"column_start":54,"column_end":58},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3346}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21559,"byte_end":21563,"line_start":129,"line_end":129,"column_start":27,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3363}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":21717,"byte_end":21721,"line_start":134,"line_end":134,"column_start":26,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3408},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\math.rs","byte_start":22873,"byte_end":22885,"line_start":189,"line_end":189,"column_start":6,"column_end":18},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":73738,"byte_end":73747,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":90897,"byte_end":90910,"line_start":663,"line_end":663,"column_start":18,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3494},"to":{"krate":2,"index":2956}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\piz\\huffman.rs","byte_start":91119,"byte_end":91132,"line_start":670,"line_end":670,"column_start":25,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3494},"to":{"krate":2,"index":2966}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":30718,"byte_end":30729,"line_start":138,"line_end":138,"column_start":28,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3525},"to":{"krate":2,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\compression\\mod.rs","byte_start":31325,"byte_end":31336,"line_start":157,"line_end":157,"column_start":6,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1294641,"byte_end":1294645,"line_start":427,"line_end":427,"column_start":6,"column_end":10},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302437,"byte_end":1302441,"line_start":627,"line_end":627,"column_start":25,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302632,"byte_end":1302636,"line_start":639,"line_end":639,"column_start":13,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":2925}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302668,"byte_end":1302672,"line_start":641,"line_end":641,"column_start":28,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":2862}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302860,"byte_end":1302864,"line_start":648,"line_end":648,"column_start":15,"column_end":19},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":10536}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1302976,"byte_end":1302980,"line_start":654,"line_end":654,"column_start":23,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":3171}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303074,"byte_end":1303078,"line_start":660,"line_end":660,"column_start":28,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303633,"byte_end":1303637,"line_start":683,"line_end":683,"column_start":28,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1303845,"byte_end":1303849,"line_start":690,"line_end":690,"column_start":30,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3641},"to":{"krate":2,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1304082,"byte_end":1304093,"line_start":703,"line_end":703,"column_start":6,"column_end":17},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1306194,"byte_end":1306203,"line_start":753,"line_end":753,"column_start":6,"column_end":15},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1307626,"byte_end":1307639,"line_start":794,"line_end":794,"column_start":6,"column_end":19},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1311641,"byte_end":1311650,"line_start":910,"line_end":910,"column_start":6,"column_end":15},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1312454,"byte_end":1312464,"line_start":940,"line_end":940,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1313612,"byte_end":1313630,"line_start":979,"line_end":979,"column_start":6,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1318490,"byte_end":1318501,"line_start":1099,"line_end":1099,"column_start":6,"column_end":17},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1320503,"byte_end":1320511,"line_start":1155,"line_end":1155,"column_start":6,"column_end":14},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1327182,"byte_end":1327196,"line_start":1310,"line_end":1310,"column_start":6,"column_end":20},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1328177,"byte_end":1328188,"line_start":1344,"line_end":1344,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1329331,"byte_end":1329345,"line_start":1386,"line_end":1386,"column_start":6,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1330109,"byte_end":1330116,"line_start":1415,"line_end":1415,"column_start":6,"column_end":13},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331152,"byte_end":1331161,"line_start":1447,"line_end":1447,"column_start":6,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1331975,"byte_end":1331982,"line_start":1481,"line_end":1481,"column_start":6,"column_end":13},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333813,"byte_end":1333820,"line_start":1539,"line_end":1539,"column_start":28,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3880},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1333993,"byte_end":1334008,"line_start":1545,"line_end":1545,"column_start":6,"column_end":21},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\attribute.rs","byte_start":1337906,"byte_end":1337920,"line_start":1649,"line_end":1649,"column_start":6,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1371865,"byte_end":1371880,"line_start":247,"line_end":247,"column_start":6,"column_end":21},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373043,"byte_end":1373058,"line_start":285,"line_end":285,"column_start":6,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1373586,"byte_end":1373592,"line_start":307,"line_end":307,"column_start":6,"column_end":12},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1409957,"byte_end":1409972,"line_start":1105,"line_end":1105,"column_start":18,"column_end":33},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3989},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\header.rs","byte_start":1411347,"byte_end":1411362,"line_start":1149,"line_end":1149,"column_start":26,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3989},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1254123,"byte_end":1254139,"line_start":141,"line_end":141,"column_start":6,"column_end":22},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1262003,"byte_end":1262011,"line_start":351,"line_end":351,"column_start":6,"column_end":14},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\meta\\mod.rs","byte_start":1271122,"byte_end":1271134,"line_start":550,"line_end":550,"column_start":6,"column_end":18},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1480912,"byte_end":1480921,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\image.rs","byte_start":1486298,"byte_end":1486323,"line_start":144,"line_end":144,"column_start":9,"column_end":34},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1492935,"byte_end":1492946,"line_start":102,"line_end":102,"column_start":9,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1493627,"byte_end":1493640,"line_start":120,"line_end":120,"column_start":32,"column_end":45},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":4185},"to":{"krate":0,"index":1129}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1494157,"byte_end":1494172,"line_start":135,"line_end":135,"column_start":26,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4225},"to":{"krate":0,"index":1135}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1495207,"byte_end":1495226,"line_start":163,"line_end":163,"column_start":32,"column_end":51},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":4205},"to":{"krate":0,"index":1129}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\layers.rs","byte_start":1495999,"byte_end":1496020,"line_start":183,"line_end":183,"column_start":26,"column_end":47},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":4241},"to":{"krate":0,"index":1135}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1499816,"byte_end":1499831,"line_start":77,"line_end":77,"column_start":52,"column_end":67},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4275},"to":{"krate":0,"index":1182}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\any_channels.rs","byte_start":1500493,"byte_end":1500510,"line_start":94,"line_end":94,"column_start":43,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":4295},"to":{"krate":0,"index":1188}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1502930,"byte_end":1502946,"line_start":32,"line_end":32,"column_start":25,"column_end":41},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":4340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1506660,"byte_end":1506673,"line_start":108,"line_end":108,"column_start":29,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":4360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1507641,"byte_end":1507654,"line_start":138,"line_end":138,"column_start":43,"column_end":56},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":4360},"to":{"krate":0,"index":1264}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\levels.rs","byte_start":1510124,"byte_end":1510139,"line_start":192,"line_end":192,"column_start":42,"column_end":57},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":4380},"to":{"krate":0,"index":1267}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1512065,"byte_end":1512080,"line_start":20,"line_end":20,"column_start":6,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513250,"byte_end":1513265,"line_start":51,"line_end":51,"column_start":22,"column_end":37},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":4400},"to":{"krate":0,"index":1264}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1513538,"byte_end":1513553,"line_start":59,"line_end":59,"column_start":27,"column_end":42},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":4400},"to":{"krate":0,"index":1330}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\samples.rs","byte_start":1514194,"byte_end":1514211,"line_start":75,"line_end":75,"column_start":24,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":4413},"to":{"krate":0,"index":1267}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516824,"byte_end":1516829,"line_start":20,"line_end":20,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1516832,"byte_end":1516847,"line_start":20,"line_end":20,"column_start":40,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":2337},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1521915,"byte_end":1521934,"line_start":121,"line_end":121,"column_start":58,"column_end":77},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":4439},"to":{"krate":0,"index":2337}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1522156,"byte_end":1522175,"line_start":127,"line_end":127,"column_start":58,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4425},"to":{"krate":0,"index":2337}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1522434,"byte_end":1522447,"line_start":134,"line_end":134,"column_start":22,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4453},"to":{"krate":0,"index":1182}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1524272,"byte_end":1524294,"line_start":176,"line_end":176,"column_start":20,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4483},"to":{"krate":0,"index":1188}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526192,"byte_end":1526200,"line_start":215,"line_end":215,"column_start":30,"column_end":38},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1526416,"byte_end":1526435,"line_start":220,"line_end":220,"column_start":59,"column_end":78},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4425},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1527518,"byte_end":1527537,"line_start":242,"line_end":242,"column_start":52,"column_end":71},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":4439},"to":{"krate":0,"index":1430}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1529097,"byte_end":1529109,"line_start":279,"line_end":279,"column_start":32,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530438,"byte_end":1530446,"line_start":310,"line_end":310,"column_start":31,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1444}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1530846,"byte_end":1530855,"line_start":324,"line_end":324,"column_start":9,"column_end":18},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":1444}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\specific_channels.rs","byte_start":1531690,"byte_end":1531699,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":1444}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\read\\mod.rs","byte_start":1479256,"byte_end":1479267,"line_start":193,"line_end":193,"column_start":6,"column_end":17},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1541890,"byte_end":1541894,"line_start":26,"line_end":26,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1668}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1542520,"byte_end":1542526,"line_start":45,"line_end":45,"column_start":53,"column_end":59},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2271},"to":{"krate":0,"index":1663}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1543619,"byte_end":1543624,"line_start":75,"line_end":75,"column_start":71,"column_end":76},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":1663}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545174,"byte_end":1545189,"line_start":119,"line_end":119,"column_start":26,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4543},"to":{"krate":0,"index":1668}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545484,"byte_end":1545495,"line_start":125,"line_end":125,"column_start":26,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4565},"to":{"krate":0,"index":1668}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1545800,"byte_end":1545808,"line_start":135,"line_end":135,"column_start":37,"column_end":45},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1663}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1546058,"byte_end":1546067,"line_start":142,"line_end":142,"column_start":60,"column_end":69},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":1663}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547144,"byte_end":1547152,"line_start":167,"line_end":167,"column_start":23,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1668}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\layers.rs","byte_start":1547347,"byte_end":1547368,"line_start":173,"line_end":173,"column_start":52,"column_end":73},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1708},"to":{"krate":0,"index":1668}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1549859,"byte_end":1549863,"line_start":44,"line_end":44,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1778}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1550375,"byte_end":1550386,"line_start":60,"line_end":60,"column_start":46,"column_end":57},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":6293},"to":{"krate":0,"index":1767}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551108,"byte_end":1551119,"line_start":81,"line_end":81,"column_start":44,"column_end":55},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":6293},"to":{"krate":0,"index":1773}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1551621,"byte_end":1551638,"line_start":99,"line_end":99,"column_start":34,"column_end":51},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4585},"to":{"krate":0,"index":1778}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1552706,"byte_end":1552712,"line_start":122,"line_end":122,"column_start":60,"column_end":66},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":6244},"to":{"krate":0,"index":1767}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\samples.rs","byte_start":1556182,"byte_end":1556194,"line_start":200,"line_end":200,"column_start":33,"column_end":45},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4604},"to":{"krate":0,"index":1778}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1557635,"byte_end":1557639,"line_start":32,"line_end":32,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1826}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558012,"byte_end":1558016,"line_start":41,"line_end":41,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1828}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558529,"byte_end":1558530,"line_start":54,"line_end":54,"column_start":25,"column_end":26},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1832},"to":{"krate":0,"index":1828}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1558719,"byte_end":1558730,"line_start":59,"line_end":59,"column_start":56,"column_end":67},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6210},"to":{"krate":0,"index":1820}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560157,"byte_end":1560174,"line_start":100,"line_end":100,"column_start":34,"column_end":51},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4625},"to":{"krate":0,"index":1826}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1560566,"byte_end":1560582,"line_start":114,"line_end":114,"column_start":26,"column_end":42},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":6182},"to":{"krate":0,"index":1820}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1562447,"byte_end":1562469,"line_start":164,"line_end":164,"column_start":5,"column_end":27},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4648},"to":{"krate":0,"index":1826}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564080,"byte_end":1564084,"line_start":200,"line_end":200,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1866}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1564681,"byte_end":1564689,"line_start":213,"line_end":213,"column_start":48,"column_end":56},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1866}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1565055,"byte_end":1565064,"line_start":221,"line_end":221,"column_start":9,"column_end":18},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":1866}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1566305,"byte_end":1566314,"line_start":248,"line_end":248,"column_start":5,"column_end":14},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":1866}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1567796,"byte_end":1567800,"line_start":281,"line_end":281,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":1899}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1568464,"byte_end":1568476,"line_start":298,"line_end":298,"column_start":14,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1569675,"byte_end":1569683,"line_start":318,"line_end":318,"column_start":41,"column_end":49},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":1899}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1569912,"byte_end":1569927,"line_start":324,"line_end":324,"column_start":9,"column_end":24},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1904},"to":{"krate":0,"index":1899}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\channels.rs","byte_start":1570464,"byte_end":1570487,"line_start":335,"line_end":335,"column_start":9,"column_end":32},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1907},"to":{"krate":0,"index":1899}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1535635,"byte_end":1535640,"line_start":65,"line_end":65,"column_start":48,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\write\\mod.rs","byte_start":1536525,"byte_end":1536546,"line_start":93,"line_end":93,"column_start":18,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":4701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1573702,"byte_end":1573711,"line_start":19,"line_end":19,"column_start":26,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":2076},"to":{"krate":0,"index":2078}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1574066,"byte_end":1574071,"line_start":30,"line_end":30,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2081}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1575879,"byte_end":1575884,"line_start":72,"line_end":72,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577019,"byte_end":1577024,"line_start":92,"line_end":92,"column_start":25,"column_end":30},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2081}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1577243,"byte_end":1577244,"line_start":100,"line_end":100,"column_start":34,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2098},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1578417,"byte_end":1578432,"line_start":137,"line_end":137,"column_start":16,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1579290,"byte_end":1579305,"line_start":164,"line_end":164,"column_start":54,"column_end":69},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":4763},"to":{"krate":0,"index":1820}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580241,"byte_end":1580254,"line_start":190,"line_end":190,"column_start":39,"column_end":52},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":4785},"to":{"krate":0,"index":1826}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580633,"byte_end":1580638,"line_start":201,"line_end":201,"column_start":43,"column_end":48},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2078}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1580899,"byte_end":1580904,"line_start":208,"line_end":208,"column_start":24,"column_end":29},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2078}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1581828,"byte_end":1581833,"line_start":234,"line_end":234,"column_start":27,"column_end":32},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2129}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588221,"byte_end":1588226,"line_start":359,"line_end":359,"column_start":23,"column_end":28},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\crop.rs","byte_start":1588336,"byte_end":1588346,"line_start":365,"line_end":365,"column_start":25,"column_end":35},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1601622,"byte_end":1601630,"line_start":35,"line_end":35,"column_start":13,"column_end":21},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":4801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603504,"byte_end":1603512,"line_start":76,"line_end":76,"column_start":29,"column_end":37},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4801},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1603885,"byte_end":1603893,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4801},"to":{"krate":0,"index":1828}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\pixel_vec.rs","byte_start":1604094,"byte_end":1604102,"line_start":92,"line_end":92,"column_start":19,"column_end":27},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4801},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1605239,"byte_end":1605248,"line_start":21,"line_end":21,"column_start":20,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606399,"byte_end":1606407,"line_start":54,"line_end":54,"column_start":24,"column_end":32},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":2198}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606548,"byte_end":1606557,"line_start":59,"line_end":59,"column_start":53,"column_end":62},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":2198}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1606882,"byte_end":1606883,"line_start":65,"line_end":65,"column_start":58,"column_end":59},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2210},"to":{"krate":0,"index":2192}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\recursive.rs","byte_start":1607214,"byte_end":1607222,"line_start":77,"line_end":77,"column_start":27,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":2195}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1425857,"byte_end":1425862,"line_start":303,"line_end":303,"column_start":16,"column_end":21},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426077,"byte_end":1426093,"line_start":311,"line_end":311,"column_start":31,"column_end":47},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1426985,"byte_end":1427001,"line_start":328,"line_end":328,"column_start":23,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":2981},"to":{"krate":0,"index":2329}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427144,"byte_end":1427147,"line_start":334,"line_end":334,"column_start":21,"column_end":24},"kind":{"Impl":{"id":140}},"from":{"krate":17,"index":818},"to":{"krate":0,"index":2329}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1427979,"byte_end":1427987,"line_start":355,"line_end":355,"column_start":26,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":2337}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428101,"byte_end":1428110,"line_start":359,"line_end":359,"column_start":50,"column_end":59},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":2337}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428278,"byte_end":1428294,"line_start":365,"line_end":365,"column_start":6,"column_end":22},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1428714,"byte_end":1428737,"line_start":375,"line_end":375,"column_start":58,"column_end":81},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1432453,"byte_end":1432469,"line_start":440,"line_end":440,"column_start":21,"column_end":37},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1433570,"byte_end":1433586,"line_start":466,"line_end":466,"column_start":21,"column_end":37},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1434721,"byte_end":1434726,"line_start":496,"line_end":496,"column_start":6,"column_end":11},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435466,"byte_end":1435484,"line_start":521,"line_end":521,"column_start":19,"column_end":37},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":6318},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1435948,"byte_end":1435959,"line_start":536,"line_end":536,"column_start":18,"column_end":29},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1436341,"byte_end":1436347,"line_start":546,"line_end":546,"column_start":20,"column_end":26},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1439639,"byte_end":1439646,"line_start":625,"line_end":625,"column_start":15,"column_end":22},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1440338,"byte_end":1440349,"line_start":644,"line_end":644,"column_start":6,"column_end":17},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1441856,"byte_end":1441861,"line_start":683,"line_end":683,"column_start":26,"column_end":31},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1443118,"byte_end":1443126,"line_start":717,"line_end":717,"column_start":6,"column_end":14},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444562,"byte_end":1444570,"line_start":750,"line_end":750,"column_start":18,"column_end":26},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":6151},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1444653,"byte_end":1444658,"line_start":754,"line_end":754,"column_start":25,"column_end":30},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":6117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445052,"byte_end":1445057,"line_start":762,"line_end":762,"column_start":24,"column_end":29},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":6117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1445422,"byte_end":1445427,"line_start":770,"line_end":770,"column_start":26,"column_end":31},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":6117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446323,"byte_end":1446328,"line_start":791,"line_end":791,"column_start":6,"column_end":11},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1446672,"byte_end":1446677,"line_start":798,"line_end":798,"column_start":27,"column_end":32},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":6117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1447211,"byte_end":1447221,"line_start":815,"line_end":815,"column_start":26,"column_end":36},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":6226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1448251,"byte_end":1448262,"line_start":841,"line_end":841,"column_start":26,"column_end":37},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":6293},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451321,"byte_end":1451326,"line_start":918,"line_end":918,"column_start":32,"column_end":37},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":6117},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1451730,"byte_end":1451735,"line_start":925,"line_end":925,"column_start":32,"column_end":37},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1453351,"byte_end":1453356,"line_start":956,"line_end":956,"column_start":39,"column_end":44},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":6133},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1454840,"byte_end":1454851,"line_start":984,"line_end":984,"column_start":32,"column_end":43},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":6210},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455115,"byte_end":1455125,"line_start":990,"line_end":990,"column_start":32,"column_end":42},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":6226},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1455736,"byte_end":1455752,"line_start":1001,"line_end":1001,"column_start":41,"column_end":57},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":6182},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456164,"byte_end":1456170,"line_start":1008,"line_end":1008,"column_start":32,"column_end":38},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":6244},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1456471,"byte_end":1456482,"line_start":1014,"line_end":1014,"column_start":29,"column_end":40},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":6293},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1457889,"byte_end":1457897,"line_start":1038,"line_end":1038,"column_start":39,"column_end":47},"kind":{"Impl":{"id":173}},"from":{"krate":16,"index":168},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1458179,"byte_end":1458182,"line_start":1044,"line_end":1044,"column_start":32,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459720,"byte_end":1459728,"line_start":1075,"line_end":1075,"column_start":29,"column_end":37},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4819},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1459884,"byte_end":1459893,"line_start":1079,"line_end":1079,"column_start":39,"column_end":48},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4834},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1460301,"byte_end":1460307,"line_start":1087,"line_end":1087,"column_start":32,"column_end":38},"kind":{"Impl":{"id":177}},"from":{"krate":2,"index":47489},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1461703,"byte_end":1461706,"line_start":1119,"line_end":1119,"column_start":29,"column_end":32},"kind":{"Impl":{"id":179}},"from":{"krate":17,"index":818},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\image\\mod.rs","byte_start":1462398,"byte_end":1462404,"line_start":1135,"line_end":1135,"column_start":29,"column_end":35},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":6528},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615326,"byte_end":1615331,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":6357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1615772,"byte_end":1615777,"line_start":64,"line_end":64,"column_start":24,"column_end":29},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":6357},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616078,"byte_end":1616083,"line_start":76,"line_end":76,"column_start":32,"column_end":37},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":6357},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616198,"byte_end":1616203,"line_start":82,"line_end":82,"column_start":23,"column_end":28},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":6357},"to":{"krate":1,"index":2576}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\error.rs","byte_start":1616401,"byte_end":1616406,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":6357},"to":{"krate":2,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1631061,"byte_end":1631066,"line_start":60,"line_end":60,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2655}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1634398,"byte_end":1634409,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":2655}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1635605,"byte_end":1635616,"line_start":154,"line_end":154,"column_start":9,"column_end":20},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":6371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1638419,"byte_end":1638440,"line_start":217,"line_end":217,"column_start":33,"column_end":54},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6381},"to":{"krate":0,"index":2655}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1639728,"byte_end":1639746,"line_start":255,"line_end":255,"column_start":13,"column_end":31},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1642092,"byte_end":1642118,"line_start":319,"line_end":319,"column_start":13,"column_end":39},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":6404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\writer.rs","byte_start":1643380,"byte_end":1643404,"line_start":353,"line_end":353,"column_start":13,"column_end":37},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":6413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1649119,"byte_end":1649125,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":6429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656236,"byte_end":1656241,"line_start":188,"line_end":188,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656244,"byte_end":1656252,"line_start":188,"line_end":188,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":8608},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1656275,"byte_end":1656292,"line_start":188,"line_end":188,"column_start":64,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":8479},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660169,"byte_end":1660191,"line_start":271,"line_end":271,"column_start":29,"column_end":51},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":6454},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660435,"byte_end":1660457,"line_start":276,"line_end":276,"column_start":34,"column_end":56},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":6454},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1660528,"byte_end":1660550,"line_start":277,"line_end":277,"column_start":25,"column_end":47},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":6454},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661500,"byte_end":1661515,"line_start":308,"line_end":308,"column_start":39,"column_end":54},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":6445},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661698,"byte_end":1661713,"line_start":313,"line_end":313,"column_start":44,"column_end":59},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6445},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1661754,"byte_end":1661769,"line_start":314,"line_end":314,"column_start":35,"column_end":50},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6445},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662514,"byte_end":1662534,"line_start":335,"line_end":335,"column_start":39,"column_end":59},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6436},"to":{"krate":0,"index":2789}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662726,"byte_end":1662746,"line_start":340,"line_end":340,"column_start":44,"column_end":64},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6436},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1662787,"byte_end":1662807,"line_start":341,"line_end":341,"column_start":35,"column_end":55},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6436},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1663992,"byte_end":1664019,"line_start":372,"line_end":372,"column_start":23,"column_end":50},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1665205,"byte_end":1665230,"line_start":404,"line_end":404,"column_start":23,"column_end":48},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":6471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669396,"byte_end":1669423,"line_start":505,"line_end":505,"column_start":45,"column_end":72},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":6464},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669465,"byte_end":1669492,"line_start":506,"line_end":506,"column_start":36,"column_end":63},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":6464},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669761,"byte_end":1669786,"line_start":512,"line_end":512,"column_start":45,"column_end":70},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":6471},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\reader.rs","byte_start":1669828,"byte_end":1669853,"line_start":513,"line_end":513,"column_start":36,"column_end":61},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":6471},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1672651,"byte_end":1672660,"line_start":66,"line_end":66,"column_start":6,"column_end":15},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":6507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1673562,"byte_end":1673570,"line_start":85,"line_end":85,"column_start":27,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2901},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1675493,"byte_end":1675503,"line_start":145,"line_end":145,"column_start":10,"column_end":20},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\lines.rs","byte_start":1676880,"byte_end":1676887,"line_start":178,"line_end":178,"column_start":6,"column_end":13},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1678484,"byte_end":1678490,"line_start":20,"line_end":20,"column_start":6,"column_end":12},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":6528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680524,"byte_end":1680530,"line_start":84,"line_end":84,"column_start":20,"column_end":26},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1680927,"byte_end":1680933,"line_start":95,"line_end":95,"column_start":18,"column_end":24},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681004,"byte_end":1681010,"line_start":99,"line_end":99,"column_start":20,"column_end":26},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681087,"byte_end":1681093,"line_start":100,"line_end":100,"column_start":20,"column_end":26},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681170,"byte_end":1681176,"line_start":101,"line_end":101,"column_start":20,"column_end":26},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681263,"byte_end":1681269,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":6528},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681411,"byte_end":1681414,"line_start":108,"line_end":108,"column_start":23,"column_end":26},"kind":{"Impl":{"id":220}},"from":{"krate":17,"index":818},"to":{"krate":2,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681824,"byte_end":1681829,"line_start":115,"line_end":115,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":2961}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681832,"byte_end":1681836,"line_start":115,"line_end":115,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3278},"to":{"krate":0,"index":2961}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1681839,"byte_end":1681846,"line_start":115,"line_end":115,"column_start":44,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3246},"to":{"krate":0,"index":2961}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1682850,"byte_end":1682853,"line_start":140,"line_end":140,"column_start":27,"column_end":30},"kind":{"Impl":{"id":225}},"from":{"krate":17,"index":818},"to":{"krate":0,"index":2961}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683060,"byte_end":1683066,"line_start":146,"line_end":146,"column_start":27,"column_end":33},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":6528},"to":{"krate":0,"index":2961}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683420,"byte_end":1683424,"line_start":155,"line_end":155,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3278},"to":{"krate":0,"index":2981}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683427,"byte_end":1683434,"line_start":155,"line_end":155,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3246},"to":{"krate":0,"index":2981}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683437,"byte_end":1683441,"line_start":155,"line_end":155,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":2981}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1683828,"byte_end":1683831,"line_start":167,"line_end":167,"column_start":27,"column_end":30},"kind":{"Impl":{"id":227}},"from":{"krate":17,"index":818},"to":{"krate":0,"index":2981}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\samples.rs","byte_start":1684410,"byte_end":1684416,"line_start":185,"line_end":185,"column_start":27,"column_end":33},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":6528},"to":{"krate":0,"index":2981}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1689643,"byte_end":1689658,"line_start":133,"line_end":133,"column_start":6,"column_end":21},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":6581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1692283,"byte_end":1692306,"line_start":201,"line_end":201,"column_start":6,"column_end":29},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":6567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693091,"byte_end":1693110,"line_start":220,"line_end":220,"column_start":6,"column_end":25},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":6574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1693889,"byte_end":1693916,"line_start":239,"line_end":239,"column_start":6,"column_end":33},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":6599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1695714,"byte_end":1695737,"line_start":284,"line_end":284,"column_start":6,"column_end":29},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":6608},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\chunk.rs","byte_start":1697753,"byte_end":1697758,"line_start":331,"line_end":331,"column_start":6,"column_end":11},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":6543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\exr-1.5.2\\src\\block\\mod.rs","byte_start":1622440,"byte_end":1622457,"line_start":113,"line_end":113,"column_start":6,"column_end":23},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":6637},"to":{"krate":4294967295,"index":4294967295}}]}