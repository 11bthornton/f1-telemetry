{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1","program":"C:\\Users\\Ben\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rayon","--edition=2021","C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=fa77da5affeae49c","-C","extra-filename=-fa77da5affeae49c","--out-dir","c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","--extern","either=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libeither-460173f4a220bee7.rmeta","--extern","rayon_core=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\librayon_core-63beee60267cbea0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ben\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\librayon-fa77da5affeae49c.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[6308293571880440421,0]},"crate_root":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src","external_crates":[{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10288641326355699271,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5178777620647193466,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7203661724729889941,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17525700935344431946,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14114419768508526436,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[7430704726206783492,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12664251144516306473,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5349691386245612169,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7588176879124425336,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12802573245210436658,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[15058356585373963657,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11406058276128544710,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12054102872615165506,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15575797803660711391,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[2170788131994516450,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","num":16,"id":{"name":"either","disambiguator":[10025387153102701622,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":17,"id":{"name":"rayon_core","disambiguator":[17405941497914606282,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":18,"id":{"name":"crossbeam_channel","disambiguator":[7374301403653873515,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":19,"id":{"name":"cfg_if","disambiguator":[7872221195650628815,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":20,"id":{"name":"crossbeam_utils","disambiguator":[12261398158359852006,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":21,"id":{"name":"crossbeam_deque","disambiguator":[16441111954660741848,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":22,"id":{"name":"crossbeam_epoch","disambiguator":[5184695896108171613,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":23,"id":{"name":"scopeguard","disambiguator":[6110210485670846652,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":24,"id":{"name":"memoffset","disambiguator":[2834825929873401625,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","num":25,"id":{"name":"num_cpus","disambiguator":[9151932574218723595,0]}}],"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":0,"byte_end":5830,"line_start":1,"line_end":154,"column_start":1,"column_end":31}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":292},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37396,"byte_end":37402,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38858,"byte_end":38863,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38877,"byte_end":38883,"line_start":159,"line_end":159,"column_start":13,"column_end":19},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7217},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38897,"byte_end":38903,"line_start":160,"line_end":160,"column_start":13,"column_end":19},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7226},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38917,"byte_end":38923,"line_start":161,"line_end":161,"column_start":13,"column_end":19},"alias_span":null,"name":"Copied","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38937,"byte_end":38942,"line_start":162,"line_end":162,"column_start":13,"column_end":18},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38944,"byte_end":38949,"line_start":162,"line_end":162,"column_start":20,"column_end":25},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7235},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38967,"byte_end":38976,"line_start":163,"line_end":163,"column_start":16,"column_end":25},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":38990,"byte_end":38996,"line_start":164,"line_end":164,"column_start":13,"column_end":19},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7253},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39014,"byte_end":39023,"line_start":165,"line_end":165,"column_start":17,"column_end":26},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39039,"byte_end":39046,"line_start":166,"line_end":166,"column_start":15,"column_end":22},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7279},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39067,"byte_end":39078,"line_start":167,"line_end":167,"column_start":20,"column_end":31},"alias_span":null,"name":"FlatMapIter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7288},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39093,"byte_end":39100,"line_start":168,"line_end":168,"column_start":14,"column_end":21},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7297},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39120,"byte_end":39131,"line_start":169,"line_end":169,"column_start":19,"column_end":30},"alias_span":null,"name":"FlattenIter","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7306},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39144,"byte_end":39148,"line_start":170,"line_end":170,"column_start":12,"column_end":16},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7318},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39150,"byte_end":39158,"line_start":170,"line_end":170,"column_start":18,"column_end":26},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39178,"byte_end":39188,"line_start":171,"line_end":171,"column_start":18,"column_end":28},"alias_span":null,"name":"FoldChunks","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7343},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39212,"byte_end":39226,"line_start":172,"line_end":172,"column_start":23,"column_end":37},"alias_span":null,"name":"FoldChunksWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7356},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39241,"byte_end":39248,"line_start":173,"line_end":173,"column_start":14,"column_end":21},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7365},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39266,"byte_end":39276,"line_start":174,"line_end":174,"column_start":17,"column_end":27},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7378},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39303,"byte_end":39321,"line_start":175,"line_end":175,"column_start":26,"column_end":44},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7390},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39340,"byte_end":39351,"line_start":176,"line_end":176,"column_start":18,"column_end":29},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7410},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39363,"byte_end":39369,"line_start":177,"line_end":177,"column_start":11,"column_end":17},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7400},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39371,"byte_end":39377,"line_start":177,"line_end":177,"column_start":19,"column_end":25},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7420},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39389,"byte_end":39392,"line_start":178,"line_end":178,"column_start":10,"column_end":13},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7441},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39409,"byte_end":39416,"line_start":179,"line_end":179,"column_start":16,"column_end":23},"alias_span":null,"name":"MapInit","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7429},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39418,"byte_end":39425,"line_start":179,"line_end":179,"column_start":25,"column_end":32},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":7453},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39442,"byte_end":39450,"line_start":180,"line_end":180,"column_start":15,"column_end":23},"alias_span":null,"name":"MultiZip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39463,"byte_end":39467,"line_start":181,"line_end":181,"column_start":12,"column_end":16},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8332},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39469,"byte_end":39473,"line_start":181,"line_end":181,"column_start":18,"column_end":22},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8341},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39492,"byte_end":39501,"line_start":182,"line_end":182,"column_start":17,"column_end":26},"alias_span":null,"name":"PanicFuse","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39520,"byte_end":39530,"line_start":183,"line_end":183,"column_start":18,"column_end":28},"alias_span":null,"name":"IterBridge","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39532,"byte_end":39546,"line_start":183,"line_end":183,"column_start":30,"column_end":44},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8366},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39564,"byte_end":39573,"line_start":184,"line_end":184,"column_start":16,"column_end":25},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3482},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39588,"byte_end":39594,"line_start":185,"line_end":185,"column_start":14,"column_end":20},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39596,"byte_end":39603,"line_start":185,"line_end":185,"column_start":22,"column_end":29},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8375},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39605,"byte_end":39611,"line_start":185,"line_end":185,"column_start":31,"column_end":37},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8384},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39613,"byte_end":39620,"line_start":185,"line_end":185,"column_start":39,"column_end":46},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8394},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39632,"byte_end":39635,"line_start":186,"line_end":186,"column_start":10,"column_end":13},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8403},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39647,"byte_end":39651,"line_start":187,"line_end":187,"column_start":11,"column_end":15},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":3634},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39668,"byte_end":39673,"line_start":188,"line_end":188,"column_start":16,"column_end":21},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39675,"byte_end":39680,"line_start":188,"line_end":188,"column_start":23,"column_end":28},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8422},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39696,"byte_end":39702,"line_start":189,"line_end":189,"column_start":14,"column_end":20},"alias_span":null,"name":"StepBy","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39714,"byte_end":39718,"line_start":190,"line_end":190,"column_start":11,"column_end":15},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8442},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39735,"byte_end":39742,"line_start":191,"line_end":191,"column_start":16,"column_end":23},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8457},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39744,"byte_end":39755,"line_start":191,"line_end":191,"column_start":25,"column_end":36},"alias_span":null,"name":"TryFoldWith","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8469},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39770,"byte_end":39776,"line_start":192,"line_end":192,"column_start":13,"column_end":19},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8491},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39794,"byte_end":39803,"line_start":193,"line_end":193,"column_start":17,"column_end":26},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8500},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39814,"byte_end":39817,"line_start":194,"line_end":194,"column_start":10,"column_end":13},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":8513},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39831,"byte_end":39836,"line_start":195,"line_end":195,"column_start":13,"column_end":18},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":357}},{"kind":"Use","ref_id":{"krate":0,"index":5076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451240,"byte_end":451260,"line_start":5,"line_end":5,"column_start":22,"column_end":42},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5004},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451283,"byte_end":451306,"line_start":6,"line_end":6,"column_start":22,"column_end":45},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":4770},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451329,"byte_end":451349,"line_start":7,"line_end":7,"column_start":22,"column_end":42},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":4774},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451372,"byte_end":451395,"line_start":8,"line_end":8,"column_start":22,"column_end":45},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":4785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451418,"byte_end":451444,"line_start":9,"line_end":9,"column_start":22,"column_end":48},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451467,"byte_end":451481,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451504,"byte_end":451521,"line_start":11,"line_end":11,"column_start":22,"column_end":39},"alias_span":null,"name":"ParallelDrainFull","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5088},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451544,"byte_end":451562,"line_start":12,"line_end":12,"column_start":22,"column_end":40},"alias_span":null,"name":"ParallelDrainRange","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5080},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451585,"byte_end":451599,"line_start":13,"line_end":13,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":4796},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451622,"byte_end":451638,"line_start":14,"line_end":14,"column_start":22,"column_end":38},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451662,"byte_end":451675,"line_start":15,"line_end":15,"column_start":23,"column_end":36},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":5961},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451699,"byte_end":451715,"line_start":16,"line_end":16,"column_start":23,"column_end":39},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":6162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451737,"byte_end":451751,"line_start":17,"line_end":17,"column_start":21,"column_end":35},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":5218}},{"kind":"Use","ref_id":{"krate":0,"index":8972},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480613,"byte_end":480619,"line_start":25,"line_end":25,"column_start":24,"column_end":30},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":8981},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480621,"byte_end":480632,"line_start":25,"line_end":25,"column_start":32,"column_end":43},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":9000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480634,"byte_end":480648,"line_start":25,"line_end":25,"column_start":45,"column_end":59},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":8991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480650,"byte_end":480659,"line_start":25,"line_end":25,"column_start":61,"column_end":70},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":9032},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480686,"byte_end":480693,"line_start":26,"line_end":26,"column_start":25,"column_end":32},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":9041},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480695,"byte_end":480707,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":9060},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480709,"byte_end":480724,"line_start":26,"line_end":26,"column_start":48,"column_end":63},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":0,"index":9051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480726,"byte_end":480736,"line_start":26,"line_end":26,"column_start":65,"column_end":75},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":5443}},{"kind":"Use","ref_id":{"krate":17,"index":1505},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4186,"byte_end":4195,"line_start":111,"line_end":111,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":497},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4217,"byte_end":4230,"line_start":112,"line_end":112,"column_start":21,"column_end":34},"alias_span":null,"name":"ThreadBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1045},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4252,"byte_end":4262,"line_start":113,"line_end":113,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1489},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4284,"byte_end":4304,"line_start":114,"line_end":114,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4326,"byte_end":4343,"line_start":115,"line_end":115,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4366,"byte_end":4375,"line_start":116,"line_end":116,"column_start":22,"column_end":31},"alias_span":null,"name":"broadcast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4377,"byte_end":4392,"line_start":116,"line_end":116,"column_start":33,"column_end":48},"alias_span":null,"name":"spawn_broadcast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":121},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4394,"byte_end":4410,"line_start":116,"line_end":116,"column_start":50,"column_end":66},"alias_span":null,"name":"BroadcastContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1195},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4434,"byte_end":4453,"line_start":117,"line_end":117,"column_start":22,"column_end":41},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1095},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4455,"byte_end":4475,"line_start":117,"line_end":117,"column_start":43,"column_end":63},"alias_span":null,"name":"current_thread_index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":1194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4477,"byte_end":4492,"line_start":117,"line_end":117,"column_start":65,"column_end":80},"alias_span":null,"name":"max_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":750},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4516,"byte_end":4530,"line_start":118,"line_end":118,"column_start":22,"column_end":36},"alias_span":null,"name":"in_place_scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":738},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4532,"byte_end":4537,"line_start":118,"line_end":118,"column_start":38,"column_end":43},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":718},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4539,"byte_end":4544,"line_start":118,"line_end":118,"column_start":45,"column_end":50},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":759},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4568,"byte_end":4587,"line_start":119,"line_end":119,"column_start":22,"column_end":41},"alias_span":null,"name":"in_place_scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":744},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4589,"byte_end":4599,"line_start":119,"line_end":119,"column_start":43,"column_end":53},"alias_span":null,"name":"scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":721},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4601,"byte_end":4610,"line_start":119,"line_end":119,"column_start":55,"column_end":64},"alias_span":null,"name":"ScopeFifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":269},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4634,"byte_end":4638,"line_start":120,"line_end":120,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":279},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4640,"byte_end":4652,"line_start":120,"line_end":120,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":973},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4676,"byte_end":4681,"line_start":121,"line_end":121,"column_start":22,"column_end":27},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":980},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4683,"byte_end":4693,"line_start":121,"line_end":121,"column_start":29,"column_end":39},"alias_span":null,"name":"spawn_fifo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":0,"byte_end":5830,"line_start":1,"line_end":154,"column_start":1,"column_end":31},"name":"","qualname":"::","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":50},{"krate":0,"index":104},{"krate":0,"index":357},{"krate":0,"index":5156},{"krate":0,"index":5218},{"krate":0,"index":5258},{"krate":0,"index":5335},{"krate":0,"index":5399},{"krate":0,"index":5443},{"krate":0,"index":6155},{"krate":0,"index":6369},{"krate":0,"index":6396},{"krate":0,"index":6529},{"krate":0,"index":6543},{"krate":0,"index":6574},{"krate":0,"index":6585},{"krate":0,"index":6588},{"krate":0,"index":6591},{"krate":0,"index":6594},{"krate":0,"index":6597},{"krate":0,"index":6600},{"krate":0,"index":6601},{"krate":0,"index":6604},{"krate":0,"index":6607},{"krate":0,"index":6610},{"krate":0,"index":6611},{"krate":0,"index":6614},{"krate":0,"index":6617},{"krate":0,"index":6620},{"krate":0,"index":6621},{"krate":0,"index":6624},{"krate":0,"index":6627},{"krate":0,"index":6630},{"krate":0,"index":6631},{"krate":0,"index":6634},{"krate":0,"index":6637},{"krate":0,"index":6640},{"krate":0,"index":6641},{"krate":0,"index":6644},{"krate":0,"index":6647},{"krate":0,"index":6648},{"krate":0,"index":6651},{"krate":0,"index":6654},{"krate":0,"index":6658},{"krate":0,"index":6660},{"krate":0,"index":6662},{"krate":0,"index":6665},{"krate":0,"index":6668}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":0,"byte_end":39,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":40,"byte_end":62,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":63,"byte_end":88,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":89,"byte_end":115,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/ Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":117,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/ computations into parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":187,"byte_end":217,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":218,"byte_end":221,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":222,"byte_end":303,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":304,"byte_end":376,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ parallelism when sensible, based on work-load at runtime.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":377,"byte_end":438,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":439,"byte_end":442,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # How to use Rayon","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":443,"byte_end":465,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":466,"byte_end":469,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ There are two ways to use Rayon:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":470,"byte_end":506,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":507,"byte_end":510,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":511,"byte_end":594,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/   typically the most efficient.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":595,"byte_end":630,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":631,"byte_end":721,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/     execute in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":722,"byte_end":750,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/     - The [`ParallelIterator`] trait defines general methods for all parallel iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":751,"byte_end":843,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/     - The [`IndexedParallelIterator`] trait adds methods for iterators that support random","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":844,"byte_end":938,"line_start":22,"line_end":22,"column_start":1,"column_end":95}},{"value":"/       access.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":939,"byte_end":956,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":957,"byte_end":1038,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1039,"byte_end":1125,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"/     by a parallel iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1126,"byte_end":1157,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1158,"byte_end":1235,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1236,"byte_end":1297,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1298,"byte_end":1389,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"/   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1390,"byte_end":1476,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"/     the global one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1477,"byte_end":1500,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1501,"byte_end":1504,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [iter module]: iter/index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1505,"byte_end":1539,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ [`join`]: fn.join.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1540,"byte_end":1566,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/ [`scope`]: fn.scope.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1567,"byte_end":1595,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1596,"byte_end":1663,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1664,"byte_end":1734,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"/ [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1735,"byte_end":1791,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1792,"byte_end":1795,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Basic usage and the Rayon prelude","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1796,"byte_end":1835,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1836,"byte_end":1839,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ First, you will need to add `rayon` to your `Cargo.toml`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1840,"byte_end":1901,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1902,"byte_end":1905,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1906,"byte_end":1974,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ you need to import several traits. Those traits are bundled into","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":1975,"byte_end":2043,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2044,"byte_end":2112,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2113,"byte_end":2181,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ the top of each module that uses Rayon methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2182,"byte_end":2233,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2234,"byte_end":2237,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ These traits give you access to the `par_iter` method which provides","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2238,"byte_end":2310,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"/ parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2311,"byte_end":2384,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/ [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2385,"byte_end":2436,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2437,"byte_end":2440,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`rayon::prelude`]: prelude/index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2441,"byte_end":2483,"line_start":54,"line_end":54,"column_start":1,"column_end":43}},{"value":"/ [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2484,"byte_end":2540,"line_start":55,"line_end":55,"column_start":1,"column_end":57}},{"value":"/ [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2541,"byte_end":2607,"line_start":56,"line_end":56,"column_start":1,"column_end":67}},{"value":"/ [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2608,"byte_end":2670,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/ [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2671,"byte_end":2729,"line_start":58,"line_end":58,"column_start":1,"column_end":59}},{"value":"/ [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2730,"byte_end":2791,"line_start":59,"line_end":59,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: iter/trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2792,"byte_end":2850,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ [`IndexedParallelIterator`]: iter/trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2851,"byte_end":2923,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2924,"byte_end":2927,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Crate Layout","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2928,"byte_end":2946,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2947,"byte_end":2950,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Rayon extends many of the types found in the standard library with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":2951,"byte_end":3021,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/ parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3022,"byte_end":3087,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"/ crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3088,"byte_end":3153,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"/ Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3154,"byte_end":3223,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/ found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3224,"byte_end":3283,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"/ `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3284,"byte_end":3352,"line_start":70,"line_end":70,"column_start":1,"column_end":69}},{"value":"/ [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3353,"byte_end":3419,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ these submodules unless you need to name iterator types","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3420,"byte_end":3479,"line_start":72,"line_end":72,"column_start":1,"column_end":60}},{"value":"/ explicitly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3480,"byte_end":3495,"line_start":73,"line_end":73,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3496,"byte_end":3499,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3500,"byte_end":3583,"line_start":75,"line_end":75,"column_start":1,"column_end":84}},{"value":"/ [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3584,"byte_end":3672,"line_start":76,"line_end":76,"column_start":1,"column_end":89}},{"value":"/ [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3673,"byte_end":3716,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3717,"byte_end":3720,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Other questions?","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3721,"byte_end":3743,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3744,"byte_end":3747,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ See [the Rayon FAQ][faq].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3748,"byte_end":3777,"line_start":81,"line_end":81,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3778,"byte_end":3781,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3782,"byte_end":3845,"line_start":83,"line_end":83,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\private.rs","byte_start":9263,"byte_end":9276,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\private.rs","byte_start":9091,"byte_end":9156,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\private.rs","byte_start":9157,"byte_end":9211,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\private.rs","byte_start":9212,"byte_end":9251,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":6670},{"krate":0,"index":6675},{"krate":0,"index":6680},{"krate":0,"index":89},{"krate":0,"index":96}],"decl_id":null,"docs":" Parallel iterator types for [arrays] (`[T; N]`)","sig":null,"attributes":[{"value":"/ Parallel iterator types for [arrays] (`[T; N]`)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":13828,"byte_end":13879,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":13880,"byte_end":13883,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":13884,"byte_end":13962,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":13963,"byte_end":14001,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14002,"byte_end":14005,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [arrays]: https://doc.rust-lang.org/std/primitive.array.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14006,"byte_end":14070,"line_start":6,"line_end":6,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14369,"byte_end":14382,"line_start":18,"line_end":18,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data [T; N] as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14613,"byte_end":14626,"line_start":27,"line_end":27,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data mut [T; N] as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14821,"byte_end":14834,"line_start":36,"line_end":36,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<[T; N] as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6670},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14984,"byte_end":14992,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6673}],"decl_id":null,"docs":" Parallel iterator that moves out of an array.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of an array.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":14899,"byte_end":14948,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15137,"byte_end":15152,"line_start":50,"line_end":50,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<IntoIter<T, N> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15291,"byte_end":15298,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<IntoIter<T, N> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15432,"byte_end":15437,"line_start":63,"line_end":63,"column_start":8,"column_end":13},"name":"drive","qualname":"<IntoIter<T, N> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15567,"byte_end":15570,"line_start":70,"line_end":70,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoIter<T, N> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15613,"byte_end":15626,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<IntoIter<T, N> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":149},{"krate":0,"index":163},{"krate":0,"index":176},{"krate":0,"index":208},{"krate":0,"index":238},{"krate":0,"index":251},{"krate":0,"index":320},{"krate":0,"index":323}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":15967,"byte_end":16039,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16040,"byte_end":16043,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16044,"byte_end":16122,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16123,"byte_end":16161,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16162,"byte_end":16165,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16166,"byte_end":16239,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":6686},{"krate":0,"index":6689},{"krate":0,"index":6692},{"krate":0,"index":115},{"krate":0,"index":6702},{"krate":0,"index":6695},{"krate":0,"index":6708},{"krate":0,"index":6712},{"krate":0,"index":120},{"krate":0,"index":6716},{"krate":0,"index":6733},{"krate":0,"index":6725},{"krate":0,"index":6740},{"krate":0,"index":6744},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":137},{"krate":0,"index":145}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for heaps","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":18630,"byte_end":18692,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/ (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":18693,"byte_end":18765,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":18766,"byte_end":18825,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6686},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19006,"byte_end":19014,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6688}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":18930,"byte_end":18970,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19181,"byte_end":19194,"line_start":22,"line_end":22,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<BinaryHeap<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6708},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19480,"byte_end":19484,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6711}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19385,"byte_end":19451,"line_start":34,"line_end":34,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19597,"byte_end":19602,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6740},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20046,"byte_end":20051,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::binary_heap::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":6743}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a binary heap,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a binary heap,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19920,"byte_end":19983,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/ but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19984,"byte_end":20017,"line_start":61,"line_end":61,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20236,"byte_end":20245,"line_start":71,"line_end":71,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'a mut BinaryHeap<T> as iter::ParallelDrainFull>::par_drain","value":"fn par_drain(Self) -> Self::Iter","parent":{"krate":0,"index":5084},"children":[],"decl_id":{"krate":0,"index":5087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20393,"byte_end":20408,"line_start":79,"line_end":79,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Drain as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20547,"byte_end":20554,"line_start":86,"line_end":86,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Drain as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20689,"byte_end":20694,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"drive","qualname":"<Drain as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20824,"byte_end":20827,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"len","qualname":"<Drain as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20884,"byte_end":20897,"line_start":103,"line_end":103,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Drain as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":21164,"byte_end":21168,"line_start":114,"line_end":114,"column_start":8,"column_end":12},"name":"drop","qualname":"<Drain as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3515},"children":[],"decl_id":{"krate":2,"index":3516},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":6748},{"krate":0,"index":6752},{"krate":0,"index":6756},{"krate":0,"index":6765},{"krate":0,"index":6772},{"krate":0,"index":6777},{"krate":0,"index":158},{"krate":0,"index":6782},{"krate":0,"index":6792},{"krate":0,"index":6800},{"krate":0,"index":6805},{"krate":0,"index":6810},{"krate":0,"index":6820}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":21358,"byte_end":21426,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":21427,"byte_end":21500,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":21501,"byte_end":21560,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6748},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":21752,"byte_end":21760,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6751}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":21663,"byte_end":21702,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":6772},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22095,"byte_end":22099,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6776}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22001,"byte_end":22066,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22242,"byte_end":22247,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6800},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22636,"byte_end":22643,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6804}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22545,"byte_end":22607,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":6828},{"krate":0,"index":6831},{"krate":0,"index":6834},{"krate":0,"index":6842},{"krate":0,"index":6848},{"krate":0,"index":6852},{"krate":0,"index":172},{"krate":0,"index":6856},{"krate":0,"index":6865}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":22944,"byte_end":23012,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23013,"byte_end":23083,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23084,"byte_end":23143,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6828},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23335,"byte_end":23343,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6830}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23246,"byte_end":23285,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":6848},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23632,"byte_end":23636,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6851}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23538,"byte_end":23603,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23754,"byte_end":23759,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":6872},{"krate":0,"index":6876},{"krate":0,"index":6880},{"krate":0,"index":6890},{"krate":0,"index":6897},{"krate":0,"index":6902},{"krate":0,"index":195},{"krate":0,"index":6907},{"krate":0,"index":6918},{"krate":0,"index":6926},{"krate":0,"index":6931},{"krate":0,"index":6936},{"krate":0,"index":6947},{"krate":0,"index":6955},{"krate":0,"index":6961},{"krate":0,"index":200},{"krate":0,"index":6966}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash maps","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24065,"byte_end":24131,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24132,"byte_end":24204,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24205,"byte_end":24264,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6872},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24519,"byte_end":24527,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6875}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24432,"byte_end":24469,"line_start":14,"line_end":14,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6897},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24896,"byte_end":24900,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6901}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":24804,"byte_end":24867,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25055,"byte_end":25060,"line_start":37,"line_end":37,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6926},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25477,"byte_end":25484,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6930}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25388,"byte_end":25448,"line_start":54,"line_end":54,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6955},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25944,"byte_end":25949,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::hash_map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":6959},{"krate":0,"index":6960}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a hash map,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a hash map,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25821,"byte_end":25881,"line_start":70,"line_end":70,"column_start":1,"column_end":61}},{"value":"/ but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25882,"byte_end":25915,"line_start":71,"line_end":71,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":26244,"byte_end":26253,"line_start":84,"line_end":84,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'a mut HashMap<K, V, S> as iter::ParallelDrainFull>::par_drain","value":"fn par_drain(Self) -> Self::Iter","parent":{"krate":0,"index":5084},"children":[],"decl_id":{"krate":0,"index":5087},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":6973},{"krate":0,"index":6976},{"krate":0,"index":6979},{"krate":0,"index":6988},{"krate":0,"index":6994},{"krate":0,"index":6998},{"krate":0,"index":227},{"krate":0,"index":7002},{"krate":0,"index":7012},{"krate":0,"index":7019},{"krate":0,"index":7024},{"krate":0,"index":231},{"krate":0,"index":7028}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for hash sets","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":26528,"byte_end":26594,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/ (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":26595,"byte_end":26664,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":26665,"byte_end":26724,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6973},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":26979,"byte_end":26987,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6975}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":26892,"byte_end":26929,"line_start":14,"line_end":14,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6994},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27310,"byte_end":27314,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6997}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27218,"byte_end":27281,"line_start":30,"line_end":30,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27439,"byte_end":27444,"line_start":37,"line_end":37,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7019},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27902,"byte_end":27907,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::hash_set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":7022},{"krate":0,"index":7023}],"decl_id":null,"docs":" Draining parallel iterator that moves out of a hash set,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves out of a hash set,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27779,"byte_end":27839,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/ but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27840,"byte_end":27873,"line_start":57,"line_end":57,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":28161,"byte_end":28170,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'a mut HashSet<T, S> as iter::ParallelDrainFull>::par_drain","value":"fn par_drain(Self) -> Self::Iter","parent":{"krate":0,"index":5084},"children":[],"decl_id":{"krate":0,"index":5087},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":7034},{"krate":0,"index":7037},{"krate":0,"index":7040},{"krate":0,"index":7043},{"krate":0,"index":7051},{"krate":0,"index":7057},{"krate":0,"index":7061},{"krate":0,"index":247},{"krate":0,"index":7065},{"krate":0,"index":7074},{"krate":0,"index":7081},{"krate":0,"index":7085},{"krate":0,"index":7089},{"krate":0,"index":7098}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for linked lists","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28428,"byte_end":28497,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28498,"byte_end":28570,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28571,"byte_end":28630,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":7034},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28811,"byte_end":28819,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7036}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28735,"byte_end":28775,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":7057},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29093,"byte_end":29097,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7060}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":28998,"byte_end":29064,"line_start":28,"line_end":28,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29198,"byte_end":29203,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7081},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29542,"byte_end":29549,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7084}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29450,"byte_end":29513,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":7105},{"krate":0,"index":7108},{"krate":0,"index":7111},{"krate":0,"index":273},{"krate":0,"index":7121},{"krate":0,"index":7114},{"krate":0,"index":7127},{"krate":0,"index":7131},{"krate":0,"index":278},{"krate":0,"index":282},{"krate":0,"index":7143},{"krate":0,"index":7135},{"krate":0,"index":7150},{"krate":0,"index":7154},{"krate":0,"index":288},{"krate":0,"index":7166},{"krate":0,"index":7158},{"krate":0,"index":7173},{"krate":0,"index":7179},{"krate":0,"index":294},{"krate":0,"index":301},{"krate":0,"index":308},{"krate":0,"index":316}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for double-ended queues","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":29775,"byte_end":29851,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":29852,"byte_end":29922,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":29923,"byte_end":29982,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":7105},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30255,"byte_end":30263,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7107}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30172,"byte_end":30219,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30416,"byte_end":30429,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<VecDeque<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7127},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30795,"byte_end":30799,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7130}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30693,"byte_end":30766,"line_start":37,"line_end":37,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30925,"byte_end":30930,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":31142,"byte_end":31155,"line_start":55,"line_end":55,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a VecDeque<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7150},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":31482,"byte_end":31489,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7153}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":31383,"byte_end":31453,"line_start":68,"line_end":68,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":31704,"byte_end":31717,"line_start":78,"line_end":78,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a mut VecDeque<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7173},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32100,"byte_end":32105,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::vec_deque::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":7176},{"krate":0,"index":7177},{"krate":0,"index":7178}],"decl_id":null,"docs":" Draining parallel iterator that moves a range out of a double-ended queue,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range out of a double-ended queue,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":31959,"byte_end":32037,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/ but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32038,"byte_end":32071,"line_start":92,"line_end":92,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32329,"byte_end":32338,"line_start":104,"line_end":104,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'a mut VecDeque<T> as iter::ParallelDrainRange>::par_drain","value":"fn par_drain<R>(Self, R) -> Self::Iter where R: RangeBounds<usize>","parent":{"krate":0,"index":5088},"children":[],"decl_id":{"krate":0,"index":5092},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32623,"byte_end":32638,"line_start":116,"line_end":116,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Drain as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32777,"byte_end":32784,"line_start":123,"line_end":123,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Drain as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32913,"byte_end":32918,"line_start":129,"line_end":129,"column_start":8,"column_end":13},"name":"drive","qualname":"<Drain as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":33048,"byte_end":33051,"line_start":136,"line_end":136,"column_start":8,"column_end":11},"name":"len","qualname":"<Drain as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":33109,"byte_end":33122,"line_start":140,"line_end":140,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Drain as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":33480,"byte_end":33484,"line_start":152,"line_end":152,"column_start":8,"column_end":12},"name":"drop","qualname":"<Drain as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3515},"children":[],"decl_id":{"krate":2,"index":3516},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":18508,"byte_end":18517,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"par_drain","qualname":"<&'a mut DrainGuard as iter::ParallelDrainRange>::par_drain","value":"fn par_drain<R>(Self, R) -> Self::Iter where R: RangeBounds<usize>","parent":{"krate":0,"index":5088},"children":[],"decl_id":{"krate":0,"index":5092},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":476},{"krate":0,"index":577},{"krate":0,"index":650},{"krate":0,"index":736},{"krate":0,"index":843},{"krate":0,"index":929},{"krate":0,"index":974},{"krate":0,"index":1023},{"krate":0,"index":1290},{"krate":0,"index":1358},{"krate":0,"index":1430},{"krate":0,"index":1494},{"krate":0,"index":1565},{"krate":0,"index":1639},{"krate":0,"index":1713},{"krate":0,"index":1756},{"krate":0,"index":1799},{"krate":0,"index":1929},{"krate":0,"index":1994},{"krate":0,"index":2055},{"krate":0,"index":2095},{"krate":0,"index":2211},{"krate":0,"index":2323},{"krate":0,"index":2421},{"krate":0,"index":2443},{"krate":0,"index":2560},{"krate":0,"index":2646},{"krate":0,"index":2765},{"krate":0,"index":3046},{"krate":0,"index":3053},{"krate":0,"index":3081},{"krate":0,"index":3099},{"krate":0,"index":3229},{"krate":0,"index":3289},{"krate":0,"index":3351},{"krate":0,"index":3408},{"krate":0,"index":3473},{"krate":0,"index":3543},{"krate":0,"index":3587},{"krate":0,"index":3624},{"krate":0,"index":3662},{"krate":0,"index":3717},{"krate":0,"index":3774},{"krate":0,"index":3806},{"krate":0,"index":3949},{"krate":0,"index":4034},{"krate":0,"index":4111},{"krate":0,"index":4334},{"krate":0,"index":4466},{"krate":0,"index":4525},{"krate":0,"index":4591},{"krate":0,"index":4613},{"krate":0,"index":4614},{"krate":0,"index":4617},{"krate":0,"index":4620},{"krate":0,"index":4623},{"krate":0,"index":4626},{"krate":0,"index":4627},{"krate":0,"index":4630},{"krate":0,"index":4633},{"krate":0,"index":4636},{"krate":0,"index":4639},{"krate":0,"index":4642},{"krate":0,"index":4645},{"krate":0,"index":4648},{"krate":0,"index":4651},{"krate":0,"index":4654},{"krate":0,"index":4655},{"krate":0,"index":4658},{"krate":0,"index":4661},{"krate":0,"index":4664},{"krate":0,"index":4667},{"krate":0,"index":4670},{"krate":0,"index":4673},{"krate":0,"index":4676},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4683},{"krate":0,"index":4686},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4693},{"krate":0,"index":4696},{"krate":0,"index":4699},{"krate":0,"index":4700},{"krate":0,"index":4703},{"krate":0,"index":4706},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4713},{"krate":0,"index":4716},{"krate":0,"index":4719},{"krate":0,"index":4720},{"krate":0,"index":4723},{"krate":0,"index":4726},{"krate":0,"index":4729},{"krate":0,"index":4732},{"krate":0,"index":4735},{"krate":0,"index":4738},{"krate":0,"index":4739},{"krate":0,"index":4742},{"krate":0,"index":4745},{"krate":0,"index":4748},{"krate":0,"index":4751},{"krate":0,"index":4752},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":4761},{"krate":0,"index":4764},{"krate":0,"index":4767},{"krate":0,"index":4770},{"krate":0,"index":4774},{"krate":0,"index":4779},{"krate":0,"index":4785},{"krate":0,"index":4790},{"krate":0,"index":4796},{"krate":0,"index":4999},{"krate":0,"index":5004},{"krate":0,"index":5076},{"krate":0,"index":5080},{"krate":0,"index":5084},{"krate":0,"index":5088},{"krate":0,"index":5094}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"/ Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33781,"byte_end":33855,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33856,"byte_end":33859,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33860,"byte_end":33938,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33939,"byte_end":33982,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33983,"byte_end":33986,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":33987,"byte_end":34057,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ execute in parallel: typically all you have to do is convert the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34058,"byte_end":34126,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34127,"byte_end":34196,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34197,"byte_end":34264,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ example, to compute the sum of the squares of a sequence of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34265,"byte_end":34328,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ integers, one might write:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34329,"byte_end":34359,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34360,"byte_end":34363,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34364,"byte_end":34375,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34376,"byte_end":34402,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34403,"byte_end":34448,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/     input.par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34449,"byte_end":34473,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/          .map(|i| i * i)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34474,"byte_end":34502,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/          .sum()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34503,"byte_end":34522,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34523,"byte_end":34528,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34529,"byte_end":34536,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34537,"byte_end":34540,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Or, to increment all the integers in a slice, you could write:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34541,"byte_end":34607,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34608,"byte_end":34611,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34612,"byte_end":34623,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34624,"byte_end":34650,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ fn increment_all(input: &mut [i32]) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34651,"byte_end":34692,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/     input.par_iter_mut()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34693,"byte_end":34721,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/          .for_each(|p| *p += 1);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34722,"byte_end":34758,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34759,"byte_end":34764,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34765,"byte_end":34772,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34773,"byte_end":34776,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ To use parallel iterators, first import the traits by adding","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34777,"byte_end":34841,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/ something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34842,"byte_end":34908,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34909,"byte_end":34978,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":34979,"byte_end":35039,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ iterators work by first constructing a computation and then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35040,"byte_end":35103,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/ executing it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35104,"byte_end":35121,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35122,"byte_end":35125,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35126,"byte_end":35193,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ ways to create (or consume) parallel iterators:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35194,"byte_end":35245,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35246,"byte_end":35249,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35250,"byte_end":35318,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/   `par_windows`, as well as various parallel sorting","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35319,"byte_end":35375,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"/   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35376,"byte_end":35444,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35445,"byte_end":35515,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/   See [the `ParallelString` trait] for the full list.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35516,"byte_end":35573,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ - Various collections offer [`par_extend`], which grows a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35574,"byte_end":35635,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/   collection given a parallel iterator. (If you don't have a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35636,"byte_end":35700,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"/   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35701,"byte_end":35770,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/   one from scratch.)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35771,"byte_end":35795,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35796,"byte_end":35799,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35800,"byte_end":35866,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35867,"byte_end":35933,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35934,"byte_end":35979,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":35980,"byte_end":36041,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36042,"byte_end":36045,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ To see the full range of methods available on parallel iterators,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36046,"byte_end":36115,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36116,"byte_end":36186,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ traits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36187,"byte_end":36198,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36199,"byte_end":36202,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36203,"byte_end":36278,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36279,"byte_end":36357,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36358,"byte_end":36361,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [regular iterator]: https://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36362,"byte_end":36440,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36441,"byte_end":36494,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36495,"byte_end":36562,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ [split]: fn.split.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36563,"byte_end":36589,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/ [plumbing]: plumbing/index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36590,"byte_end":36625,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36626,"byte_end":36629,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note: Several of the `ParallelIterator` methods rely on a `Try` trait which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36630,"byte_end":36709,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ has been deliberately obscured from the public API.  This trait is intended","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36710,"byte_end":36789,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ to mirror the unstable `std::ops::Try` with implementations for `Option` and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36790,"byte_end":36870,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ `Result`, where `Some`/`Ok` values will let those iterators continue, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36871,"byte_end":36948,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ `None`/`Err` values will exit early.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36949,"byte_end":36989,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36990,"byte_end":36993,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A note about object safety: It is currently _not_ possible to wrap","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":36994,"byte_end":37064,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ a `ParallelIterator` (or any trait that depends on it) using a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37065,"byte_end":37131,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ `Box<dyn ParallelIterator>` or other kind of dynamic allocation,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37132,"byte_end":37200,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/ because `ParallelIterator` is **not object-safe**.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37201,"byte_end":37255,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"/ (This keeps the implementation simpler and allows extra optimizations.)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37256,"byte_end":37331,"line_start":80,"line_end":80,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":404},{"krate":0,"index":413},{"krate":0,"index":421},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":436},{"krate":0,"index":7183},{"krate":0,"index":7185},{"krate":0,"index":7187},{"krate":0,"index":441},{"krate":0,"index":7188},{"krate":0,"index":7191},{"krate":0,"index":7193},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":460},{"krate":0,"index":468},{"krate":0,"index":471}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a general overview.","sig":null,"attributes":[{"value":"/ Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145209,"byte_end":145282,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ low-level details -- users of parallel iterators should not need to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145283,"byte_end":145354,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"/ interact with them directly.  See [the `plumbing` README][r] for a general overview.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145355,"byte_end":145443,"line_start":3,"line_end":3,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145444,"byte_end":145447,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145448,"byte_end":145530,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145987,"byte_end":146003,"line_start":20,"line_end":20,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145626,"byte_end":145688,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145689,"byte_end":145759,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145760,"byte_end":145805,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145806,"byte_end":145809,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145810,"byte_end":145910,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":145911,"byte_end":145976,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146236,"byte_end":146242,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146013,"byte_end":146074,"line_start":21,"line_end":21,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146079,"byte_end":146126,"line_start":22,"line_end":22,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146131,"byte_end":146134,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146139,"byte_end":146226,"line_start":24,"line_end":24,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146460,"byte_end":146468,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"fn callback<P>(Self, P) -> Self::Output where P: Producer<Item = T>","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146249,"byte_end":146314,"line_start":27,"line_end":27,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146319,"byte_end":146382,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146387,"byte_end":146452,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147942,"byte_end":147950,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146551,"byte_end":146618,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146619,"byte_end":146688,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146689,"byte_end":146756,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146757,"byte_end":146824,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146825,"byte_end":146894,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146895,"byte_end":146963,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":146964,"byte_end":147033,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147034,"byte_end":147104,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147105,"byte_end":147173,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147174,"byte_end":147237,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147238,"byte_end":147293,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147294,"byte_end":147297,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147298,"byte_end":147363,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147364,"byte_end":147433,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147434,"byte_end":147475,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147476,"byte_end":147479,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147480,"byte_end":147544,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147545,"byte_end":147612,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147613,"byte_end":147672,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147673,"byte_end":147735,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147736,"byte_end":147784,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147785,"byte_end":147788,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147789,"byte_end":147871,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147872,"byte_end":147931,"line_start":58,"line_end":58,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148087,"byte_end":148091,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147971,"byte_end":148035,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148040,"byte_end":148077,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148148,"byte_end":148156,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148098,"byte_end":148138,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148339,"byte_end":148348,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148234,"byte_end":148309,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148314,"byte_end":148331,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148951,"byte_end":148958,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"fn min_len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148379,"byte_end":148431,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148436,"byte_end":148499,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148504,"byte_end":148568,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148573,"byte_end":148634,"line_start":74,"line_end":74,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148639,"byte_end":148701,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148706,"byte_end":148769,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148774,"byte_end":148835,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148840,"byte_end":148851,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148856,"byte_end":148859,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148864,"byte_end":148943,"line_start":80,"line_end":80,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149523,"byte_end":149530,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"fn max_len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":148998,"byte_end":149050,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149055,"byte_end":149120,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149125,"byte_end":149179,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149184,"byte_end":149247,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149252,"byte_end":149310,"line_start":89,"line_end":89,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149315,"byte_end":149375,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149380,"byte_end":149423,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149428,"byte_end":149431,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149436,"byte_end":149515,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149718,"byte_end":149726,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"fn split_at(Self, usize) -> (Self, Self)","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149579,"byte_end":149643,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149648,"byte_end":149710,"line_start":99,"line_end":99,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149993,"byte_end":150002,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149769,"byte_end":149832,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149837,"byte_end":149907,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149912,"byte_end":149915,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":149920,"byte_end":149985,"line_start":105,"line_end":105,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150950,"byte_end":150958,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150130,"byte_end":150199,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150200,"byte_end":150265,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150266,"byte_end":150327,"line_start":116,"line_end":116,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150328,"byte_end":150395,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150396,"byte_end":150464,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150465,"byte_end":150534,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150535,"byte_end":150605,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150606,"byte_end":150665,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150666,"byte_end":150701,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150702,"byte_end":150705,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150706,"byte_end":150788,"line_start":124,"line_end":124,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150789,"byte_end":150867,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150868,"byte_end":150901,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150902,"byte_end":150939,"line_start":127,"line_end":127,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151059,"byte_end":151065,"line_start":130,"line_end":130,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150985,"byte_end":151049,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151186,"byte_end":151193,"line_start":133,"line_end":133,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151109,"byte_end":151176,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151299,"byte_end":151305,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151223,"byte_end":151289,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151541,"byte_end":151549,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"fn split_at(Self, usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151318,"byte_end":151382,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151387,"byte_end":151447,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151452,"byte_end":151516,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151521,"byte_end":151533,"line_start":141,"line_end":141,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151735,"byte_end":151746,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"fn into_folder(Self) -> Self::Folder","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151607,"byte_end":151668,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151673,"byte_end":151727,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151905,"byte_end":151909,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"fn full<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":413},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151775,"byte_end":151837,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151842,"byte_end":151897,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152272,"byte_end":152278,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":428}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151929,"byte_end":151983,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":151984,"byte_end":152051,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152052,"byte_end":152122,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152123,"byte_end":152178,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152179,"byte_end":152182,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152183,"byte_end":152261,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152378,"byte_end":152384,"line_start":161,"line_end":161,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152298,"byte_end":152368,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152453,"byte_end":152460,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"fn consume(Self, Item) -> Self","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152391,"byte_end":152445,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152889,"byte_end":152901,"line_start":174,"line_end":174,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"fn consume_iter<I>(Self, I) -> Self where I: IntoIterator<Item = Item>","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152493,"byte_end":152573,"line_start":166,"line_end":166,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152578,"byte_end":152581,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152586,"byte_end":152651,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152656,"byte_end":152720,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152725,"byte_end":152758,"line_start":170,"line_end":170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152763,"byte_end":152766,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152771,"byte_end":152834,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152839,"byte_end":152881,"line_start":173,"line_end":173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153209,"byte_end":153217,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"fn complete(Self) -> Self::Result","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153152,"byte_end":153201,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153374,"byte_end":153378,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"fn full<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153246,"byte_end":153306,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153311,"byte_end":153366,"line_start":191,"line_end":191,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153808,"byte_end":153815,"line_start":202,"line_end":202,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":431}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153398,"byte_end":153467,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153468,"byte_end":153535,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153536,"byte_end":153606,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153607,"byte_end":153674,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153675,"byte_end":153710,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153711,"byte_end":153714,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153715,"byte_end":153797,"line_start":201,"line_end":201,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153916,"byte_end":153922,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"fn reduce(Self, Result, Result) -> Result","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153830,"byte_end":153893,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153898,"byte_end":153908,"line_start":204,"line_end":204,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154284,"byte_end":154301,"line_start":213,"line_end":213,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":153972,"byte_end":154041,"line_start":208,"line_end":208,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154042,"byte_end":154098,"line_start":209,"line_end":209,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154099,"byte_end":154168,"line_start":210,"line_end":210,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154169,"byte_end":154236,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154237,"byte_end":154273,"line_start":212,"line_end":212,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154777,"byte_end":154791,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"fn split_off_left<'_>(&'_ Self) -> Self","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154324,"byte_end":154383,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154388,"byte_end":154454,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154459,"byte_end":154525,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154530,"byte_end":154592,"line_start":217,"line_end":217,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154597,"byte_end":154657,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154662,"byte_end":154728,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154733,"byte_end":154769,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154913,"byte_end":154923,"line_start":225,"line_end":225,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"fn to_reducer<'_>(&'_ Self) -> Self::Reducer","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154813,"byte_end":154879,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154884,"byte_end":154905,"line_start":224,"line_end":224,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155400,"byte_end":155417,"line_start":236,"line_end":236,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154952,"byte_end":155019,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155020,"byte_end":155082,"line_start":229,"line_end":229,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155083,"byte_end":155151,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155152,"byte_end":155222,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155223,"byte_end":155226,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155227,"byte_end":155293,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155294,"byte_end":155362,"line_start":234,"line_end":234,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155363,"byte_end":155389,"line_start":235,"line_end":235,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155495,"byte_end":155499,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155438,"byte_end":155485,"line_start":237,"line_end":237,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155588,"byte_end":155593,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155506,"byte_end":155580,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155776,"byte_end":155785,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155630,"byte_end":155693,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155698,"byte_end":155768,"line_start":244,"line_end":244,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159605,"byte_end":159611,"line_start":351,"line_end":351,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"fn bridge<I, C>(I, C) -> C::Result where I: IndexedParallelIterator,\nC: Consumer<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159026,"byte_end":159096,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159097,"byte_end":159163,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159164,"byte_end":159233,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159234,"byte_end":159274,"line_start":343,"line_end":343,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159275,"byte_end":159278,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159279,"byte_end":159341,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159342,"byte_end":159398,"line_start":346,"line_end":346,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159399,"byte_end":159444,"line_start":347,"line_end":347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159445,"byte_end":159448,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159449,"byte_end":159529,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159530,"byte_end":159597,"line_start":350,"line_end":350,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160857,"byte_end":160881,"line_start":391,"line_end":391,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"fn bridge_producer_consumer<P, C>(usize, P, C) -> C::Result where P: Producer,\nC: Consumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160219,"byte_end":160281,"line_start":378,"line_end":378,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160282,"byte_end":160347,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160348,"byte_end":160416,"line_start":380,"line_end":380,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160417,"byte_end":160483,"line_start":381,"line_end":381,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160484,"byte_end":160495,"line_start":382,"line_end":382,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160496,"byte_end":160499,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160500,"byte_end":160562,"line_start":384,"line_end":384,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160563,"byte_end":160619,"line_start":385,"line_end":385,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160620,"byte_end":160665,"line_start":386,"line_end":386,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160666,"byte_end":160669,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160670,"byte_end":160700,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160701,"byte_end":160781,"line_start":389,"line_end":389,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":160782,"byte_end":160849,"line_start":390,"line_end":390,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":162657,"byte_end":162673,"line_start":446,"line_end":446,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"fn bridge_unindexed<P, C>(P, C) -> C::Result where P: UnindexedProducer,\nC: UnindexedConsumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":162488,"byte_end":162578,"line_start":443,"line_end":443,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":162579,"byte_end":162582,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":162583,"byte_end":162649,"line_start":445,"line_end":445,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":7194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164530,"byte_end":164535,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":7197},{"krate":0,"index":7198}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164148,"byte_end":164227,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164228,"byte_end":164304,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164305,"byte_end":164308,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164309,"byte_end":164366,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164367,"byte_end":164420,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164421,"byte_end":164494,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":165003,"byte_end":165018,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Chain<A, B> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":165853,"byte_end":165860,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Chain<A, B> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":166099,"byte_end":166104,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"drive","qualname":"<Chain<A, B> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":166396,"byte_end":166399,"line_start":82,"line_end":82,"column_start":8,"column_end":11},"name":"len","qualname":"<Chain<A, B> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":166498,"byte_end":166511,"line_start":86,"line_end":86,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Chain<A, B> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171463,"byte_end":171469,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":7209},{"krate":0,"index":7210}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171050,"byte_end":171125,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171126,"byte_end":171129,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171130,"byte_end":171214,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171215,"byte_end":171218,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171219,"byte_end":171285,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171286,"byte_end":171353,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171354,"byte_end":171427,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171845,"byte_end":171860,"line_start":39,"line_end":39,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Chunks<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: Consumer<Vec<I::Item>>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171992,"byte_end":171999,"line_start":46,"line_end":46,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Chunks<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172153,"byte_end":172158,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"drive","qualname":"<Chunks<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172288,"byte_end":172291,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"len","qualname":"<Chunks<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172370,"byte_end":172383,"line_start":66,"line_end":66,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Chunks<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7217},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176788,"byte_end":176794,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":7219}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176399,"byte_end":176478,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176479,"byte_end":176482,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176483,"byte_end":176560,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176561,"byte_end":176564,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176565,"byte_end":176624,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176625,"byte_end":176678,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176679,"byte_end":176752,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177153,"byte_end":177168,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Cloned<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177376,"byte_end":177383,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Cloned<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177594,"byte_end":177599,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"drive","qualname":"<Cloned<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177788,"byte_end":177791,"line_start":61,"line_end":61,"column_start":8,"column_end":11},"name":"len","qualname":"<Cloned<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177848,"byte_end":177861,"line_start":65,"line_end":65,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Cloned<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7226},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205659,"byte_end":205665,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Copied","qualname":"::iter::copied::Copied","value":"Copied {  }","parent":null,"children":[{"krate":0,"index":7228}],"decl_id":null,"docs":" `Copied` is an iterator that copies the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Copied` is an iterator that copies the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205270,"byte_end":205349,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205350,"byte_end":205353,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`copied()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205354,"byte_end":205431,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205432,"byte_end":205435,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copied()`]: trait.ParallelIterator.html#method.copied","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205436,"byte_end":205495,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205496,"byte_end":205549,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205550,"byte_end":205623,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206023,"byte_end":206038,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Copied<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206246,"byte_end":206253,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Copied<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206463,"byte_end":206468,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"drive","qualname":"<Copied<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206657,"byte_end":206660,"line_start":61,"line_end":61,"column_start":8,"column_end":11},"name":"len","qualname":"<Copied<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206717,"byte_end":206730,"line_start":65,"line_end":65,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Copied<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210667,"byte_end":210672,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"fn empty<T>() -> Empty<T> where T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210249,"byte_end":210303,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210304,"byte_end":210307,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210308,"byte_end":210385,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210386,"byte_end":210428,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210429,"byte_end":210432,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210433,"byte_end":210447,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210448,"byte_end":210451,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210452,"byte_end":210459,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210460,"byte_end":210486,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210487,"byte_end":210514,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210515,"byte_end":210518,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210519,"byte_end":210557,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210558,"byte_end":210581,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210582,"byte_end":210611,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210612,"byte_end":210615,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210616,"byte_end":210651,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210652,"byte_end":210659,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210825,"byte_end":210830,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":942}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210748,"byte_end":210813,"line_start":30,"line_end":30,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210915,"byte_end":210920,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"clone","qualname":"<Empty<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211010,"byte_end":211013,"line_start":42,"line_end":42,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Empty<T> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211171,"byte_end":211186,"line_start":50,"line_end":50,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Empty<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211323,"byte_end":211330,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Empty<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211442,"byte_end":211447,"line_start":63,"line_end":63,"column_start":8,"column_end":13},"name":"drive","qualname":"<Empty<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211588,"byte_end":211591,"line_start":70,"line_end":70,"column_start":8,"column_end":11},"name":"len","qualname":"<Empty<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211634,"byte_end":211647,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Empty<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7235},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212838,"byte_end":212847,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":7237}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212410,"byte_end":212495,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212496,"byte_end":212583,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212584,"byte_end":212587,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212588,"byte_end":212660,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212661,"byte_end":212728,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212729,"byte_end":212802,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213200,"byte_end":213215,"line_start":34,"line_end":34,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Enumerate<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213354,"byte_end":213361,"line_start":41,"line_end":41,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Enumerate<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213518,"byte_end":213523,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"drive","qualname":"<Enumerate<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213628,"byte_end":213631,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"len","qualname":"<Enumerate<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213688,"byte_end":213701,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Enumerate<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218264,"byte_end":218274,"line_start":105,"line_end":105,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BinaryHeap<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218591,"byte_end":218601,"line_start":118,"line_end":118,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BinaryHeap<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219094,"byte_end":219104,"line_start":141,"line_end":141,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BTreeMap<K, V> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n(K, V)>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219473,"byte_end":219483,"line_start":155,"line_end":155,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BTreeMap<K, V> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n(&'a K, &'a V)>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219957,"byte_end":219967,"line_start":177,"line_end":177,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BTreeSet<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220286,"byte_end":220296,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<BTreeSet<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220903,"byte_end":220913,"line_start":217,"line_end":217,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<HashMap<K, V, S> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n(K, V)>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221399,"byte_end":221409,"line_start":233,"line_end":233,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<HashMap<K, V, S> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n(&'a K, &'a V)>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221991,"byte_end":222001,"line_start":259,"line_end":259,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<HashSet<T, S> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222355,"byte_end":222365,"line_start":273,"line_end":273,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<HashSet<T, S> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222650,"byte_end":222660,"line_start":286,"line_end":286,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<LinkedList<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223036,"byte_end":223046,"line_start":300,"line_end":300,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<LinkedList<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":224809,"byte_end":224819,"line_start":385,"line_end":385,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<String as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\nchar>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":225314,"byte_end":225324,"line_start":398,"line_end":398,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<String as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a char>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227172,"byte_end":227182,"line_start":485,"line_end":485,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<String as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a str>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227440,"byte_end":227450,"line_start":495,"line_end":495,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<String as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\nString>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227723,"byte_end":227733,"line_start":505,"line_end":505,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<String as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\nCow>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228222,"byte_end":228232,"line_start":528,"line_end":528,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<VecDeque<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228536,"byte_end":228546,"line_start":541,"line_end":541,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<VecDeque<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228977,"byte_end":228987,"line_start":561,"line_end":561,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<Vec<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":230011,"byte_end":230021,"line_start":588,"line_end":588,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<Vec<T> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n&'a T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":230284,"byte_end":230294,"line_start":598,"line_end":598,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<() as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = ()>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230901,"byte_end":230907,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":7247},{"krate":0,"index":7248}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230523,"byte_end":230602,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230603,"byte_end":230680,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230681,"byte_end":230684,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230685,"byte_end":230744,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230745,"byte_end":230798,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":230799,"byte_end":230872,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231037,"byte_end":231040,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Filter<I, P> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231521,"byte_end":231536,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Filter<I, P> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7253},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234439,"byte_end":234448,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":7256},{"krate":0,"index":7257}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234037,"byte_end":234127,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234128,"byte_end":234210,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234211,"byte_end":234214,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234215,"byte_end":234282,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234283,"byte_end":234336,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234337,"byte_end":234410,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234581,"byte_end":234584,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FilterMap<I, P> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":235107,"byte_end":235122,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FilterMap<I, P> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248469,"byte_end":248476,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":7273},{"krate":0,"index":7274}],"decl_id":null,"docs":" `FlatMap` maps each element to a parallel iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to a parallel iterator, then flattens these iterators together.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248069,"byte_end":248164,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248165,"byte_end":248244,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248245,"byte_end":248248,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248249,"byte_end":248312,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248313,"byte_end":248366,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248367,"byte_end":248440,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248604,"byte_end":248607,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FlatMap<I, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":249106,"byte_end":249121,"line_start":39,"line_end":39,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FlatMap<I, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7279},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252439,"byte_end":252450,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"FlatMapIter","qualname":"::iter::flat_map_iter::FlatMapIter","value":"FlatMapIter {  }","parent":null,"children":[{"krate":0,"index":7282},{"krate":0,"index":7283}],"decl_id":null,"docs":" `FlatMapIter` maps each element to a serial iterator, then flattens these iterators together.\n This struct is created by the [`flat_map_iter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMapIter` maps each element to a serial iterator, then flattens these iterators together.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252022,"byte_end":252119,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ This struct is created by the [`flat_map_iter()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252120,"byte_end":252204,"line_start":7,"line_end":7,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252205,"byte_end":252208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map_iter()`]: trait.ParallelIterator.html#method.flat_map_iter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252209,"byte_end":252282,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252283,"byte_end":252336,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252337,"byte_end":252410,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252582,"byte_end":252585,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FlatMapIter<I, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":253142,"byte_end":253157,"line_start":42,"line_end":42,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FlatMapIter<I, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7288},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256152,"byte_end":256159,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":7290}],"decl_id":null,"docs":" `Flatten` turns each element to a parallel iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to a parallel iterator, then flattens these iterators","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":255746,"byte_end":255832,"line_start":4,"line_end":4,"column_start":1,"column_end":87}},{"value":"/ together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":255833,"byte_end":255922,"line_start":5,"line_end":5,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":255923,"byte_end":255926,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":255927,"byte_end":255988,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":255989,"byte_end":256042,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256043,"byte_end":256116,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256576,"byte_end":256591,"line_start":33,"line_end":33,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Flatten<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7297},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259512,"byte_end":259523,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"FlattenIter","qualname":"::iter::flatten_iter::FlattenIter","value":"FlattenIter {  }","parent":null,"children":[{"krate":0,"index":7299}],"decl_id":null,"docs":" `FlattenIter` turns each element to a serial iterator, then flattens these iterators\n together. This struct is created by the [`flatten_iter()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FlattenIter` turns each element to a serial iterator, then flattens these iterators","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259089,"byte_end":259177,"line_start":4,"line_end":4,"column_start":1,"column_end":89}},{"value":"/ together. This struct is created by the [`flatten_iter()`] method on [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259178,"byte_end":259272,"line_start":5,"line_end":5,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259273,"byte_end":259276,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`flatten_iter()`]: trait.ParallelIterator.html#method.flatten_iter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259277,"byte_end":259348,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259349,"byte_end":259402,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259403,"byte_end":259476,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":260018,"byte_end":260033,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FlattenIter<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7306},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262950,"byte_end":262954,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":7310},{"krate":0,"index":7311},{"krate":0,"index":7312}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262565,"byte_end":262657,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262658,"byte_end":262733,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262734,"byte_end":262737,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262738,"byte_end":262793,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262794,"byte_end":262847,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262848,"byte_end":262921,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263092,"byte_end":263095,"line_start":36,"line_end":36,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Fold<I, ID, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263425,"byte_end":263440,"line_start":50,"line_end":50,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Fold<I, ID, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7318},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267069,"byte_end":267077,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":7322},{"krate":0,"index":7323},{"krate":0,"index":7324}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266665,"byte_end":266761,"line_start":197,"line_end":197,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266762,"byte_end":266842,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266843,"byte_end":266846,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266847,"byte_end":266912,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266913,"byte_end":266966,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266967,"byte_end":267040,"line_start":202,"line_end":202,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267218,"byte_end":267221,"line_start":211,"line_end":211,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FoldWith<I, U, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267594,"byte_end":267609,"line_start":227,"line_end":227,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FoldWith<I, U, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269987,"byte_end":269997,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"FoldChunks","qualname":"::iter::fold_chunks::FoldChunks","value":"FoldChunks {  }","parent":null,"children":[{"krate":0,"index":7334},{"krate":0,"index":7335},{"krate":0,"index":7336},{"krate":0,"index":7337}],"decl_id":null,"docs":" `FoldChunks` is an iterator that groups elements of an underlying iterator and applies a\n function over them, producing a single value for each group.","sig":null,"attributes":[{"value":"/ `FoldChunks` is an iterator that groups elements of an underlying iterator and applies a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269484,"byte_end":269576,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ function over them, producing a single value for each group.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269577,"byte_end":269641,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269642,"byte_end":269645,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`fold_chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269646,"byte_end":269735,"line_start":11,"line_end":11,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269736,"byte_end":269739,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`fold_chunks()`]: trait.IndexedParallelIterator.html#method.fold_chunks","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269740,"byte_end":269816,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269817,"byte_end":269884,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":269885,"byte_end":269958,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270209,"byte_end":270212,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FoldChunks<I, ID, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271054,"byte_end":271069,"line_start":63,"line_end":63,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FoldChunks<I, ID, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: Consumer<U>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271190,"byte_end":271197,"line_start":70,"line_end":70,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<FoldChunks<I, ID, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271460,"byte_end":271463,"line_start":82,"line_end":82,"column_start":8,"column_end":11},"name":"len","qualname":"<FoldChunks<I, ID, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271551,"byte_end":271556,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"drive","qualname":"<FoldChunks<I, ID, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271686,"byte_end":271699,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<FoldChunks<I, ID, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7343},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276422,"byte_end":276436,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"FoldChunksWith","qualname":"::iter::fold_chunks_with::FoldChunksWith","value":"FoldChunksWith {  }","parent":null,"children":[{"krate":0,"index":7347},{"krate":0,"index":7348},{"krate":0,"index":7349},{"krate":0,"index":7350}],"decl_id":null,"docs":" `FoldChunksWith` is an iterator that groups elements of an underlying iterator and applies a\n function over them, producing a single value for each group.","sig":null,"attributes":[{"value":"/ `FoldChunksWith` is an iterator that groups elements of an underlying iterator and applies a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":275905,"byte_end":276001,"line_start":8,"line_end":8,"column_start":1,"column_end":97}},{"value":"/ function over them, producing a single value for each group.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276002,"byte_end":276066,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276067,"byte_end":276070,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`fold_chunks_with()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276071,"byte_end":276165,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276166,"byte_end":276169,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`fold_chunks_with()`]: trait.IndexedParallelIterator.html#method.fold_chunks","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276170,"byte_end":276251,"line_start":13,"line_end":13,"column_start":1,"column_end":82}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276252,"byte_end":276319,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276320,"byte_end":276393,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276651,"byte_end":276654,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FoldChunksWith<I, U, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2025},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277482,"byte_end":277497,"line_start":62,"line_end":62,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<FoldChunksWith<I, U, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: Consumer<U>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2027},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277618,"byte_end":277625,"line_start":69,"line_end":69,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<FoldChunksWith<I, U, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277862,"byte_end":277865,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"len","qualname":"<FoldChunksWith<I, U, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2033},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277953,"byte_end":277958,"line_start":84,"line_end":84,"column_start":8,"column_end":13},"name":"drive","qualname":"<FoldChunksWith<I, U, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":278088,"byte_end":278101,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<FoldChunksWith<I, U, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284294,"byte_end":284307,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<Vec<T> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284572,"byte_end":284585,"line_start":39,"line_end":39,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<VecDeque<T> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284945,"byte_end":284958,"line_start":53,"line_end":53,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<BinaryHeap<T> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285259,"byte_end":285272,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<LinkedList<T> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285798,"byte_end":285811,"line_start":85,"line_end":85,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<HashMap<K, V, S> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = (K, V)>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286295,"byte_end":286308,"line_start":102,"line_end":102,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<BTreeMap<K, V> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = (K, V)>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286632,"byte_end":286645,"line_start":116,"line_end":116,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<HashSet<V, S> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = V>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286917,"byte_end":286930,"line_start":129,"line_end":129,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<BTreeSet<V> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = V>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287174,"byte_end":287187,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<String as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = char>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287442,"byte_end":287455,"line_start":149,"line_end":149,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<String as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = &'a char>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287716,"byte_end":287729,"line_start":159,"line_end":159,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<String as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = &'a str>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287986,"byte_end":287999,"line_start":169,"line_end":169,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<String as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = String>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288263,"byte_end":288276,"line_start":179,"line_end":179,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<String as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = Cow>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288791,"byte_end":288804,"line_start":198,"line_end":198,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<Cow as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":289451,"byte_end":289464,"line_start":222,"line_end":222,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<() as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = ()>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7356},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290118,"byte_end":290125,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":7359},{"krate":0,"index":7360}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289705,"byte_end":289780,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289781,"byte_end":289812,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289813,"byte_end":289816,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289817,"byte_end":289895,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289896,"byte_end":289899,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289900,"byte_end":289961,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":289962,"byte_end":290015,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290016,"byte_end":290089,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2227},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290257,"byte_end":290260,"line_start":22,"line_end":22,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Inspect<I, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290740,"byte_end":290755,"line_start":44,"line_end":44,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Inspect<I, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290982,"byte_end":290989,"line_start":52,"line_end":52,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Inspect<I, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291188,"byte_end":291193,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"drive","qualname":"<Inspect<I, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291401,"byte_end":291404,"line_start":70,"line_end":70,"column_start":8,"column_end":11},"name":"len","qualname":"<Inspect<I, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2245},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291461,"byte_end":291474,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Inspect<I, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7365},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296259,"byte_end":296269,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":7368},{"krate":0,"index":7369}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":295799,"byte_end":295869,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":295870,"byte_end":295939,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":295940,"byte_end":296002,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296003,"byte_end":296006,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296007,"byte_end":296081,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296082,"byte_end":296149,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296150,"byte_end":296223,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296798,"byte_end":296813,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Interleave<I, J> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: Consumer<I::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296940,"byte_end":296947,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Interleave<I, J> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297159,"byte_end":297164,"line_start":58,"line_end":58,"column_start":8,"column_end":13},"name":"drive","qualname":"<Interleave<I, J> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297294,"byte_end":297297,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"len","qualname":"<Interleave<I, J> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297396,"byte_end":297409,"line_start":69,"line_end":69,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Interleave<I, J> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7378},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305319,"byte_end":305337,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":7381}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":304775,"byte_end":304838,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":304839,"byte_end":304907,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":304908,"byte_end":304937,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":304938,"byte_end":304941,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":304942,"byte_end":305011,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305012,"byte_end":305044,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305045,"byte_end":305048,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305049,"byte_end":305141,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305142,"byte_end":305209,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305210,"byte_end":305283,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306298,"byte_end":306313,"line_start":51,"line_end":51,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<InterleaveShortest<I, J> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: Consumer<I::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306440,"byte_end":306447,"line_start":58,"line_end":58,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<InterleaveShortest<I, J> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306667,"byte_end":306672,"line_start":68,"line_end":68,"column_start":8,"column_end":13},"name":"drive","qualname":"<InterleaveShortest<I, J> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306802,"byte_end":306805,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"len","qualname":"<InterleaveShortest<I, J> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2441},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306868,"byte_end":306881,"line_start":79,"line_end":79,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<InterleaveShortest<I, J> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7390},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307556,"byte_end":307567,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":7392},{"krate":0,"index":7393}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307124,"byte_end":307200,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307201,"byte_end":307265,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307266,"byte_end":307318,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307319,"byte_end":307322,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307323,"byte_end":307392,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307393,"byte_end":307446,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307447,"byte_end":307520,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308017,"byte_end":308032,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Intersperse<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<I::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308253,"byte_end":308260,"line_start":49,"line_end":49,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Intersperse<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308539,"byte_end":308544,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"drive","qualname":"<Intersperse<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308749,"byte_end":308752,"line_start":70,"line_end":70,"column_start":8,"column_end":11},"name":"len","qualname":"<Intersperse<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308938,"byte_end":308951,"line_start":79,"line_end":79,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Intersperse<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7400},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317788,"byte_end":317794,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":7402},{"krate":0,"index":7403}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`with_min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317359,"byte_end":317436,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`with_min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317437,"byte_end":317527,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317528,"byte_end":317531,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`with_min_len()`]: trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317532,"byte_end":317610,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317611,"byte_end":317678,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317679,"byte_end":317752,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318159,"byte_end":318174,"line_start":33,"line_end":33,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<MinLen<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318313,"byte_end":318320,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<MinLen<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318474,"byte_end":318479,"line_start":49,"line_end":49,"column_start":8,"column_end":13},"name":"drive","qualname":"<MinLen<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318584,"byte_end":318587,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"len","qualname":"<MinLen<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318644,"byte_end":318657,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<MinLen<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7410},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320888,"byte_end":320894,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":7412},{"krate":0,"index":7413}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`with_max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320459,"byte_end":320536,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`with_max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320537,"byte_end":320627,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320628,"byte_end":320631,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`with_max_len()`]: trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320632,"byte_end":320710,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320711,"byte_end":320778,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320779,"byte_end":320852,"line_start":144,"line_end":144,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321259,"byte_end":321274,"line_start":167,"line_end":167,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<MaxLen<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321413,"byte_end":321420,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<MaxLen<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321574,"byte_end":321579,"line_start":183,"line_end":183,"column_start":8,"column_end":13},"name":"drive","qualname":"<MaxLen<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321684,"byte_end":321687,"line_start":187,"line_end":187,"column_start":8,"column_end":11},"name":"len","qualname":"<MaxLen<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321744,"byte_end":321757,"line_start":191,"line_end":191,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<MaxLen<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7420},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324017,"byte_end":324020,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":7423},{"krate":0,"index":7424}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323643,"byte_end":323723,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323724,"byte_end":323727,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323728,"byte_end":323802,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323803,"byte_end":323806,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323807,"byte_end":323860,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323861,"byte_end":323914,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":323915,"byte_end":323988,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324144,"byte_end":324147,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Map<I, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324621,"byte_end":324636,"line_start":44,"line_end":44,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Map<I, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324855,"byte_end":324862,"line_start":52,"line_end":52,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Map<I, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":325077,"byte_end":325082,"line_start":63,"line_end":63,"column_start":8,"column_end":13},"name":"drive","qualname":"<Map<I, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":325282,"byte_end":325285,"line_start":71,"line_end":71,"column_start":8,"column_end":11},"name":"len","qualname":"<Map<I, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":325342,"byte_end":325355,"line_start":75,"line_end":75,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Map<I, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7429},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329994,"byte_end":330001,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":7433},{"krate":0,"index":7434},{"krate":0,"index":7435}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329601,"byte_end":329685,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329686,"byte_end":329689,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329690,"byte_end":329769,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329770,"byte_end":329773,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329774,"byte_end":329837,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329838,"byte_end":329891,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":329892,"byte_end":329965,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330158,"byte_end":330161,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"fmt","qualname":"<MapWith<I, T, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330768,"byte_end":330783,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<MapWith<I, T, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331017,"byte_end":331024,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<MapWith<I, T, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331278,"byte_end":331283,"line_start":68,"line_end":68,"column_start":8,"column_end":13},"name":"drive","qualname":"<MapWith<I, T, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331498,"byte_end":331501,"line_start":76,"line_end":76,"column_start":8,"column_end":11},"name":"len","qualname":"<MapWith<I, T, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331558,"byte_end":331571,"line_start":80,"line_end":80,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<MapWith<I, T, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7441},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338062,"byte_end":338069,"line_start":346,"line_end":346,"column_start":12,"column_end":19},"name":"MapInit","qualname":"::iter::map_with::MapInit","value":"MapInit {  }","parent":null,"children":[{"krate":0,"index":7445},{"krate":0,"index":7446},{"krate":0,"index":7447}],"decl_id":null,"docs":" `MapInit` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapInit` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337669,"byte_end":337753,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337754,"byte_end":337757,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_init()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337758,"byte_end":337837,"line_start":340,"line_end":340,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337838,"byte_end":337841,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ [`map_init()`]: trait.ParallelIterator.html#method.map_init","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337842,"byte_end":337905,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337906,"byte_end":337959,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":337960,"byte_end":338033,"line_start":344,"line_end":344,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338231,"byte_end":338234,"line_start":353,"line_end":353,"column_start":8,"column_end":11},"name":"fmt","qualname":"<MapInit<I, INIT, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338808,"byte_end":338823,"line_start":377,"line_end":377,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<MapInit<I, INIT, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339058,"byte_end":339065,"line_start":385,"line_end":385,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<MapInit<I, INIT, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339342,"byte_end":339347,"line_start":397,"line_end":397,"column_start":8,"column_end":13},"name":"drive","qualname":"<MapInit<I, INIT, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339563,"byte_end":339566,"line_start":405,"line_end":405,"column_start":8,"column_end":11},"name":"len","qualname":"<MapInit<I, INIT, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339623,"byte_end":339636,"line_start":409,"line_end":409,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<MapInit<I, INIT, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7453},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346223,"byte_end":346231,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"MultiZip","qualname":"::iter::multizip::MultiZip","value":"MultiZip {  }","parent":null,"children":[{"krate":0,"index":7455}],"decl_id":null,"docs":" `MultiZip` is an iterator that zips up a tuple of parallel iterators to\n produce tuples of their items.","sig":null,"attributes":[{"value":"/ `MultiZip` is an iterator that zips up a tuple of parallel iterators to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":343807,"byte_end":343882,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ produce tuples of their items.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":343883,"byte_end":343917,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":343918,"byte_end":343921,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is created by calling `into_par_iter()` on a tuple of types that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":343922,"byte_end":343993,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ implement `IntoParallelIterator`, or `par_iter()`/`par_iter_mut()` with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":343994,"byte_end":344069,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types that are iterable by reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344070,"byte_end":344111,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344112,"byte_end":344115,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The implementation currently support tuples up to length 12.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344116,"byte_end":344180,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344181,"byte_end":344184,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344185,"byte_end":344199,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344200,"byte_end":344203,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344204,"byte_end":344211,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344212,"byte_end":344238,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344239,"byte_end":344242,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // This will iterate `r` by mutable reference, like `par_iter_mut()`, while","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344243,"byte_end":344322,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ // ranges are all iterated by value like `into_par_iter()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344323,"byte_end":344386,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ // Note that the zipped iterator is only as long as the shortest input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344387,"byte_end":344462,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ let mut r = vec![0; 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344463,"byte_end":344490,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ (&mut r, 1..10, 10..100, 100..1000).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344491,"byte_end":344546,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     .for_each(|(r, x, y, z)| *r = x * y + z);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344547,"byte_end":344596,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344597,"byte_end":344600,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&r, &[1 * 10 + 100, 2 * 11 + 101, 3 * 12 + 102]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344601,"byte_end":344665,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344666,"byte_end":344673,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344674,"byte_end":344677,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ For a group that should all be iterated by reference, you can use a tuple reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344678,"byte_end":344766,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344767,"byte_end":344770,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344771,"byte_end":344778,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344779,"byte_end":344805,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344806,"byte_end":344809,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let xs: Vec<_> = (1..10).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344810,"byte_end":344849,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ let ys: Vec<_> = (10..100).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344850,"byte_end":344891,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let zs: Vec<_> = (100..1000).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344892,"byte_end":344935,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344936,"byte_end":344939,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Reference each input separately with `IntoParallelIterator`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":344940,"byte_end":345007,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ let r1: Vec<_> = (&xs, &ys, &zs).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345008,"byte_end":345060,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345061,"byte_end":345096,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345097,"byte_end":345116,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345117,"byte_end":345120,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Reference them all together with `IntoParallelRefIterator`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345121,"byte_end":345187,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ let r2: Vec<_> = (xs, ys, zs).par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345188,"byte_end":345232,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345233,"byte_end":345268,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345269,"byte_end":345288,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345289,"byte_end":345292,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(r1, r2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345293,"byte_end":345316,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345317,"byte_end":345324,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345325,"byte_end":345328,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Mutable references to a tuple will work similarly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345329,"byte_end":345383,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345384,"byte_end":345387,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345388,"byte_end":345395,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345396,"byte_end":345422,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345423,"byte_end":345426,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let mut xs: Vec<_> = (1..4).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345427,"byte_end":345469,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ let mut ys: Vec<_> = (-4..-1).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345470,"byte_end":345514,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ let mut zs = vec![0; 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345515,"byte_end":345543,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345544,"byte_end":345547,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference each input separately with `IntoParallelIterator`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345548,"byte_end":345623,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ (&mut xs, &mut ys, &mut zs).into_par_iter().for_each(|(x, y, z)| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345624,"byte_end":345694,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/     *z += *x + *y;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345695,"byte_end":345717,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345718,"byte_end":345747,"line_start":62,"line_end":62,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345748,"byte_end":345755,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345756,"byte_end":345759,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(xs, (vec![-4, -3, -2]));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345760,"byte_end":345799,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(ys, (vec![1, 2, 3]));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345800,"byte_end":345836,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(zs, (vec![-3, -1, 1]));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345837,"byte_end":345875,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345876,"byte_end":345879,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference them all together with `IntoParallelRefMutIterator`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345880,"byte_end":345957,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ let mut tuple = (xs, ys, zs);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345958,"byte_end":345991,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ tuple.par_iter_mut().for_each(|(x, y, z)| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":345992,"byte_end":346039,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/     *z += *x + *y;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346040,"byte_end":346062,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346063,"byte_end":346092,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346093,"byte_end":346100,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346101,"byte_end":346104,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple, (vec![1, 2, 3], vec![-4, -3, -2], vec![-6, -2, 2]));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346105,"byte_end":346179,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\multizip.rs","byte_start":346180,"byte_end":346187,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354492,"byte_end":354496,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"fn once<T>(T) -> Once<T> where T: Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":353850,"byte_end":353920,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":353921,"byte_end":353924,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":353925,"byte_end":354003,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354004,"byte_end":354083,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354084,"byte_end":354131,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354132,"byte_end":354135,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354136,"byte_end":354150,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354151,"byte_end":354154,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354155,"byte_end":354162,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354163,"byte_end":354189,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354190,"byte_end":354216,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354217,"byte_end":354220,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354221,"byte_end":354259,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354260,"byte_end":354284,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354285,"byte_end":354314,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354315,"byte_end":354318,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354319,"byte_end":354362,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354363,"byte_end":354420,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354421,"byte_end":354476,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354477,"byte_end":354484,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8332},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354648,"byte_end":354652,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":8334}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354549,"byte_end":354612,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3089},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354752,"byte_end":354767,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Once<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3091},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354904,"byte_end":354911,"line_start":44,"line_end":44,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Once<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":355022,"byte_end":355027,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"drive","qualname":"<Once<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":355187,"byte_end":355190,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"len","qualname":"<Once<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3097},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":355233,"byte_end":355246,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Once<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8341},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356012,"byte_end":356021,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PanicFuse","qualname":"::iter::panic_fuse::PanicFuse","value":"PanicFuse {  }","parent":null,"children":[{"krate":0,"index":8343}],"decl_id":null,"docs":" `PanicFuse` is an adaptor that wraps an iterator with a fuse in case\n of panics, to halt all threads as soon as possible.","sig":null,"attributes":[{"value":"/ `PanicFuse` is an adaptor that wraps an iterator with a fuse in case","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355562,"byte_end":355634,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of panics, to halt all threads as soon as possible.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355635,"byte_end":355690,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355691,"byte_end":355694,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`panic_fuse()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355695,"byte_end":355776,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355777,"byte_end":355780,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`panic_fuse()`]: trait.ParallelIterator.html#method.panic_fuse","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355781,"byte_end":355848,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355849,"byte_end":355902,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":355903,"byte_end":355976,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3124},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356755,"byte_end":356770,"line_start":55,"line_end":55,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<PanicFuse<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3126},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357088,"byte_end":357095,"line_start":67,"line_end":67,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<PanicFuse<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357255,"byte_end":357260,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"drive","qualname":"<PanicFuse<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3131},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357559,"byte_end":357562,"line_start":88,"line_end":88,"column_start":8,"column_end":11},"name":"len","qualname":"<PanicFuse<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357619,"byte_end":357632,"line_start":92,"line_end":92,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<PanicFuse<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364695,"byte_end":364709,"line_start":43,"line_end":43,"column_start":11,"column_end":25},"name":"ParallelBridge","qualname":"::iter::par_bridge::ParallelBridge","value":"ParallelBridge: Sized","parent":null,"children":[{"krate":0,"index":3267}],"decl_id":null,"docs":" Conversion trait to convert an `Iterator` to a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ Conversion trait to convert an `Iterator` to a `ParallelIterator`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363431,"byte_end":363501,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363502,"byte_end":363505,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This creates a \"bridge\" from a sequential iterator to a parallel one, by distributing its items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363506,"byte_end":363605,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ across the Rayon thread pool. This has the advantage of being able to parallelize just about","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363606,"byte_end":363702,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ anything, but the resulting `ParallelIterator` can be less efficient than if you started with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363703,"byte_end":363800,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ `par_iter` instead. However, it can still be useful for iterators that are difficult to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363801,"byte_end":363892,"line_start":13,"line_end":13,"column_start":1,"column_end":92}},{"value":"/ parallelize by other means, like channels or file or network I/O.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363893,"byte_end":363962,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363963,"byte_end":363966,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The resulting iterator is not guaranteed to keep the order of the original iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":363967,"byte_end":364055,"line_start":16,"line_end":16,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364056,"byte_end":364059,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364060,"byte_end":364074,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364075,"byte_end":364078,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ To use this trait, take an existing `Iterator` and call `par_bridge` on it. After that, you can","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364079,"byte_end":364178,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ use any of the `ParallelIterator` methods:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364179,"byte_end":364225,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364226,"byte_end":364229,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364230,"byte_end":364237,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter::ParallelBridge;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364238,"byte_end":364274,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/ use rayon::prelude::ParallelIterator;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364275,"byte_end":364316,"line_start":25,"line_end":25,"column_start":1,"column_end":42}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364317,"byte_end":364350,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364351,"byte_end":364354,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let rx = {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364355,"byte_end":364369,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/     let (tx, rx) = channel();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364370,"byte_end":364403,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364404,"byte_end":364407,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"one!\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364408,"byte_end":364432,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"two!\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364433,"byte_end":364457,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"three!\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364458,"byte_end":364484,"line_start":33,"line_end":33,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364485,"byte_end":364488,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/     rx","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364489,"byte_end":364499,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/ };","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364500,"byte_end":364506,"line_start":36,"line_end":36,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364507,"byte_end":364510,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let mut output: Vec<&'static str> = rx.into_iter().par_bridge().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364511,"byte_end":364589,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ output.sort_unstable();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364590,"byte_end":364617,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364618,"byte_end":364621,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&*output, &[\"one!\", \"three!\", \"two!\"]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364622,"byte_end":364676,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364677,"byte_end":364684,"line_start":42,"line_end":42,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364791,"byte_end":364801,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"::iter::par_bridge::ParallelBridge::par_bridge","value":"fn par_bridge(Self) -> IterBridge<Self>","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":" Creates a bridge from this type to a `ParallelIterator`.\n","sig":null,"attributes":[{"value":"/ Creates a bridge from this type to a `ParallelIterator`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364723,"byte_end":364783,"line_start":44,"line_end":44,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364912,"byte_end":364922,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"<T as iter::par_bridge::ParallelBridge>::par_bridge","value":"fn par_bridge(Self) -> IterBridge<Self>","parent":{"krate":0,"index":3266},"children":[],"decl_id":{"krate":0,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365300,"byte_end":365310,"line_start":64,"line_end":64,"column_start":12,"column_end":22},"name":"IterBridge","qualname":"::iter::par_bridge::IterBridge","value":"IterBridge {  }","parent":null,"children":[{"krate":0,"index":8359}],"decl_id":null,"docs":" `IterBridge` is a parallel iterator that wraps a sequential iterator.","sig":null,"attributes":[{"value":"/ `IterBridge` is a parallel iterator that wraps a sequential iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364994,"byte_end":365067,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365068,"byte_end":365071,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This type is created when using the `par_bridge` method on `ParallelBridge`. See the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365072,"byte_end":365160,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ [`ParallelBridge`] documentation for details.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365161,"byte_end":365210,"line_start":60,"line_end":60,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365211,"byte_end":365214,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`ParallelBridge`]: trait.ParallelBridge.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365215,"byte_end":365264,"line_start":62,"line_end":62,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3274},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365470,"byte_end":365485,"line_start":74,"line_end":74,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<IterBridge<Iter> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3286},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":366280,"byte_end":366285,"line_start":101,"line_end":101,"column_start":8,"column_end":13},"name":"split","qualname":"<&'_ IterParallelProducer as iter::plumbing::UnindexedProducer>::split","value":"fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":436},"children":[],"decl_id":{"krate":0,"index":438},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":366954,"byte_end":366963,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"fold_with","qualname":"<&'_ IterParallelProducer as iter::plumbing::UnindexedProducer>::fold_with","value":"fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":436},"children":[],"decl_id":{"krate":0,"index":439},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8366},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369331,"byte_end":369340,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"Positions","qualname":"::iter::positions::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":8369},{"krate":0,"index":8370}],"decl_id":null,"docs":" `Positions` takes a predicate `predicate` and filters out elements that match,\n yielding their indices.","sig":null,"attributes":[{"value":"/ `Positions` takes a predicate `predicate` and filters out elements that match,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":368881,"byte_end":368963,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/ yielding their indices.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":368964,"byte_end":368991,"line_start":7,"line_end":7,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":368992,"byte_end":368995,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`positions()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":368996,"byte_end":369083,"line_start":9,"line_end":9,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369084,"byte_end":369087,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`positions()`]: trait.IndexedParallelIterator.html#method.positions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369088,"byte_end":369160,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369161,"byte_end":369228,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369229,"byte_end":369302,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369487,"byte_end":369490,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Positions<I, P> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":370022,"byte_end":370037,"line_start":45,"line_end":45,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Positions<I, P> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8375},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377020,"byte_end":377026,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":8377}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":376917,"byte_end":376984,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":3482},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377578,"byte_end":377584,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"fn repeat<T>(T) -> Repeat<T> where T: Clone + Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377065,"byte_end":377129,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377130,"byte_end":377196,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377197,"byte_end":377262,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377263,"byte_end":377305,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377306,"byte_end":377362,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377363,"byte_end":377366,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377367,"byte_end":377381,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377382,"byte_end":377385,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377386,"byte_end":377393,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377394,"byte_end":377420,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377421,"byte_end":377449,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377450,"byte_end":377510,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377511,"byte_end":377562,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377563,"byte_end":377570,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377982,"byte_end":377986,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"fn take(Self, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Takes only `n` repeats of the element, similar to the general","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377707,"byte_end":377772,"line_start":34,"line_end":34,"column_start":5,"column_end":70}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377777,"byte_end":377840,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377845,"byte_end":377848,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377853,"byte_end":377922,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377927,"byte_end":377970,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3487},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378248,"byte_end":378251,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"fn zip<Z>(Self, Z) -> Zip<RepeatN<T>, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates tuples, repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterates tuples, repeating the element with items from another","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378063,"byte_end":378129,"line_start":43,"line_end":43,"column_start":5,"column_end":71}},{"value":"/ iterator, similar to the general","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378134,"byte_end":378170,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378175,"byte_end":378236,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378588,"byte_end":378603,"line_start":63,"line_end":63,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Repeat<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8384},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379520,"byte_end":379527,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":8386},{"krate":0,"index":8387}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379415,"byte_end":379484,"line_start":101,"line_end":101,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379892,"byte_end":379899,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"fn repeatn<T>(T, usize) -> RepeatN<T> where T: Clone + Send","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379584,"byte_end":379650,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379651,"byte_end":379671,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379672,"byte_end":379675,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379676,"byte_end":379690,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379691,"byte_end":379694,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379695,"byte_end":379702,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379703,"byte_end":379729,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379730,"byte_end":379759,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379760,"byte_end":379824,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379825,"byte_end":379876,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":379877,"byte_end":379884,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380110,"byte_end":380125,"line_start":132,"line_end":132,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<RepeatN<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380264,"byte_end":380271,"line_start":139,"line_end":139,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<RepeatN<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3513},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380415,"byte_end":380420,"line_start":148,"line_end":148,"column_start":8,"column_end":13},"name":"drive","qualname":"<RepeatN<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3515},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380550,"byte_end":380563,"line_start":155,"line_end":155,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<RepeatN<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3517},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380795,"byte_end":380798,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"len","qualname":"<RepeatN<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8394},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382839,"byte_end":382842,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":8396}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382449,"byte_end":382526,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382527,"byte_end":382596,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382597,"byte_end":382600,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382601,"byte_end":382661,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382662,"byte_end":382729,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382730,"byte_end":382803,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3555},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383162,"byte_end":383177,"line_start":32,"line_end":32,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Rev<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3557},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383316,"byte_end":383323,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Rev<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3560},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383474,"byte_end":383479,"line_start":48,"line_end":48,"column_start":8,"column_end":13},"name":"drive","qualname":"<Rev<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3562},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383584,"byte_end":383587,"line_start":52,"line_end":52,"column_start":8,"column_end":11},"name":"len","qualname":"<Rev<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3563},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383644,"byte_end":383657,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Rev<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8403},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385684,"byte_end":385688,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":8405},{"krate":0,"index":8406}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385291,"byte_end":385356,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385357,"byte_end":385439,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385440,"byte_end":385443,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385444,"byte_end":385506,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385507,"byte_end":385574,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385575,"byte_end":385648,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3602},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386050,"byte_end":386065,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Skip<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3604},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386204,"byte_end":386211,"line_start":42,"line_end":42,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Skip<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3607},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386363,"byte_end":386366,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"len","qualname":"<Skip<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386432,"byte_end":386437,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"drive","qualname":"<Skip<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3610},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386542,"byte_end":386555,"line_start":59,"line_end":59,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Skip<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3634},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391611,"byte_end":391616,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"fn split<D, S>(D, S) -> Split<D, S> where D: Send, S: Fn(D) ->\n(D, Option<D>) + Sync","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387727,"byte_end":387804,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387805,"byte_end":387860,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387861,"byte_end":387864,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387865,"byte_end":387879,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387880,"byte_end":387883,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387884,"byte_end":387954,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387955,"byte_end":387958,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387959,"byte_end":387966,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387967,"byte_end":387987,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":387988,"byte_end":388014,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388015,"byte_end":388039,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388040,"byte_end":388043,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388044,"byte_end":388047,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388048,"byte_end":388094,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388095,"byte_end":388127,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388128,"byte_end":388131,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388132,"byte_end":388180,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388181,"byte_end":388244,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388245,"byte_end":388320,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388321,"byte_end":388396,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388397,"byte_end":388450,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388451,"byte_end":388454,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388455,"byte_end":388525,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388526,"byte_end":388581,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388582,"byte_end":388632,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388633,"byte_end":388638,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388639,"byte_end":388642,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388643,"byte_end":388723,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388724,"byte_end":388791,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388792,"byte_end":388853,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388854,"byte_end":388931,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388932,"byte_end":388977,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":388978,"byte_end":389047,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389048,"byte_end":389055,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389056,"byte_end":389063,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389064,"byte_end":389067,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389068,"byte_end":389140,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389141,"byte_end":389219,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389220,"byte_end":389246,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389247,"byte_end":389250,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389251,"byte_end":389258,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389259,"byte_end":389281,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389282,"byte_end":389310,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389311,"byte_end":389337,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389338,"byte_end":389372,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389373,"byte_end":389438,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389439,"byte_end":389494,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389495,"byte_end":389552,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389553,"byte_end":389605,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389606,"byte_end":389613,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389614,"byte_end":389619,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389620,"byte_end":389693,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389694,"byte_end":389714,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389715,"byte_end":389753,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389754,"byte_end":389778,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389779,"byte_end":389782,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389783,"byte_end":389819,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389820,"byte_end":389844,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389845,"byte_end":389850,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389851,"byte_end":389854,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389855,"byte_end":389934,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":389935,"byte_end":390008,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390009,"byte_end":390043,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390044,"byte_end":390108,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390109,"byte_end":390188,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390189,"byte_end":390233,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390234,"byte_end":390279,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390280,"byte_end":390308,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390309,"byte_end":390377,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390378,"byte_end":390440,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390441,"byte_end":390473,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390474,"byte_end":390505,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390506,"byte_end":390537,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390538,"byte_end":390552,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390553,"byte_end":390616,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390617,"byte_end":390641,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390642,"byte_end":390658,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390659,"byte_end":390725,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390726,"byte_end":390788,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390789,"byte_end":390821,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390822,"byte_end":390853,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390854,"byte_end":390885,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390886,"byte_end":390900,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390901,"byte_end":390965,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390966,"byte_end":390990,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":390991,"byte_end":391000,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391001,"byte_end":391006,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391007,"byte_end":391010,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391011,"byte_end":391072,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391073,"byte_end":391124,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391125,"byte_end":391184,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391185,"byte_end":391262,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391263,"byte_end":391337,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391338,"byte_end":391399,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391400,"byte_end":391458,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391459,"byte_end":391518,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391519,"byte_end":391583,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391584,"byte_end":391591,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391592,"byte_end":391599,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391600,"byte_end":391603,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":8413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391953,"byte_end":391958,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":8416},{"krate":0,"index":8417}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391752,"byte_end":391833,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391834,"byte_end":391889,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391890,"byte_end":391893,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":391894,"byte_end":391924,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392049,"byte_end":392052,"line_start":125,"line_end":125,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Split<D, S> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3645},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392319,"byte_end":392334,"line_start":137,"line_end":137,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Split<D, S> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8422},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393736,"byte_end":393742,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::step_by::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":8424},{"krate":0,"index":8425}],"decl_id":null,"docs":" `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.\n This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393299,"byte_end":393399,"line_start":9,"line_end":9,"column_start":1,"column_end":101}},{"value":"/ This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393400,"byte_end":393485,"line_start":10,"line_end":10,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393486,"byte_end":393489,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`step_by()`]: trait.IndexedParallelIterator.html#method.step_by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393490,"byte_end":393558,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393559,"byte_end":393626,"line_start":13,"line_end":13,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393627,"byte_end":393700,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3683},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394110,"byte_end":394125,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<StepBy<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394264,"byte_end":394271,"line_start":44,"line_end":44,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<StepBy<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394425,"byte_end":394430,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"drive","qualname":"<StepBy<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3690},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394535,"byte_end":394538,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"len","qualname":"<StepBy<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394620,"byte_end":394633,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<StepBy<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8432},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399105,"byte_end":399109,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":8434},{"krate":0,"index":8435}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398709,"byte_end":398777,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398778,"byte_end":398860,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398861,"byte_end":398864,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398865,"byte_end":398927,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398928,"byte_end":398995,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":398996,"byte_end":399069,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3786},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399471,"byte_end":399486,"line_start":34,"line_end":34,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Take<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3788},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399625,"byte_end":399632,"line_start":41,"line_end":41,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Take<I> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3791},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399784,"byte_end":399787,"line_start":50,"line_end":50,"column_start":8,"column_end":11},"name":"len","qualname":"<Take<I> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3792},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399835,"byte_end":399840,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"drive","qualname":"<Take<I> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3794},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399945,"byte_end":399958,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Take<I> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8442},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401638,"byte_end":401645,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"TryFold","qualname":"::iter::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":8447},{"krate":0,"index":8448},{"krate":0,"index":8449},{"krate":0,"index":8450}],"decl_id":null,"docs":" `TryFold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401238,"byte_end":401333,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401334,"byte_end":401413,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401414,"byte_end":401417,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [`try_fold()`]: trait.ParallelIterator.html#method.try_fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401418,"byte_end":401481,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401482,"byte_end":401535,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401536,"byte_end":401609,"line_start":31,"line_end":31,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3845},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401823,"byte_end":401826,"line_start":41,"line_end":41,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TryFold<I, U, ID, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3852},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":402187,"byte_end":402202,"line_start":55,"line_end":55,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<TryFold<I, U, ID, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8457},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405723,"byte_end":405734,"line_start":194,"line_end":194,"column_start":12,"column_end":23},"name":"TryFoldWith","qualname":"::iter::try_fold::TryFoldWith","value":"TryFoldWith {  }","parent":null,"children":[{"krate":0,"index":8461},{"krate":0,"index":8462},{"krate":0,"index":8463}],"decl_id":null,"docs":" `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405304,"byte_end":405403,"line_start":187,"line_end":187,"column_start":1,"column_end":100}},{"value":"/ This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405404,"byte_end":405488,"line_start":188,"line_end":188,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405489,"byte_end":405492,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ [`try_fold_with()`]: trait.ParallelIterator.html#method.try_fold_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405493,"byte_end":405566,"line_start":190,"line_end":190,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405567,"byte_end":405620,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405621,"byte_end":405694,"line_start":192,"line_end":192,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405917,"byte_end":405920,"line_start":204,"line_end":204,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TryFoldWith<I, U, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":406334,"byte_end":406349,"line_start":221,"line_end":221,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<TryFoldWith<I, U, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415210,"byte_end":415214,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":4114},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415149,"byte_end":415200,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":4117},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415289,"byte_end":415294,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":4114},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415227,"byte_end":415279,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4288},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":425885,"byte_end":425895,"line_start":420,"line_end":420,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<(FromA, FromB) as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\n(A, B)>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":426229,"byte_end":426239,"line_start":435,"line_end":435,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<(A, B) as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item =\nEither<L, R>>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4312},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":427140,"byte_end":427153,"line_start":473,"line_end":473,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<(FromA, FromB) as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = (A, B)>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4319},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":427561,"byte_end":427574,"line_start":489,"line_end":489,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<(A, B) as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item =\nEither<L, R>>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8469},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428934,"byte_end":428940,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":8472},{"krate":0,"index":8473}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428523,"byte_end":428582,"line_start":6,"line_end":6,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428583,"byte_end":428631,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428632,"byte_end":428635,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428636,"byte_end":428713,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428714,"byte_end":428717,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428718,"byte_end":428777,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428778,"byte_end":428831,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":428832,"byte_end":428905,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4347},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429070,"byte_end":429073,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Update<I, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4356},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429550,"byte_end":429565,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Update<I, F> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4358},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429790,"byte_end":429797,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Update<I, F> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4362},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429999,"byte_end":430004,"line_start":61,"line_end":61,"column_start":8,"column_end":13},"name":"drive","qualname":"<Update<I, F> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4364},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":430210,"byte_end":430213,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"len","qualname":"<Update<I, F> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4365},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":430270,"byte_end":430283,"line_start":73,"line_end":73,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Update<I, F> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8491},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436656,"byte_end":436665,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":8493}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436209,"byte_end":436287,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436288,"byte_end":436334,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436335,"byte_end":436338,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436339,"byte_end":436420,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436421,"byte_end":436424,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436425,"byte_end":436492,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436493,"byte_end":436546,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436547,"byte_end":436620,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4483},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":437016,"byte_end":437031,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<WhileSome<I> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8500},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440361,"byte_end":440364,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":8503},{"krate":0,"index":8504}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":439950,"byte_end":440022,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440023,"byte_end":440086,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440087,"byte_end":440118,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440119,"byte_end":440122,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440123,"byte_end":440183,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440184,"byte_end":440251,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440252,"byte_end":440325,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4542},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440809,"byte_end":440824,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Zip<A, B> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4544},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440963,"byte_end":440970,"line_start":44,"line_end":44,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Zip<A, B> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4548},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441159,"byte_end":441164,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"drive","qualname":"<Zip<A, B> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4550},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441294,"byte_end":441297,"line_start":61,"line_end":61,"column_start":8,"column_end":11},"name":"len","qualname":"<Zip<A, B> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4551},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441375,"byte_end":441388,"line_start":65,"line_end":65,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Zip<A, B> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8513},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444351,"byte_end":444356,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":8516}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":443856,"byte_end":443941,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":443942,"byte_end":443968,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":443969,"byte_end":443972,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":443973,"byte_end":444056,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444057,"byte_end":444104,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444105,"byte_end":444108,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444109,"byte_end":444173,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444174,"byte_end":444241,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444242,"byte_end":444315,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4602},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444852,"byte_end":444867,"line_start":38,"line_end":38,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<ZipEq<A, B> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4604},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445010,"byte_end":445017,"line_start":45,"line_end":45,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<ZipEq<A, B> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4608},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445212,"byte_end":445217,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"drive","qualname":"<ZipEq<A, B> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4610},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445351,"byte_end":445354,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"len","qualname":"<ZipEq<A, B> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4611},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445410,"byte_end":445423,"line_start":66,"line_end":66,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<ZipEq<A, B> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4770},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40290,"byte_end":40310,"line_start":206,"line_end":206,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39842,"byte_end":39921,"line_start":198,"line_end":198,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39922,"byte_end":39925,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":39926,"byte_end":40003,"line_start":200,"line_end":200,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40004,"byte_end":40080,"line_start":201,"line_end":201,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40081,"byte_end":40129,"line_start":202,"line_end":202,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40130,"byte_end":40133,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40134,"byte_end":40187,"line_start":204,"line_end":204,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40188,"byte_end":40279,"line_start":205,"line_end":205,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":4771},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40379,"byte_end":40383,"line_start":208,"line_end":208,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40317,"byte_end":40369,"line_start":207,"line_end":207,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":4772},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40498,"byte_end":40502,"line_start":211,"line_end":211,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40427,"byte_end":40488,"line_start":210,"line_end":210,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4773},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41153,"byte_end":41166,"line_start":235,"line_end":235,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40515,"byte_end":40560,"line_start":213,"line_end":213,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40565,"byte_end":40568,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40573,"byte_end":40587,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40592,"byte_end":40595,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40600,"byte_end":40607,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40612,"byte_end":40638,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40643,"byte_end":40646,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40651,"byte_end":40689,"line_start":220,"line_end":220,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40694,"byte_end":40722,"line_start":221,"line_end":221,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40727,"byte_end":40768,"line_start":222,"line_end":222,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40773,"byte_end":40780,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40785,"byte_end":40788,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40793,"byte_end":40869,"line_start":225,"line_end":225,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40874,"byte_end":40877,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40882,"byte_end":40889,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40894,"byte_end":40920,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40925,"byte_end":40928,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":40933,"byte_end":40997,"line_start":230,"line_end":230,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41002,"byte_end":41062,"line_start":231,"line_end":231,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41067,"byte_end":41074,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41079,"byte_end":41082,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41087,"byte_end":41145,"line_start":234,"line_end":234,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":4774},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41755,"byte_end":41778,"line_start":251,"line_end":251,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":4776},{"krate":0,"index":4777},{"krate":0,"index":4778}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41191,"byte_end":41251,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41252,"byte_end":41318,"line_start":239,"line_end":239,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41319,"byte_end":41322,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41323,"byte_end":41376,"line_start":241,"line_end":241,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41377,"byte_end":41412,"line_start":242,"line_end":242,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41413,"byte_end":41416,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41417,"byte_end":41460,"line_start":244,"line_end":244,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41461,"byte_end":41525,"line_start":245,"line_end":245,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41526,"byte_end":41599,"line_start":246,"line_end":246,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41600,"byte_end":41624,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41625,"byte_end":41628,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41629,"byte_end":41682,"line_start":249,"line_end":249,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41683,"byte_end":41744,"line_start":250,"line_end":250,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4776},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41862,"byte_end":41866,"line_start":253,"line_end":253,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4774},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41792,"byte_end":41852,"line_start":252,"line_end":252,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":4777},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42042,"byte_end":42046,"line_start":257,"line_end":257,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4774},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41910,"byte_end":41971,"line_start":255,"line_end":255,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":41976,"byte_end":42032,"line_start":256,"line_end":256,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4778},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42536,"byte_end":42544,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":4774},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42067,"byte_end":42112,"line_start":259,"line_end":259,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42117,"byte_end":42120,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42125,"byte_end":42139,"line_start":261,"line_end":261,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42144,"byte_end":42147,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42152,"byte_end":42159,"line_start":263,"line_end":263,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42164,"byte_end":42190,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42195,"byte_end":42198,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42203,"byte_end":42242,"line_start":266,"line_end":266,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42247,"byte_end":42303,"line_start":267,"line_end":267,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42308,"byte_end":42311,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42316,"byte_end":42378,"line_start":269,"line_end":269,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42383,"byte_end":42426,"line_start":270,"line_end":270,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42431,"byte_end":42463,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42468,"byte_end":42516,"line_start":272,"line_end":272,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42521,"byte_end":42528,"line_start":273,"line_end":273,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4784},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42812,"byte_end":42820,"line_start":284,"line_end":284,"column_start":8,"column_end":16},"name":"par_iter","qualname":"<I as iter::IntoParallelRefIterator>::par_iter","value":"fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":4774},"children":[],"decl_id":{"krate":0,"index":4778},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4785},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43464,"byte_end":43490,"line_start":302,"line_end":302,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":4787},{"krate":0,"index":4788},{"krate":0,"index":4789}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42888,"byte_end":42951,"line_start":289,"line_end":289,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42952,"byte_end":43019,"line_start":290,"line_end":290,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43020,"byte_end":43023,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43024,"byte_end":43081,"line_start":292,"line_end":292,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43082,"byte_end":43117,"line_start":293,"line_end":293,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43118,"byte_end":43121,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43122,"byte_end":43165,"line_start":295,"line_end":295,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43166,"byte_end":43234,"line_start":296,"line_end":296,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43235,"byte_end":43308,"line_start":297,"line_end":297,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43309,"byte_end":43333,"line_start":298,"line_end":298,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43334,"byte_end":43337,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43338,"byte_end":43391,"line_start":300,"line_end":300,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43392,"byte_end":43453,"line_start":301,"line_end":301,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":4787},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43560,"byte_end":43564,"line_start":304,"line_end":304,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":4785},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43504,"byte_end":43550,"line_start":303,"line_end":303,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":4788},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43716,"byte_end":43720,"line_start":308,"line_end":308,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":4785},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43608,"byte_end":43672,"line_start":306,"line_end":306,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43677,"byte_end":43706,"line_start":307,"line_end":307,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4789},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44034,"byte_end":44046,"line_start":321,"line_end":321,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":4785},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43741,"byte_end":43787,"line_start":310,"line_end":310,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43792,"byte_end":43795,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43800,"byte_end":43814,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43819,"byte_end":43822,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43827,"byte_end":43834,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43839,"byte_end":43865,"line_start":315,"line_end":315,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43870,"byte_end":43873,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43878,"byte_end":43910,"line_start":317,"line_end":317,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43915,"byte_end":43974,"line_start":318,"line_end":318,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":43979,"byte_end":44014,"line_start":319,"line_end":319,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44019,"byte_end":44026,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4795},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44333,"byte_end":44345,"line_start":331,"line_end":331,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"<I as iter::IntoParallelRefMutIterator>::par_iter_mut","value":"fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":4785},"children":[],"decl_id":{"krate":0,"index":4789},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4796},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45023,"byte_end":45039,"line_start":350,"line_end":350,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4800},{"krate":0,"index":4803},{"krate":0,"index":4807},{"krate":0,"index":4812},{"krate":0,"index":4818},{"krate":0,"index":4825},{"krate":0,"index":4828},{"krate":0,"index":4831},{"krate":0,"index":4835},{"krate":0,"index":4840},{"krate":0,"index":4843},{"krate":0,"index":4846},{"krate":0,"index":4848},{"krate":0,"index":4850},{"krate":0,"index":4852},{"krate":0,"index":4855},{"krate":0,"index":4858},{"krate":0,"index":4861},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4866},{"krate":0,"index":4878},{"krate":0,"index":4882},{"krate":0,"index":4885},{"krate":0,"index":4889},{"krate":0,"index":4892},{"krate":0,"index":4897},{"krate":0,"index":4901},{"krate":0,"index":4903},{"krate":0,"index":4905},{"krate":0,"index":4906},{"krate":0,"index":4913},{"krate":0,"index":4925},{"krate":0,"index":4926},{"krate":0,"index":4933},{"krate":0,"index":4945},{"krate":0,"index":4947},{"krate":0,"index":4949},{"krate":0,"index":4951},{"krate":0,"index":4953},{"krate":0,"index":4958},{"krate":0,"index":4963},{"krate":0,"index":4968},{"krate":0,"index":4970},{"krate":0,"index":4972},{"krate":0,"index":4975},{"krate":0,"index":4977},{"krate":0,"index":4978},{"krate":0,"index":4980},{"krate":0,"index":4985},{"krate":0,"index":4989},{"krate":0,"index":4995},{"krate":0,"index":4996},{"krate":0,"index":4998}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44417,"byte_end":44469,"line_start":336,"line_end":336,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44470,"byte_end":44473,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44474,"byte_end":44541,"line_start":338,"line_end":338,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44542,"byte_end":44596,"line_start":339,"line_end":339,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44597,"byte_end":44658,"line_start":340,"line_end":340,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44659,"byte_end":44724,"line_start":341,"line_end":341,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44725,"byte_end":44795,"line_start":342,"line_end":342,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44796,"byte_end":44820,"line_start":343,"line_end":343,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44821,"byte_end":44824,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44825,"byte_end":44891,"line_start":345,"line_end":345,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44892,"byte_end":44917,"line_start":346,"line_end":346,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44918,"byte_end":44921,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44922,"byte_end":44944,"line_start":348,"line_end":348,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44945,"byte_end":45012,"line_start":349,"line_end":349,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":4797},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45305,"byte_end":45309,"line_start":356,"line_end":356,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45060,"byte_end":45118,"line_start":351,"line_end":351,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45123,"byte_end":45195,"line_start":352,"line_end":352,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45200,"byte_end":45248,"line_start":353,"line_end":353,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45253,"byte_end":45256,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45261,"byte_end":45295,"line_start":355,"line_end":355,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4798},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45565,"byte_end":45573,"line_start":367,"line_end":367,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"fn for_each<OP>(Self, OP) where OP: Fn(Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45322,"byte_end":45391,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45396,"byte_end":45399,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45404,"byte_end":45418,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45423,"byte_end":45426,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45431,"byte_end":45438,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45443,"byte_end":45469,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45474,"byte_end":45477,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45482,"byte_end":45545,"line_start":365,"line_end":365,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45550,"byte_end":45557,"line_start":366,"line_end":366,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4800},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46408,"byte_end":46421,"line_start":397,"line_end":397,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"fn for_each_with<OP, T>(Self, T, OP) where\nOP: for<'_> Fn(&'_ mut T, Self::Item) -> () + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45699,"byte_end":45769,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45774,"byte_end":45804,"line_start":375,"line_end":375,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45809,"byte_end":45812,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45817,"byte_end":45885,"line_start":377,"line_end":377,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45890,"byte_end":45961,"line_start":378,"line_end":378,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45966,"byte_end":45983,"line_start":379,"line_end":379,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45988,"byte_end":45991,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45996,"byte_end":46010,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46015,"byte_end":46018,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46023,"byte_end":46030,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46035,"byte_end":46068,"line_start":384,"line_end":384,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46073,"byte_end":46099,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46104,"byte_end":46107,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46112,"byte_end":46151,"line_start":387,"line_end":387,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46156,"byte_end":46159,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46164,"byte_end":46240,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46245,"byte_end":46248,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46253,"byte_end":46305,"line_start":391,"line_end":391,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46310,"byte_end":46313,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46318,"byte_end":46333,"line_start":393,"line_end":393,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46338,"byte_end":46341,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46346,"byte_end":46388,"line_start":395,"line_end":395,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46393,"byte_end":46400,"line_start":396,"line_end":396,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4803},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47389,"byte_end":47402,"line_start":431,"line_end":431,"column_start":8,"column_end":21},"name":"for_each_init","qualname":"::iter::ParallelIterator::for_each_init","value":"fn for_each_init<OP, INIT, T>(Self, INIT, OP) where\nOP: for<'_> Fn(&'_ mut T, Self::Item) -> () + Sync + Send, INIT: Fn() -> T +\nSync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes `OP` on a value returned by `init` with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on a value returned by `init` with each item produced by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46596,"byte_end":46670,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46675,"byte_end":46705,"line_start":406,"line_end":406,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46710,"byte_end":46713,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46718,"byte_end":46789,"line_start":408,"line_end":408,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46794,"byte_end":46860,"line_start":409,"line_end":409,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46865,"byte_end":46909,"line_start":410,"line_end":410,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46914,"byte_end":46917,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46922,"byte_end":46936,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46941,"byte_end":46944,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46949,"byte_end":46956,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46961,"byte_end":46979,"line_start":415,"line_end":415,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":46984,"byte_end":47010,"line_start":416,"line_end":416,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47015,"byte_end":47018,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47023,"byte_end":47060,"line_start":418,"line_end":418,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47065,"byte_end":47068,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47073,"byte_end":47099,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/     .for_each_init(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47104,"byte_end":47127,"line_start":421,"line_end":421,"column_start":5,"column_end":28}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47132,"byte_end":47166,"line_start":422,"line_end":422,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.fill(chunk),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47171,"byte_end":47212,"line_start":423,"line_end":423,"column_start":5,"column_end":46}},{"value":"/     );","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47217,"byte_end":47227,"line_start":424,"line_end":424,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47232,"byte_end":47235,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47240,"byte_end":47293,"line_start":426,"line_end":426,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47298,"byte_end":47322,"line_start":427,"line_end":427,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47327,"byte_end":47359,"line_start":428,"line_end":428,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47364,"byte_end":47369,"line_start":429,"line_end":429,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47374,"byte_end":47381,"line_start":430,"line_end":430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4807},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48505,"byte_end":48517,"line_start":459,"line_end":459,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::ParallelIterator::try_for_each","value":"fn try_for_each<OP, R>(Self, OP) -> R where OP: Fn(Self::Item) -> R + Sync +\nSend, R: Try<Output = ()> + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47600,"byte_end":47680,"line_start":439,"line_end":439,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47685,"byte_end":47688,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ If the `OP` returns `Result::Err` or `Option::None`, we will attempt to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47693,"byte_end":47768,"line_start":441,"line_end":441,"column_start":5,"column_end":80}},{"value":"/ stop processing the rest of the items in the iterator as soon as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47773,"byte_end":47841,"line_start":442,"line_end":442,"column_start":5,"column_end":73}},{"value":"/ possible, and we will return that terminating value.  Otherwise, we will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47846,"byte_end":47922,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/ return an empty `Result::Ok(())` or `Option::Some(())`.  If there are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":47927,"byte_end":48000,"line_start":444,"line_end":444,"column_start":5,"column_end":78}},{"value":"/ multiple errors in parallel, it is not specified which will be returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48005,"byte_end":48081,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48086,"byte_end":48089,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48094,"byte_end":48108,"line_start":447,"line_end":447,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48113,"byte_end":48116,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48121,"byte_end":48128,"line_start":449,"line_end":449,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48133,"byte_end":48159,"line_start":450,"line_end":450,"column_start":5,"column_end":31}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48164,"byte_end":48195,"line_start":451,"line_end":451,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48200,"byte_end":48203,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ // This will stop iteration early if there's any write error, like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48208,"byte_end":48278,"line_start":453,"line_end":453,"column_start":5,"column_end":75}},{"value":"/ // having piped output get closed on the other end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48283,"byte_end":48338,"line_start":454,"line_end":454,"column_start":5,"column_end":60}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48343,"byte_end":48371,"line_start":455,"line_end":455,"column_start":5,"column_end":33}},{"value":"/     .try_for_each(|x| writeln!(io::stdout(), \"{:?}\", x))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48376,"byte_end":48436,"line_start":456,"line_end":456,"column_start":5,"column_end":65}},{"value":"/     .expect(\"expected no write errors\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48441,"byte_end":48485,"line_start":457,"line_end":457,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48490,"byte_end":48497,"line_start":458,"line_end":458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4812},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49638,"byte_end":49655,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"try_for_each_with","qualname":"::iter::ParallelIterator::try_for_each_with","value":"fn try_for_each_with<OP, T, R>(Self, T, OP) -> R where\nOP: for<'_> Fn(&'_ mut T, Self::Item) -> R + Sync + Send, T: Send + Clone,\nR: Try<Output = ()> + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on the given `init` value with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on the given `init` value with each item","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48803,"byte_end":48872,"line_start":471,"line_end":471,"column_start":5,"column_end":74}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48877,"byte_end":48919,"line_start":472,"line_end":472,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48924,"byte_end":48927,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_with()`] and the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":48932,"byte_end":49001,"line_start":474,"line_end":474,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49006,"byte_end":49050,"line_start":475,"line_end":475,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49055,"byte_end":49058,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ [`for_each_with()`]: #method.for_each_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49063,"byte_end":49109,"line_start":477,"line_end":477,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49114,"byte_end":49158,"line_start":478,"line_end":478,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49163,"byte_end":49166,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49171,"byte_end":49185,"line_start":480,"line_end":480,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49190,"byte_end":49193,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49198,"byte_end":49205,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49210,"byte_end":49243,"line_start":483,"line_end":483,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49248,"byte_end":49274,"line_start":484,"line_end":484,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49279,"byte_end":49282,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49287,"byte_end":49326,"line_start":486,"line_end":486,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49331,"byte_end":49334,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49339,"byte_end":49365,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_with(sender, |s, x| s.send(x))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49370,"byte_end":49422,"line_start":489,"line_end":489,"column_start":5,"column_end":57}},{"value":"/     .expect(\"expected no send errors\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49427,"byte_end":49470,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49475,"byte_end":49478,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49483,"byte_end":49535,"line_start":492,"line_end":492,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49540,"byte_end":49543,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49548,"byte_end":49563,"line_start":494,"line_end":494,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49568,"byte_end":49571,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49576,"byte_end":49618,"line_start":496,"line_end":496,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49623,"byte_end":49630,"line_start":497,"line_end":497,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50891,"byte_end":50908,"line_start":540,"line_end":540,"column_start":8,"column_end":25},"name":"try_for_each_init","qualname":"::iter::ParallelIterator::try_for_each_init","value":"fn try_for_each_init<OP, INIT, T, R>(Self, INIT, OP) -> R where\nOP: for<'_> Fn(&'_ mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T +\nSync + Send, R: Try<Output = ()> + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on a value returned by `init` with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on a value returned by `init` with each item","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":49997,"byte_end":50070,"line_start":511,"line_end":511,"column_start":5,"column_end":78}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50075,"byte_end":50117,"line_start":512,"line_end":512,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50122,"byte_end":50125,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_init()`] and the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50130,"byte_end":50199,"line_start":514,"line_end":514,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50204,"byte_end":50248,"line_start":515,"line_end":515,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50253,"byte_end":50256,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ [`for_each_init()`]: #method.for_each_init","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50261,"byte_end":50307,"line_start":517,"line_end":517,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50312,"byte_end":50356,"line_start":518,"line_end":518,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50361,"byte_end":50364,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50369,"byte_end":50383,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50388,"byte_end":50391,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50396,"byte_end":50403,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50408,"byte_end":50426,"line_start":523,"line_end":523,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50431,"byte_end":50457,"line_start":524,"line_end":524,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50462,"byte_end":50465,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50470,"byte_end":50507,"line_start":526,"line_end":526,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50512,"byte_end":50515,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50520,"byte_end":50546,"line_start":528,"line_end":528,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_init(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50551,"byte_end":50578,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50583,"byte_end":50617,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.try_fill(chunk),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50622,"byte_end":50667,"line_start":531,"line_end":531,"column_start":5,"column_end":50}},{"value":"/     )","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50672,"byte_end":50681,"line_start":532,"line_end":532,"column_start":5,"column_end":14}},{"value":"/     .expect(\"expected no rand errors\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50686,"byte_end":50729,"line_start":533,"line_end":533,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50734,"byte_end":50737,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50742,"byte_end":50795,"line_start":535,"line_end":535,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50800,"byte_end":50824,"line_start":536,"line_end":536,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50829,"byte_end":50861,"line_start":537,"line_end":537,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50866,"byte_end":50871,"line_start":538,"line_end":538,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":50876,"byte_end":50883,"line_start":539,"line_end":539,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4825},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51530,"byte_end":51535,"line_start":564,"line_end":564,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"fn count(Self) -> usize","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51273,"byte_end":51330,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51335,"byte_end":51338,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51343,"byte_end":51357,"line_start":555,"line_end":555,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51362,"byte_end":51365,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51370,"byte_end":51377,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51382,"byte_end":51408,"line_start":558,"line_end":558,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51413,"byte_end":51416,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51421,"byte_end":51470,"line_start":560,"line_end":560,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51475,"byte_end":51478,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51483,"byte_end":51510,"line_start":562,"line_end":562,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51515,"byte_end":51522,"line_start":563,"line_end":563,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4828},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52044,"byte_end":52047,"line_start":586,"line_end":586,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"fn map<F, R>(Self, F) -> Map<Self, F> where F: Fn(Self::Item) -> R + Sync +\nSend, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51652,"byte_end":51719,"line_start":572,"line_end":572,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51724,"byte_end":51754,"line_start":573,"line_end":573,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51759,"byte_end":51762,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51767,"byte_end":51781,"line_start":575,"line_end":575,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51786,"byte_end":51789,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51794,"byte_end":51801,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51806,"byte_end":51832,"line_start":578,"line_end":578,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51837,"byte_end":51840,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51845,"byte_end":51906,"line_start":580,"line_end":580,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51911,"byte_end":51914,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51919,"byte_end":51964,"line_start":582,"line_end":582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51969,"byte_end":51972,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":51977,"byte_end":52024,"line_start":584,"line_end":584,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52029,"byte_end":52036,"line_start":585,"line_end":585,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4831},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53390,"byte_end":53398,"line_start":623,"line_end":623,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"fn map_with<F, T, R>(Self, T, F) -> MapWith<Self, T, F> where\nF: for<'_> Fn(&'_ mut T, Self::Item) -> R + Sync + Send, T: Send + Clone,\nR: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52208,"byte_end":52277,"line_start":594,"line_end":594,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52282,"byte_end":52338,"line_start":595,"line_end":595,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52343,"byte_end":52346,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52351,"byte_end":52419,"line_start":597,"line_end":597,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52424,"byte_end":52495,"line_start":598,"line_end":598,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52500,"byte_end":52517,"line_start":599,"line_end":599,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52522,"byte_end":52525,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52530,"byte_end":52544,"line_start":601,"line_end":601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52549,"byte_end":52552,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52557,"byte_end":52564,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52569,"byte_end":52602,"line_start":604,"line_end":604,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52607,"byte_end":52633,"line_start":605,"line_end":605,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52638,"byte_end":52641,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52646,"byte_end":52685,"line_start":607,"line_end":607,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52690,"byte_end":52693,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52698,"byte_end":52724,"line_start":609,"line_end":609,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52729,"byte_end":52798,"line_start":610,"line_end":610,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52803,"byte_end":52849,"line_start":611,"line_end":611,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52854,"byte_end":52943,"line_start":612,"line_end":612,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":52948,"byte_end":53012,"line_start":613,"line_end":613,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53017,"byte_end":53039,"line_start":614,"line_end":614,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53044,"byte_end":53139,"line_start":615,"line_end":615,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53144,"byte_end":53147,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53152,"byte_end":53243,"line_start":617,"line_end":617,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53248,"byte_end":53318,"line_start":618,"line_end":618,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53323,"byte_end":53336,"line_start":619,"line_end":619,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53341,"byte_end":53344,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53349,"byte_end":53370,"line_start":621,"line_end":621,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53375,"byte_end":53382,"line_start":622,"line_end":622,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4835},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54581,"byte_end":54589,"line_start":660,"line_end":660,"column_start":8,"column_end":16},"name":"map_init","qualname":"::iter::ParallelIterator::map_init","value":"fn map_init<F, INIT, T, R>(Self, INIT, F) -> MapInit<Self, INIT, F> where\nF: for<'_> Fn(&'_ mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T +\nSync + Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `map_op` to a value returned by `init` with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to a value returned by `init` with each item of this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53621,"byte_end":53694,"line_start":632,"line_end":632,"column_start":5,"column_end":78}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53699,"byte_end":53755,"line_start":633,"line_end":633,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53760,"byte_end":53763,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53768,"byte_end":53839,"line_start":635,"line_end":635,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53844,"byte_end":53910,"line_start":636,"line_end":636,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53915,"byte_end":53959,"line_start":637,"line_end":637,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53964,"byte_end":53967,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53972,"byte_end":53986,"line_start":639,"line_end":639,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53991,"byte_end":53994,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":53999,"byte_end":54006,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54011,"byte_end":54029,"line_start":642,"line_end":642,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54034,"byte_end":54060,"line_start":643,"line_end":643,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54065,"byte_end":54068,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (1i32..1_000_000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54073,"byte_end":54110,"line_start":645,"line_end":645,"column_start":5,"column_end":42}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54115,"byte_end":54139,"line_start":646,"line_end":646,"column_start":5,"column_end":29}},{"value":"/     .map_init(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54144,"byte_end":54162,"line_start":647,"line_end":647,"column_start":5,"column_end":23}},{"value":"/         || rand::thread_rng(),  // get the thread-local RNG","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54167,"byte_end":54230,"line_start":648,"line_end":648,"column_start":5,"column_end":68}},{"value":"/         |rng, x| if rng.gen() { // randomly negate items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54235,"byte_end":54295,"line_start":649,"line_end":649,"column_start":5,"column_end":65}},{"value":"/             -x","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54300,"byte_end":54318,"line_start":650,"line_end":650,"column_start":5,"column_end":23}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54323,"byte_end":54343,"line_start":651,"line_end":651,"column_start":5,"column_end":25}},{"value":"/             x","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54348,"byte_end":54365,"line_start":652,"line_end":652,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54370,"byte_end":54384,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/     ).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54389,"byte_end":54409,"line_start":654,"line_end":654,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54414,"byte_end":54417,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54422,"byte_end":54475,"line_start":656,"line_end":656,"column_start":5,"column_end":58}},{"value":"/ assert!(a.iter().any(|&x| x < 0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54480,"byte_end":54518,"line_start":657,"line_end":657,"column_start":5,"column_end":43}},{"value":"/ assert!(a.iter().any(|&x| x > 0));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54523,"byte_end":54561,"line_start":658,"line_end":658,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54566,"byte_end":54573,"line_start":659,"line_end":659,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4840},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55520,"byte_end":55526,"line_start":690,"line_end":690,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"fn cloned<'a, T>(Self) -> Cloned<Self> where T: 'a + Clone + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Clone`. See also [`copied()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54838,"byte_end":54908,"line_start":669,"line_end":669,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54913,"byte_end":54982,"line_start":670,"line_end":670,"column_start":5,"column_end":74}},{"value":"/ that type implements `Clone`. See also [`copied()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":54987,"byte_end":55043,"line_start":671,"line_end":671,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55048,"byte_end":55051,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ [`copied()`]: #method.copied","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55056,"byte_end":55088,"line_start":673,"line_end":673,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55093,"byte_end":55096,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55101,"byte_end":55115,"line_start":675,"line_end":675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55120,"byte_end":55123,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55128,"byte_end":55135,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55140,"byte_end":55166,"line_start":678,"line_end":678,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55171,"byte_end":55174,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55179,"byte_end":55201,"line_start":680,"line_end":680,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55206,"byte_end":55209,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55214,"byte_end":55273,"line_start":682,"line_end":682,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55278,"byte_end":55281,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55286,"byte_end":55341,"line_start":684,"line_end":684,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55346,"byte_end":55405,"line_start":685,"line_end":685,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55410,"byte_end":55413,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55418,"byte_end":55458,"line_start":687,"line_end":687,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55463,"byte_end":55500,"line_start":688,"line_end":688,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55505,"byte_end":55512,"line_start":689,"line_end":689,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4843},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56366,"byte_end":56372,"line_start":719,"line_end":719,"column_start":8,"column_end":14},"name":"copied","qualname":"::iter::ParallelIterator::copied","value":"fn copied<'a, T>(Self) -> Copied<Self> where T: 'a + Copy + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Creates an iterator which copies all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Copy`. See also [`cloned()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which copies all of its elements.  This may be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55685,"byte_end":55755,"line_start":698,"line_end":698,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55760,"byte_end":55829,"line_start":699,"line_end":699,"column_start":5,"column_end":74}},{"value":"/ that type implements `Copy`. See also [`cloned()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55834,"byte_end":55889,"line_start":700,"line_end":700,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55894,"byte_end":55897,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ [`cloned()`]: #method.cloned","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55902,"byte_end":55934,"line_start":702,"line_end":702,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55939,"byte_end":55942,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55947,"byte_end":55961,"line_start":704,"line_end":704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55966,"byte_end":55969,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55974,"byte_end":55981,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":55986,"byte_end":56012,"line_start":707,"line_end":707,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56017,"byte_end":56020,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56025,"byte_end":56047,"line_start":709,"line_end":709,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56052,"byte_end":56055,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let v_copied: Vec<_> = a.par_iter().copied().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56060,"byte_end":56119,"line_start":711,"line_end":711,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56124,"byte_end":56127,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ // copied is the same as .map(|&x| x), for integers","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56132,"byte_end":56187,"line_start":713,"line_end":713,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56192,"byte_end":56251,"line_start":714,"line_end":714,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56256,"byte_end":56259,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_copied, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56264,"byte_end":56304,"line_start":716,"line_end":716,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56309,"byte_end":56346,"line_start":717,"line_end":717,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56351,"byte_end":56358,"line_start":718,"line_end":718,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4846},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57566,"byte_end":57573,"line_start":756,"line_end":756,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"fn inspect<OP>(Self, OP) -> Inspect<Self, OP> where\nOP: for<'_> Fn(&'_ Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56530,"byte_end":56600,"line_start":727,"line_end":727,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56605,"byte_end":56678,"line_start":728,"line_end":728,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56683,"byte_end":56757,"line_start":729,"line_end":729,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56762,"byte_end":56765,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56770,"byte_end":56784,"line_start":731,"line_end":731,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56789,"byte_end":56792,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56797,"byte_end":56804,"line_start":733,"line_end":733,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56809,"byte_end":56835,"line_start":734,"line_end":734,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56840,"byte_end":56843,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56848,"byte_end":56873,"line_start":736,"line_end":736,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56878,"byte_end":56881,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56886,"byte_end":56927,"line_start":738,"line_end":738,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56932,"byte_end":56958,"line_start":739,"line_end":739,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56963,"byte_end":56988,"line_start":740,"line_end":740,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":56993,"byte_end":57033,"line_start":741,"line_end":741,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57038,"byte_end":57086,"line_start":742,"line_end":742,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57091,"byte_end":57094,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57099,"byte_end":57123,"line_start":744,"line_end":744,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57128,"byte_end":57131,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57136,"byte_end":57205,"line_start":746,"line_end":746,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57210,"byte_end":57236,"line_start":747,"line_end":747,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57241,"byte_end":57266,"line_start":748,"line_end":748,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57271,"byte_end":57335,"line_start":749,"line_end":749,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57340,"byte_end":57380,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57385,"byte_end":57456,"line_start":751,"line_end":751,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57461,"byte_end":57509,"line_start":752,"line_end":752,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57514,"byte_end":57517,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57522,"byte_end":57546,"line_start":754,"line_end":754,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57551,"byte_end":57558,"line_start":755,"line_end":755,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4848},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58082,"byte_end":58088,"line_start":776,"line_end":776,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"fn update<F>(Self, F) -> Update<Self, F> where\nF: for<'_> Fn(&'_ mut Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57730,"byte_end":57788,"line_start":763,"line_end":763,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57793,"byte_end":57796,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57801,"byte_end":57815,"line_start":765,"line_end":765,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57820,"byte_end":57823,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57828,"byte_end":57835,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57840,"byte_end":57866,"line_start":768,"line_end":768,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57871,"byte_end":57874,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57879,"byte_end":57944,"line_start":770,"line_end":770,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57949,"byte_end":57952,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":57957,"byte_end":58002,"line_start":772,"line_end":772,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58007,"byte_end":58010,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58015,"byte_end":58062,"line_start":774,"line_end":774,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58067,"byte_end":58074,"line_start":775,"line_end":775,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4850},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58683,"byte_end":58689,"line_start":797,"line_end":797,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"fn filter<P>(Self, P) -> Filter<Self, P> where P: for<'_> Fn(&'_ Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58241,"byte_end":58311,"line_start":783,"line_end":783,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58316,"byte_end":58374,"line_start":784,"line_end":784,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58379,"byte_end":58382,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58387,"byte_end":58401,"line_start":786,"line_end":786,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58406,"byte_end":58409,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58414,"byte_end":58421,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58426,"byte_end":58452,"line_start":789,"line_end":789,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58457,"byte_end":58460,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58465,"byte_end":58535,"line_start":791,"line_end":791,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58540,"byte_end":58543,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58548,"byte_end":58598,"line_start":793,"line_end":793,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58603,"byte_end":58606,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58611,"byte_end":58663,"line_start":795,"line_end":795,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58668,"byte_end":58675,"line_start":796,"line_end":796,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4852},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59483,"byte_end":59493,"line_start":822,"line_end":822,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"fn filter_map<P, R>(Self, P) -> FilterMap<Self, P> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58846,"byte_end":58919,"line_start":804,"line_end":804,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58924,"byte_end":58993,"line_start":805,"line_end":805,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":58998,"byte_end":59001,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59006,"byte_end":59020,"line_start":807,"line_end":807,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59025,"byte_end":59028,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59033,"byte_end":59040,"line_start":809,"line_end":809,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59045,"byte_end":59071,"line_start":810,"line_end":810,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59076,"byte_end":59079,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59084,"byte_end":59130,"line_start":812,"line_end":812,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59135,"byte_end":59180,"line_start":813,"line_end":813,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59185,"byte_end":59246,"line_start":814,"line_end":814,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59251,"byte_end":59296,"line_start":815,"line_end":815,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59301,"byte_end":59332,"line_start":816,"line_end":816,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59337,"byte_end":59340,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59345,"byte_end":59395,"line_start":818,"line_end":818,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59400,"byte_end":59403,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59408,"byte_end":59463,"line_start":820,"line_end":820,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59468,"byte_end":59475,"line_start":821,"line_end":821,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4855},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60262,"byte_end":60270,"line_start":848,"line_end":848,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"fn flat_map<F, PI>(Self, F) -> FlatMap<Self, F> where F: Fn(Self::Item) ->\nPI + Sync + Send, PI: IntoParallelIterator","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested parallel iterators,\n producing a new parallel iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested parallel iterators,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59680,"byte_end":59764,"line_start":830,"line_end":830,"column_start":5,"column_end":89}},{"value":"/ producing a new parallel iterator that flattens these back into one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59769,"byte_end":59841,"line_start":831,"line_end":831,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59846,"byte_end":59849,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ See also [`flat_map_iter`](#method.flat_map_iter).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59854,"byte_end":59908,"line_start":833,"line_end":833,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59913,"byte_end":59916,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59921,"byte_end":59935,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59940,"byte_end":59943,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59948,"byte_end":59955,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59960,"byte_end":59986,"line_start":838,"line_end":838,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59991,"byte_end":59994,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":59999,"byte_end":60044,"line_start":840,"line_end":840,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60049,"byte_end":60052,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60057,"byte_end":60123,"line_start":842,"line_end":842,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60128,"byte_end":60131,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60136,"byte_end":60177,"line_start":844,"line_end":844,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60182,"byte_end":60185,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60190,"byte_end":60242,"line_start":846,"line_end":846,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60247,"byte_end":60254,"line_start":847,"line_end":847,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4858},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62281,"byte_end":62294,"line_start":894,"line_end":894,"column_start":8,"column_end":21},"name":"flat_map_iter","qualname":"::iter::ParallelIterator::flat_map_iter","value":"fn flat_map_iter<F, SI>(Self, F) -> FlatMapIter<Self, F> where\nF: Fn(Self::Item) -> SI + Sync + Send, SI: IntoIterator, SI::Item: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested serial iterators,\n producing a new parallel iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested serial iterators,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60458,"byte_end":60540,"line_start":856,"line_end":856,"column_start":5,"column_end":87}},{"value":"/ producing a new parallel iterator that flattens these back into one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60545,"byte_end":60617,"line_start":857,"line_end":857,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60622,"byte_end":60625,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # `flat_map_iter` versus `flat_map`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60630,"byte_end":60669,"line_start":859,"line_end":859,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60674,"byte_end":60677,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ These two methods are similar but behave slightly differently. With [`flat_map`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60682,"byte_end":60767,"line_start":861,"line_end":861,"column_start":5,"column_end":90}},{"value":"/ each of the nested iterators must be a parallel iterator, and they will be further","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60772,"byte_end":60858,"line_start":862,"line_end":862,"column_start":5,"column_end":91}},{"value":"/ split up with nested parallelism. With `flat_map_iter`, each nested iterator is a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60863,"byte_end":60948,"line_start":863,"line_end":863,"column_start":5,"column_end":90}},{"value":"/ sequential `Iterator`, and we only parallelize _between_ them, while the items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":60953,"byte_end":61035,"line_start":864,"line_end":864,"column_start":5,"column_end":87}},{"value":"/ produced by each nested iterator are processed sequentially.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61040,"byte_end":61104,"line_start":865,"line_end":865,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61109,"byte_end":61112,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ When choosing between these methods, consider whether nested parallelism suits the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61117,"byte_end":61203,"line_start":867,"line_end":867,"column_start":5,"column_end":91}},{"value":"/ potential iterators at hand. If there's little computation involved, or its length","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61208,"byte_end":61294,"line_start":868,"line_end":868,"column_start":5,"column_end":91}},{"value":"/ is much less than the outer parallel iterator, then it may perform better to avoid","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61299,"byte_end":61385,"line_start":869,"line_end":869,"column_start":5,"column_end":91}},{"value":"/ the overhead of parallelism, just flattening sequentially with `flat_map_iter`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61390,"byte_end":61473,"line_start":870,"line_end":870,"column_start":5,"column_end":88}},{"value":"/ If there is a lot of computation, potentially outweighing the outer parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61478,"byte_end":61558,"line_start":871,"line_end":871,"column_start":5,"column_end":85}},{"value":"/ iterator, then the nested parallelism of `flat_map` may be worthwhile.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61563,"byte_end":61637,"line_start":872,"line_end":872,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61642,"byte_end":61645,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ [`flat_map`]: #method.flat_map","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61650,"byte_end":61684,"line_start":874,"line_end":874,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61689,"byte_end":61692,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61697,"byte_end":61711,"line_start":876,"line_end":876,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61716,"byte_end":61719,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61724,"byte_end":61731,"line_start":878,"line_end":878,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61736,"byte_end":61762,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ use std::cell::RefCell;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61767,"byte_end":61794,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61799,"byte_end":61802,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61807,"byte_end":61852,"line_start":882,"line_end":882,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61857,"byte_end":61860,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().flat_map_iter(|a| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61865,"byte_end":61916,"line_start":884,"line_end":884,"column_start":5,"column_end":56}},{"value":"/     // The serial iterator doesn't have to be thread-safe, just its items.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":61921,"byte_end":61999,"line_start":885,"line_end":885,"column_start":5,"column_end":83}},{"value":"/     let cell_iter = RefCell::new(a.iter().cloned());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62004,"byte_end":62060,"line_start":886,"line_end":886,"column_start":5,"column_end":61}},{"value":"/     std::iter::from_fn(move || cell_iter.borrow_mut().next())","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62065,"byte_end":62130,"line_start":887,"line_end":887,"column_start":5,"column_end":70}},{"value":"/ });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62135,"byte_end":62142,"line_start":888,"line_end":888,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62147,"byte_end":62150,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62155,"byte_end":62196,"line_start":890,"line_end":890,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62201,"byte_end":62204,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62209,"byte_end":62261,"line_start":892,"line_end":892,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62266,"byte_end":62273,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4861},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62927,"byte_end":62934,"line_start":917,"line_end":917,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"fn flatten(Self) -> Flatten<Self> where Self::Item: IntoParallelIterator","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" An adaptor that flattens parallel-iterable `Item`s into one large iterator.","sig":null,"attributes":[{"value":"/ An adaptor that flattens parallel-iterable `Item`s into one large iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62506,"byte_end":62585,"line_start":903,"line_end":903,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62590,"byte_end":62593,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ See also [`flatten_iter`](#method.flatten_iter).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62598,"byte_end":62650,"line_start":905,"line_end":905,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62655,"byte_end":62658,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62663,"byte_end":62677,"line_start":907,"line_end":907,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62682,"byte_end":62685,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62690,"byte_end":62697,"line_start":909,"line_end":909,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62702,"byte_end":62728,"line_start":910,"line_end":910,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62733,"byte_end":62736,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62741,"byte_end":62795,"line_start":912,"line_end":912,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62800,"byte_end":62858,"line_start":913,"line_end":913,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62863,"byte_end":62866,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62871,"byte_end":62907,"line_start":915,"line_end":915,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":62912,"byte_end":62919,"line_start":916,"line_end":916,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4862},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63653,"byte_end":63665,"line_start":940,"line_end":940,"column_start":8,"column_end":20},"name":"flatten_iter","qualname":"::iter::ParallelIterator::flatten_iter","value":"fn flatten_iter(Self) -> FlattenIter<Self> where Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" An adaptor that flattens serial-iterable `Item`s into one large iterator.","sig":null,"attributes":[{"value":"/ An adaptor that flattens serial-iterable `Item`s into one large iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63054,"byte_end":63131,"line_start":924,"line_end":924,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63136,"byte_end":63139,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ See also [`flatten`](#method.flatten) and the analogous comparison of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63144,"byte_end":63217,"line_start":926,"line_end":926,"column_start":5,"column_end":78}},{"value":"/ [`flat_map_iter` versus `flat_map`](#flat_map_iter-versus-flat_map).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63222,"byte_end":63294,"line_start":927,"line_end":927,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63299,"byte_end":63302,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63307,"byte_end":63321,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63326,"byte_end":63329,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63334,"byte_end":63341,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63346,"byte_end":63372,"line_start":932,"line_end":932,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63377,"byte_end":63380,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63385,"byte_end":63439,"line_start":934,"line_end":934,"column_start":5,"column_end":59}},{"value":"/ let iters: Vec<_> = x.into_iter().map(Vec::into_iter).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63444,"byte_end":63512,"line_start":935,"line_end":935,"column_start":5,"column_end":73}},{"value":"/ let y: Vec<_> = iters.into_par_iter().flatten_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63517,"byte_end":63584,"line_start":936,"line_end":936,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63589,"byte_end":63592,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63597,"byte_end":63633,"line_start":938,"line_end":938,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63638,"byte_end":63645,"line_start":939,"line_end":939,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4863},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65400,"byte_end":65406,"line_start":978,"line_end":978,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"fn reduce<OP, ID>(Self, ID, OP) -> Self::Item where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send, ID: Fn() ->\nSelf::Item + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63835,"byte_end":63898,"line_start":948,"line_end":948,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63903,"byte_end":63967,"line_start":949,"line_end":949,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":63972,"byte_end":64035,"line_start":950,"line_end":950,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64040,"byte_end":64106,"line_start":951,"line_end":951,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64111,"byte_end":64177,"line_start":952,"line_end":952,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64182,"byte_end":64245,"line_start":953,"line_end":953,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64250,"byte_end":64303,"line_start":954,"line_end":954,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64308,"byte_end":64311,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64316,"byte_end":64330,"line_start":956,"line_end":956,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64335,"byte_end":64338,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64343,"byte_end":64350,"line_start":958,"line_end":958,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64355,"byte_end":64420,"line_start":959,"line_end":959,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64425,"byte_end":64499,"line_start":960,"line_end":960,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64504,"byte_end":64565,"line_start":961,"line_end":961,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64570,"byte_end":64596,"line_start":962,"line_end":962,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64601,"byte_end":64649,"line_start":963,"line_end":963,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64654,"byte_end":64717,"line_start":964,"line_end":964,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64722,"byte_end":64784,"line_start":965,"line_end":965,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64789,"byte_end":64861,"line_start":966,"line_end":966,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64866,"byte_end":64920,"line_start":967,"line_end":967,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64925,"byte_end":64979,"line_start":968,"line_end":968,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64984,"byte_end":64991,"line_start":969,"line_end":969,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":64996,"byte_end":64999,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65004,"byte_end":65068,"line_start":971,"line_end":971,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65073,"byte_end":65137,"line_start":972,"line_end":972,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65142,"byte_end":65208,"line_start":973,"line_end":973,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65213,"byte_end":65277,"line_start":974,"line_end":974,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65282,"byte_end":65310,"line_start":975,"line_end":975,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65315,"byte_end":65318,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65323,"byte_end":65392,"line_start":977,"line_end":977,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4866},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66747,"byte_end":66758,"line_start":1012,"line_end":1012,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"fn reduce_with<OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65641,"byte_end":65704,"line_start":986,"line_end":986,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65709,"byte_end":65769,"line_start":987,"line_end":987,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65774,"byte_end":65797,"line_start":988,"line_end":988,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65802,"byte_end":65805,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65810,"byte_end":65866,"line_start":990,"line_end":990,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65871,"byte_end":65937,"line_start":991,"line_end":991,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65942,"byte_end":65975,"line_start":992,"line_end":992,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65980,"byte_end":65983,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":65988,"byte_end":66002,"line_start":994,"line_end":994,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66007,"byte_end":66010,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66015,"byte_end":66022,"line_start":996,"line_end":996,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66027,"byte_end":66053,"line_start":997,"line_end":997,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66058,"byte_end":66106,"line_start":998,"line_end":998,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66111,"byte_end":66174,"line_start":999,"line_end":999,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66179,"byte_end":66241,"line_start":1000,"line_end":1000,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66246,"byte_end":66304,"line_start":1001,"line_end":1001,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66309,"byte_end":66334,"line_start":1002,"line_end":1002,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66339,"byte_end":66393,"line_start":1003,"line_end":1003,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66398,"byte_end":66405,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66410,"byte_end":66413,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66418,"byte_end":66482,"line_start":1006,"line_end":1006,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66487,"byte_end":66551,"line_start":1007,"line_end":1007,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66556,"byte_end":66622,"line_start":1008,"line_end":1008,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66627,"byte_end":66657,"line_start":1009,"line_end":1009,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66662,"byte_end":66665,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":66670,"byte_end":66739,"line_start":1011,"line_end":1011,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4878},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68942,"byte_end":68952,"line_start":1066,"line_end":1066,"column_start":8,"column_end":18},"name":"try_reduce","qualname":"::iter::ParallelIterator::try_reduce","value":"fn try_reduce<T, OP, ID>(Self, ID, OP) -> Self::Item where OP: Fn(T, T) ->\nSelf::Item + Sync + Send, ID: Fn() -> T + Sync + Send, Self::Item: Try<Output\n= T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.\n The `identity` argument is used the same way as in [`reduce()`].","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67553,"byte_end":67627,"line_start":1035,"line_end":1035,"column_start":5,"column_end":79}},{"value":"/ The `identity` argument is used the same way as in [`reduce()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67632,"byte_end":67700,"line_start":1036,"line_end":1036,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67705,"byte_end":67708,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ [`reduce()`]: #method.reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67713,"byte_end":67745,"line_start":1038,"line_end":1038,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67750,"byte_end":67753,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ If a `Result::Err` or `Option::None` item is found, or if `op` reduces","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67758,"byte_end":67832,"line_start":1040,"line_end":1040,"column_start":5,"column_end":79}},{"value":"/ to one, we will attempt to stop processing the rest of the items in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67837,"byte_end":67912,"line_start":1041,"line_end":1041,"column_start":5,"column_end":80}},{"value":"/ iterator as soon as possible, and we will return that terminating value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67917,"byte_end":67993,"line_start":1042,"line_end":1042,"column_start":5,"column_end":81}},{"value":"/ Otherwise, we will return the final reduced `Result::Ok(T)` or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":67998,"byte_end":68064,"line_start":1043,"line_end":1043,"column_start":5,"column_end":71}},{"value":"/ `Option::Some(T)`.  If there are multiple errors in parallel, it is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68069,"byte_end":68144,"line_start":1044,"line_end":1044,"column_start":5,"column_end":80}},{"value":"/ specified which will be returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68149,"byte_end":68186,"line_start":1045,"line_end":1045,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68191,"byte_end":68194,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68199,"byte_end":68213,"line_start":1047,"line_end":1047,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68218,"byte_end":68221,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68226,"byte_end":68233,"line_start":1049,"line_end":1049,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68238,"byte_end":68264,"line_start":1050,"line_end":1050,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68269,"byte_end":68272,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ // Compute the sum of squares, being careful about overflow.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68277,"byte_end":68341,"line_start":1052,"line_end":1052,"column_start":5,"column_end":69}},{"value":"/ fn sum_squares<I: IntoParallelIterator<Item = i32>>(iter: I) -> Option<i32> {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68346,"byte_end":68427,"line_start":1053,"line_end":1053,"column_start":5,"column_end":86}},{"value":"/     iter.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68432,"byte_end":68460,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/         .map(|i| i.checked_mul(i))            // square each item,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68465,"byte_end":68535,"line_start":1055,"line_end":1055,"column_start":5,"column_end":75}},{"value":"/         .try_reduce(|| 0, i32::checked_add)   // and add them up!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68540,"byte_end":68609,"line_start":1056,"line_end":1056,"column_start":5,"column_end":74}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68614,"byte_end":68619,"line_start":1057,"line_end":1057,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(sum_squares(0..5), Some(0 + 1 + 4 + 9 + 16));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68624,"byte_end":68684,"line_start":1058,"line_end":1058,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68689,"byte_end":68692,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ // The sum might overflow","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68697,"byte_end":68726,"line_start":1060,"line_end":1060,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(sum_squares(0..10_000), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68731,"byte_end":68776,"line_start":1061,"line_end":1061,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68781,"byte_end":68784,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ // Or the squares might overflow before it even reaches `try_reduce`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68789,"byte_end":68861,"line_start":1063,"line_end":1063,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(sum_squares(1_000_000..1_000_001), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68866,"byte_end":68922,"line_start":1064,"line_end":1064,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":68927,"byte_end":68934,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4882},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70583,"byte_end":70598,"line_start":1110,"line_end":1110,"column_start":8,"column_end":23},"name":"try_reduce_with","qualname":"::iter::ParallelIterator::try_reduce_with","value":"fn try_reduce_with<T, OP>(Self, OP) -> Option<Self::Item> where OP: Fn(T, T)\n-> Self::Item + Sync + Send, Self::Item: Try<Output = T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69208,"byte_end":69282,"line_start":1075,"line_end":1075,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69287,"byte_end":69290,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ Like [`reduce_with()`], if the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69295,"byte_end":69368,"line_start":1077,"line_end":1077,"column_start":5,"column_end":78}},{"value":"/ otherwise, `Some` is returned.  Beyond that, it behaves like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69373,"byte_end":69437,"line_start":1078,"line_end":1078,"column_start":5,"column_end":69}},{"value":"/ [`try_reduce()`] for handling `Err`/`None`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69442,"byte_end":69489,"line_start":1079,"line_end":1079,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69494,"byte_end":69497,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ [`reduce_with()`]: #method.reduce_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69502,"byte_end":69544,"line_start":1081,"line_end":1081,"column_start":5,"column_end":47}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69549,"byte_end":69589,"line_start":1082,"line_end":1082,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69594,"byte_end":69597,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ For instance, with `Option` items, the return value may be:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69602,"byte_end":69665,"line_start":1084,"line_end":1084,"column_start":5,"column_end":68}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69670,"byte_end":69706,"line_start":1085,"line_end":1085,"column_start":5,"column_end":41}},{"value":"/ - `Some(None)`, we stopped after encountering `None`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69711,"byte_end":69768,"line_start":1086,"line_end":1086,"column_start":5,"column_end":62}},{"value":"/ - `Some(Some(x))`, the entire iterator reduced to `x`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69773,"byte_end":69831,"line_start":1087,"line_end":1087,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69836,"byte_end":69839,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ With `Result` items, the nesting is more obvious:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69844,"byte_end":69897,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69902,"byte_end":69938,"line_start":1090,"line_end":1090,"column_start":5,"column_end":41}},{"value":"/ - `Some(Err(e))`, we stopped after encountering an error `e`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":69943,"byte_end":70008,"line_start":1091,"line_end":1091,"column_start":5,"column_end":70}},{"value":"/ - `Some(Ok(x))`, the entire iterator reduced to `x`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70013,"byte_end":70069,"line_start":1092,"line_end":1092,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70074,"byte_end":70077,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70082,"byte_end":70096,"line_start":1094,"line_end":1094,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70101,"byte_end":70104,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70109,"byte_end":70116,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70121,"byte_end":70147,"line_start":1097,"line_end":1097,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70152,"byte_end":70155,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ let files = [\"/dev/null\", \"/does/not/exist\"];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70160,"byte_end":70209,"line_start":1099,"line_end":1099,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70214,"byte_end":70217,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ // Find the biggest file","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70222,"byte_end":70250,"line_start":1101,"line_end":1101,"column_start":5,"column_end":33}},{"value":"/ files.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70255,"byte_end":70280,"line_start":1102,"line_end":1102,"column_start":5,"column_end":30}},{"value":"/     .map(|path| std::fs::metadata(path).map(|m| (path, m.len())))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70285,"byte_end":70354,"line_start":1103,"line_end":1103,"column_start":5,"column_end":74}},{"value":"/     .try_reduce_with(|a, b| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70359,"byte_end":70392,"line_start":1104,"line_end":1104,"column_start":5,"column_end":38}},{"value":"/         Ok(if a.1 >= b.1 { a } else { b })","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70397,"byte_end":70443,"line_start":1105,"line_end":1105,"column_start":5,"column_end":51}},{"value":"/     })","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70448,"byte_end":70458,"line_start":1106,"line_end":1106,"column_start":5,"column_end":15}},{"value":"/     .expect(\"Some value, since the iterator is not empty\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70463,"byte_end":70525,"line_start":1107,"line_end":1107,"column_start":5,"column_end":67}},{"value":"/     .expect_err(\"not found\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70530,"byte_end":70563,"line_start":1108,"line_end":1108,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70568,"byte_end":70575,"line_start":1109,"line_end":1109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4885},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76383,"byte_end":76387,"line_start":1251,"line_end":1251,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"fn fold<T, ID, F>(Self, ID, F) -> Fold<Self, ID, F> where F: Fn(T, Self::Item)\n-> T + Sync + Send, ID: Fn() -> T + Sync + Send, T: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70807,"byte_end":70870,"line_start":1118,"line_end":1118,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70875,"byte_end":70927,"line_start":1119,"line_end":1119,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":70932,"byte_end":70995,"line_start":1120,"line_end":1120,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71000,"byte_end":71063,"line_start":1121,"line_end":1121,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71068,"byte_end":71133,"line_start":1122,"line_end":1122,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71138,"byte_end":71204,"line_start":1123,"line_end":1123,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71209,"byte_end":71271,"line_start":1124,"line_end":1124,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71276,"byte_end":71340,"line_start":1125,"line_end":1125,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71345,"byte_end":71409,"line_start":1126,"line_end":1126,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71414,"byte_end":71454,"line_start":1127,"line_end":1127,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71459,"byte_end":71462,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ So if we did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71467,"byte_end":71532,"line_start":1129,"line_end":1129,"column_start":5,"column_end":70}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71537,"byte_end":71607,"line_start":1130,"line_end":1130,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71612,"byte_end":71624,"line_start":1131,"line_end":1131,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71629,"byte_end":71632,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71637,"byte_end":71651,"line_start":1133,"line_end":1133,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71656,"byte_end":71673,"line_start":1134,"line_end":1134,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71678,"byte_end":71695,"line_start":1135,"line_end":1135,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71700,"byte_end":71717,"line_start":1136,"line_end":1136,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71722,"byte_end":71729,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71734,"byte_end":71737,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71742,"byte_end":71777,"line_start":1139,"line_end":1139,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71782,"byte_end":71785,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71790,"byte_end":71804,"line_start":1141,"line_end":1141,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71809,"byte_end":71826,"line_start":1142,"line_end":1142,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71831,"byte_end":71848,"line_start":1143,"line_end":1143,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71853,"byte_end":71870,"line_start":1144,"line_end":1144,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71875,"byte_end":71882,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71887,"byte_end":71890,"line_start":1146,"line_end":1146,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71895,"byte_end":71958,"line_start":1147,"line_end":1147,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":71963,"byte_end":72000,"line_start":1148,"line_end":1148,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72005,"byte_end":72008,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72013,"byte_end":72039,"line_start":1150,"line_end":1150,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72044,"byte_end":72047,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72052,"byte_end":72121,"line_start":1152,"line_end":1152,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72126,"byte_end":72192,"line_start":1153,"line_end":1153,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72197,"byte_end":72200,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72205,"byte_end":72268,"line_start":1155,"line_end":1155,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72273,"byte_end":72332,"line_start":1156,"line_end":1156,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72337,"byte_end":72403,"line_start":1157,"line_end":1157,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72408,"byte_end":72474,"line_start":1158,"line_end":1158,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72479,"byte_end":72543,"line_start":1159,"line_end":1159,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72548,"byte_end":72611,"line_start":1160,"line_end":1160,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72616,"byte_end":72681,"line_start":1161,"line_end":1161,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72686,"byte_end":72749,"line_start":1162,"line_end":1162,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72754,"byte_end":72819,"line_start":1163,"line_end":1163,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72824,"byte_end":72890,"line_start":1164,"line_end":1164,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72895,"byte_end":72951,"line_start":1165,"line_end":1165,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72956,"byte_end":72959,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":72964,"byte_end":73026,"line_start":1167,"line_end":1167,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73031,"byte_end":73093,"line_start":1168,"line_end":1168,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73098,"byte_end":73160,"line_start":1169,"line_end":1169,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73165,"byte_end":73231,"line_start":1170,"line_end":1170,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73236,"byte_end":73300,"line_start":1171,"line_end":1171,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73305,"byte_end":73369,"line_start":1172,"line_end":1172,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73374,"byte_end":73396,"line_start":1173,"line_end":1173,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73401,"byte_end":73404,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73409,"byte_end":73468,"line_start":1175,"line_end":1175,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73473,"byte_end":73539,"line_start":1176,"line_end":1176,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73544,"byte_end":73608,"line_start":1177,"line_end":1177,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73613,"byte_end":73672,"line_start":1178,"line_end":1178,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73677,"byte_end":73743,"line_start":1179,"line_end":1179,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73748,"byte_end":73813,"line_start":1180,"line_end":1180,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73818,"byte_end":73880,"line_start":1181,"line_end":1181,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73885,"byte_end":73912,"line_start":1182,"line_end":1182,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73917,"byte_end":73920,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73925,"byte_end":73951,"line_start":1184,"line_end":1184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73956,"byte_end":73959,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":73964,"byte_end":74023,"line_start":1186,"line_end":1186,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74028,"byte_end":74092,"line_start":1187,"line_end":1187,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74097,"byte_end":74163,"line_start":1188,"line_end":1188,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74168,"byte_end":74210,"line_start":1189,"line_end":1189,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74215,"byte_end":74218,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74223,"byte_end":74230,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74235,"byte_end":74261,"line_start":1192,"line_end":1192,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74266,"byte_end":74269,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74274,"byte_end":74285,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74290,"byte_end":74323,"line_start":1195,"line_end":1195,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74328,"byte_end":74347,"line_start":1196,"line_end":1196,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74352,"byte_end":74393,"line_start":1197,"line_end":1197,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74398,"byte_end":74431,"line_start":1198,"line_end":1198,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74436,"byte_end":74502,"line_start":1199,"line_end":1199,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74507,"byte_end":74510,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74515,"byte_end":74542,"line_start":1201,"line_end":1201,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74547,"byte_end":74554,"line_start":1202,"line_end":1202,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74559,"byte_end":74562,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74567,"byte_end":74633,"line_start":1204,"line_end":1204,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74638,"byte_end":74702,"line_start":1205,"line_end":1205,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74707,"byte_end":74767,"line_start":1206,"line_end":1206,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74772,"byte_end":74837,"line_start":1207,"line_end":1207,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74842,"byte_end":74862,"line_start":1208,"line_end":1208,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74867,"byte_end":74870,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74875,"byte_end":74882,"line_start":1210,"line_end":1210,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74887,"byte_end":74913,"line_start":1211,"line_end":1211,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74918,"byte_end":74921,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74926,"byte_end":74937,"line_start":1213,"line_end":1213,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74942,"byte_end":74975,"line_start":1214,"line_end":1214,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":74980,"byte_end":74999,"line_start":1215,"line_end":1215,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75004,"byte_end":75035,"line_start":1216,"line_end":1216,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75040,"byte_end":75100,"line_start":1217,"line_end":1217,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75105,"byte_end":75138,"line_start":1218,"line_end":1218,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75143,"byte_end":75209,"line_start":1219,"line_end":1219,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75214,"byte_end":75217,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75222,"byte_end":75249,"line_start":1221,"line_end":1221,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75254,"byte_end":75261,"line_start":1222,"line_end":1222,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75266,"byte_end":75269,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75274,"byte_end":75337,"line_start":1224,"line_end":1224,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75342,"byte_end":75407,"line_start":1225,"line_end":1225,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75412,"byte_end":75476,"line_start":1226,"line_end":1226,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75481,"byte_end":75547,"line_start":1227,"line_end":1227,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75552,"byte_end":75616,"line_start":1228,"line_end":1228,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75621,"byte_end":75684,"line_start":1229,"line_end":1229,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75689,"byte_end":75700,"line_start":1230,"line_end":1230,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75705,"byte_end":75708,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75713,"byte_end":75779,"line_start":1232,"line_end":1232,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75784,"byte_end":75816,"line_start":1233,"line_end":1233,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75821,"byte_end":75824,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75829,"byte_end":75873,"line_start":1235,"line_end":1235,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75878,"byte_end":75881,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75886,"byte_end":75951,"line_start":1237,"line_end":1237,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":75956,"byte_end":76021,"line_start":1238,"line_end":1238,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76026,"byte_end":76052,"line_start":1239,"line_end":1239,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76057,"byte_end":76060,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76065,"byte_end":76072,"line_start":1241,"line_end":1241,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76077,"byte_end":76103,"line_start":1242,"line_end":1242,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76108,"byte_end":76111,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76116,"byte_end":76141,"line_start":1244,"line_end":1244,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76146,"byte_end":76181,"line_start":1245,"line_end":1245,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76186,"byte_end":76252,"line_start":1246,"line_end":1246,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76257,"byte_end":76290,"line_start":1247,"line_end":1247,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76295,"byte_end":76298,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76303,"byte_end":76363,"line_start":1249,"line_end":1249,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76368,"byte_end":76375,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4889},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77312,"byte_end":77321,"line_start":1279,"line_end":1279,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"fn fold_with<F, T>(Self, T, F) -> FoldWith<Self, T, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76624,"byte_end":76694,"line_start":1260,"line_end":1260,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76699,"byte_end":76757,"line_start":1261,"line_end":1261,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76762,"byte_end":76765,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76770,"byte_end":76842,"line_start":1263,"line_end":1263,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76847,"byte_end":76918,"line_start":1264,"line_end":1264,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76923,"byte_end":76952,"line_start":1265,"line_end":1265,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76957,"byte_end":76960,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76965,"byte_end":76979,"line_start":1267,"line_end":1267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76984,"byte_end":76987,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":76992,"byte_end":76999,"line_start":1269,"line_end":1269,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77004,"byte_end":77030,"line_start":1270,"line_end":1270,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77035,"byte_end":77038,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77043,"byte_end":77068,"line_start":1272,"line_end":1272,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77073,"byte_end":77108,"line_start":1273,"line_end":1273,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77113,"byte_end":77181,"line_start":1274,"line_end":1274,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77186,"byte_end":77219,"line_start":1275,"line_end":1275,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77224,"byte_end":77227,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77232,"byte_end":77292,"line_start":1277,"line_end":1277,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77297,"byte_end":77304,"line_start":1278,"line_end":1278,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4892},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78454,"byte_end":78462,"line_start":1312,"line_end":1312,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::ParallelIterator::try_fold","value":"fn try_fold<T, R, ID, F>(Self, ID, F) -> TryFold<Self, R, ID, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, ID: Fn() -> T + Sync + Send,\nR: Try<Output = T> + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77523,"byte_end":77561,"line_start":1287,"line_end":1287,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77566,"byte_end":77569,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ This is a variation of [`fold()`] for operations which can fail with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77574,"byte_end":77646,"line_start":1289,"line_end":1289,"column_start":5,"column_end":77}},{"value":"/ `Option::None` or `Result::Err`.  The first such failure stops","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77651,"byte_end":77717,"line_start":1290,"line_end":1290,"column_start":5,"column_end":71}},{"value":"/ processing the local set of items, without affecting other folds in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77722,"byte_end":77797,"line_start":1291,"line_end":1291,"column_start":5,"column_end":80}},{"value":"/ iterator's subdivisions.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77802,"byte_end":77830,"line_start":1292,"line_end":1292,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77835,"byte_end":77838,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ Often, `try_fold()` will be followed by [`try_reduce()`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77843,"byte_end":77903,"line_start":1294,"line_end":1294,"column_start":5,"column_end":65}},{"value":"/ for a final reduction and global short-circuiting effect.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77908,"byte_end":77969,"line_start":1295,"line_end":1295,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77974,"byte_end":77977,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: #method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":77982,"byte_end":78010,"line_start":1297,"line_end":1297,"column_start":5,"column_end":33}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78015,"byte_end":78055,"line_start":1298,"line_end":1298,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78060,"byte_end":78063,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78068,"byte_end":78082,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78087,"byte_end":78090,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78095,"byte_end":78102,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78107,"byte_end":78133,"line_start":1303,"line_end":1303,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78138,"byte_end":78141,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78146,"byte_end":78171,"line_start":1305,"line_end":1305,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78176,"byte_end":78211,"line_start":1306,"line_end":1306,"column_start":5,"column_end":40}},{"value":"/                .try_fold(|| 0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78216,"byte_end":78295,"line_start":1307,"line_end":1307,"column_start":5,"column_end":84}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78300,"byte_end":78355,"line_start":1308,"line_end":1308,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78360,"byte_end":78363,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78368,"byte_end":78434,"line_start":1310,"line_end":1310,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78439,"byte_end":78446,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4897},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79386,"byte_end":79399,"line_start":1339,"line_end":1339,"column_start":8,"column_end":21},"name":"try_fold_with","qualname":"::iter::ParallelIterator::try_fold_with","value":"fn try_fold_with<F, T, R>(Self, T, F) -> TryFoldWith<Self, R, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, R: Try<Output = T> + Send, T: Clone +\nSend","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold with a cloneable `init` value.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold with a cloneable `init` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78729,"byte_end":78797,"line_start":1321,"line_end":1321,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78802,"byte_end":78805,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`fold_with()`] and the failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78810,"byte_end":78883,"line_start":1323,"line_end":1323,"column_start":5,"column_end":78}},{"value":"/ semantics of [`try_fold()`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78888,"byte_end":78920,"line_start":1324,"line_end":1324,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78925,"byte_end":78928,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ [`fold_with()`]: #method.fold_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78933,"byte_end":78971,"line_start":1326,"line_end":1326,"column_start":5,"column_end":43}},{"value":"/ [`try_fold()`]: #method.try_fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":78976,"byte_end":79012,"line_start":1327,"line_end":1327,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79017,"byte_end":79020,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79025,"byte_end":79032,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79037,"byte_end":79063,"line_start":1330,"line_end":1330,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79068,"byte_end":79071,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79076,"byte_end":79101,"line_start":1332,"line_end":1332,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79106,"byte_end":79141,"line_start":1333,"line_end":1333,"column_start":5,"column_end":40}},{"value":"/                .try_fold_with(0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79146,"byte_end":79227,"line_start":1334,"line_end":1334,"column_start":5,"column_end":86}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79232,"byte_end":79287,"line_start":1335,"line_end":1335,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79292,"byte_end":79295,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79300,"byte_end":79366,"line_start":1337,"line_end":1337,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79371,"byte_end":79378,"line_start":1338,"line_end":1338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4901},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80428,"byte_end":80431,"line_start":1372,"line_end":1372,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"fn sum<S>(Self) -> S where S: Send + Sum<Self::Item> + Sum<S>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79645,"byte_end":79683,"line_start":1348,"line_end":1348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79688,"byte_end":79691,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79696,"byte_end":79762,"line_start":1350,"line_end":1350,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79767,"byte_end":79832,"line_start":1351,"line_end":1351,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79837,"byte_end":79899,"line_start":1352,"line_end":1352,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79904,"byte_end":79928,"line_start":1353,"line_end":1353,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79933,"byte_end":79936,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":79941,"byte_end":80010,"line_start":1355,"line_end":1355,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80015,"byte_end":80018,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80023,"byte_end":80085,"line_start":1357,"line_end":1357,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80090,"byte_end":80152,"line_start":1358,"line_end":1358,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80157,"byte_end":80207,"line_start":1359,"line_end":1359,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80212,"byte_end":80215,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80220,"byte_end":80234,"line_start":1361,"line_end":1361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80239,"byte_end":80242,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80247,"byte_end":80254,"line_start":1363,"line_end":1363,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80259,"byte_end":80285,"line_start":1364,"line_end":1364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80290,"byte_end":80293,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80298,"byte_end":80320,"line_start":1366,"line_end":1366,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80325,"byte_end":80328,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80333,"byte_end":80371,"line_start":1368,"line_end":1368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80376,"byte_end":80379,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80384,"byte_end":80408,"line_start":1370,"line_end":1370,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80413,"byte_end":80420,"line_start":1371,"line_end":1371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4903},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81430,"byte_end":81437,"line_start":1405,"line_end":1405,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"fn product<P>(Self) -> P where P: Send + Product<Self::Item> + Product<P>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80540,"byte_end":80585,"line_start":1379,"line_end":1379,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80590,"byte_end":80593,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80598,"byte_end":80664,"line_start":1381,"line_end":1381,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80669,"byte_end":80734,"line_start":1382,"line_end":1382,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80739,"byte_end":80801,"line_start":1383,"line_end":1383,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80806,"byte_end":80830,"line_start":1384,"line_end":1384,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80835,"byte_end":80838,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80843,"byte_end":80912,"line_start":1386,"line_end":1386,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80917,"byte_end":80920,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80925,"byte_end":80987,"line_start":1388,"line_end":1388,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":80992,"byte_end":81054,"line_start":1389,"line_end":1389,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81059,"byte_end":81109,"line_start":1390,"line_end":1390,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81114,"byte_end":81117,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81122,"byte_end":81136,"line_start":1392,"line_end":1392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81141,"byte_end":81144,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81149,"byte_end":81156,"line_start":1394,"line_end":1394,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81161,"byte_end":81187,"line_start":1395,"line_end":1395,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81192,"byte_end":81195,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81200,"byte_end":81233,"line_start":1397,"line_end":1397,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81238,"byte_end":81279,"line_start":1398,"line_end":1398,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81284,"byte_end":81289,"line_start":1399,"line_end":1399,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81294,"byte_end":81297,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81302,"byte_end":81334,"line_start":1401,"line_end":1401,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81339,"byte_end":81371,"line_start":1402,"line_end":1402,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81376,"byte_end":81410,"line_start":1403,"line_end":1403,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81415,"byte_end":81422,"line_start":1404,"line_end":1404,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4905},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82280,"byte_end":82283,"line_start":1435,"line_end":1435,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"fn min(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81562,"byte_end":81627,"line_start":1412,"line_end":1412,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81632,"byte_end":81697,"line_start":1413,"line_end":1413,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81702,"byte_end":81718,"line_start":1414,"line_end":1414,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81723,"byte_end":81726,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81731,"byte_end":81796,"line_start":1416,"line_end":1416,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81801,"byte_end":81867,"line_start":1417,"line_end":1417,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81872,"byte_end":81910,"line_start":1418,"line_end":1418,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81915,"byte_end":81918,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81923,"byte_end":81993,"line_start":1420,"line_end":1420,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":81998,"byte_end":82001,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82006,"byte_end":82020,"line_start":1422,"line_end":1422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82025,"byte_end":82028,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82033,"byte_end":82040,"line_start":1424,"line_end":1424,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82045,"byte_end":82071,"line_start":1425,"line_end":1425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82076,"byte_end":82079,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82084,"byte_end":82109,"line_start":1427,"line_end":1427,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82114,"byte_end":82117,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82122,"byte_end":82168,"line_start":1429,"line_end":1429,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82173,"byte_end":82176,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82181,"byte_end":82206,"line_start":1431,"line_end":1431,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82211,"byte_end":82214,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82219,"byte_end":82260,"line_start":1433,"line_end":1433,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82265,"byte_end":82272,"line_start":1434,"line_end":1434,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4906},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83022,"byte_end":83028,"line_start":1459,"line_end":1459,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"fn min_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nfor<'_, '_> Fn(&'_ Self::Item, &'_ Self::Item) -> Ordering","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82399,"byte_end":82472,"line_start":1442,"line_end":1442,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82477,"byte_end":82547,"line_start":1443,"line_end":1443,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82552,"byte_end":82601,"line_start":1444,"line_end":1444,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82606,"byte_end":82609,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82614,"byte_end":82679,"line_start":1446,"line_end":1446,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82684,"byte_end":82753,"line_start":1447,"line_end":1447,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82758,"byte_end":82796,"line_start":1448,"line_end":1448,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82801,"byte_end":82804,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82809,"byte_end":82823,"line_start":1450,"line_end":1450,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82828,"byte_end":82831,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82836,"byte_end":82843,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82848,"byte_end":82874,"line_start":1453,"line_end":1453,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82879,"byte_end":82882,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82887,"byte_end":82925,"line_start":1455,"line_end":1455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82930,"byte_end":82933,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":82938,"byte_end":83002,"line_start":1457,"line_end":1457,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83007,"byte_end":83014,"line_start":1458,"line_end":1458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4913},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83996,"byte_end":84006,"line_start":1490,"line_end":1490,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"fn min_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + for<'_> Fn(&'_ Self::Item) -> K","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83398,"byte_end":83463,"line_start":1473,"line_end":1473,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83468,"byte_end":83527,"line_start":1474,"line_end":1474,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83532,"byte_end":83572,"line_start":1475,"line_end":1475,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83577,"byte_end":83580,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83585,"byte_end":83650,"line_start":1477,"line_end":1477,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83655,"byte_end":83721,"line_start":1478,"line_end":1478,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83726,"byte_end":83764,"line_start":1479,"line_end":1479,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83769,"byte_end":83772,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83777,"byte_end":83791,"line_start":1481,"line_end":1481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83796,"byte_end":83799,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83804,"byte_end":83811,"line_start":1483,"line_end":1483,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83816,"byte_end":83842,"line_start":1484,"line_end":1484,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83847,"byte_end":83850,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83855,"byte_end":83900,"line_start":1486,"line_end":1486,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83905,"byte_end":83908,"line_start":1487,"line_end":1487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83913,"byte_end":83976,"line_start":1488,"line_end":1488,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":83981,"byte_end":83988,"line_start":1489,"line_end":1489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4925},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85239,"byte_end":85242,"line_start":1533,"line_end":1533,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"fn max(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84521,"byte_end":84586,"line_start":1510,"line_end":1510,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84591,"byte_end":84656,"line_start":1511,"line_end":1511,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84661,"byte_end":84677,"line_start":1512,"line_end":1512,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84682,"byte_end":84685,"line_start":1513,"line_end":1513,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84690,"byte_end":84755,"line_start":1514,"line_end":1514,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84760,"byte_end":84826,"line_start":1515,"line_end":1515,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84831,"byte_end":84869,"line_start":1516,"line_end":1516,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84874,"byte_end":84877,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84882,"byte_end":84952,"line_start":1518,"line_end":1518,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84957,"byte_end":84960,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84965,"byte_end":84979,"line_start":1520,"line_end":1520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84984,"byte_end":84987,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":84992,"byte_end":84999,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85004,"byte_end":85030,"line_start":1523,"line_end":1523,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85035,"byte_end":85038,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85043,"byte_end":85068,"line_start":1525,"line_end":1525,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85073,"byte_end":85076,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85081,"byte_end":85127,"line_start":1527,"line_end":1527,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85132,"byte_end":85135,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85140,"byte_end":85165,"line_start":1529,"line_end":1529,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85170,"byte_end":85173,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85178,"byte_end":85219,"line_start":1531,"line_end":1531,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85224,"byte_end":85231,"line_start":1532,"line_end":1532,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4926},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85995,"byte_end":86001,"line_start":1557,"line_end":1557,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"fn max_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nfor<'_, '_> Fn(&'_ Self::Item, &'_ Self::Item) -> Ordering","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85358,"byte_end":85431,"line_start":1540,"line_end":1540,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85436,"byte_end":85506,"line_start":1541,"line_end":1541,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85511,"byte_end":85560,"line_start":1542,"line_end":1542,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85565,"byte_end":85568,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85573,"byte_end":85638,"line_start":1544,"line_end":1544,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85643,"byte_end":85712,"line_start":1545,"line_end":1545,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85717,"byte_end":85755,"line_start":1546,"line_end":1546,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85760,"byte_end":85763,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85768,"byte_end":85782,"line_start":1548,"line_end":1548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85787,"byte_end":85790,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85795,"byte_end":85802,"line_start":1550,"line_end":1550,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85807,"byte_end":85833,"line_start":1551,"line_end":1551,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85838,"byte_end":85841,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85846,"byte_end":85884,"line_start":1553,"line_end":1553,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85889,"byte_end":85892,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85897,"byte_end":85975,"line_start":1555,"line_end":1555,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":85980,"byte_end":85987,"line_start":1556,"line_end":1556,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4933},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86970,"byte_end":86980,"line_start":1588,"line_end":1588,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"fn max_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + for<'_> Fn(&'_ Self::Item) -> K","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86371,"byte_end":86436,"line_start":1571,"line_end":1571,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86441,"byte_end":86500,"line_start":1572,"line_end":1572,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86505,"byte_end":86545,"line_start":1573,"line_end":1573,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86550,"byte_end":86553,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86558,"byte_end":86623,"line_start":1575,"line_end":1575,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86628,"byte_end":86694,"line_start":1576,"line_end":1576,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86699,"byte_end":86737,"line_start":1577,"line_end":1577,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86742,"byte_end":86745,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86750,"byte_end":86764,"line_start":1579,"line_end":1579,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86769,"byte_end":86772,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86777,"byte_end":86784,"line_start":1581,"line_end":1581,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86789,"byte_end":86815,"line_start":1582,"line_end":1582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86820,"byte_end":86823,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86828,"byte_end":86873,"line_start":1584,"line_end":1584,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86878,"byte_end":86881,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86886,"byte_end":86950,"line_start":1586,"line_end":1586,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":86955,"byte_end":86962,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4945},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87911,"byte_end":87916,"line_start":1624,"line_end":1624,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"fn chain<C>(Self, C) -> Chain<Self, C::Iter> where\nC: IntoParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87495,"byte_end":87556,"line_start":1608,"line_end":1608,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87561,"byte_end":87564,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87569,"byte_end":87583,"line_start":1610,"line_end":1610,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87588,"byte_end":87591,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87596,"byte_end":87603,"line_start":1612,"line_end":1612,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87608,"byte_end":87634,"line_start":1613,"line_end":1613,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87639,"byte_end":87642,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87647,"byte_end":87669,"line_start":1615,"line_end":1615,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87674,"byte_end":87696,"line_start":1616,"line_end":1616,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87701,"byte_end":87704,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87709,"byte_end":87761,"line_start":1618,"line_end":1618,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87766,"byte_end":87769,"line_start":1619,"line_end":1619,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87774,"byte_end":87828,"line_start":1620,"line_end":1620,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87833,"byte_end":87836,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87841,"byte_end":87891,"line_start":1622,"line_end":1622,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":87896,"byte_end":87903,"line_start":1623,"line_end":1623,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4947},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89010,"byte_end":89018,"line_start":1654,"line_end":1654,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"fn find_any<P>(Self, P) -> Option<Self::Item> where\nP: for<'_> Fn(&'_ Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88087,"byte_end":88147,"line_start":1631,"line_end":1631,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88152,"byte_end":88214,"line_start":1632,"line_end":1632,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88219,"byte_end":88279,"line_start":1633,"line_end":1633,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88284,"byte_end":88350,"line_start":1634,"line_end":1634,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88355,"byte_end":88431,"line_start":1635,"line_end":1635,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88436,"byte_end":88439,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88444,"byte_end":88505,"line_start":1637,"line_end":1637,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88510,"byte_end":88571,"line_start":1638,"line_end":1638,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88576,"byte_end":88635,"line_start":1639,"line_end":1639,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88640,"byte_end":88643,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88648,"byte_end":88726,"line_start":1641,"line_end":1641,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88731,"byte_end":88734,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88739,"byte_end":88753,"line_start":1643,"line_end":1643,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88758,"byte_end":88761,"line_start":1644,"line_end":1644,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88766,"byte_end":88773,"line_start":1645,"line_end":1645,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88778,"byte_end":88804,"line_start":1646,"line_end":1646,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88809,"byte_end":88812,"line_start":1647,"line_end":1647,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88817,"byte_end":88842,"line_start":1648,"line_end":1648,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88847,"byte_end":88850,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88855,"byte_end":88917,"line_start":1650,"line_end":1650,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88922,"byte_end":88925,"line_start":1651,"line_end":1651,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88930,"byte_end":88990,"line_start":1652,"line_end":1652,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":88995,"byte_end":89002,"line_start":1653,"line_end":1653,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4949},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90057,"byte_end":90067,"line_start":1684,"line_end":1684,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"fn find_first<P>(Self, P) -> Option<Self::Item> where\nP: for<'_> Fn(&'_ Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89177,"byte_end":89250,"line_start":1661,"line_end":1661,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89255,"byte_end":89307,"line_start":1662,"line_end":1662,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89312,"byte_end":89315,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89320,"byte_end":89385,"line_start":1664,"line_end":1664,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89390,"byte_end":89459,"line_start":1665,"line_end":1665,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89464,"byte_end":89494,"line_start":1666,"line_end":1666,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89499,"byte_end":89502,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89507,"byte_end":89578,"line_start":1668,"line_end":1668,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89583,"byte_end":89654,"line_start":1669,"line_end":1669,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89659,"byte_end":89730,"line_start":1670,"line_end":1670,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89735,"byte_end":89769,"line_start":1671,"line_end":1671,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89774,"byte_end":89777,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89782,"byte_end":89796,"line_start":1673,"line_end":1673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89801,"byte_end":89804,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89809,"byte_end":89816,"line_start":1675,"line_end":1675,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89821,"byte_end":89847,"line_start":1676,"line_end":1676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89852,"byte_end":89855,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89860,"byte_end":89885,"line_start":1678,"line_end":1678,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89890,"byte_end":89893,"line_start":1679,"line_end":1679,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89898,"byte_end":89962,"line_start":1680,"line_end":1680,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89967,"byte_end":89970,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":89975,"byte_end":90037,"line_start":1682,"line_end":1682,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90042,"byte_end":90049,"line_start":1683,"line_end":1683,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4951},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91080,"byte_end":91089,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"fn find_last<P>(Self, P) -> Option<Self::Item> where\nP: for<'_> Fn(&'_ Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90243,"byte_end":90315,"line_start":1691,"line_end":1691,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90320,"byte_end":90372,"line_start":1692,"line_end":1692,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90377,"byte_end":90380,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90385,"byte_end":90449,"line_start":1694,"line_end":1694,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90454,"byte_end":90524,"line_start":1695,"line_end":1695,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90529,"byte_end":90556,"line_start":1696,"line_end":1696,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90561,"byte_end":90564,"line_start":1697,"line_end":1697,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90569,"byte_end":90640,"line_start":1698,"line_end":1698,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90645,"byte_end":90717,"line_start":1699,"line_end":1699,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90722,"byte_end":90794,"line_start":1700,"line_end":1700,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90799,"byte_end":90802,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90807,"byte_end":90821,"line_start":1702,"line_end":1702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90826,"byte_end":90829,"line_start":1703,"line_end":1703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90834,"byte_end":90841,"line_start":1704,"line_end":1704,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90846,"byte_end":90872,"line_start":1705,"line_end":1705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90877,"byte_end":90880,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90885,"byte_end":90910,"line_start":1707,"line_end":1707,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90915,"byte_end":90918,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90923,"byte_end":90986,"line_start":1709,"line_end":1709,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90991,"byte_end":90994,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":90999,"byte_end":91060,"line_start":1711,"line_end":1711,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91065,"byte_end":91072,"line_start":1712,"line_end":1712,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4953},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92166,"byte_end":92178,"line_start":1743,"line_end":1743,"column_start":8,"column_end":20},"name":"find_map_any","qualname":"::iter::ParallelIterator::find_map_any","value":"fn find_map_any<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator\n and returns **any** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91264,"byte_end":91333,"line_start":1720,"line_end":1720,"column_start":5,"column_end":74}},{"value":"/ and returns **any** non-None result of the map operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91338,"byte_end":91399,"line_start":1721,"line_end":1721,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91404,"byte_end":91407,"line_start":1722,"line_end":1722,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, we will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91412,"byte_end":91481,"line_start":1723,"line_end":1723,"column_start":5,"column_end":74}},{"value":"/ attempt to stop processing the rest of the items in the iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91486,"byte_end":91554,"line_start":1724,"line_end":1724,"column_start":5,"column_end":73}},{"value":"/ as soon as possible.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91559,"byte_end":91583,"line_start":1725,"line_end":1725,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91588,"byte_end":91591,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ Note that this method only returns **some** item in the parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91596,"byte_end":91664,"line_start":1727,"line_end":1727,"column_start":5,"column_end":73}},{"value":"/ iterator that is not None from the map predicate. The item returned","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91669,"byte_end":91740,"line_start":1728,"line_end":1728,"column_start":5,"column_end":76}},{"value":"/ may not be the **first** non-None value produced in the parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91745,"byte_end":91813,"line_start":1729,"line_end":1729,"column_start":5,"column_end":73}},{"value":"/ sequence, since the entire sequence is mapped over in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91818,"byte_end":91885,"line_start":1730,"line_end":1730,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91890,"byte_end":91893,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91898,"byte_end":91912,"line_start":1732,"line_end":1732,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91917,"byte_end":91920,"line_start":1733,"line_end":1733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91925,"byte_end":91932,"line_start":1734,"line_end":1734,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91937,"byte_end":91963,"line_start":1735,"line_end":1735,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91968,"byte_end":91971,"line_start":1736,"line_end":1736,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"5\", \"5\"];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":91976,"byte_end":92013,"line_start":1737,"line_end":1737,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92018,"byte_end":92021,"line_start":1738,"line_end":1738,"column_start":5,"column_end":8}},{"value":"/ let found_number = c.par_iter().find_map_any(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92026,"byte_end":92095,"line_start":1739,"line_end":1739,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92100,"byte_end":92103,"line_start":1740,"line_end":1740,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(found_number, Some(5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92108,"byte_end":92146,"line_start":1741,"line_end":1741,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92151,"byte_end":92158,"line_start":1742,"line_end":1742,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4958},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93368,"byte_end":93382,"line_start":1777,"line_end":1777,"column_start":8,"column_end":22},"name":"find_map_first","qualname":"::iter::ParallelIterator::find_map_first","value":"fn find_map_first<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **first** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92427,"byte_end":92500,"line_start":1754,"line_end":1754,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **first** non-None result of the map operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92505,"byte_end":92581,"line_start":1755,"line_end":1755,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92586,"byte_end":92589,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92594,"byte_end":92668,"line_start":1757,"line_end":1757,"column_start":5,"column_end":79}},{"value":"/ to the right of the match will be stopped, while attempts to the left","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92673,"byte_end":92746,"line_start":1758,"line_end":1758,"column_start":5,"column_end":78}},{"value":"/ must continue in case an earlier match is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92751,"byte_end":92803,"line_start":1759,"line_end":1759,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92808,"byte_end":92811,"line_start":1760,"line_end":1760,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92816,"byte_end":92887,"line_start":1761,"line_end":1761,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92892,"byte_end":92962,"line_start":1762,"line_end":1762,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":92967,"byte_end":93042,"line_start":1763,"line_end":1763,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93047,"byte_end":93085,"line_start":1764,"line_end":1764,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93090,"byte_end":93093,"line_start":1765,"line_end":1765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93098,"byte_end":93112,"line_start":1766,"line_end":1766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93117,"byte_end":93120,"line_start":1767,"line_end":1767,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93125,"byte_end":93132,"line_start":1768,"line_end":1768,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93137,"byte_end":93163,"line_start":1769,"line_end":1769,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93168,"byte_end":93171,"line_start":1770,"line_end":1770,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93176,"byte_end":93213,"line_start":1771,"line_end":1771,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93218,"byte_end":93221,"line_start":1772,"line_end":1772,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93226,"byte_end":93297,"line_start":1773,"line_end":1773,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93302,"byte_end":93305,"line_start":1774,"line_end":1774,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(2));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93310,"byte_end":93348,"line_start":1775,"line_end":1775,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93353,"byte_end":93360,"line_start":1776,"line_end":1776,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94567,"byte_end":94580,"line_start":1811,"line_end":1811,"column_start":8,"column_end":21},"name":"find_map_last","qualname":"::iter::ParallelIterator::find_map_last","value":"fn find_map_last<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **last** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93633,"byte_end":93706,"line_start":1788,"line_end":1788,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **last** non-None result of the map operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93711,"byte_end":93786,"line_start":1789,"line_end":1789,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93791,"byte_end":93794,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93799,"byte_end":93873,"line_start":1791,"line_end":1791,"column_start":5,"column_end":79}},{"value":"/ to the left of the match will be stopped, while attempts to the right","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93878,"byte_end":93951,"line_start":1792,"line_end":1792,"column_start":5,"column_end":78}},{"value":"/ must continue in case a later match is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":93956,"byte_end":94005,"line_start":1793,"line_end":1793,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94010,"byte_end":94013,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94018,"byte_end":94089,"line_start":1795,"line_end":1795,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94094,"byte_end":94164,"line_start":1796,"line_end":1796,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94169,"byte_end":94244,"line_start":1797,"line_end":1797,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94249,"byte_end":94287,"line_start":1798,"line_end":1798,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94292,"byte_end":94295,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94300,"byte_end":94314,"line_start":1800,"line_end":1800,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94319,"byte_end":94322,"line_start":1801,"line_end":1801,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94327,"byte_end":94334,"line_start":1802,"line_end":1802,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94339,"byte_end":94365,"line_start":1803,"line_end":1803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94370,"byte_end":94373,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94378,"byte_end":94415,"line_start":1805,"line_end":1805,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94420,"byte_end":94423,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ let last_number = c.par_iter().find_map_last(|s| s.parse().ok());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94428,"byte_end":94497,"line_start":1807,"line_end":1807,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94502,"byte_end":94505,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(last_number, Some(5));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94510,"byte_end":94547,"line_start":1809,"line_end":1809,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94552,"byte_end":94559,"line_start":1810,"line_end":1810,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4968},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94997,"byte_end":95001,"line_start":1825,"line_end":1825,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"fn find<P>(Self, P) -> Option<Self::Item> where P: for<'_> Fn(&'_ Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n\"parallel `find` does not search in order -- use `find_any`, \\\\\n                         `find_first`, or `find_last`\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":94849,"byte_end":94989,"line_start":1823,"line_end":1824,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95706,"byte_end":95709,"line_start":1849,"line_end":1849,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"fn any<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95157,"byte_end":95217,"line_start":1832,"line_end":1832,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95222,"byte_end":95284,"line_start":1833,"line_end":1833,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95289,"byte_end":95349,"line_start":1834,"line_end":1834,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95354,"byte_end":95420,"line_start":1835,"line_end":1835,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95425,"byte_end":95462,"line_start":1836,"line_end":1836,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95467,"byte_end":95470,"line_start":1837,"line_end":1837,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95475,"byte_end":95489,"line_start":1838,"line_end":1838,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95494,"byte_end":95497,"line_start":1839,"line_end":1839,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95502,"byte_end":95509,"line_start":1840,"line_end":1840,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95514,"byte_end":95540,"line_start":1841,"line_end":1841,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95545,"byte_end":95548,"line_start":1842,"line_end":1842,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95553,"byte_end":95589,"line_start":1843,"line_end":1843,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95594,"byte_end":95597,"line_start":1844,"line_end":1844,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95602,"byte_end":95651,"line_start":1845,"line_end":1845,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95656,"byte_end":95659,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95664,"byte_end":95686,"line_start":1847,"line_end":1847,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95691,"byte_end":95698,"line_start":1848,"line_end":1848,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4972},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96337,"byte_end":96340,"line_start":1871,"line_end":1871,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"fn all<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95877,"byte_end":95945,"line_start":1856,"line_end":1856,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":95950,"byte_end":96020,"line_start":1857,"line_end":1857,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96025,"byte_end":96092,"line_start":1858,"line_end":1858,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96097,"byte_end":96100,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96105,"byte_end":96119,"line_start":1860,"line_end":1860,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96124,"byte_end":96127,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96132,"byte_end":96139,"line_start":1862,"line_end":1862,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96144,"byte_end":96170,"line_start":1863,"line_end":1863,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96175,"byte_end":96178,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96183,"byte_end":96219,"line_start":1865,"line_end":1865,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96224,"byte_end":96227,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96232,"byte_end":96281,"line_start":1867,"line_end":1867,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96286,"byte_end":96289,"line_start":1868,"line_end":1868,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96294,"byte_end":96317,"line_start":1869,"line_end":1869,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96322,"byte_end":96329,"line_start":1870,"line_end":1870,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4975},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97322,"byte_end":97332,"line_start":1905,"line_end":1905,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"fn while_some<T>(Self) -> WhileSome<Self> where Self: ParallelIterator<Item =\nOption<T>>, T: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96589,"byte_end":96660,"line_start":1883,"line_end":1883,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96665,"byte_end":96700,"line_start":1884,"line_end":1884,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96705,"byte_end":96708,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96713,"byte_end":96727,"line_start":1886,"line_end":1886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96732,"byte_end":96735,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96740,"byte_end":96747,"line_start":1888,"line_end":1888,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96752,"byte_end":96778,"line_start":1889,"line_end":1889,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96783,"byte_end":96834,"line_start":1890,"line_end":1890,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96839,"byte_end":96842,"line_start":1891,"line_end":1891,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96847,"byte_end":96885,"line_start":1892,"line_end":1892,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96890,"byte_end":96919,"line_start":1893,"line_end":1893,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96924,"byte_end":96948,"line_start":1894,"line_end":1894,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96953,"byte_end":96971,"line_start":1895,"line_end":1895,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":96976,"byte_end":97032,"line_start":1896,"line_end":1896,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97037,"byte_end":97091,"line_start":1897,"line_end":1897,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97096,"byte_end":97111,"line_start":1898,"line_end":1898,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97116,"byte_end":97137,"line_start":1899,"line_end":1899,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97142,"byte_end":97157,"line_start":1900,"line_end":1900,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97162,"byte_end":97165,"line_start":1901,"line_end":1901,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97170,"byte_end":97202,"line_start":1902,"line_end":1902,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97207,"byte_end":97302,"line_start":1903,"line_end":1903,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97307,"byte_end":97314,"line_start":1904,"line_end":1904,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4977},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98643,"byte_end":98653,"line_start":1943,"line_end":1943,"column_start":8,"column_end":18},"name":"panic_fuse","qualname":"::iter::ParallelIterator::panic_fuse","value":"fn panic_fuse(Self) -> PanicFuse<Self>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Wraps an iterator with a fuse in case of panics, to halt all threads\n as soon as possible.","sig":null,"attributes":[{"value":"/ Wraps an iterator with a fuse in case of panics, to halt all threads","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97484,"byte_end":97556,"line_start":1913,"line_end":1913,"column_start":5,"column_end":77}},{"value":"/ as soon as possible.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97561,"byte_end":97585,"line_start":1914,"line_end":1914,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97590,"byte_end":97593,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ Panics within parallel iterators are always propagated to the caller,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97598,"byte_end":97671,"line_start":1916,"line_end":1916,"column_start":5,"column_end":78}},{"value":"/ but they don't always halt the rest of the iterator right away, due to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97676,"byte_end":97750,"line_start":1917,"line_end":1917,"column_start":5,"column_end":79}},{"value":"/ the internal semantics of [`join`]. This adaptor makes a greater effort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97755,"byte_end":97830,"line_start":1918,"line_end":1918,"column_start":5,"column_end":80}},{"value":"/ to stop processing other items sooner, with the cost of additional","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97835,"byte_end":97905,"line_start":1919,"line_end":1919,"column_start":5,"column_end":75}},{"value":"/ synchronization overhead, which may also inhibit some optimizations.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97910,"byte_end":97982,"line_start":1920,"line_end":1920,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97987,"byte_end":97990,"line_start":1921,"line_end":1921,"column_start":5,"column_end":8}},{"value":"/ [`join`]: ../fn.join.html#panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":97995,"byte_end":98031,"line_start":1922,"line_end":1922,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98036,"byte_end":98039,"line_start":1923,"line_end":1923,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98044,"byte_end":98058,"line_start":1924,"line_end":1924,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98063,"byte_end":98066,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ If this code didn't use `panic_fuse()`, it would continue processing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98071,"byte_end":98143,"line_start":1926,"line_end":1926,"column_start":5,"column_end":77}},{"value":"/ many more items in other threads (with long sleep delays) before the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98148,"byte_end":98220,"line_start":1927,"line_end":1927,"column_start":5,"column_end":77}},{"value":"/ panic is finally propagated.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98225,"byte_end":98257,"line_start":1928,"line_end":1928,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98262,"byte_end":98265,"line_start":1929,"line_end":1929,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98270,"byte_end":98289,"line_start":1930,"line_end":1930,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98294,"byte_end":98320,"line_start":1931,"line_end":1931,"column_start":5,"column_end":31}},{"value":"/ use std::{thread, time};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98325,"byte_end":98353,"line_start":1932,"line_end":1932,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98358,"byte_end":98361,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ (0..1_000_000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98366,"byte_end":98384,"line_start":1934,"line_end":1934,"column_start":5,"column_end":23}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98389,"byte_end":98413,"line_start":1935,"line_end":1935,"column_start":5,"column_end":29}},{"value":"/     .panic_fuse()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98418,"byte_end":98439,"line_start":1936,"line_end":1936,"column_start":5,"column_end":26}},{"value":"/     .for_each(|i| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98444,"byte_end":98467,"line_start":1937,"line_end":1937,"column_start":5,"column_end":28}},{"value":"/         // simulate some work","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98472,"byte_end":98505,"line_start":1938,"line_end":1938,"column_start":5,"column_end":38}},{"value":"/         thread::sleep(time::Duration::from_secs(1));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98510,"byte_end":98566,"line_start":1939,"line_end":1939,"column_start":5,"column_end":61}},{"value":"/         assert!(i > 0); // oops!","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98571,"byte_end":98607,"line_start":1940,"line_end":1940,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98612,"byte_end":98623,"line_start":1941,"line_end":1941,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98628,"byte_end":98635,"line_start":1942,"line_end":1942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101948,"byte_end":101955,"line_start":2044,"line_end":2044,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"fn collect<C>(Self) -> C where C: FromParallelIterator<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Creates a fresh collection containing all the elements produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Creates a fresh collection containing all the elements produced","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98721,"byte_end":98788,"line_start":1947,"line_end":1947,"column_start":5,"column_end":72}},{"value":"/ by this parallel iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98793,"byte_end":98823,"line_start":1948,"line_end":1948,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98828,"byte_end":98831,"line_start":1949,"line_end":1949,"column_start":5,"column_end":8}},{"value":"/ You may prefer [`collect_into_vec()`] implemented on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98836,"byte_end":98892,"line_start":1950,"line_end":1950,"column_start":5,"column_end":61}},{"value":"/ [`IndexedParallelIterator`], if your underlying iterator also implements","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98897,"byte_end":98973,"line_start":1951,"line_end":1951,"column_start":5,"column_end":81}},{"value":"/ it. [`collect_into_vec()`] allocates efficiently with precise knowledge","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":98978,"byte_end":99053,"line_start":1952,"line_end":1952,"column_start":5,"column_end":80}},{"value":"/ of how many elements the iterator contains, and even allows you to reuse","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99058,"byte_end":99134,"line_start":1953,"line_end":1953,"column_start":5,"column_end":81}},{"value":"/ an existing vector's backing store rather than allocating a fresh vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99139,"byte_end":99216,"line_start":1954,"line_end":1954,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99221,"byte_end":99224,"line_start":1955,"line_end":1955,"column_start":5,"column_end":8}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99229,"byte_end":99296,"line_start":1956,"line_end":1956,"column_start":5,"column_end":72}},{"value":"/ [`collect_into_vec()`]:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99301,"byte_end":99328,"line_start":1957,"line_end":1957,"column_start":5,"column_end":32}},{"value":"/     trait.IndexedParallelIterator.html#method.collect_into_vec","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99333,"byte_end":99399,"line_start":1958,"line_end":1958,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99404,"byte_end":99407,"line_start":1959,"line_end":1959,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99412,"byte_end":99426,"line_start":1960,"line_end":1960,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99431,"byte_end":99434,"line_start":1961,"line_end":1961,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99439,"byte_end":99446,"line_start":1962,"line_end":1962,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99451,"byte_end":99477,"line_start":1963,"line_end":1963,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99482,"byte_end":99485,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99490,"byte_end":99548,"line_start":1965,"line_end":1965,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99553,"byte_end":99556,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99561,"byte_end":99624,"line_start":1967,"line_end":1967,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99629,"byte_end":99632,"line_start":1968,"line_end":1968,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99637,"byte_end":99673,"line_start":1969,"line_end":1969,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99678,"byte_end":99685,"line_start":1970,"line_end":1970,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99690,"byte_end":99693,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ You can collect a pair of collections like [`unzip`](#method.unzip)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99698,"byte_end":99769,"line_start":1972,"line_end":1972,"column_start":5,"column_end":76}},{"value":"/ for paired items:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99774,"byte_end":99795,"line_start":1973,"line_end":1973,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99800,"byte_end":99803,"line_start":1974,"line_end":1974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99808,"byte_end":99815,"line_start":1975,"line_end":1975,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99820,"byte_end":99846,"line_start":1976,"line_end":1976,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99851,"byte_end":99854,"line_start":1977,"line_end":1977,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99859,"byte_end":99904,"line_start":1978,"line_end":1978,"column_start":5,"column_end":50}},{"value":"/ let (first, second): (Vec<_>, Vec<_>) = a.into_par_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99909,"byte_end":99981,"line_start":1979,"line_end":1979,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99986,"byte_end":99989,"line_start":1980,"line_end":1980,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":99994,"byte_end":100030,"line_start":1981,"line_end":1981,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(second, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100035,"byte_end":100072,"line_start":1982,"line_end":1982,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100077,"byte_end":100084,"line_start":1983,"line_end":1983,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100089,"byte_end":100092,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ Or like [`partition_map`](#method.partition_map) for `Either` items:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100097,"byte_end":100169,"line_start":1985,"line_end":1985,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100174,"byte_end":100177,"line_start":1986,"line_end":1986,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100182,"byte_end":100189,"line_start":1987,"line_end":1987,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100194,"byte_end":100220,"line_start":1988,"line_end":1988,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100225,"byte_end":100253,"line_start":1989,"line_end":1989,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100258,"byte_end":100261,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100266,"byte_end":100340,"line_start":1991,"line_end":1991,"column_start":5,"column_end":79}},{"value":"/     if x % 2 == 0 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100345,"byte_end":100368,"line_start":1992,"line_end":1992,"column_start":5,"column_end":28}},{"value":"/         Either::Left(x * 4)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100373,"byte_end":100404,"line_start":1993,"line_end":1993,"column_start":5,"column_end":36}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100409,"byte_end":100425,"line_start":1994,"line_end":1994,"column_start":5,"column_end":21}},{"value":"/         Either::Right(x * 3)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100430,"byte_end":100462,"line_start":1995,"line_end":1995,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100467,"byte_end":100476,"line_start":1996,"line_end":1996,"column_start":5,"column_end":14}},{"value":"/ }).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100481,"byte_end":100498,"line_start":1997,"line_end":1997,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100503,"byte_end":100506,"line_start":1998,"line_end":1998,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100511,"byte_end":100548,"line_start":1999,"line_end":1999,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100553,"byte_end":100591,"line_start":2000,"line_end":2000,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100596,"byte_end":100603,"line_start":2001,"line_end":2001,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100608,"byte_end":100611,"line_start":2002,"line_end":2002,"column_start":5,"column_end":8}},{"value":"/ You can even collect an arbitrarily-nested combination of pairs and `Either`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100616,"byte_end":100697,"line_start":2003,"line_end":2003,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100702,"byte_end":100705,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100710,"byte_end":100717,"line_start":2005,"line_end":2005,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100722,"byte_end":100748,"line_start":2006,"line_end":2006,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100753,"byte_end":100781,"line_start":2007,"line_end":2007,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100786,"byte_end":100789,"line_start":2008,"line_end":2008,"column_start":5,"column_end":8}},{"value":"/ let (first, (left, right)): (Vec<_>, (Vec<_>, Vec<_>))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100794,"byte_end":100852,"line_start":2009,"line_end":2009,"column_start":5,"column_end":63}},{"value":"/     = (0..8).into_par_iter().map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100857,"byte_end":100899,"line_start":2010,"line_end":2010,"column_start":5,"column_end":47}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100904,"byte_end":100931,"line_start":2011,"line_end":2011,"column_start":5,"column_end":32}},{"value":"/             (x, Either::Left(x * 4))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100936,"byte_end":100976,"line_start":2012,"line_end":2012,"column_start":5,"column_end":45}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":100981,"byte_end":101001,"line_start":2013,"line_end":2013,"column_start":5,"column_end":25}},{"value":"/             (-x, Either::Right(x * 3))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101006,"byte_end":101048,"line_start":2014,"line_end":2014,"column_start":5,"column_end":47}},{"value":"/         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101053,"byte_end":101066,"line_start":2015,"line_end":2015,"column_start":5,"column_end":18}},{"value":"/     }).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101071,"byte_end":101092,"line_start":2016,"line_end":2016,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101097,"byte_end":101100,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first, [0, -1, 2, -3, 4, -5, 6, -7]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101105,"byte_end":101157,"line_start":2018,"line_end":2018,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101162,"byte_end":101199,"line_start":2019,"line_end":2019,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101204,"byte_end":101242,"line_start":2020,"line_end":2020,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101247,"byte_end":101254,"line_start":2021,"line_end":2021,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101259,"byte_end":101262,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ All of that can _also_ be combined with short-circuiting collection of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101267,"byte_end":101341,"line_start":2023,"line_end":2023,"column_start":5,"column_end":79}},{"value":"/ `Result` or `Option` types:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101346,"byte_end":101377,"line_start":2024,"line_end":2024,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101382,"byte_end":101385,"line_start":2025,"line_end":2025,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101390,"byte_end":101397,"line_start":2026,"line_end":2026,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101402,"byte_end":101428,"line_start":2027,"line_end":2027,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101433,"byte_end":101461,"line_start":2028,"line_end":2028,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101466,"byte_end":101469,"line_start":2029,"line_end":2029,"column_start":5,"column_end":8}},{"value":"/ let result: Result<(Vec<_>, (Vec<_>, Vec<_>)), _>","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101474,"byte_end":101527,"line_start":2030,"line_end":2030,"column_start":5,"column_end":58}},{"value":"/     = (0..8).into_par_iter().map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101532,"byte_end":101574,"line_start":2031,"line_end":2031,"column_start":5,"column_end":47}},{"value":"/         if x > 5 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101579,"byte_end":101601,"line_start":2032,"line_end":2032,"column_start":5,"column_end":27}},{"value":"/             Err(x)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101606,"byte_end":101628,"line_start":2033,"line_end":2033,"column_start":5,"column_end":27}},{"value":"/         } else if x % 2 == 0 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101633,"byte_end":101667,"line_start":2034,"line_end":2034,"column_start":5,"column_end":39}},{"value":"/             Ok((x, Either::Left(x * 4)))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101672,"byte_end":101716,"line_start":2035,"line_end":2035,"column_start":5,"column_end":49}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101721,"byte_end":101741,"line_start":2036,"line_end":2036,"column_start":5,"column_end":25}},{"value":"/             Ok((-x, Either::Right(x * 3)))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101746,"byte_end":101792,"line_start":2037,"line_end":2037,"column_start":5,"column_end":51}},{"value":"/         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101797,"byte_end":101810,"line_start":2038,"line_end":2038,"column_start":5,"column_end":18}},{"value":"/     }).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101815,"byte_end":101836,"line_start":2039,"line_end":2039,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101841,"byte_end":101844,"line_start":2040,"line_end":2040,"column_start":5,"column_end":8}},{"value":"/ let error = result.unwrap_err();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101849,"byte_end":101885,"line_start":2041,"line_end":2041,"column_start":5,"column_end":41}},{"value":"/ assert!(error == 6 || error == 7);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101890,"byte_end":101928,"line_start":2042,"line_end":2042,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":101933,"byte_end":101940,"line_start":2043,"line_end":2043,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4980},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103207,"byte_end":103212,"line_start":2085,"line_end":2085,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"fn unzip<A, B, FromA, FromB>(Self) -> (FromA, FromB) where\nSelf: ParallelIterator<Item = (A, B)>, FromA: Default + Send +\nParallelExtend<A>, FromB: Default + Send + ParallelExtend<B>, A: Send, B: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102073,"byte_end":102141,"line_start":2051,"line_end":2051,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102146,"byte_end":102178,"line_start":2052,"line_end":2052,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102183,"byte_end":102186,"line_start":2053,"line_end":2053,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102191,"byte_end":102258,"line_start":2054,"line_end":2054,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102263,"byte_end":102326,"line_start":2055,"line_end":2055,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102331,"byte_end":102391,"line_start":2056,"line_end":2056,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102396,"byte_end":102461,"line_start":2057,"line_end":2057,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102466,"byte_end":102469,"line_start":2058,"line_end":2058,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102474,"byte_end":102488,"line_start":2059,"line_end":2059,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102493,"byte_end":102496,"line_start":2060,"line_end":2060,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102501,"byte_end":102508,"line_start":2061,"line_end":2061,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102513,"byte_end":102539,"line_start":2062,"line_end":2062,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102544,"byte_end":102547,"line_start":2063,"line_end":2063,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102552,"byte_end":102597,"line_start":2064,"line_end":2064,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102602,"byte_end":102605,"line_start":2065,"line_end":2065,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102610,"byte_end":102682,"line_start":2066,"line_end":2066,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102687,"byte_end":102690,"line_start":2067,"line_end":2067,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102695,"byte_end":102730,"line_start":2068,"line_end":2068,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102735,"byte_end":102771,"line_start":2069,"line_end":2069,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102776,"byte_end":102783,"line_start":2070,"line_end":2070,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102788,"byte_end":102791,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ Nested pairs can be unzipped too.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102796,"byte_end":102833,"line_start":2072,"line_end":2072,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102838,"byte_end":102841,"line_start":2073,"line_end":2073,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102846,"byte_end":102853,"line_start":2074,"line_end":2074,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102858,"byte_end":102884,"line_start":2075,"line_end":2075,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102889,"byte_end":102892,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ let (values, (squares, cubes)): (Vec<_>, (Vec<_>, Vec<_>)) = (0..4).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102897,"byte_end":102984,"line_start":2077,"line_end":2077,"column_start":5,"column_end":92}},{"value":"/     .map(|i| (i, (i * i, i * i * i)))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":102989,"byte_end":103030,"line_start":2078,"line_end":2078,"column_start":5,"column_end":46}},{"value":"/     .unzip();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103035,"byte_end":103052,"line_start":2079,"line_end":2079,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103057,"byte_end":103060,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(values, [0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103065,"byte_end":103102,"line_start":2081,"line_end":2081,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(squares, [0, 1, 4, 9]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103107,"byte_end":103145,"line_start":2082,"line_end":2082,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(cubes, [0, 1, 8, 27]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103150,"byte_end":103187,"line_start":2083,"line_end":2083,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103192,"byte_end":103199,"line_start":2084,"line_end":2084,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4985},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104317,"byte_end":104326,"line_start":2115,"line_end":2115,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"fn partition<A, B, P>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<Self::Item>, B: Default + Send + ParallelExtend<Self::Item>,\nP: for<'_> Fn(&'_ Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103494,"byte_end":103566,"line_start":2096,"line_end":2096,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103571,"byte_end":103644,"line_start":2097,"line_end":2097,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103649,"byte_end":103719,"line_start":2098,"line_end":2098,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103724,"byte_end":103727,"line_start":2099,"line_end":2099,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103732,"byte_end":103805,"line_start":2100,"line_end":2100,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103810,"byte_end":103884,"line_start":2101,"line_end":2101,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103889,"byte_end":103961,"line_start":2102,"line_end":2102,"column_start":5,"column_end":77}},{"value":"/ that used type inference assuming the two were the same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":103966,"byte_end":104026,"line_start":2103,"line_end":2103,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104031,"byte_end":104034,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104039,"byte_end":104053,"line_start":2105,"line_end":2105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104058,"byte_end":104061,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104066,"byte_end":104073,"line_start":2107,"line_end":2107,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104078,"byte_end":104104,"line_start":2108,"line_end":2108,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104109,"byte_end":104112,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104117,"byte_end":104208,"line_start":2110,"line_end":2110,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104213,"byte_end":104216,"line_start":2111,"line_end":2111,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104221,"byte_end":104256,"line_start":2112,"line_end":2112,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104261,"byte_end":104297,"line_start":2113,"line_end":2113,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104302,"byte_end":104309,"line_start":2114,"line_end":2114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4989},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106046,"byte_end":106059,"line_start":2167,"line_end":2167,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"fn partition_map<A, B, P, L, R>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<L>, B: Default + Send + ParallelExtend<R>, P: Fn(Self::Item) ->\nEither<L, R> + Sync + Send, L: Send, R: Send","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104597,"byte_end":104668,"line_start":2124,"line_end":2124,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104673,"byte_end":104745,"line_start":2125,"line_end":2125,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104750,"byte_end":104820,"line_start":2126,"line_end":2126,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104825,"byte_end":104828,"line_start":2127,"line_end":2127,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104833,"byte_end":104847,"line_start":2128,"line_end":2128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104852,"byte_end":104855,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104860,"byte_end":104867,"line_start":2130,"line_end":2130,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104872,"byte_end":104898,"line_start":2131,"line_end":2131,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104903,"byte_end":104931,"line_start":2132,"line_end":2132,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104936,"byte_end":104939,"line_start":2133,"line_end":2133,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":104944,"byte_end":105008,"line_start":2134,"line_end":2134,"column_start":5,"column_end":69}},{"value":"/     .partition_map(|x| {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105013,"byte_end":105041,"line_start":2135,"line_end":2135,"column_start":5,"column_end":33}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105046,"byte_end":105073,"line_start":2136,"line_end":2136,"column_start":5,"column_end":32}},{"value":"/             Either::Left(x * 4)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105078,"byte_end":105113,"line_start":2137,"line_end":2137,"column_start":5,"column_end":40}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105118,"byte_end":105138,"line_start":2138,"line_end":2138,"column_start":5,"column_end":25}},{"value":"/             Either::Right(x * 3)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105143,"byte_end":105179,"line_start":2139,"line_end":2139,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105184,"byte_end":105197,"line_start":2140,"line_end":2140,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105202,"byte_end":105213,"line_start":2141,"line_end":2141,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105218,"byte_end":105221,"line_start":2142,"line_end":2142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105226,"byte_end":105263,"line_start":2143,"line_end":2143,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105268,"byte_end":105306,"line_start":2144,"line_end":2144,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105311,"byte_end":105318,"line_start":2145,"line_end":2145,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105323,"byte_end":105326,"line_start":2146,"line_end":2146,"column_start":5,"column_end":8}},{"value":"/ Nested `Either` enums can be split as well.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105331,"byte_end":105378,"line_start":2147,"line_end":2147,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105383,"byte_end":105386,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105391,"byte_end":105398,"line_start":2149,"line_end":2149,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105403,"byte_end":105429,"line_start":2150,"line_end":2150,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105434,"byte_end":105465,"line_start":2151,"line_end":2151,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105470,"byte_end":105473,"line_start":2152,"line_end":2152,"column_start":5,"column_end":8}},{"value":"/ let ((fizzbuzz, fizz), (buzz, other)): ((Vec<_>, Vec<_>), (Vec<_>, Vec<_>)) = (1..20)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105478,"byte_end":105567,"line_start":2153,"line_end":2153,"column_start":5,"column_end":94}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105572,"byte_end":105596,"line_start":2154,"line_end":2154,"column_start":5,"column_end":29}},{"value":"/     .partition_map(|x| match (x % 3, x % 5) {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105601,"byte_end":105650,"line_start":2155,"line_end":2155,"column_start":5,"column_end":54}},{"value":"/         (0, 0) => Left(Left(x)),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105655,"byte_end":105691,"line_start":2156,"line_end":2156,"column_start":5,"column_end":41}},{"value":"/         (0, _) => Left(Right(x)),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105696,"byte_end":105733,"line_start":2157,"line_end":2157,"column_start":5,"column_end":42}},{"value":"/         (_, 0) => Right(Left(x)),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105738,"byte_end":105775,"line_start":2158,"line_end":2158,"column_start":5,"column_end":42}},{"value":"/         (_, _) => Right(Right(x)),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105780,"byte_end":105818,"line_start":2159,"line_end":2159,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105823,"byte_end":105834,"line_start":2160,"line_end":2160,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105839,"byte_end":105842,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(fizzbuzz, [15]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105847,"byte_end":105878,"line_start":2162,"line_end":2162,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(fizz, [3, 6, 9, 12, 18]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105883,"byte_end":105923,"line_start":2163,"line_end":2163,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buzz, [5, 10]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105928,"byte_end":105958,"line_start":2164,"line_end":2164,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(other, [1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":105963,"byte_end":106026,"line_start":2165,"line_end":2165,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106031,"byte_end":106038,"line_start":2166,"line_end":2166,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4995},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106692,"byte_end":106703,"line_start":2190,"line_end":2190,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self::Item: Clone","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106363,"byte_end":106432,"line_start":2178,"line_end":2178,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106437,"byte_end":106440,"line_start":2179,"line_end":2179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106445,"byte_end":106459,"line_start":2180,"line_end":2180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106464,"byte_end":106467,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106472,"byte_end":106479,"line_start":2182,"line_end":2182,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106484,"byte_end":106510,"line_start":2183,"line_end":2183,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106515,"byte_end":106518,"line_start":2184,"line_end":2184,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106523,"byte_end":106549,"line_start":2185,"line_end":2185,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106554,"byte_end":106618,"line_start":2186,"line_end":2186,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106623,"byte_end":106626,"line_start":2187,"line_end":2187,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106631,"byte_end":106672,"line_start":2188,"line_end":2188,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106677,"byte_end":106684,"line_start":2189,"line_end":2189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4996},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107429,"byte_end":107444,"line_start":2209,"line_end":2209,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106846,"byte_end":106910,"line_start":2197,"line_end":2197,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106915,"byte_end":106971,"line_start":2198,"line_end":2198,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106976,"byte_end":106979,"line_start":2199,"line_end":2199,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":106984,"byte_end":107045,"line_start":2200,"line_end":2200,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107050,"byte_end":107115,"line_start":2201,"line_end":2201,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107120,"byte_end":107179,"line_start":2202,"line_end":2202,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107184,"byte_end":107223,"line_start":2203,"line_end":2203,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107228,"byte_end":107231,"line_start":2204,"line_end":2204,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107236,"byte_end":107302,"line_start":2205,"line_end":2205,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107307,"byte_end":107321,"line_start":2206,"line_end":2206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107326,"byte_end":107329,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107334,"byte_end":107421,"line_start":2208,"line_end":2208,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":4998},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108331,"byte_end":108338,"line_start":2227,"line_end":2227,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107537,"byte_end":107601,"line_start":2213,"line_end":2213,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107606,"byte_end":107662,"line_start":2214,"line_end":2214,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107667,"byte_end":107670,"line_start":2215,"line_end":2215,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107675,"byte_end":107742,"line_start":2216,"line_end":2216,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107747,"byte_end":107816,"line_start":2217,"line_end":2217,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107821,"byte_end":107892,"line_start":2218,"line_end":2218,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107897,"byte_end":107967,"line_start":2219,"line_end":2219,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":107972,"byte_end":108041,"line_start":2220,"line_end":2220,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108046,"byte_end":108113,"line_start":2221,"line_end":2221,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108118,"byte_end":108152,"line_start":2222,"line_end":2222,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108157,"byte_end":108160,"line_start":2223,"line_end":2223,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108165,"byte_end":108229,"line_start":2224,"line_end":2224,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108234,"byte_end":108289,"line_start":2225,"line_end":2225,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108294,"byte_end":108323,"line_start":2226,"line_end":2226,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5003},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108494,"byte_end":108507,"line_start":2236,"line_end":2236,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<T as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> T","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5004},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108908,"byte_end":108931,"line_start":2248,"line_end":2248,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":5005},{"krate":0,"index":5006},{"krate":0,"index":5009},{"krate":0,"index":5011},{"krate":0,"index":5013},{"krate":0,"index":5015},{"krate":0,"index":5017},{"krate":0,"index":5018},{"krate":0,"index":5022},{"krate":0,"index":5025},{"krate":0,"index":5030},{"krate":0,"index":5036},{"krate":0,"index":5041},{"krate":0,"index":5043},{"krate":0,"index":5045},{"krate":0,"index":5047},{"krate":0,"index":5049},{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5053},{"krate":0,"index":5054},{"krate":0,"index":5055},{"krate":0,"index":5058},{"krate":0,"index":5061},{"krate":0,"index":5064},{"krate":0,"index":5066},{"krate":0,"index":5068},{"krate":0,"index":5069},{"krate":0,"index":5070},{"krate":0,"index":5071},{"krate":0,"index":5072},{"krate":0,"index":5074}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108543,"byte_end":108609,"line_start":2241,"line_end":2241,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108610,"byte_end":108675,"line_start":2242,"line_end":2242,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108676,"byte_end":108693,"line_start":2243,"line_end":2243,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108694,"byte_end":108697,"line_start":2244,"line_end":2244,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64`, `i64`, `u128`, or `i128` ranges","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108698,"byte_end":108770,"line_start":2245,"line_end":2245,"column_start":1,"column_end":73}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108859,"byte_end":108897,"line_start":2247,"line_end":2247,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":5005},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109540,"byte_end":109556,"line_start":2267,"line_end":2267,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"fn collect_into_vec<'_>(Self, &'_ mut Vec<Self::Item>)","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108956,"byte_end":109015,"line_start":2249,"line_end":2249,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109020,"byte_end":109079,"line_start":2250,"line_end":2250,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109084,"byte_end":109149,"line_start":2251,"line_end":2251,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109154,"byte_end":109220,"line_start":2252,"line_end":2252,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109225,"byte_end":109228,"line_start":2253,"line_end":2253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109233,"byte_end":109247,"line_start":2254,"line_end":2254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109252,"byte_end":109255,"line_start":2255,"line_end":2255,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109260,"byte_end":109267,"line_start":2256,"line_end":2256,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109272,"byte_end":109298,"line_start":2257,"line_end":2257,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109303,"byte_end":109306,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109311,"byte_end":109350,"line_start":2259,"line_end":2259,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109355,"byte_end":109390,"line_start":2260,"line_end":2260,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109395,"byte_end":109398,"line_start":2261,"line_end":2261,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109403,"byte_end":109429,"line_start":2262,"line_end":2262,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109434,"byte_end":109470,"line_start":2263,"line_end":2263,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109475,"byte_end":109478,"line_start":2264,"line_end":2264,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109483,"byte_end":109520,"line_start":2265,"line_end":2265,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109525,"byte_end":109532,"line_start":2266,"line_end":2266,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5006},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110366,"byte_end":110381,"line_start":2292,"line_end":2292,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"fn unzip_into_vecs<A, B, '_, '_>(Self, &'_ mut Vec<A>, &'_ mut Vec<B>) where\nSelf: IndexedParallelIterator<Item = (A, B)>, A: Send, B: Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109655,"byte_end":109712,"line_start":2271,"line_end":2271,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109717,"byte_end":109779,"line_start":2272,"line_end":2272,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109784,"byte_end":109850,"line_start":2273,"line_end":2273,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109855,"byte_end":109922,"line_start":2274,"line_end":2274,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109927,"byte_end":109930,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109935,"byte_end":109949,"line_start":2276,"line_end":2276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109954,"byte_end":109957,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109962,"byte_end":109969,"line_start":2278,"line_end":2278,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":109974,"byte_end":110000,"line_start":2279,"line_end":2279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110005,"byte_end":110008,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110013,"byte_end":110052,"line_start":2281,"line_end":2281,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110057,"byte_end":110089,"line_start":2282,"line_end":2282,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110094,"byte_end":110127,"line_start":2283,"line_end":2283,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110132,"byte_end":110135,"line_start":2284,"line_end":2284,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110140,"byte_end":110168,"line_start":2285,"line_end":2285,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110173,"byte_end":110193,"line_start":2286,"line_end":2286,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110198,"byte_end":110246,"line_start":2287,"line_end":2287,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110251,"byte_end":110254,"line_start":2288,"line_end":2288,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110259,"byte_end":110297,"line_start":2289,"line_end":2289,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110302,"byte_end":110346,"line_start":2290,"line_end":2290,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110351,"byte_end":110358,"line_start":2291,"line_end":2291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5009},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111193,"byte_end":111196,"line_start":2319,"line_end":2319,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"fn zip<Z>(Self, Z) -> Zip<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Iterates over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterates over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110601,"byte_end":110664,"line_start":2301,"line_end":2301,"column_start":5,"column_end":68}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110669,"byte_end":110735,"line_start":2302,"line_end":2302,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110740,"byte_end":110799,"line_start":2303,"line_end":2303,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110804,"byte_end":110868,"line_start":2304,"line_end":2304,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110873,"byte_end":110892,"line_start":2305,"line_end":2305,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110897,"byte_end":110900,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110905,"byte_end":110919,"line_start":2307,"line_end":2307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110924,"byte_end":110927,"line_start":2308,"line_end":2308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110932,"byte_end":110939,"line_start":2309,"line_end":2309,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110944,"byte_end":110970,"line_start":2310,"line_end":2310,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110975,"byte_end":110978,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":110983,"byte_end":111014,"line_start":2312,"line_end":2312,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111019,"byte_end":111043,"line_start":2313,"line_end":2313,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111048,"byte_end":111081,"line_start":2314,"line_end":2314,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111086,"byte_end":111105,"line_start":2315,"line_end":2315,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111110,"byte_end":111113,"line_start":2316,"line_end":2316,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111118,"byte_end":111173,"line_start":2317,"line_end":2317,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111178,"byte_end":111185,"line_start":2318,"line_end":2318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5011},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111990,"byte_end":111996,"line_start":2347,"line_end":2347,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"fn zip_eq<Z>(Self, Z) -> ZipEq<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111388,"byte_end":111465,"line_start":2327,"line_end":2327,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111470,"byte_end":111473,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111478,"byte_end":111490,"line_start":2329,"line_end":2329,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111495,"byte_end":111557,"line_start":2330,"line_end":2330,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111562,"byte_end":111565,"line_start":2331,"line_end":2331,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111570,"byte_end":111589,"line_start":2332,"line_end":2332,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111594,"byte_end":111620,"line_start":2333,"line_end":2333,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111625,"byte_end":111628,"line_start":2334,"line_end":2334,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111633,"byte_end":111653,"line_start":2335,"line_end":2335,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111658,"byte_end":111681,"line_start":2336,"line_end":2336,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111686,"byte_end":111720,"line_start":2337,"line_end":2337,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111725,"byte_end":111759,"line_start":2338,"line_end":2338,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111764,"byte_end":111767,"line_start":2339,"line_end":2339,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111772,"byte_end":111794,"line_start":2340,"line_end":2340,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111799,"byte_end":111869,"line_start":2341,"line_end":2341,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111874,"byte_end":111877,"line_start":2342,"line_end":2342,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111882,"byte_end":111913,"line_start":2343,"line_end":2343,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111918,"byte_end":111950,"line_start":2344,"line_end":2344,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111955,"byte_end":111962,"line_start":2345,"line_end":2345,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":111967,"byte_end":111982,"line_start":2346,"line_end":2346,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5013},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112928,"byte_end":112938,"line_start":2375,"line_end":2375,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"fn interleave<I>(Self, I) -> Interleave<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112367,"byte_end":112428,"line_start":2361,"line_end":2361,"column_start":5,"column_end":66}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112433,"byte_end":112497,"line_start":2362,"line_end":2362,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112502,"byte_end":112567,"line_start":2363,"line_end":2363,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112572,"byte_end":112637,"line_start":2364,"line_end":2364,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112642,"byte_end":112661,"line_start":2365,"line_end":2365,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112666,"byte_end":112669,"line_start":2366,"line_end":2366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112674,"byte_end":112688,"line_start":2367,"line_end":2367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112693,"byte_end":112696,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112701,"byte_end":112708,"line_start":2369,"line_end":2369,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112713,"byte_end":112739,"line_start":2370,"line_end":2370,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112744,"byte_end":112792,"line_start":2371,"line_end":2371,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112797,"byte_end":112861,"line_start":2372,"line_end":2372,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112866,"byte_end":112908,"line_start":2373,"line_end":2373,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":112913,"byte_end":112920,"line_start":2374,"line_end":2374,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5015},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113556,"byte_end":113575,"line_start":2394,"line_end":2394,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"fn interleave_shortest<I>(Self, I) -> InterleaveShortest<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113180,"byte_end":113241,"line_start":2383,"line_end":2383,"column_start":5,"column_end":66}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113246,"byte_end":113283,"line_start":2384,"line_end":2384,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113288,"byte_end":113291,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113296,"byte_end":113310,"line_start":2386,"line_end":2386,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113315,"byte_end":113318,"line_start":2387,"line_end":2387,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113323,"byte_end":113330,"line_start":2388,"line_end":2388,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113335,"byte_end":113361,"line_start":2389,"line_end":2389,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113366,"byte_end":113414,"line_start":2390,"line_end":2390,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113419,"byte_end":113492,"line_start":2391,"line_end":2391,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113497,"byte_end":113536,"line_start":2392,"line_end":2392,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113541,"byte_end":113548,"line_start":2393,"line_end":2393,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5017},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114756,"byte_end":114762,"line_start":2422,"line_end":2422,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"fn chunks(Self, usize) -> Chunks<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Splits an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Splits an iterator up into fixed-size chunks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113833,"byte_end":113882,"line_start":2402,"line_end":2402,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113887,"byte_end":113890,"line_start":2403,"line_end":2403,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113895,"byte_end":113971,"line_start":2404,"line_end":2404,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":113976,"byte_end":114055,"line_start":2405,"line_end":2405,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114060,"byte_end":114112,"line_start":2406,"line_end":2406,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114117,"byte_end":114120,"line_start":2407,"line_end":2407,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114125,"byte_end":114203,"line_start":2408,"line_end":2408,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114208,"byte_end":114282,"line_start":2409,"line_end":2409,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114287,"byte_end":114290,"line_start":2410,"line_end":2410,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114295,"byte_end":114368,"line_start":2411,"line_end":2411,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114373,"byte_end":114457,"line_start":2412,"line_end":2412,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114462,"byte_end":114465,"line_start":2413,"line_end":2413,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114470,"byte_end":114484,"line_start":2414,"line_end":2414,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114489,"byte_end":114492,"line_start":2415,"line_end":2415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114497,"byte_end":114504,"line_start":2416,"line_end":2416,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114509,"byte_end":114535,"line_start":2417,"line_end":2417,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114540,"byte_end":114588,"line_start":2418,"line_end":2418,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114593,"byte_end":114658,"line_start":2419,"line_end":2419,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114663,"byte_end":114736,"line_start":2420,"line_end":2420,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114741,"byte_end":114748,"line_start":2421,"line_end":2421,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5018},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115887,"byte_end":115898,"line_start":2458,"line_end":2458,"column_start":8,"column_end":19},"name":"fold_chunks","qualname":"::iter::IndexedParallelIterator::fold_chunks","value":"fn fold_chunks<T, ID, F>(Self, usize, ID, F) -> FoldChunks<Self, ID, F> where\nID: Fn() -> T + Send + Sync, F: Fn(T, Self::Item) -> T + Send + Sync, T: Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Splits an iterator into fixed-size chunks, performing a sequential [`fold()`] on\n each chunk.","sig":null,"attributes":[{"value":"/ Splits an iterator into fixed-size chunks, performing a sequential [`fold()`] on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":114920,"byte_end":115004,"line_start":2427,"line_end":2427,"column_start":5,"column_end":89}},{"value":"/ each chunk.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115009,"byte_end":115024,"line_start":2428,"line_end":2428,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115029,"byte_end":115032,"line_start":2429,"line_end":2429,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that produces a folded result for each chunk of items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115037,"byte_end":115114,"line_start":2430,"line_end":2430,"column_start":5,"column_end":82}},{"value":"/ produced by this iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115119,"byte_end":115149,"line_start":2431,"line_end":2431,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115154,"byte_end":115157,"line_start":2432,"line_end":2432,"column_start":5,"column_end":8}},{"value":"/ This works essentially like:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115162,"byte_end":115194,"line_start":2433,"line_end":2433,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115199,"byte_end":115202,"line_start":2434,"line_end":2434,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115207,"byte_end":115218,"line_start":2435,"line_end":2435,"column_start":5,"column_end":16}},{"value":"/ iter.chunks(chunk_size)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115223,"byte_end":115250,"line_start":2436,"line_end":2436,"column_start":5,"column_end":32}},{"value":"/     .map(|chunk|","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115255,"byte_end":115275,"line_start":2437,"line_end":2437,"column_start":5,"column_end":25}},{"value":"/         chunk.into_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115280,"byte_end":115309,"line_start":2438,"line_end":2438,"column_start":5,"column_end":34}},{"value":"/             .fold(identity, fold_op)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115314,"byte_end":115354,"line_start":2439,"line_end":2439,"column_start":5,"column_end":45}},{"value":"/     )","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115359,"byte_end":115368,"line_start":2440,"line_end":2440,"column_start":5,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115373,"byte_end":115380,"line_start":2441,"line_end":2441,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115385,"byte_end":115388,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ except there is no per-chunk allocation overhead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115393,"byte_end":115446,"line_start":2443,"line_end":2443,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115451,"byte_end":115454,"line_start":2444,"line_end":2444,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: std::iter::Iterator#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115459,"byte_end":115506,"line_start":2445,"line_end":2445,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115511,"byte_end":115514,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `chunk_size` is 0.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115519,"byte_end":115555,"line_start":2447,"line_end":2447,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115560,"byte_end":115563,"line_start":2448,"line_end":2448,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115568,"byte_end":115582,"line_start":2449,"line_end":2449,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115587,"byte_end":115590,"line_start":2450,"line_end":2450,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115595,"byte_end":115602,"line_start":2451,"line_end":2451,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115607,"byte_end":115633,"line_start":2452,"line_end":2452,"column_start":5,"column_end":31}},{"value":"/ let nums = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115638,"byte_end":115689,"line_start":2453,"line_end":2453,"column_start":5,"column_end":56}},{"value":"/ let chunk_sums = nums.into_par_iter().fold_chunks(2, || 0, |a, n| a + n).collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115694,"byte_end":115791,"line_start":2454,"line_end":2454,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(chunk_sums, vec![3, 7, 11, 15, 19]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115796,"byte_end":115847,"line_start":2455,"line_end":2455,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115852,"byte_end":115859,"line_start":2456,"line_end":2456,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":115864,"byte_end":115879,"line_start":2457,"line_end":2457,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5022},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117168,"byte_end":117184,"line_start":2496,"line_end":2496,"column_start":8,"column_end":24},"name":"fold_chunks_with","qualname":"::iter::IndexedParallelIterator::fold_chunks_with","value":"fn fold_chunks_with<T, F>(Self, usize, T, F) -> FoldChunksWith<Self, T, F>\nwhere T: Send + Clone, F: Fn(T, Self::Item) -> T + Send + Sync","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Splits an iterator into fixed-size chunks, performing a sequential [`fold()`] on\n each chunk.","sig":null,"attributes":[{"value":"/ Splits an iterator into fixed-size chunks, performing a sequential [`fold()`] on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116282,"byte_end":116366,"line_start":2473,"line_end":2473,"column_start":5,"column_end":89}},{"value":"/ each chunk.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116371,"byte_end":116386,"line_start":2474,"line_end":2474,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116391,"byte_end":116394,"line_start":2475,"line_end":2475,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that produces a folded result for each chunk of items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116399,"byte_end":116476,"line_start":2476,"line_end":2476,"column_start":5,"column_end":82}},{"value":"/ produced by this iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116481,"byte_end":116511,"line_start":2477,"line_end":2477,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116516,"byte_end":116519,"line_start":2478,"line_end":2478,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold_chunks(chunk_size, || init.clone(), fold_op)`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116524,"byte_end":116608,"line_start":2479,"line_end":2479,"column_start":5,"column_end":89}},{"value":"/ except it doesn't require the `init` type to be `Sync`, nor any other form of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116613,"byte_end":116694,"line_start":2480,"line_end":2480,"column_start":5,"column_end":86}},{"value":"/ added synchronization.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116699,"byte_end":116725,"line_start":2481,"line_end":2481,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116730,"byte_end":116733,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: std::iter::Iterator#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116738,"byte_end":116785,"line_start":2483,"line_end":2483,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116790,"byte_end":116793,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `chunk_size` is 0.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116798,"byte_end":116834,"line_start":2485,"line_end":2485,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116839,"byte_end":116842,"line_start":2486,"line_end":2486,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116847,"byte_end":116861,"line_start":2487,"line_end":2487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116866,"byte_end":116869,"line_start":2488,"line_end":2488,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116874,"byte_end":116881,"line_start":2489,"line_end":2489,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116886,"byte_end":116912,"line_start":2490,"line_end":2490,"column_start":5,"column_end":31}},{"value":"/ let nums = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116917,"byte_end":116968,"line_start":2491,"line_end":2491,"column_start":5,"column_end":56}},{"value":"/ let chunk_sums = nums.into_par_iter().fold_chunks_with(2, 0, |a, n| a + n).collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":116973,"byte_end":117072,"line_start":2492,"line_end":2492,"column_start":5,"column_end":104}},{"value":"/ assert_eq!(chunk_sums, vec![3, 7, 11, 15, 19]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117077,"byte_end":117128,"line_start":2493,"line_end":2493,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117133,"byte_end":117140,"line_start":2494,"line_end":2494,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117145,"byte_end":117160,"line_start":2495,"line_end":2495,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5025},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117987,"byte_end":117990,"line_start":2524,"line_end":2524,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"fn cmp<I>(Self, I) -> Ordering where I: IntoParallelIterator<Item =\nSelf::Item>, I::Iter: IndexedParallelIterator, Self::Item: Ord","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117533,"byte_end":117617,"line_start":2510,"line_end":2510,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117622,"byte_end":117634,"line_start":2511,"line_end":2511,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117639,"byte_end":117642,"line_start":2512,"line_end":2512,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117647,"byte_end":117661,"line_start":2513,"line_end":2513,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117666,"byte_end":117669,"line_start":2514,"line_end":2514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117674,"byte_end":117681,"line_start":2515,"line_end":2515,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117686,"byte_end":117712,"line_start":2516,"line_end":2516,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117717,"byte_end":117747,"line_start":2517,"line_end":2517,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117752,"byte_end":117755,"line_start":2518,"line_end":2518,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117760,"byte_end":117786,"line_start":2519,"line_end":2519,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117791,"byte_end":117846,"line_start":2520,"line_end":2520,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117851,"byte_end":117907,"line_start":2521,"line_end":2521,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117912,"byte_end":117967,"line_start":2522,"line_end":2522,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":117972,"byte_end":117979,"line_start":2523,"line_end":2523,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5030},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119219,"byte_end":119230,"line_start":2564,"line_end":2564,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"fn partial_cmp<I>(Self, I) -> Option<Ordering> where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118605,"byte_end":118689,"line_start":2548,"line_end":2548,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118694,"byte_end":118706,"line_start":2549,"line_end":2549,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118711,"byte_end":118714,"line_start":2550,"line_end":2550,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118719,"byte_end":118733,"line_start":2551,"line_end":2551,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118738,"byte_end":118741,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118746,"byte_end":118753,"line_start":2553,"line_end":2553,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118758,"byte_end":118784,"line_start":2554,"line_end":2554,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118789,"byte_end":118819,"line_start":2555,"line_end":2555,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118824,"byte_end":118846,"line_start":2556,"line_end":2556,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118851,"byte_end":118854,"line_start":2557,"line_end":2557,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118859,"byte_end":118891,"line_start":2558,"line_end":2558,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118896,"byte_end":118971,"line_start":2559,"line_end":2559,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":118976,"byte_end":119052,"line_start":2560,"line_end":2560,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119057,"byte_end":119130,"line_start":2561,"line_end":2561,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119135,"byte_end":119199,"line_start":2562,"line_end":2562,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119204,"byte_end":119211,"line_start":2563,"line_end":2563,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5036},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120009,"byte_end":120011,"line_start":2590,"line_end":2590,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"fn eq<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119906,"byte_end":119963,"line_start":2588,"line_end":2588,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":119968,"byte_end":120001,"line_start":2589,"line_end":2589,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5041},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120513,"byte_end":120515,"line_start":2607,"line_end":2607,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"fn ne<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120408,"byte_end":120465,"line_start":2605,"line_end":2605,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120470,"byte_end":120505,"line_start":2606,"line_end":2606,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5043},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120832,"byte_end":120834,"line_start":2618,"line_end":2618,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"fn lt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120709,"byte_end":120766,"line_start":2616,"line_end":2616,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":120771,"byte_end":120824,"line_start":2617,"line_end":2617,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5045},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121173,"byte_end":121175,"line_start":2629,"line_end":2629,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"fn le<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121061,"byte_end":121118,"line_start":2627,"line_end":2627,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121123,"byte_end":121165,"line_start":2628,"line_end":2628,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5047},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121583,"byte_end":121585,"line_start":2641,"line_end":2641,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"fn gt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121457,"byte_end":121514,"line_start":2639,"line_end":2639,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121519,"byte_end":121575,"line_start":2640,"line_end":2640,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":5049},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121927,"byte_end":121929,"line_start":2652,"line_end":2652,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"fn ge<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121815,"byte_end":121872,"line_start":2650,"line_end":2650,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":121877,"byte_end":121919,"line_start":2651,"line_end":2651,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122583,"byte_end":122592,"line_start":2677,"line_end":2677,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"fn enumerate(Self) -> Enumerate<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122214,"byte_end":122255,"line_start":2662,"line_end":2662,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122260,"byte_end":122263,"line_start":2663,"line_end":2663,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122268,"byte_end":122282,"line_start":2664,"line_end":2664,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122287,"byte_end":122290,"line_start":2665,"line_end":2665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122295,"byte_end":122302,"line_start":2666,"line_end":2666,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122307,"byte_end":122333,"line_start":2667,"line_end":2667,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122338,"byte_end":122341,"line_start":2668,"line_end":2668,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122346,"byte_end":122382,"line_start":2669,"line_end":2669,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122387,"byte_end":122417,"line_start":2670,"line_end":2670,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122422,"byte_end":122446,"line_start":2671,"line_end":2671,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122451,"byte_end":122471,"line_start":2672,"line_end":2672,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122476,"byte_end":122495,"line_start":2673,"line_end":2673,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122500,"byte_end":122503,"line_start":2674,"line_end":2674,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122508,"byte_end":122563,"line_start":2675,"line_end":2675,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122568,"byte_end":122575,"line_start":2676,"line_end":2676,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5052},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123005,"byte_end":123012,"line_start":2696,"line_end":2696,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::IndexedParallelIterator::step_by","value":"fn step_by(Self, usize) -> StepBy<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Creates an iterator that steps by the given amount","sig":null,"attributes":[{"value":"/ Creates an iterator that steps by the given amount","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122660,"byte_end":122714,"line_start":2681,"line_end":2681,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122719,"byte_end":122722,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122727,"byte_end":122741,"line_start":2683,"line_end":2683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122746,"byte_end":122749,"line_start":2684,"line_end":2684,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122754,"byte_end":122761,"line_start":2685,"line_end":2685,"column_start":5,"column_end":12}},{"value":"/use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122766,"byte_end":122791,"line_start":2686,"line_end":2686,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122796,"byte_end":122799,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ let range = (3..10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122804,"byte_end":122828,"line_start":2688,"line_end":2688,"column_start":5,"column_end":29}},{"value":"/ let result: Vec<i32> = range","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122833,"byte_end":122865,"line_start":2689,"line_end":2689,"column_start":5,"column_end":37}},{"value":"/    .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122870,"byte_end":122893,"line_start":2690,"line_end":2690,"column_start":5,"column_end":28}},{"value":"/    .step_by(3)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122898,"byte_end":122916,"line_start":2691,"line_end":2691,"column_start":5,"column_end":23}},{"value":"/    .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122921,"byte_end":122939,"line_start":2692,"line_end":2692,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122944,"byte_end":122947,"line_start":2693,"line_end":2693,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [3, 6, 9])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122952,"byte_end":122985,"line_start":2694,"line_end":2694,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":122990,"byte_end":122997,"line_start":2695,"line_end":2695,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5053},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123428,"byte_end":123432,"line_start":2714,"line_end":2714,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"fn skip(Self, usize) -> Skip<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123093,"byte_end":123151,"line_start":2700,"line_end":2700,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123156,"byte_end":123159,"line_start":2701,"line_end":2701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123164,"byte_end":123178,"line_start":2702,"line_end":2702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123183,"byte_end":123186,"line_start":2703,"line_end":2703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123191,"byte_end":123198,"line_start":2704,"line_end":2704,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123203,"byte_end":123229,"line_start":2705,"line_end":2705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123234,"byte_end":123237,"line_start":2706,"line_end":2706,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123242,"byte_end":123275,"line_start":2707,"line_end":2707,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123280,"byte_end":123304,"line_start":2708,"line_end":2708,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123309,"byte_end":123326,"line_start":2709,"line_end":2709,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123331,"byte_end":123350,"line_start":2710,"line_end":2710,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123355,"byte_end":123358,"line_start":2711,"line_end":2711,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123363,"byte_end":123408,"line_start":2712,"line_end":2712,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123413,"byte_end":123420,"line_start":2713,"line_end":2713,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5054},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123833,"byte_end":123837,"line_start":2732,"line_end":2732,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"fn take(Self, usize) -> Take<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123503,"byte_end":123562,"line_start":2718,"line_end":2718,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123567,"byte_end":123570,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123575,"byte_end":123589,"line_start":2720,"line_end":2720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123594,"byte_end":123597,"line_start":2721,"line_end":2721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123602,"byte_end":123609,"line_start":2722,"line_end":2722,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123614,"byte_end":123640,"line_start":2723,"line_end":2723,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123645,"byte_end":123648,"line_start":2724,"line_end":2724,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123653,"byte_end":123686,"line_start":2725,"line_end":2725,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123691,"byte_end":123715,"line_start":2726,"line_end":2726,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123720,"byte_end":123736,"line_start":2727,"line_end":2727,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123741,"byte_end":123760,"line_start":2728,"line_end":2728,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123765,"byte_end":123768,"line_start":2729,"line_end":2729,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123773,"byte_end":123813,"line_start":2730,"line_end":2730,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123818,"byte_end":123825,"line_start":2731,"line_end":2731,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5055},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124551,"byte_end":124563,"line_start":2754,"line_end":2754,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"fn position_any<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123908,"byte_end":123968,"line_start":2736,"line_end":2736,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":123973,"byte_end":124034,"line_start":2737,"line_end":2737,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124039,"byte_end":124101,"line_start":2738,"line_end":2738,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124106,"byte_end":124167,"line_start":2739,"line_end":2739,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124172,"byte_end":124224,"line_start":2740,"line_end":2740,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124229,"byte_end":124232,"line_start":2741,"line_end":2741,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124237,"byte_end":124251,"line_start":2742,"line_end":2742,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124256,"byte_end":124259,"line_start":2743,"line_end":2743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124264,"byte_end":124271,"line_start":2744,"line_end":2744,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124276,"byte_end":124302,"line_start":2745,"line_end":2745,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124307,"byte_end":124310,"line_start":2746,"line_end":2746,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124315,"byte_end":124340,"line_start":2747,"line_end":2747,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124345,"byte_end":124348,"line_start":2748,"line_end":2748,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124353,"byte_end":124420,"line_start":2749,"line_end":2749,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124425,"byte_end":124455,"line_start":2750,"line_end":2750,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124460,"byte_end":124463,"line_start":2751,"line_end":2751,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124468,"byte_end":124531,"line_start":2752,"line_end":2752,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124536,"byte_end":124543,"line_start":2753,"line_end":2753,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5058},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125804,"byte_end":125818,"line_start":2791,"line_end":2791,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"fn position_first<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124862,"byte_end":124935,"line_start":2767,"line_end":2767,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":124940,"byte_end":125000,"line_start":2768,"line_end":2768,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125005,"byte_end":125008,"line_start":2769,"line_end":2769,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125013,"byte_end":125076,"line_start":2770,"line_end":2770,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125081,"byte_end":125146,"line_start":2771,"line_end":2771,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125151,"byte_end":125214,"line_start":2772,"line_end":2772,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125219,"byte_end":125232,"line_start":2773,"line_end":2773,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125237,"byte_end":125240,"line_start":2774,"line_end":2774,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125245,"byte_end":125316,"line_start":2775,"line_end":2775,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125321,"byte_end":125392,"line_start":2776,"line_end":2776,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125397,"byte_end":125468,"line_start":2777,"line_end":2777,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125473,"byte_end":125511,"line_start":2778,"line_end":2778,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125516,"byte_end":125519,"line_start":2779,"line_end":2779,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125524,"byte_end":125538,"line_start":2780,"line_end":2780,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125543,"byte_end":125546,"line_start":2781,"line_end":2781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125551,"byte_end":125558,"line_start":2782,"line_end":2782,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125563,"byte_end":125589,"line_start":2783,"line_end":2783,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125594,"byte_end":125597,"line_start":2784,"line_end":2784,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125602,"byte_end":125627,"line_start":2785,"line_end":2785,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125632,"byte_end":125635,"line_start":2786,"line_end":2786,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125640,"byte_end":125706,"line_start":2787,"line_end":2787,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125711,"byte_end":125714,"line_start":2788,"line_end":2788,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125719,"byte_end":125784,"line_start":2789,"line_end":2789,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":125789,"byte_end":125796,"line_start":2790,"line_end":2790,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5061},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127025,"byte_end":127038,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"fn position_last<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126119,"byte_end":126191,"line_start":2804,"line_end":2804,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126196,"byte_end":126256,"line_start":2805,"line_end":2805,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126261,"byte_end":126264,"line_start":2806,"line_end":2806,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126269,"byte_end":126331,"line_start":2807,"line_end":2807,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126336,"byte_end":126400,"line_start":2808,"line_end":2808,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126405,"byte_end":126466,"line_start":2809,"line_end":2809,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126471,"byte_end":126484,"line_start":2810,"line_end":2810,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126489,"byte_end":126492,"line_start":2811,"line_end":2811,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126497,"byte_end":126568,"line_start":2812,"line_end":2812,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126573,"byte_end":126645,"line_start":2813,"line_end":2813,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126650,"byte_end":126718,"line_start":2814,"line_end":2814,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126723,"byte_end":126734,"line_start":2815,"line_end":2815,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126739,"byte_end":126742,"line_start":2816,"line_end":2816,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126747,"byte_end":126761,"line_start":2817,"line_end":2817,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126766,"byte_end":126769,"line_start":2818,"line_end":2818,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126774,"byte_end":126781,"line_start":2819,"line_end":2819,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126786,"byte_end":126812,"line_start":2820,"line_end":2820,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126817,"byte_end":126820,"line_start":2821,"line_end":2821,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126825,"byte_end":126850,"line_start":2822,"line_end":2822,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126855,"byte_end":126858,"line_start":2823,"line_end":2823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126863,"byte_end":126928,"line_start":2824,"line_end":2824,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126933,"byte_end":126936,"line_start":2825,"line_end":2825,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":126941,"byte_end":127005,"line_start":2826,"line_end":2826,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127010,"byte_end":127017,"line_start":2827,"line_end":2827,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5064},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127526,"byte_end":127534,"line_start":2846,"line_end":2846,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"fn position<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n\"parallel `position` does not search in order -- use `position_any`, \\\\\n                `position_first`, or `position_last`\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127357,"byte_end":127518,"line_start":2842,"line_end":2845,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":5066},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128425,"byte_end":128434,"line_start":2871,"line_end":2871,"column_start":8,"column_end":17},"name":"positions","qualname":"::iter::IndexedParallelIterator::positions","value":"fn positions<P>(Self, P) -> Positions<Self, P> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Searches for items in the parallel iterator that match the given\n predicate, and returns their indices.","sig":null,"attributes":[{"value":"/ Searches for items in the parallel iterator that match the given","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127688,"byte_end":127756,"line_start":2853,"line_end":2853,"column_start":5,"column_end":73}},{"value":"/ predicate, and returns their indices.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127761,"byte_end":127802,"line_start":2854,"line_end":2854,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127807,"byte_end":127810,"line_start":2855,"line_end":2855,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127815,"byte_end":127829,"line_start":2856,"line_end":2856,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127834,"byte_end":127837,"line_start":2857,"line_end":2857,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127842,"byte_end":127849,"line_start":2858,"line_end":2858,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127854,"byte_end":127880,"line_start":2859,"line_end":2859,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127885,"byte_end":127888,"line_start":2860,"line_end":2860,"column_start":5,"column_end":8}},{"value":"/ let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127893,"byte_end":127951,"line_start":2861,"line_end":2861,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127956,"byte_end":127959,"line_start":2862,"line_end":2862,"column_start":5,"column_end":8}},{"value":"/ // Find the positions of primes congruent to 1 modulo 6","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":127964,"byte_end":128023,"line_start":2863,"line_end":2863,"column_start":5,"column_end":64}},{"value":"/ let p1mod6: Vec<_> = primes.par_iter().positions(|&p| p % 6 == 1).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128028,"byte_end":128108,"line_start":2864,"line_end":2864,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(p1mod6, [3, 5, 7]); // primes 7, 13, and 19","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128113,"byte_end":128171,"line_start":2865,"line_end":2865,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128176,"byte_end":128179,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ // Find the positions of primes congruent to 5 modulo 6","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128184,"byte_end":128243,"line_start":2867,"line_end":2867,"column_start":5,"column_end":64}},{"value":"/ let p5mod6: Vec<_> = primes.par_iter().positions(|&p| p % 6 == 5).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128248,"byte_end":128328,"line_start":2868,"line_end":2868,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(p5mod6, [2, 4, 6, 8, 9]); // primes 5, 11, 17, 23, and 29","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128333,"byte_end":128405,"line_start":2869,"line_end":2869,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128410,"byte_end":128417,"line_start":2870,"line_end":2870,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5068},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128951,"byte_end":128954,"line_start":2893,"line_end":2893,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"fn rev(Self) -> Rev<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128596,"byte_end":128661,"line_start":2878,"line_end":2878,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128666,"byte_end":128684,"line_start":2879,"line_end":2879,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128689,"byte_end":128692,"line_start":2880,"line_end":2880,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128697,"byte_end":128711,"line_start":2881,"line_end":2881,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128716,"byte_end":128719,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128724,"byte_end":128731,"line_start":2883,"line_end":2883,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128736,"byte_end":128762,"line_start":2884,"line_end":2884,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128767,"byte_end":128770,"line_start":2885,"line_end":2885,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128775,"byte_end":128806,"line_start":2886,"line_end":2886,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128811,"byte_end":128835,"line_start":2887,"line_end":2887,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128840,"byte_end":128854,"line_start":2888,"line_end":2888,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128859,"byte_end":128878,"line_start":2889,"line_end":2889,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128883,"byte_end":128886,"line_start":2890,"line_end":2890,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128891,"byte_end":128931,"line_start":2891,"line_end":2891,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":128936,"byte_end":128943,"line_start":2892,"line_end":2892,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5069},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129774,"byte_end":129786,"line_start":2919,"line_end":2919,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"fn with_min_len(Self, usize) -> MinLen<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n rayon job.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129010,"byte_end":129077,"line_start":2897,"line_end":2897,"column_start":5,"column_end":72}},{"value":"/ rayon job.  Rayon will not split any smaller than this length, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129082,"byte_end":129152,"line_start":2898,"line_end":2898,"column_start":5,"column_end":75}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129157,"byte_end":129222,"line_start":2899,"line_end":2899,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129227,"byte_end":129230,"line_start":2900,"line_end":2900,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129235,"byte_end":129304,"line_start":2901,"line_end":2901,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129309,"byte_end":129322,"line_start":2902,"line_end":2902,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129327,"byte_end":129393,"line_start":2903,"line_end":2903,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129398,"byte_end":129427,"line_start":2904,"line_end":2904,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129432,"byte_end":129435,"line_start":2905,"line_end":2905,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129440,"byte_end":129454,"line_start":2906,"line_end":2906,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129459,"byte_end":129462,"line_start":2907,"line_end":2907,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129467,"byte_end":129474,"line_start":2908,"line_end":2908,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129479,"byte_end":129505,"line_start":2909,"line_end":2909,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129510,"byte_end":129513,"line_start":2910,"line_end":2910,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129518,"byte_end":129546,"line_start":2911,"line_end":2911,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129551,"byte_end":129575,"line_start":2912,"line_end":2912,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129580,"byte_end":129607,"line_start":2913,"line_end":2913,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129612,"byte_end":129687,"line_start":2914,"line_end":2914,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129692,"byte_end":129716,"line_start":2915,"line_end":2915,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129721,"byte_end":129724,"line_start":2916,"line_end":2916,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129729,"byte_end":129754,"line_start":2917,"line_end":2917,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129759,"byte_end":129766,"line_start":2918,"line_end":2918,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5070},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130728,"byte_end":130740,"line_start":2947,"line_end":2947,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"fn with_max_len(Self, usize) -> MaxLen<Self>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n rayon job.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129865,"byte_end":129932,"line_start":2923,"line_end":2923,"column_start":5,"column_end":72}},{"value":"/ rayon job.  Rayon will try to split at least below this length,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":129937,"byte_end":130004,"line_start":2924,"line_end":2924,"column_start":5,"column_end":72}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130009,"byte_end":130077,"line_start":2925,"line_end":2925,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130082,"byte_end":130150,"line_start":2926,"line_end":2926,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130155,"byte_end":130177,"line_start":2927,"line_end":2927,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130182,"byte_end":130185,"line_start":2928,"line_end":2928,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130190,"byte_end":130258,"line_start":2929,"line_end":2929,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130263,"byte_end":130276,"line_start":2930,"line_end":2930,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130281,"byte_end":130347,"line_start":2931,"line_end":2931,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130352,"byte_end":130381,"line_start":2932,"line_end":2932,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130386,"byte_end":130389,"line_start":2933,"line_end":2933,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130394,"byte_end":130408,"line_start":2934,"line_end":2934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130413,"byte_end":130416,"line_start":2935,"line_end":2935,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130421,"byte_end":130428,"line_start":2936,"line_end":2936,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130433,"byte_end":130459,"line_start":2937,"line_end":2937,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130464,"byte_end":130467,"line_start":2938,"line_end":2938,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130472,"byte_end":130500,"line_start":2939,"line_end":2939,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130505,"byte_end":130529,"line_start":2940,"line_end":2940,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130534,"byte_end":130561,"line_start":2941,"line_end":2941,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130566,"byte_end":130641,"line_start":2942,"line_end":2942,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130646,"byte_end":130670,"line_start":2943,"line_end":2943,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130675,"byte_end":130678,"line_start":2944,"line_end":2944,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130683,"byte_end":130708,"line_start":2945,"line_end":2945,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130713,"byte_end":130720,"line_start":2946,"line_end":2946,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5071},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131228,"byte_end":131231,"line_start":2965,"line_end":2965,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130819,"byte_end":130883,"line_start":2951,"line_end":2951,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130888,"byte_end":130927,"line_start":2952,"line_end":2952,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130932,"byte_end":130935,"line_start":2953,"line_end":2953,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130940,"byte_end":130954,"line_start":2954,"line_end":2954,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130959,"byte_end":130962,"line_start":2955,"line_end":2955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130967,"byte_end":130974,"line_start":2956,"line_end":2956,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":130979,"byte_end":131005,"line_start":2957,"line_end":2957,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131010,"byte_end":131013,"line_start":2958,"line_end":2958,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131018,"byte_end":131079,"line_start":2959,"line_end":2959,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131084,"byte_end":131119,"line_start":2960,"line_end":2960,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131124,"byte_end":131127,"line_start":2961,"line_end":2961,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131132,"byte_end":131173,"line_start":2962,"line_end":2962,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131178,"byte_end":131208,"line_start":2963,"line_end":2963,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131213,"byte_end":131220,"line_start":2964,"line_end":2964,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5072},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131995,"byte_end":132000,"line_start":2981,"line_end":2981,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131254,"byte_end":131318,"line_start":2967,"line_end":2967,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131323,"byte_end":131379,"line_start":2968,"line_end":2968,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131384,"byte_end":131387,"line_start":2969,"line_end":2969,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131392,"byte_end":131453,"line_start":2970,"line_end":2970,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131458,"byte_end":131523,"line_start":2971,"line_end":2971,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131528,"byte_end":131587,"line_start":2972,"line_end":2972,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131592,"byte_end":131658,"line_start":2973,"line_end":2973,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131663,"byte_end":131727,"line_start":2974,"line_end":2974,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131732,"byte_end":131789,"line_start":2975,"line_end":2975,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131794,"byte_end":131797,"line_start":2976,"line_end":2976,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131802,"byte_end":131868,"line_start":2977,"line_end":2977,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131873,"byte_end":131887,"line_start":2978,"line_end":2978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131892,"byte_end":131895,"line_start":2979,"line_end":2979,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":131900,"byte_end":131987,"line_start":2980,"line_end":2980,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":5074},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132840,"byte_end":132853,"line_start":2998,"line_end":2998,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132064,"byte_end":132128,"line_start":2983,"line_end":2983,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132133,"byte_end":132189,"line_start":2984,"line_end":2984,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132194,"byte_end":132197,"line_start":2985,"line_end":2985,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132202,"byte_end":132266,"line_start":2986,"line_end":2986,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132271,"byte_end":132334,"line_start":2987,"line_end":2987,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132339,"byte_end":132397,"line_start":2988,"line_end":2988,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132402,"byte_end":132468,"line_start":2989,"line_end":2989,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132473,"byte_end":132538,"line_start":2990,"line_end":2990,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132543,"byte_end":132609,"line_start":2991,"line_end":2991,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132614,"byte_end":132634,"line_start":2992,"line_end":2992,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132639,"byte_end":132642,"line_start":2993,"line_end":2993,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132647,"byte_end":132713,"line_start":2994,"line_end":2994,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132718,"byte_end":132732,"line_start":2995,"line_end":2995,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132737,"byte_end":132740,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ [README]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132745,"byte_end":132832,"line_start":2997,"line_end":2997,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":5076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134003,"byte_end":134023,"line_start":3037,"line_end":3037,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":5078}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132926,"byte_end":132992,"line_start":3001,"line_end":3001,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":132993,"byte_end":133041,"line_start":3002,"line_end":3002,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133042,"byte_end":133112,"line_start":3003,"line_end":3003,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133113,"byte_end":133142,"line_start":3004,"line_end":3004,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133143,"byte_end":133146,"line_start":3005,"line_end":3005,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133147,"byte_end":133234,"line_start":3006,"line_end":3006,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133235,"byte_end":133238,"line_start":3007,"line_end":3007,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133239,"byte_end":133292,"line_start":3008,"line_end":3008,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133293,"byte_end":133354,"line_start":3009,"line_end":3009,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133355,"byte_end":133358,"line_start":3010,"line_end":3010,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133359,"byte_end":133373,"line_start":3011,"line_end":3011,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133374,"byte_end":133377,"line_start":3012,"line_end":3012,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133378,"byte_end":133432,"line_start":3013,"line_end":3013,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133433,"byte_end":133436,"line_start":3014,"line_end":3014,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133437,"byte_end":133444,"line_start":3015,"line_end":3015,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133445,"byte_end":133471,"line_start":3016,"line_end":3016,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133472,"byte_end":133489,"line_start":3017,"line_end":3017,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133490,"byte_end":133493,"line_start":3018,"line_end":3018,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133494,"byte_end":133516,"line_start":3019,"line_end":3019,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133517,"byte_end":133537,"line_start":3020,"line_end":3020,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133538,"byte_end":133543,"line_start":3021,"line_end":3021,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133544,"byte_end":133547,"line_start":3022,"line_end":3022,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133548,"byte_end":133605,"line_start":3023,"line_end":3023,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133606,"byte_end":133654,"line_start":3024,"line_end":3024,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133655,"byte_end":133706,"line_start":3025,"line_end":3025,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133707,"byte_end":133716,"line_start":3026,"line_end":3026,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133717,"byte_end":133769,"line_start":3027,"line_end":3027,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133770,"byte_end":133793,"line_start":3028,"line_end":3028,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133794,"byte_end":133855,"line_start":3029,"line_end":3029,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133856,"byte_end":133869,"line_start":3030,"line_end":3030,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133870,"byte_end":133879,"line_start":3031,"line_end":3031,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133880,"byte_end":133885,"line_start":3032,"line_end":3032,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133886,"byte_end":133889,"line_start":3033,"line_end":3033,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133890,"byte_end":133953,"line_start":3034,"line_end":3034,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133954,"byte_end":133984,"line_start":3035,"line_end":3035,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":133985,"byte_end":133992,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5078},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135001,"byte_end":135014,"line_start":3056,"line_end":3056,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5076},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134052,"byte_end":134132,"line_start":3041,"line_end":3041,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134137,"byte_end":134140,"line_start":3042,"line_end":3042,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134145,"byte_end":134211,"line_start":3043,"line_end":3043,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134216,"byte_end":134281,"line_start":3044,"line_end":3044,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134286,"byte_end":134350,"line_start":3045,"line_end":3045,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134355,"byte_end":134420,"line_start":3046,"line_end":3046,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134425,"byte_end":134473,"line_start":3047,"line_end":3047,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134478,"byte_end":134538,"line_start":3048,"line_end":3048,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134543,"byte_end":134608,"line_start":3049,"line_end":3049,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134613,"byte_end":134677,"line_start":3050,"line_end":3050,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134682,"byte_end":134685,"line_start":3051,"line_end":3051,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134690,"byte_end":134774,"line_start":3052,"line_end":3052,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134779,"byte_end":134841,"line_start":3053,"line_end":3053,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134846,"byte_end":134918,"line_start":3054,"line_end":3054,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":134923,"byte_end":134993,"line_start":3055,"line_end":3055,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":5080},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135913,"byte_end":135927,"line_start":3092,"line_end":3092,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":5082}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135095,"byte_end":135186,"line_start":3061,"line_end":3061,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135187,"byte_end":135190,"line_start":3062,"line_end":3062,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135191,"byte_end":135244,"line_start":3063,"line_end":3063,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135245,"byte_end":135248,"line_start":3064,"line_end":3064,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135249,"byte_end":135263,"line_start":3065,"line_end":3065,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135264,"byte_end":135267,"line_start":3066,"line_end":3066,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135268,"byte_end":135316,"line_start":3067,"line_end":3067,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135317,"byte_end":135320,"line_start":3068,"line_end":3068,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135321,"byte_end":135328,"line_start":3069,"line_end":3069,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135329,"byte_end":135355,"line_start":3070,"line_end":3070,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135356,"byte_end":135373,"line_start":3071,"line_end":3071,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135374,"byte_end":135377,"line_start":3072,"line_end":3072,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135378,"byte_end":135400,"line_start":3073,"line_end":3073,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135401,"byte_end":135421,"line_start":3074,"line_end":3074,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135422,"byte_end":135427,"line_start":3075,"line_end":3075,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135428,"byte_end":135431,"line_start":3076,"line_end":3076,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135432,"byte_end":135483,"line_start":3077,"line_end":3077,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135484,"byte_end":135532,"line_start":3078,"line_end":3078,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135533,"byte_end":135584,"line_start":3079,"line_end":3079,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135585,"byte_end":135594,"line_start":3080,"line_end":3080,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135595,"byte_end":135647,"line_start":3081,"line_end":3081,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135648,"byte_end":135712,"line_start":3082,"line_end":3082,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135713,"byte_end":135722,"line_start":3083,"line_end":3083,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135723,"byte_end":135728,"line_start":3084,"line_end":3084,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135729,"byte_end":135732,"line_start":3085,"line_end":3085,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135733,"byte_end":135772,"line_start":3086,"line_end":3086,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135773,"byte_end":135803,"line_start":3087,"line_end":3087,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135804,"byte_end":135834,"line_start":3088,"line_end":3088,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135835,"byte_end":135863,"line_start":3089,"line_end":3089,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135864,"byte_end":135894,"line_start":3090,"line_end":3090,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135895,"byte_end":135902,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5082},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136355,"byte_end":136365,"line_start":3109,"line_end":3109,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":135956,"byte_end":136021,"line_start":3096,"line_end":3096,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136026,"byte_end":136068,"line_start":3097,"line_end":3097,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136073,"byte_end":136076,"line_start":3098,"line_end":3098,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136081,"byte_end":136095,"line_start":3099,"line_end":3099,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136100,"byte_end":136103,"line_start":3100,"line_end":3100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136108,"byte_end":136115,"line_start":3101,"line_end":3101,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136120,"byte_end":136146,"line_start":3102,"line_end":3102,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136151,"byte_end":136154,"line_start":3103,"line_end":3103,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136159,"byte_end":136184,"line_start":3104,"line_end":3104,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136189,"byte_end":136214,"line_start":3105,"line_end":3105,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136219,"byte_end":136277,"line_start":3106,"line_end":3106,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136282,"byte_end":136335,"line_start":3107,"line_end":3107,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136340,"byte_end":136347,"line_start":3108,"line_end":3108,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5084},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136793,"byte_end":136810,"line_start":3121,"line_end":3121,"column_start":11,"column_end":28},"name":"ParallelDrainFull","qualname":"::iter::ParallelDrainFull","value":"ParallelDrainFull","parent":null,"children":[{"krate":0,"index":5085},{"krate":0,"index":5086},{"krate":0,"index":5087}],"decl_id":null,"docs":" `ParallelDrainFull` creates a parallel iterator that moves all items\n from a collection while retaining the original capacity.","sig":null,"attributes":[{"value":"/ `ParallelDrainFull` creates a parallel iterator that moves all items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136449,"byte_end":136521,"line_start":3114,"line_end":3114,"column_start":1,"column_end":73}},{"value":"/ from a collection while retaining the original capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136522,"byte_end":136582,"line_start":3115,"line_end":3115,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136583,"byte_end":136586,"line_start":3116,"line_end":3116,"column_start":1,"column_end":4}},{"value":"/ Types which are indexable typically implement [`ParallelDrainRange`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136587,"byte_end":136659,"line_start":3117,"line_end":3117,"column_start":1,"column_end":73}},{"value":"/ instead, where you can drain fully with `par_drain(..)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136660,"byte_end":136720,"line_start":3118,"line_end":3118,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136721,"byte_end":136724,"line_start":3119,"line_end":3119,"column_start":1,"column_end":4}},{"value":"/ [`ParallelDrainRange`]: trait.ParallelDrainRange.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136725,"byte_end":136782,"line_start":3120,"line_end":3120,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":5085},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136888,"byte_end":136892,"line_start":3123,"line_end":3123,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::ParallelDrainFull::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" The draining parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The draining parallel iterator type that will be created.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136817,"byte_end":136878,"line_start":3122,"line_end":3122,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":5086},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137073,"byte_end":137077,"line_start":3127,"line_end":3127,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelDrainFull::Item","value":"type Item: Send;","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This is usually the same as `IntoParallelIterator::Item`.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":136936,"byte_end":136997,"line_start":3125,"line_end":3125,"column_start":5,"column_end":66}},{"value":"/ This is usually the same as `IntoParallelIterator::Item`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137002,"byte_end":137063,"line_start":3126,"line_end":3126,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5087},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138017,"byte_end":138026,"line_start":3154,"line_end":3154,"column_start":8,"column_end":17},"name":"par_drain","qualname":"::iter::ParallelDrainFull::par_drain","value":"fn par_drain(Self) -> Self::Iter","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" Returns a draining parallel iterator over an entire collection.","sig":null,"attributes":[{"value":"/ Returns a draining parallel iterator over an entire collection.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137090,"byte_end":137157,"line_start":3129,"line_end":3129,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137162,"byte_end":137165,"line_start":3130,"line_end":3130,"column_start":5,"column_end":8}},{"value":"/ When the iterator is dropped, all items are removed, even if the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137170,"byte_end":137238,"line_start":3131,"line_end":3131,"column_start":5,"column_end":73}},{"value":"/ iterator was not fully consumed. If the iterator is leaked, for example","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137243,"byte_end":137318,"line_start":3132,"line_end":3132,"column_start":5,"column_end":80}},{"value":"/ using `std::mem::forget`, it is unspecified how many items are removed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137323,"byte_end":137398,"line_start":3133,"line_end":3133,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137403,"byte_end":137406,"line_start":3134,"line_end":3134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137411,"byte_end":137425,"line_start":3135,"line_end":3135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137430,"byte_end":137433,"line_start":3136,"line_end":3136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137438,"byte_end":137445,"line_start":3137,"line_end":3137,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137450,"byte_end":137476,"line_start":3138,"line_end":3138,"column_start":5,"column_end":31}},{"value":"/ use std::collections::{BinaryHeap, HashSet};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137481,"byte_end":137529,"line_start":3139,"line_end":3139,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137534,"byte_end":137537,"line_start":3140,"line_end":3140,"column_start":5,"column_end":8}},{"value":"/ let squares: HashSet<i32> = (0..10).map(|x| x * x).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137542,"byte_end":137607,"line_start":3141,"line_end":3141,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137612,"byte_end":137615,"line_start":3142,"line_end":3142,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_> = squares.iter().copied().collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137620,"byte_end":137688,"line_start":3143,"line_end":3143,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137693,"byte_end":137708,"line_start":3144,"line_end":3144,"column_start":5,"column_end":20}},{"value":"/     // heaps are drained in arbitrary order","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137713,"byte_end":137760,"line_start":3145,"line_end":3145,"column_start":5,"column_end":52}},{"value":"/     heap.par_drain()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137765,"byte_end":137789,"line_start":3146,"line_end":3146,"column_start":5,"column_end":29}},{"value":"/         .inspect(|x| assert!(squares.contains(x)))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137794,"byte_end":137848,"line_start":3147,"line_end":3147,"column_start":5,"column_end":59}},{"value":"/         .count(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137853,"byte_end":137874,"line_start":3148,"line_end":3148,"column_start":5,"column_end":26}},{"value":"/     squares.len(),","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137879,"byte_end":137901,"line_start":3149,"line_end":3149,"column_start":5,"column_end":27}},{"value":"/ );","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137906,"byte_end":137912,"line_start":3150,"line_end":3150,"column_start":5,"column_end":11}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137917,"byte_end":137946,"line_start":3151,"line_end":3151,"column_start":5,"column_end":34}},{"value":"/ assert!(heap.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":137951,"byte_end":137997,"line_start":3152,"line_end":3152,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138002,"byte_end":138009,"line_start":3153,"line_end":3153,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5088},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138346,"byte_end":138364,"line_start":3163,"line_end":3163,"column_start":11,"column_end":29},"name":"ParallelDrainRange","qualname":"::iter::ParallelDrainRange","value":"ParallelDrainRange<Idx = usize>","parent":null,"children":[{"krate":0,"index":5090},{"krate":0,"index":5091},{"krate":0,"index":5092}],"decl_id":null,"docs":" `ParallelDrainRange` creates a parallel iterator that moves a range of items\n from a collection while retaining the original capacity.","sig":null,"attributes":[{"value":"/ `ParallelDrainRange` creates a parallel iterator that moves a range of items","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138051,"byte_end":138131,"line_start":3157,"line_end":3157,"column_start":1,"column_end":81}},{"value":"/ from a collection while retaining the original capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138132,"byte_end":138192,"line_start":3158,"line_end":3158,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138193,"byte_end":138196,"line_start":3159,"line_end":3159,"column_start":1,"column_end":4}},{"value":"/ Types which are not indexable may implement [`ParallelDrainFull`] instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138197,"byte_end":138275,"line_start":3160,"line_end":3160,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138276,"byte_end":138279,"line_start":3161,"line_end":3161,"column_start":1,"column_end":4}},{"value":"/ [`ParallelDrainFull`]: trait.ParallelDrainFull.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138280,"byte_end":138335,"line_start":3162,"line_end":3162,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":5090},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138455,"byte_end":138459,"line_start":3165,"line_end":3165,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::ParallelDrainRange::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":" The draining parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The draining parallel iterator type that will be created.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138384,"byte_end":138445,"line_start":3164,"line_end":3164,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":5091},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138640,"byte_end":138644,"line_start":3169,"line_end":3169,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelDrainRange::Item","value":"type Item: Send;","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This is usually the same as `IntoParallelIterator::Item`.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138503,"byte_end":138564,"line_start":3167,"line_end":3167,"column_start":5,"column_end":66}},{"value":"/ This is usually the same as `IntoParallelIterator::Item`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138569,"byte_end":138630,"line_start":3168,"line_end":3168,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5092},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140855,"byte_end":140864,"line_start":3229,"line_end":3229,"column_start":8,"column_end":17},"name":"par_drain","qualname":"::iter::ParallelDrainRange::par_drain","value":"fn par_drain<R>(Self, R) -> Self::Iter where R: RangeBounds<Idx>","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":" Returns a draining parallel iterator over a range of the collection.","sig":null,"attributes":[{"value":"/ Returns a draining parallel iterator over a range of the collection.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138657,"byte_end":138729,"line_start":3171,"line_end":3171,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138734,"byte_end":138737,"line_start":3172,"line_end":3172,"column_start":5,"column_end":8}},{"value":"/ When the iterator is dropped, all items in the range are removed, even","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138742,"byte_end":138816,"line_start":3173,"line_end":3173,"column_start":5,"column_end":79}},{"value":"/ if the iterator was not fully consumed. If the iterator is leaked, for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138821,"byte_end":138895,"line_start":3174,"line_end":3174,"column_start":5,"column_end":79}},{"value":"/ example using `std::mem::forget`, it is unspecified how many items are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138900,"byte_end":138974,"line_start":3175,"line_end":3175,"column_start":5,"column_end":79}},{"value":"/ removed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138979,"byte_end":138991,"line_start":3176,"line_end":3176,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":138996,"byte_end":138999,"line_start":3177,"line_end":3177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139004,"byte_end":139018,"line_start":3178,"line_end":3178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139023,"byte_end":139026,"line_start":3179,"line_end":3179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139031,"byte_end":139038,"line_start":3180,"line_end":3180,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139043,"byte_end":139069,"line_start":3181,"line_end":3181,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139074,"byte_end":139077,"line_start":3182,"line_end":3182,"column_start":5,"column_end":8}},{"value":"/ let squares: Vec<i32> = (0..10).map(|x| x * x).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139082,"byte_end":139143,"line_start":3183,"line_end":3183,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139148,"byte_end":139151,"line_start":3184,"line_end":3184,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeFull\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139156,"byte_end":139182,"line_start":3185,"line_end":3185,"column_start":5,"column_end":31}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139187,"byte_end":139221,"line_start":3186,"line_end":3186,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139226,"byte_end":139255,"line_start":3187,"line_end":3187,"column_start":5,"column_end":34}},{"value":"/            .eq(squares.par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139260,"byte_end":139309,"line_start":3188,"line_end":3188,"column_start":5,"column_end":54}},{"value":"/ assert!(vec.is_empty());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139314,"byte_end":139342,"line_start":3189,"line_end":3189,"column_start":5,"column_end":33}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139347,"byte_end":139392,"line_start":3190,"line_end":3190,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139397,"byte_end":139400,"line_start":3191,"line_end":3191,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeFrom\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139405,"byte_end":139431,"line_start":3192,"line_end":3192,"column_start":5,"column_end":31}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139436,"byte_end":139470,"line_start":3193,"line_end":3193,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(5..)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139475,"byte_end":139505,"line_start":3194,"line_end":3194,"column_start":5,"column_end":35}},{"value":"/            .eq(squares[5..].par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139510,"byte_end":139564,"line_start":3195,"line_end":3195,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(&vec[..], &squares[..5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139569,"byte_end":139609,"line_start":3196,"line_end":3196,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139614,"byte_end":139659,"line_start":3197,"line_end":3197,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139664,"byte_end":139667,"line_start":3198,"line_end":3198,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeTo\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139672,"byte_end":139696,"line_start":3199,"line_end":3199,"column_start":5,"column_end":29}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139701,"byte_end":139735,"line_start":3200,"line_end":3200,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..5)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139740,"byte_end":139770,"line_start":3201,"line_end":3201,"column_start":5,"column_end":35}},{"value":"/            .eq(squares[..5].par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139775,"byte_end":139829,"line_start":3202,"line_end":3202,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(&vec[..], &squares[5..]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139834,"byte_end":139874,"line_start":3203,"line_end":3203,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139879,"byte_end":139924,"line_start":3204,"line_end":3204,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139929,"byte_end":139932,"line_start":3205,"line_end":3205,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeToInclusive\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139937,"byte_end":139970,"line_start":3206,"line_end":3206,"column_start":5,"column_end":38}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":139975,"byte_end":140009,"line_start":3207,"line_end":3207,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(..=5)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140014,"byte_end":140045,"line_start":3208,"line_end":3208,"column_start":5,"column_end":36}},{"value":"/            .eq(squares[..=5].par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140050,"byte_end":140105,"line_start":3209,"line_end":3209,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(&vec[..], &squares[6..]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140110,"byte_end":140150,"line_start":3210,"line_end":3210,"column_start":5,"column_end":45}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140155,"byte_end":140200,"line_start":3211,"line_end":3211,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140205,"byte_end":140208,"line_start":3212,"line_end":3212,"column_start":5,"column_end":8}},{"value":"/ println!(\"Range\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140213,"byte_end":140235,"line_start":3213,"line_end":3213,"column_start":5,"column_end":27}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140240,"byte_end":140274,"line_start":3214,"line_end":3214,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(3..7)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140279,"byte_end":140310,"line_start":3215,"line_end":3215,"column_start":5,"column_end":36}},{"value":"/            .eq(squares[3..7].par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140315,"byte_end":140370,"line_start":3216,"line_end":3216,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(&vec[..3], &squares[..3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140375,"byte_end":140416,"line_start":3217,"line_end":3217,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&vec[3..], &squares[7..]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140421,"byte_end":140462,"line_start":3218,"line_end":3218,"column_start":5,"column_end":46}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140467,"byte_end":140512,"line_start":3219,"line_end":3219,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140517,"byte_end":140520,"line_start":3220,"line_end":3220,"column_start":5,"column_end":8}},{"value":"/ println!(\"RangeInclusive\");","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140525,"byte_end":140556,"line_start":3221,"line_end":3221,"column_start":5,"column_end":36}},{"value":"/ let mut vec = squares.clone();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140561,"byte_end":140595,"line_start":3222,"line_end":3222,"column_start":5,"column_end":39}},{"value":"/ assert!(vec.par_drain(3..=7)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140600,"byte_end":140632,"line_start":3223,"line_end":3223,"column_start":5,"column_end":37}},{"value":"/            .eq(squares[3..=7].par_iter().copied()));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140637,"byte_end":140693,"line_start":3224,"line_end":3224,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&vec[..3], &squares[..3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140698,"byte_end":140739,"line_start":3225,"line_end":3225,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&vec[3..], &squares[8..]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140744,"byte_end":140785,"line_start":3226,"line_end":3226,"column_start":5,"column_end":46}},{"value":"/ assert!(vec.capacity() >= squares.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140790,"byte_end":140835,"line_start":3227,"line_end":3227,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":140840,"byte_end":140847,"line_start":3228,"line_end":3228,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5111},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141324,"byte_end":141327,"line_start":3242,"line_end":3242,"column_start":15,"column_end":18},"name":"Try","qualname":"::iter::private::Try","value":"Try","parent":null,"children":[{"krate":0,"index":8525},{"krate":0,"index":5112},{"krate":0,"index":5113},{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5116}],"decl_id":null,"docs":" Clone of `std::ops::Try`.","sig":null,"attributes":[{"value":"/ Clone of `std::ops::Try`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141203,"byte_end":141232,"line_start":3239,"line_end":3239,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141237,"byte_end":141240,"line_start":3240,"line_end":3240,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141245,"byte_end":141309,"line_start":3241,"line_end":3241,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":5112},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141369,"byte_end":141375,"line_start":3245,"line_end":3245,"column_start":14,"column_end":20},"name":"Output","qualname":"::iter::private::Try::Output","value":"type Output;","parent":{"krate":0,"index":5111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5113},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141390,"byte_end":141398,"line_start":3246,"line_end":3246,"column_start":14,"column_end":22},"name":"Residual","qualname":"::iter::private::Try::Residual","value":"type Residual;","parent":{"krate":0,"index":5111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5114},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141412,"byte_end":141423,"line_start":3248,"line_end":3248,"column_start":12,"column_end":23},"name":"from_output","qualname":"::iter::private::Try::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5115},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141467,"byte_end":141480,"line_start":3250,"line_end":3250,"column_start":12,"column_end":25},"name":"from_residual","qualname":"::iter::private::Try::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141528,"byte_end":141534,"line_start":3252,"line_end":3252,"column_start":12,"column_end":18},"name":"branch","qualname":"::iter::private::Try::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141752,"byte_end":141763,"line_start":3261,"line_end":3261,"column_start":12,"column_end":23},"name":"from_output","qualname":"<ControlFlow<B, C> as iter::private::Try>::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5114},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5123},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141847,"byte_end":141860,"line_start":3265,"line_end":3265,"column_start":12,"column_end":25},"name":"from_residual","qualname":"<ControlFlow<B, C> as iter::private::Try>::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5124},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142047,"byte_end":142053,"line_start":3272,"line_end":3272,"column_start":12,"column_end":18},"name":"branch","qualname":"<ControlFlow<B, C> as iter::private::Try>::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5129},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142391,"byte_end":142402,"line_start":3286,"line_end":3286,"column_start":12,"column_end":23},"name":"from_output","qualname":"<Option<T> as iter::private::Try>::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5114},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5130},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142482,"byte_end":142495,"line_start":3290,"line_end":3290,"column_start":12,"column_end":25},"name":"from_residual","qualname":"<Option<T> as iter::private::Try>::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5131},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142670,"byte_end":142676,"line_start":3297,"line_end":3297,"column_start":12,"column_end":18},"name":"branch","qualname":"<Option<T> as iter::private::Try>::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5137},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143011,"byte_end":143022,"line_start":3311,"line_end":3311,"column_start":12,"column_end":23},"name":"from_output","qualname":"<Result<T, E> as iter::private::Try>::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5114},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5138},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143100,"byte_end":143113,"line_start":3315,"line_end":3315,"column_start":12,"column_end":25},"name":"from_residual","qualname":"<Result<T, E> as iter::private::Try>::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5139},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143290,"byte_end":143296,"line_start":3322,"line_end":3322,"column_start":12,"column_end":18},"name":"branch","qualname":"<Result<T, E> as iter::private::Try>::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5145},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143645,"byte_end":143656,"line_start":3336,"line_end":3336,"column_start":12,"column_end":23},"name":"from_output","qualname":"<Poll<Result<T, E>> as iter::private::Try>::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5114},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5146},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143738,"byte_end":143751,"line_start":3340,"line_end":3340,"column_start":12,"column_end":25},"name":"from_residual","qualname":"<Poll<Result<T, E>> as iter::private::Try>::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5147},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143941,"byte_end":143947,"line_start":3347,"line_end":3347,"column_start":12,"column_end":18},"name":"branch","qualname":"<Poll<Result<T, E>> as iter::private::Try>::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5153},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":144409,"byte_end":144420,"line_start":3362,"line_end":3362,"column_start":12,"column_end":23},"name":"from_output","qualname":"<Poll<Option<Result<T, E>>> as iter::private::Try>::from_output","value":"fn from_output(Self::Output) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5114},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5154},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":144622,"byte_end":144635,"line_start":3369,"line_end":3369,"column_start":12,"column_end":25},"name":"from_residual","qualname":"<Poll<Option<Result<T, E>>> as iter::private::Try>::from_residual","value":"fn from_residual(Self::Residual) -> Self","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5155},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":144831,"byte_end":144837,"line_start":3376,"line_end":3376,"column_start":12,"column_end":18},"name":"branch","qualname":"<Poll<Option<Result<T, E>>> as iter::private::Try>::branch","value":"fn branch(Self) -> ControlFlow<Self::Residual, Self::Output>","parent":{"krate":0,"index":5111},"children":[],"decl_id":{"krate":0,"index":5116},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","parent":null,"children":[{"krate":0,"index":5157},{"krate":0,"index":5158},{"krate":0,"index":5159},{"krate":0,"index":5160},{"krate":0,"index":5163},{"krate":0,"index":8531},{"krate":0,"index":8534},{"krate":0,"index":8537},{"krate":0,"index":5166},{"krate":0,"index":5171},{"krate":0,"index":5177},{"krate":0,"index":8540},{"krate":0,"index":8544},{"krate":0,"index":5184},{"krate":0,"index":5188},{"krate":0,"index":8556},{"krate":0,"index":8548},{"krate":0,"index":8563},{"krate":0,"index":8567},{"krate":0,"index":5194},{"krate":0,"index":8579},{"krate":0,"index":8571},{"krate":0,"index":5200},{"krate":0,"index":5203},{"krate":0,"index":5209}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [options][std::option]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445570,"byte_end":445624,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445625,"byte_end":445628,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445629,"byte_end":445707,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445708,"byte_end":445746,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445747,"byte_end":445750,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445751,"byte_end":445814,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8531},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446422,"byte_end":446430,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":8533}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445914,"byte_end":445990,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445991,"byte_end":445994,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":445995,"byte_end":446077,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446078,"byte_end":446081,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446082,"byte_end":446145,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446146,"byte_end":446149,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446150,"byte_end":446219,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446220,"byte_end":446300,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446301,"byte_end":446386,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":5170},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446572,"byte_end":446585,"line_start":30,"line_end":30,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<Option<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5174},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446724,"byte_end":446739,"line_start":38,"line_end":38,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<IntoIter<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5176},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446876,"byte_end":446883,"line_start":45,"line_end":45,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<IntoIter<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5179},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447007,"byte_end":447012,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"drive","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5181},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447278,"byte_end":447281,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5182},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447398,"byte_end":447411,"line_start":69,"line_end":69,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8540},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448072,"byte_end":448076,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8543}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447577,"byte_end":447659,"line_start":77,"line_end":77,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447660,"byte_end":447663,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447664,"byte_end":447746,"line_start":79,"line_end":79,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447747,"byte_end":447750,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447751,"byte_end":447809,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447810,"byte_end":447813,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447814,"byte_end":447883,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447884,"byte_end":447964,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":447965,"byte_end":448043,"line_start":85,"line_end":85,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":5187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448172,"byte_end":448177,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5193},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448387,"byte_end":448400,"line_start":103,"line_end":103,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a Option<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8563},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":449110,"byte_end":449117,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":8566}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448592,"byte_end":448682,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448683,"byte_end":448686,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448687,"byte_end":448769,"line_start":117,"line_end":117,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448770,"byte_end":448773,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448774,"byte_end":448836,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448837,"byte_end":448840,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448841,"byte_end":448910,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448911,"byte_end":448991,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448992,"byte_end":449081,"line_start":123,"line_end":123,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":5199},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":449298,"byte_end":449311,"line_start":133,"line_end":133,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a mut Option<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":450327,"byte_end":450340,"line_start":178,"line_end":178,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<Option<C> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = Option<T>>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5218},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":5219},{"krate":0,"index":5222},{"krate":0,"index":5225},{"krate":0,"index":5228},{"krate":0,"index":5231},{"krate":0,"index":5234},{"krate":0,"index":5237},{"krate":0,"index":5240},{"krate":0,"index":5243},{"krate":0,"index":5246},{"krate":0,"index":5249},{"krate":0,"index":5252},{"krate":0,"index":5255}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"/ The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451009,"byte_end":451077,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/ The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451078,"byte_end":451147,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ have easy access to the various traits and methods you will need.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\prelude.rs","byte_start":451148,"byte_end":451217,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":5258},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","parent":null,"children":[{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5264},{"krate":0,"index":5267},{"krate":0,"index":5270},{"krate":0,"index":8586},{"krate":0,"index":8589},{"krate":0,"index":8592},{"krate":0,"index":5273},{"krate":0,"index":5278},{"krate":0,"index":5281},{"krate":0,"index":5286},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5302},{"krate":0,"index":5305},{"krate":0,"index":5311},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5322},{"krate":0,"index":8597},{"krate":0,"index":8601},{"krate":0,"index":8607},{"krate":0,"index":8614},{"krate":0,"index":8618},{"krate":0,"index":8624},{"krate":0,"index":8631},{"krate":0,"index":8635},{"krate":0,"index":8641},{"krate":0,"index":8648},{"krate":0,"index":8652},{"krate":0,"index":8658},{"krate":0,"index":8665},{"krate":0,"index":8669},{"krate":0,"index":8675},{"krate":0,"index":8682},{"krate":0,"index":8686},{"krate":0,"index":8692},{"krate":0,"index":8699},{"krate":0,"index":8703},{"krate":0,"index":8709},{"krate":0,"index":8716},{"krate":0,"index":8720},{"krate":0,"index":8726},{"krate":0,"index":8733},{"krate":0,"index":8735},{"krate":0,"index":8742},{"krate":0,"index":8748},{"krate":0,"index":8750},{"krate":0,"index":8757},{"krate":0,"index":8763},{"krate":0,"index":8765},{"krate":0,"index":8772},{"krate":0,"index":8778},{"krate":0,"index":8780},{"krate":0,"index":8787},{"krate":0,"index":5323},{"krate":0,"index":5324},{"krate":0,"index":5329}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [ranges][std::range],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451754,"byte_end":451807,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/ the type for values created by `a..b` expressions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451808,"byte_end":451861,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451862,"byte_end":451865,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451866,"byte_end":451944,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451945,"byte_end":451988,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451989,"byte_end":451992,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":451993,"byte_end":452000,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452001,"byte_end":452027,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452028,"byte_end":452031,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..100u64).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452032,"byte_end":452071,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/                    .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452072,"byte_end":452102,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452103,"byte_end":452106,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452107,"byte_end":452156,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452157,"byte_end":452198,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452199,"byte_end":452206,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452207,"byte_end":452210,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452211,"byte_end":452281,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8586},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453153,"byte_end":453157,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8588}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types and `char`.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types and `char`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452413,"byte_end":452494,"line_start":26,"line_end":26,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452495,"byte_end":452498,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452499,"byte_end":452567,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64`, `i64`, `u128`, or `i128`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452568,"byte_end":452633,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452634,"byte_end":452637,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452638,"byte_end":452645,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452646,"byte_end":452672,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452673,"byte_end":452676,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452677,"byte_end":452717,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452718,"byte_end":452756,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452757,"byte_end":452822,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452823,"byte_end":452865,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452866,"byte_end":452904,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452905,"byte_end":452908,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452909,"byte_end":452944,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":452945,"byte_end":453010,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453011,"byte_end":453053,"line_start":42,"line_end":42,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453054,"byte_end":453083,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453084,"byte_end":453087,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453088,"byte_end":453109,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453110,"byte_end":453117,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5277},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453424,"byte_end":453437,"line_start":60,"line_end":60,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<Range<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5288},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454454,"byte_end":454466,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"name":"RangeInteger","qualname":"::range::private::RangeInteger","value":"RangeInteger: Sized + Send","parent":null,"children":[{"krate":0,"index":8595},{"krate":0,"index":5289},{"krate":0,"index":5291}],"decl_id":null,"docs":" Implementation details of `ParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `ParallelIterator for Iter<Self>`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454376,"byte_end":454439,"line_start":91,"line_end":91,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5289},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454520,"byte_end":454535,"line_start":95,"line_end":95,"column_start":12,"column_end":27},"name":"drive_unindexed","qualname":"::range::private::RangeInteger::drive_unindexed","value":"fn drive_unindexed<C>(Iter<Self>, C) -> C::Result where\nC: UnindexedConsumer<Self>","parent":{"krate":0,"index":5288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5291},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454649,"byte_end":454656,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"opt_len","qualname":"::range::private::RangeInteger::opt_len","value":"fn opt_len<'_>(&'_ Iter<Self>) -> Option<usize>","parent":{"krate":0,"index":5288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5292},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454790,"byte_end":454809,"line_start":103,"line_end":103,"column_start":15,"column_end":34},"name":"IndexedRangeInteger","qualname":"::range::private::IndexedRangeInteger","value":"IndexedRangeInteger: RangeInteger","parent":null,"children":[{"krate":0,"index":8596},{"krate":0,"index":5293},{"krate":0,"index":5295},{"krate":0,"index":5296}],"decl_id":null,"docs":" Implementation details of `IndexedParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `IndexedParallelIterator for Iter<Self>`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454705,"byte_end":454775,"line_start":102,"line_end":102,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5293},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454863,"byte_end":454868,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"drive","qualname":"::range::private::IndexedRangeInteger::drive","value":"fn drive<C>(Iter<Self>, C) -> C::Result where C: Consumer<Self>","parent":{"krate":0,"index":5292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5295},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454973,"byte_end":454976,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"len","qualname":"::range::private::IndexedRangeInteger::len","value":"fn len<'_>(&'_ Iter<Self>) -> usize","parent":{"krate":0,"index":5292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5296},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455018,"byte_end":455031,"line_start":112,"line_end":112,"column_start":12,"column_end":25},"name":"with_producer","qualname":"::range::private::IndexedRangeInteger::with_producer","value":"fn with_producer<CB>(Iter<Self>, CB) -> CB::Output where\nCB: ProducerCallback<Self>","parent":{"krate":0,"index":5292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5308},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455275,"byte_end":455290,"line_start":122,"line_end":122,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Iter<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: UnindexedConsumer<T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5310},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455446,"byte_end":455453,"line_start":130,"line_end":130,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Iter<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455429,"byte_end":455438,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5313},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455588,"byte_end":455593,"line_start":136,"line_end":136,"column_start":8,"column_end":13},"name":"drive","qualname":"<Iter<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<T>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5315},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455730,"byte_end":455733,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455713,"byte_end":455722,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5316},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455787,"byte_end":455800,"line_start":148,"line_end":148,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Iter<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where CB: ProducerCallback<T>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5326},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461253,"byte_end":461268,"line_start":326,"line_end":326,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Iter<char> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5328},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461420,"byte_end":461427,"line_start":333,"line_end":333,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Iter<char> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5330},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461603,"byte_end":461608,"line_start":340,"line_end":340,"column_start":8,"column_end":13},"name":"drive","qualname":"<Iter<char> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5332},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461751,"byte_end":461754,"line_start":347,"line_end":347,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter<char> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5333},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":462153,"byte_end":462166,"line_start":362,"line_end":362,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Iter<char> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5335},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_inclusive","qualname":"::range_inclusive","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","parent":null,"children":[{"krate":0,"index":5336},{"krate":0,"index":5337},{"krate":0,"index":5338},{"krate":0,"index":5341},{"krate":0,"index":8799},{"krate":0,"index":8802},{"krate":0,"index":8805},{"krate":0,"index":5344},{"krate":0,"index":5347},{"krate":0,"index":5352},{"krate":0,"index":5364},{"krate":0,"index":5365},{"krate":0,"index":5368},{"krate":0,"index":5371},{"krate":0,"index":5377},{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":8816},{"krate":0,"index":8810},{"krate":0,"index":8828},{"krate":0,"index":8822},{"krate":0,"index":8840},{"krate":0,"index":8834},{"krate":0,"index":8852},{"krate":0,"index":8846},{"krate":0,"index":8858},{"krate":0,"index":8863},{"krate":0,"index":8868},{"krate":0,"index":8873},{"krate":0,"index":8878},{"krate":0,"index":8883},{"krate":0,"index":8888},{"krate":0,"index":8893},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5393}],"decl_id":null,"docs":" Parallel iterator types for [inclusive ranges][std::range],\n the type for values created by `a..=b` expressions","sig":null,"attributes":[{"value":"/ Parallel iterator types for [inclusive ranges][std::range],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465215,"byte_end":465278,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/ the type for values created by `a..=b` expressions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465279,"byte_end":465333,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465334,"byte_end":465337,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you have","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465338,"byte_end":465416,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465417,"byte_end":465460,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465461,"byte_end":465464,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465465,"byte_end":465472,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465473,"byte_end":465499,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465500,"byte_end":465503,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ let r = (0..=100u64).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465504,"byte_end":465544,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/                     .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465545,"byte_end":465576,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465577,"byte_end":465580,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ // compare result with sequential calculation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465581,"byte_end":465630,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ assert_eq!((0..=100).sum::<u64>(), r);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465631,"byte_end":465673,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465674,"byte_end":465681,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465682,"byte_end":465685,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [std::range]: https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465686,"byte_end":465765,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":8799},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466619,"byte_end":466623,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range_inclusive::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8801}],"decl_id":null,"docs":" Parallel iterator over an inclusive range, implemented for all integer types and `char`.","sig":null,"attributes":[{"value":"/ Parallel iterator over an inclusive range, implemented for all integer types and `char`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465863,"byte_end":465955,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465956,"byte_end":465959,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":465960,"byte_end":466028,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ which is only implemented for `u8`, `i8`, `u16`, `i16`, and `char`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466029,"byte_end":466100,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466101,"byte_end":466104,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466105,"byte_end":466112,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466113,"byte_end":466139,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466140,"byte_end":466143,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let p = (0..=25u16).into_par_iter()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466144,"byte_end":466183,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/                   .zip(0..=25u16)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466184,"byte_end":466221,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466222,"byte_end":466287,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466288,"byte_end":466330,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/                   .sum::<u16>();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466331,"byte_end":466367,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466368,"byte_end":466371,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let s = (0..=25u16).zip(0..=25u16)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466372,"byte_end":466410,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466411,"byte_end":466476,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466477,"byte_end":466519,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466520,"byte_end":466549,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466550,"byte_end":466553,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466554,"byte_end":466575,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466576,"byte_end":466583,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5351},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":467755,"byte_end":467768,"line_start":82,"line_end":82,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<RangeInclusive<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5354},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468515,"byte_end":468527,"line_start":98,"line_end":98,"column_start":15,"column_end":27},"name":"RangeInteger","qualname":"::range_inclusive::private::RangeInteger","value":"RangeInteger: Sized + Send","parent":null,"children":[{"krate":0,"index":8808},{"krate":0,"index":5355},{"krate":0,"index":5357}],"decl_id":null,"docs":" Implementation details of `ParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `ParallelIterator for Iter<Self>`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468437,"byte_end":468500,"line_start":97,"line_end":97,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5355},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468581,"byte_end":468596,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"drive_unindexed","qualname":"::range_inclusive::private::RangeInteger::drive_unindexed","value":"fn drive_unindexed<C>(Iter<Self>, C) -> C::Result where\nC: UnindexedConsumer<Self>","parent":{"krate":0,"index":5354},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5357},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468710,"byte_end":468717,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"opt_len","qualname":"::range_inclusive::private::RangeInteger::opt_len","value":"fn opt_len<'_>(&'_ Iter<Self>) -> Option<usize>","parent":{"krate":0,"index":5354},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5358},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468851,"byte_end":468870,"line_start":109,"line_end":109,"column_start":15,"column_end":34},"name":"IndexedRangeInteger","qualname":"::range_inclusive::private::IndexedRangeInteger","value":"IndexedRangeInteger: RangeInteger","parent":null,"children":[{"krate":0,"index":8809},{"krate":0,"index":5359},{"krate":0,"index":5361},{"krate":0,"index":5362}],"decl_id":null,"docs":" Implementation details of `IndexedParallelIterator for Iter<Self>`\n","sig":null,"attributes":[{"value":"/ Implementation details of `IndexedParallelIterator for Iter<Self>`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468766,"byte_end":468836,"line_start":108,"line_end":108,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5359},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468924,"byte_end":468929,"line_start":112,"line_end":112,"column_start":12,"column_end":17},"name":"drive","qualname":"::range_inclusive::private::IndexedRangeInteger::drive","value":"fn drive<C>(Iter<Self>, C) -> C::Result where C: Consumer<Self>","parent":{"krate":0,"index":5358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5361},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469034,"byte_end":469037,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"len","qualname":"::range_inclusive::private::IndexedRangeInteger::len","value":"fn len<'_>(&'_ Iter<Self>) -> usize","parent":{"krate":0,"index":5358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5362},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469079,"byte_end":469092,"line_start":118,"line_end":118,"column_start":12,"column_end":25},"name":"with_producer","qualname":"::range_inclusive::private::IndexedRangeInteger::with_producer","value":"fn with_producer<CB>(Iter<Self>, CB) -> CB::Output where\nCB: ProducerCallback<Self>","parent":{"krate":0,"index":5358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5374},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469336,"byte_end":469351,"line_start":128,"line_end":128,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Iter<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where C: UnindexedConsumer<T>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5376},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469507,"byte_end":469514,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Iter<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469490,"byte_end":469499,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5379},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469649,"byte_end":469654,"line_start":142,"line_end":142,"column_start":8,"column_end":13},"name":"drive","qualname":"<Iter<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<T>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5381},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469791,"byte_end":469794,"line_start":150,"line_end":150,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469774,"byte_end":469783,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5382},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469848,"byte_end":469861,"line_start":154,"line_end":154,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Iter<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where CB: ProducerCallback<T>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5390},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473175,"byte_end":473190,"line_start":268,"line_end":268,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Iter<char> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5392},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473342,"byte_end":473349,"line_start":275,"line_end":275,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Iter<char> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5394},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473598,"byte_end":473603,"line_start":283,"line_end":283,"column_start":8,"column_end":13},"name":"drive","qualname":"<Iter<char> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5396},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473746,"byte_end":473749,"line_start":290,"line_end":290,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter<char> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5397},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":474196,"byte_end":474209,"line_start":305,"line_end":305,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Iter<char> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5399},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","parent":null,"children":[{"krate":0,"index":5400},{"krate":0,"index":5401},{"krate":0,"index":5402},{"krate":0,"index":5405},{"krate":0,"index":8904},{"krate":0,"index":8907},{"krate":0,"index":8910},{"krate":0,"index":5408},{"krate":0,"index":8920},{"krate":0,"index":8913},{"krate":0,"index":8926},{"krate":0,"index":8930},{"krate":0,"index":5414},{"krate":0,"index":5418},{"krate":0,"index":8942},{"krate":0,"index":8934},{"krate":0,"index":8949},{"krate":0,"index":8953},{"krate":0,"index":5425},{"krate":0,"index":8965},{"krate":0,"index":8957},{"krate":0,"index":5432}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [results][std::result]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476637,"byte_end":476691,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476692,"byte_end":476695,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476696,"byte_end":476774,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476775,"byte_end":476813,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476814,"byte_end":476817,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476818,"byte_end":476881,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8904},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477047,"byte_end":477055,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":8906}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":476976,"byte_end":477011,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477215,"byte_end":477228,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<Result<T, E> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8926},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477497,"byte_end":477501,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":8929}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477407,"byte_end":477468,"line_start":36,"line_end":36,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5417},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477605,"byte_end":477610,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5424},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477826,"byte_end":477839,"line_start":54,"line_end":54,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a Result<T, E> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8949},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478123,"byte_end":478130,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":8952}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478036,"byte_end":478094,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478325,"byte_end":478338,"line_start":76,"line_end":76,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'a mut Result<T, E> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5436},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478927,"byte_end":478940,"line_start":99,"line_end":99,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"<Result<C, E> as iter::FromParallelIterator>::from_par_iter","value":"fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item =\nResult<T, E>>","parent":{"krate":0,"index":5076},"children":[],"decl_id":{"krate":0,"index":5078},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5443},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","parent":null,"children":[{"krate":0,"index":5444},{"krate":0,"index":5589},{"krate":0,"index":5677},{"krate":0,"index":5755},{"krate":0,"index":5897},{"krate":0,"index":5900},{"krate":0,"index":5903},{"krate":0,"index":5904},{"krate":0,"index":5905},{"krate":0,"index":5906},{"krate":0,"index":5909},{"krate":0,"index":5912},{"krate":0,"index":5913},{"krate":0,"index":5916},{"krate":0,"index":5917},{"krate":0,"index":5919},{"krate":0,"index":5922},{"krate":0,"index":5923},{"krate":0,"index":5926},{"krate":0,"index":5929},{"krate":0,"index":5932},{"krate":0,"index":5935},{"krate":0,"index":5936},{"krate":0,"index":5939},{"krate":0,"index":5942},{"krate":0,"index":5945},{"krate":0,"index":5948},{"krate":0,"index":5958},{"krate":0,"index":5961},{"krate":0,"index":5990},{"krate":0,"index":5993},{"krate":0,"index":5999},{"krate":0,"index":9074},{"krate":0,"index":9078},{"krate":0,"index":6005},{"krate":0,"index":6009},{"krate":0,"index":6016},{"krate":0,"index":6024},{"krate":0,"index":6028},{"krate":0,"index":9082},{"krate":0,"index":9087},{"krate":0,"index":6035},{"krate":0,"index":6039},{"krate":0,"index":6046},{"krate":0,"index":6054},{"krate":0,"index":6059},{"krate":0,"index":9091},{"krate":0,"index":9095},{"krate":0,"index":6066},{"krate":0,"index":6073},{"krate":0,"index":6081},{"krate":0,"index":6085},{"krate":0,"index":6092},{"krate":0,"index":6098},{"krate":0,"index":6103},{"krate":0,"index":6108},{"krate":0,"index":6115},{"krate":0,"index":6126},{"krate":0,"index":6132},{"krate":0,"index":6137},{"krate":0,"index":6144}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [slices][std::slice]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480047,"byte_end":480099,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480100,"byte_end":480103,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480104,"byte_end":480182,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480183,"byte_end":480221,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480222,"byte_end":480225,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480226,"byte_end":480287,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":8972},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515061,"byte_end":515067,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":8975},{"krate":0,"index":8976}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":514962,"byte_end":515032,"line_start":6,"line_end":6,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5460},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515346,"byte_end":515351,"line_start":20,"line_end":20,"column_start":8,"column_end":13},"name":"clone","qualname":"<Chunks as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5465},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515510,"byte_end":515525,"line_start":28,"line_end":28,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Chunks as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5467},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515664,"byte_end":515671,"line_start":35,"line_end":35,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Chunks as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5471},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515815,"byte_end":515820,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"drive","qualname":"<Chunks as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5473},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515950,"byte_end":515953,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"len","qualname":"<Chunks as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5474},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":516042,"byte_end":516055,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Chunks as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8981},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517177,"byte_end":517188,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::chunks::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":8984},{"krate":0,"index":8985},{"krate":0,"index":8986}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517078,"byte_end":517148,"line_start":92,"line_end":92,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5492},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517805,"byte_end":517814,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"fn remainder<'_>(&'_ Self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517625,"byte_end":517695,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517700,"byte_end":517775,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517780,"byte_end":517793,"line_start":114,"line_end":114,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5496},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517926,"byte_end":517931,"line_start":121,"line_end":121,"column_start":8,"column_end":13},"name":"clone","qualname":"<ChunksExact as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5501},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518100,"byte_end":518115,"line_start":129,"line_end":129,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<ChunksExact as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518254,"byte_end":518261,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<ChunksExact as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518410,"byte_end":518415,"line_start":142,"line_end":142,"column_start":8,"column_end":13},"name":"drive","qualname":"<ChunksExact as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518545,"byte_end":518548,"line_start":149,"line_end":149,"column_start":8,"column_end":11},"name":"len","qualname":"<ChunksExact as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518624,"byte_end":518637,"line_start":153,"line_end":153,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<ChunksExact as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8991},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519765,"byte_end":519774,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::chunks::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":8994},{"krate":0,"index":8995}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519668,"byte_end":519736,"line_start":193,"line_end":193,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5532},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520119,"byte_end":520134,"line_start":209,"line_end":209,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<ChunksMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5534},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520273,"byte_end":520280,"line_start":216,"line_end":216,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<ChunksMut as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5538},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520427,"byte_end":520432,"line_start":222,"line_end":222,"column_start":8,"column_end":13},"name":"drive","qualname":"<ChunksMut as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5540},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520562,"byte_end":520565,"line_start":229,"line_end":229,"column_start":8,"column_end":11},"name":"len","qualname":"<ChunksMut as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5541},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520654,"byte_end":520667,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<ChunksMut as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9000},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521821,"byte_end":521835,"line_start":275,"line_end":275,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::chunks::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":9003},{"krate":0,"index":9004},{"krate":0,"index":9005}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521724,"byte_end":521792,"line_start":273,"line_end":273,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5559},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522838,"byte_end":522852,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"fn into_remainder(Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522291,"byte_end":522361,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522366,"byte_end":522441,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522446,"byte_end":522459,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522464,"byte_end":522467,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522472,"byte_end":522547,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522552,"byte_end":522624,"line_start":298,"line_end":298,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522629,"byte_end":522702,"line_start":299,"line_end":299,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::ChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522707,"byte_end":522782,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522787,"byte_end":522826,"line_start":301,"line_end":301,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5560},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523246,"byte_end":523255,"line_start":312,"line_end":312,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExactMut>::remainder","value":"fn remainder<'_>(&'_ mut Self) -> &'_ mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522907,"byte_end":522977,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":522982,"byte_end":523057,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523062,"byte_end":523075,"line_start":308,"line_end":308,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523080,"byte_end":523083,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523088,"byte_end":523159,"line_start":310,"line_end":310,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523164,"byte_end":523234,"line_start":311,"line_end":311,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5561},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523534,"byte_end":523548,"line_start":319,"line_end":319,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<ChunksExactMut>::take_remainder","value":"fn take_remainder<'_>(&'_ mut Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523309,"byte_end":523379,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523384,"byte_end":523459,"line_start":317,"line_end":317,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523464,"byte_end":523522,"line_start":318,"line_end":318,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523744,"byte_end":523759,"line_start":327,"line_end":327,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<ChunksExactMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5568},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523898,"byte_end":523905,"line_start":334,"line_end":334,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<ChunksExactMut as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5572},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524057,"byte_end":524062,"line_start":340,"line_end":340,"column_start":8,"column_end":13},"name":"drive","qualname":"<ChunksExactMut as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5574},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524192,"byte_end":524195,"line_start":347,"line_end":347,"column_start":8,"column_end":11},"name":"len","qualname":"<ChunksExactMut as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5575},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524271,"byte_end":524284,"line_start":351,"line_end":351,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<ChunksExactMut as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9032},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589327,"byte_end":589334,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::rchunks::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":9035},{"krate":0,"index":9036}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589206,"byte_end":589298,"line_start":5,"line_end":5,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":5768},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589615,"byte_end":589620,"line_start":19,"line_end":19,"column_start":8,"column_end":13},"name":"clone","qualname":"<RChunks as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5773},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589781,"byte_end":589796,"line_start":27,"line_end":27,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<RChunks as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5775},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589935,"byte_end":589942,"line_start":34,"line_end":34,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<RChunks as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5779},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590087,"byte_end":590092,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"drive","qualname":"<RChunks as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5781},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590222,"byte_end":590225,"line_start":47,"line_end":47,"column_start":8,"column_end":11},"name":"len","qualname":"<RChunks as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5782},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590314,"byte_end":590327,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<RChunks as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9041},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591483,"byte_end":591495,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::rchunks::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":9044},{"krate":0,"index":9045},{"krate":0,"index":9046}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591362,"byte_end":591454,"line_start":91,"line_end":91,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":5800},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592076,"byte_end":592085,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"fn remainder<'_>(&'_ Self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591896,"byte_end":591966,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591971,"byte_end":592046,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592051,"byte_end":592064,"line_start":112,"line_end":112,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5804},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592198,"byte_end":592203,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"clone","qualname":"<RChunksExact as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5809},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592374,"byte_end":592389,"line_start":127,"line_end":127,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<RChunksExact as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5811},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592528,"byte_end":592535,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<RChunksExact as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5815},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592685,"byte_end":592690,"line_start":140,"line_end":140,"column_start":8,"column_end":13},"name":"drive","qualname":"<RChunksExact as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5817},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592820,"byte_end":592823,"line_start":147,"line_end":147,"column_start":8,"column_end":11},"name":"len","qualname":"<RChunksExact as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5818},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592899,"byte_end":592912,"line_start":151,"line_end":151,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<RChunksExact as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594088,"byte_end":594098,"line_start":193,"line_end":193,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::rchunks::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":9054},{"krate":0,"index":9055}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":593969,"byte_end":594059,"line_start":191,"line_end":191,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":5840},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594445,"byte_end":594460,"line_start":207,"line_end":207,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<RChunksMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5842},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594599,"byte_end":594606,"line_start":214,"line_end":214,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<RChunksMut as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5846},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594754,"byte_end":594759,"line_start":220,"line_end":220,"column_start":8,"column_end":13},"name":"drive","qualname":"<RChunksMut as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5848},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594889,"byte_end":594892,"line_start":227,"line_end":227,"column_start":8,"column_end":11},"name":"len","qualname":"<RChunksMut as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5849},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594981,"byte_end":594994,"line_start":231,"line_end":231,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<RChunksMut as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9060},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596182,"byte_end":596197,"line_start":273,"line_end":273,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::rchunks::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":9063},{"krate":0,"index":9064},{"krate":0,"index":9065}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice, starting at the end.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596063,"byte_end":596153,"line_start":271,"line_end":271,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":5867},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597165,"byte_end":597179,"line_start":299,"line_end":299,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"fn into_remainder(Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596617,"byte_end":596687,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596692,"byte_end":596767,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596772,"byte_end":596785,"line_start":292,"line_end":292,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596790,"byte_end":596793,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596798,"byte_end":596873,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596878,"byte_end":596950,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596955,"byte_end":597028,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::RChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597033,"byte_end":597109,"line_start":297,"line_end":297,"column_start":5,"column_end":81}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597114,"byte_end":597153,"line_start":298,"line_end":298,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5868},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597573,"byte_end":597582,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"remainder","qualname":"<RChunksExactMut>::remainder","value":"fn remainder<'_>(&'_ mut Self) -> &'_ mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597234,"byte_end":597304,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597309,"byte_end":597384,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597389,"byte_end":597402,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597407,"byte_end":597410,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597415,"byte_end":597486,"line_start":307,"line_end":307,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597491,"byte_end":597561,"line_start":308,"line_end":308,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5869},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597861,"byte_end":597875,"line_start":316,"line_end":316,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<RChunksExactMut>::take_remainder","value":"fn take_remainder<'_>(&'_ mut Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597636,"byte_end":597706,"line_start":313,"line_end":313,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597711,"byte_end":597786,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":597791,"byte_end":597849,"line_start":315,"line_end":315,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5874},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598072,"byte_end":598087,"line_start":324,"line_end":324,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<RChunksExactMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5876},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598226,"byte_end":598233,"line_start":331,"line_end":331,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<RChunksExactMut as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5880},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598386,"byte_end":598391,"line_start":337,"line_end":337,"column_start":8,"column_end":13},"name":"drive","qualname":"<RChunksExactMut as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5882},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598521,"byte_end":598524,"line_start":344,"line_end":344,"column_start":8,"column_end":11},"name":"len","qualname":"<RChunksExactMut as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5883},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598600,"byte_end":598613,"line_start":348,"line_end":348,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<RChunksExactMut as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480786,"byte_end":480799,"line_start":29,"line_end":29,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T>","parent":null,"children":[{"krate":0,"index":5950},{"krate":0,"index":5951},{"krate":0,"index":5953},{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956},{"krate":0,"index":5957}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480740,"byte_end":480775,"line_start":28,"line_end":28,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5950},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480918,"byte_end":480935,"line_start":32,"line_end":32,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"fn as_parallel_slice<'_>(&'_ Self) -> &'_ [T]","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480815,"byte_end":480884,"line_start":30,"line_end":30,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480889,"byte_end":480910,"line_start":31,"line_end":31,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":5951},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481368,"byte_end":481377,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"fn par_split<P, '_>(&'_ Self, P) -> Split where P: for<'_> Fn(&'_ T) -> bool +\nSync + Send","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":480957,"byte_end":481030,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481035,"byte_end":481059,"line_start":35,"line_end":35,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481064,"byte_end":481067,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481072,"byte_end":481086,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481091,"byte_end":481094,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481099,"byte_end":481106,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481111,"byte_end":481137,"line_start":40,"line_end":40,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481142,"byte_end":481194,"line_start":41,"line_end":41,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481199,"byte_end":481230,"line_start":42,"line_end":42,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481235,"byte_end":481288,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481293,"byte_end":481308,"line_start":44,"line_end":44,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481313,"byte_end":481348,"line_start":45,"line_end":45,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481353,"byte_end":481360,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5953},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481911,"byte_end":481922,"line_start":67,"line_end":67,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"fn par_windows<'_>(&'_ Self, usize) -> Windows","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of length\n `window_size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of length","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481583,"byte_end":481652,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ `window_size`. The windows overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481657,"byte_end":481696,"line_start":58,"line_end":58,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481701,"byte_end":481704,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481709,"byte_end":481723,"line_start":60,"line_end":60,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481728,"byte_end":481731,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481736,"byte_end":481743,"line_start":62,"line_end":62,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481748,"byte_end":481774,"line_start":63,"line_end":63,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481779,"byte_end":481840,"line_start":64,"line_end":64,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481845,"byte_end":481891,"line_start":65,"line_end":65,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":481896,"byte_end":481903,"line_start":66,"line_end":66,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5954},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482655,"byte_end":482665,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"fn par_chunks<'_>(&'_ Self, usize) -> Chunks","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482079,"byte_end":482148,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482153,"byte_end":482201,"line_start":75,"line_end":75,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482206,"byte_end":482209,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482214,"byte_end":482279,"line_start":77,"line_end":77,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482284,"byte_end":482355,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482360,"byte_end":482405,"line_start":79,"line_end":79,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482410,"byte_end":482413,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482418,"byte_end":482432,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482437,"byte_end":482440,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482445,"byte_end":482452,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482457,"byte_end":482483,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482488,"byte_end":482553,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482558,"byte_end":482615,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482620,"byte_end":482627,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482632,"byte_end":482647,"line_start":88,"line_end":88,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5955},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483424,"byte_end":483440,"line_start":109,"line_end":109,"column_start":8,"column_end":24},"name":"par_chunks_exact","qualname":"::slice::ParallelSlice::par_chunks_exact","value":"fn par_chunks_exact<'_>(&'_ Self, usize) -> ChunksExact","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482845,"byte_end":482906,"line_start":94,"line_end":94,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482911,"byte_end":482959,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482964,"byte_end":482967,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":482972,"byte_end":483041,"line_start":97,"line_end":97,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483046,"byte_end":483111,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483116,"byte_end":483174,"line_start":99,"line_end":99,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483179,"byte_end":483182,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483187,"byte_end":483201,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483206,"byte_end":483209,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483214,"byte_end":483221,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483226,"byte_end":483252,"line_start":104,"line_end":104,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks_exact(2).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483257,"byte_end":483328,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4]]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483333,"byte_end":483384,"line_start":106,"line_end":106,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483389,"byte_end":483396,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483401,"byte_end":483416,"line_start":108,"line_end":108,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5956},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484228,"byte_end":484239,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"par_rchunks","qualname":"::slice::ParallelSlice::par_rchunks","value":"fn par_rchunks<'_>(&'_ Self, usize) -> RChunks","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,\n starting at the end. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483630,"byte_end":483717,"line_start":114,"line_end":114,"column_start":5,"column_end":92}},{"value":"/ starting at the end. The chunks do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483722,"byte_end":483773,"line_start":115,"line_end":115,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483778,"byte_end":483781,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483786,"byte_end":483851,"line_start":117,"line_end":117,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483856,"byte_end":483927,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483932,"byte_end":483977,"line_start":119,"line_end":119,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483982,"byte_end":483985,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":483990,"byte_end":484004,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484009,"byte_end":484012,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484017,"byte_end":484024,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484029,"byte_end":484055,"line_start":124,"line_end":124,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_rchunks(2).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484060,"byte_end":484126,"line_start":125,"line_end":125,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(chunks, vec![&[4, 5][..], &[2, 3], &[1]]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484131,"byte_end":484188,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484193,"byte_end":484200,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484205,"byte_end":484220,"line_start":128,"line_end":128,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5957},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485022,"byte_end":485039,"line_start":149,"line_end":149,"column_start":8,"column_end":25},"name":"par_rchunks_exact","qualname":"::slice::ParallelSlice::par_rchunks_exact","value":"fn par_rchunks_exact<'_>(&'_ Self, usize) -> RChunksExact","parent":{"krate":0,"index":5948},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of `self` at a time,\n starting at the end. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of `self` at a time,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484421,"byte_end":484500,"line_start":134,"line_end":134,"column_start":5,"column_end":84}},{"value":"/ starting at the end. The chunks do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484505,"byte_end":484556,"line_start":135,"line_end":135,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484561,"byte_end":484564,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484569,"byte_end":484638,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484643,"byte_end":484708,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484713,"byte_end":484771,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484776,"byte_end":484779,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484784,"byte_end":484798,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484803,"byte_end":484806,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484811,"byte_end":484818,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484823,"byte_end":484849,"line_start":144,"line_end":144,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_rchunks_exact(2).collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484854,"byte_end":484926,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(chunks, vec![&[4, 5][..], &[2, 3]]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484931,"byte_end":484982,"line_start":146,"line_end":146,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484987,"byte_end":484994,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":484999,"byte_end":485014,"line_start":148,"line_end":148,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5960},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485291,"byte_end":485308,"line_start":157,"line_end":157,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"<[T] as slice::ParallelSlice>::as_parallel_slice","value":"fn as_parallel_slice<'_>(&'_ Self) -> &'_ [T]","parent":{"krate":0,"index":5948},"children":[],"decl_id":{"krate":0,"index":5950},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485274,"byte_end":485283,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":5961},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485402,"byte_end":485418,"line_start":163,"line_end":163,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T>","parent":null,"children":[{"krate":0,"index":5963},{"krate":0,"index":5964},{"krate":0,"index":5966},{"krate":0,"index":5967},{"krate":0,"index":5968},{"krate":0,"index":5969},{"krate":0,"index":5970},{"krate":0,"index":5971},{"krate":0,"index":5974},{"krate":0,"index":5978},{"krate":0,"index":5982},{"krate":0,"index":5983},{"krate":0,"index":5986}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485348,"byte_end":485391,"line_start":162,"line_end":162,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5963},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485545,"byte_end":485566,"line_start":166,"line_end":166,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"fn as_parallel_slice_mut<'_>(&'_ mut Self) -> &'_ mut [T]","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485434,"byte_end":485507,"line_start":164,"line_end":164,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485512,"byte_end":485537,"line_start":165,"line_end":165,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5964},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486015,"byte_end":486028,"line_start":180,"line_end":180,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"fn par_split_mut<P, '_>(&'_ mut Self, P) -> SplitMut where\nP: for<'_> Fn(&'_ T) -> bool + Sync + Send","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485596,"byte_end":485663,"line_start":168,"line_end":168,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485668,"byte_end":485706,"line_start":169,"line_end":169,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485711,"byte_end":485714,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485719,"byte_end":485733,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485738,"byte_end":485741,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485746,"byte_end":485753,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485758,"byte_end":485784,"line_start":174,"line_end":174,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485789,"byte_end":485843,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485848,"byte_end":485884,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485889,"byte_end":485933,"line_start":177,"line_end":177,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":485938,"byte_end":485995,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486000,"byte_end":486007,"line_start":179,"line_end":179,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5966},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486874,"byte_end":486888,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"fn par_chunks_mut<'_>(&'_ mut Self, usize) -> ChunksMut","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486248,"byte_end":486317,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486322,"byte_end":486386,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486391,"byte_end":486394,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486399,"byte_end":486464,"line_start":193,"line_end":193,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486469,"byte_end":486540,"line_start":194,"line_end":194,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486545,"byte_end":486590,"line_start":195,"line_end":195,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486595,"byte_end":486598,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486603,"byte_end":486617,"line_start":197,"line_end":197,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486622,"byte_end":486625,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486630,"byte_end":486637,"line_start":199,"line_end":199,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486642,"byte_end":486668,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486673,"byte_end":486709,"line_start":201,"line_end":201,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486714,"byte_end":486741,"line_start":202,"line_end":202,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486746,"byte_end":486790,"line_start":203,"line_end":203,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486795,"byte_end":486834,"line_start":204,"line_end":204,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486839,"byte_end":486846,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":486851,"byte_end":486866,"line_start":206,"line_end":206,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5967},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487717,"byte_end":487737,"line_start":229,"line_end":229,"column_start":8,"column_end":28},"name":"par_chunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_chunks_exact_mut","value":"fn par_chunks_exact_mut<'_>(&'_ mut Self, usize) -> ChunksExactMut","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487082,"byte_end":487143,"line_start":212,"line_end":212,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487148,"byte_end":487212,"line_start":213,"line_end":213,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487217,"byte_end":487220,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487225,"byte_end":487294,"line_start":215,"line_end":215,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487299,"byte_end":487364,"line_start":216,"line_end":216,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487369,"byte_end":487427,"line_start":217,"line_end":217,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487432,"byte_end":487435,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487440,"byte_end":487454,"line_start":219,"line_end":219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487459,"byte_end":487462,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487467,"byte_end":487474,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487479,"byte_end":487505,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487510,"byte_end":487546,"line_start":223,"line_end":223,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_exact_mut(3)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487551,"byte_end":487584,"line_start":224,"line_end":224,"column_start":5,"column_end":38}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487589,"byte_end":487633,"line_start":225,"line_end":225,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 4, 5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487638,"byte_end":487677,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487682,"byte_end":487689,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487694,"byte_end":487709,"line_start":228,"line_end":228,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5968},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488589,"byte_end":488604,"line_start":251,"line_end":251,"column_start":8,"column_end":23},"name":"par_rchunks_mut","qualname":"::slice::ParallelSliceMut::par_rchunks_mut","value":"fn par_rchunks_mut<'_>(&'_ mut Self, usize) -> RChunksMut","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,\n starting at the end. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of `self` at a time,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":487941,"byte_end":488028,"line_start":234,"line_end":234,"column_start":5,"column_end":92}},{"value":"/ starting at the end. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488033,"byte_end":488100,"line_start":235,"line_end":235,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488105,"byte_end":488108,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488113,"byte_end":488178,"line_start":237,"line_end":237,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488183,"byte_end":488254,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488259,"byte_end":488304,"line_start":239,"line_end":239,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488309,"byte_end":488312,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488317,"byte_end":488331,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488336,"byte_end":488339,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488344,"byte_end":488351,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488356,"byte_end":488382,"line_start":244,"line_end":244,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488387,"byte_end":488423,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"/ array.par_rchunks_mut(2)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488428,"byte_end":488456,"line_start":246,"line_end":246,"column_start":5,"column_end":33}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488461,"byte_end":488505,"line_start":247,"line_end":247,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [1, 3, 2, 5, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488510,"byte_end":488549,"line_start":248,"line_end":248,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488554,"byte_end":488561,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488566,"byte_end":488581,"line_start":250,"line_end":250,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5969},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489457,"byte_end":489478,"line_start":273,"line_end":273,"column_start":8,"column_end":29},"name":"par_rchunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_rchunks_exact_mut","value":"fn par_rchunks_exact_mut<'_>(&'_ mut Self, usize) -> RChunksExactMut","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of `self` at a time,\n starting at the end. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of `self` at a time,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488800,"byte_end":488879,"line_start":256,"line_end":256,"column_start":5,"column_end":84}},{"value":"/ starting at the end. The chunks are mutable and do not overlap.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488884,"byte_end":488951,"line_start":257,"line_end":257,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488956,"byte_end":488959,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":488964,"byte_end":489033,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489038,"byte_end":489103,"line_start":260,"line_end":260,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489108,"byte_end":489166,"line_start":261,"line_end":261,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489171,"byte_end":489174,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489179,"byte_end":489193,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489198,"byte_end":489201,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489206,"byte_end":489213,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489218,"byte_end":489244,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489249,"byte_end":489285,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/ array.par_rchunks_exact_mut(3)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489290,"byte_end":489324,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489329,"byte_end":489373,"line_start":269,"line_end":269,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [1, 2, 5, 4, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489378,"byte_end":489417,"line_start":270,"line_end":270,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489422,"byte_end":489429,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"track_caller","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489434,"byte_end":489449,"line_start":272,"line_end":272,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":5970},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491150,"byte_end":491158,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"fn par_sort<'_>(&'_ mut Self) where T: Ord","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489684,"byte_end":489716,"line_start":278,"line_end":278,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489721,"byte_end":489724,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489729,"byte_end":489829,"line_start":280,"line_end":280,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489834,"byte_end":489837,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489842,"byte_end":489935,"line_start":282,"line_end":282,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489940,"byte_end":489993,"line_start":283,"line_end":283,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":489998,"byte_end":490055,"line_start":284,"line_end":284,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490060,"byte_end":490063,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490068,"byte_end":490096,"line_start":286,"line_end":286,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490101,"byte_end":490104,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490109,"byte_end":490172,"line_start":288,"line_end":288,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490177,"byte_end":490230,"line_start":289,"line_end":289,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490235,"byte_end":490327,"line_start":290,"line_end":290,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490332,"byte_end":490396,"line_start":291,"line_end":291,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490401,"byte_end":490404,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490409,"byte_end":490502,"line_start":293,"line_end":293,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490507,"byte_end":490557,"line_start":294,"line_end":294,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490562,"byte_end":490565,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490570,"byte_end":490664,"line_start":296,"line_end":296,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490669,"byte_end":490763,"line_start":297,"line_end":297,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490768,"byte_end":490864,"line_start":298,"line_end":298,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490869,"byte_end":490933,"line_start":299,"line_end":299,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490938,"byte_end":490941,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490946,"byte_end":490960,"line_start":301,"line_end":301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490965,"byte_end":490968,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490973,"byte_end":490980,"line_start":303,"line_end":303,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":490985,"byte_end":491011,"line_start":304,"line_end":304,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491016,"byte_end":491019,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491024,"byte_end":491058,"line_start":306,"line_end":306,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491063,"byte_end":491066,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491071,"byte_end":491088,"line_start":308,"line_end":308,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491093,"byte_end":491130,"line_start":309,"line_end":309,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491135,"byte_end":491142,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5971},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493779,"byte_end":493790,"line_start":372,"line_end":372,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"fn par_sort_by<F, '_>(&'_ mut Self, F) where F: for<'_, '_> Fn(&'_ T, &'_ T)\n-> Ordering + Sync","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491273,"byte_end":491332,"line_start":318,"line_end":318,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491337,"byte_end":491340,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491345,"byte_end":491445,"line_start":320,"line_end":320,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491450,"byte_end":491453,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ The comparator function must define a total ordering for the elements in the slice. If","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491458,"byte_end":491548,"line_start":322,"line_end":322,"column_start":5,"column_end":95}},{"value":"/ the ordering is not total, the order of the elements is unspecified. An order is a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491553,"byte_end":491639,"line_start":323,"line_end":323,"column_start":5,"column_end":91}},{"value":"/ total order if it is (for all `a`, `b` and `c`):","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491644,"byte_end":491696,"line_start":324,"line_end":324,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491701,"byte_end":491704,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491709,"byte_end":491796,"line_start":326,"line_end":326,"column_start":5,"column_end":92}},{"value":"/ * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491801,"byte_end":491897,"line_start":327,"line_end":327,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491902,"byte_end":491905,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":491910,"byte_end":491999,"line_start":329,"line_end":329,"column_start":5,"column_end":94}},{"value":"/ `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492004,"byte_end":492090,"line_start":330,"line_end":330,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492095,"byte_end":492098,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492103,"byte_end":492110,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492115,"byte_end":492141,"line_start":333,"line_end":333,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492146,"byte_end":492149,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492154,"byte_end":492202,"line_start":335,"line_end":335,"column_start":5,"column_end":53}},{"value":"/ floats.par_sort_by(|a, b| a.partial_cmp(b).unwrap());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492207,"byte_end":492264,"line_start":336,"line_end":336,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492269,"byte_end":492319,"line_start":337,"line_end":337,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492324,"byte_end":492331,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492336,"byte_end":492339,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492344,"byte_end":492437,"line_start":340,"line_end":340,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492442,"byte_end":492495,"line_start":341,"line_end":341,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492500,"byte_end":492563,"line_start":342,"line_end":342,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492568,"byte_end":492571,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492576,"byte_end":492604,"line_start":344,"line_end":344,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492609,"byte_end":492612,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492617,"byte_end":492680,"line_start":346,"line_end":346,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492685,"byte_end":492738,"line_start":347,"line_end":347,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492743,"byte_end":492835,"line_start":348,"line_end":348,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492840,"byte_end":492904,"line_start":349,"line_end":349,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492909,"byte_end":492912,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":492917,"byte_end":493010,"line_start":351,"line_end":351,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493015,"byte_end":493065,"line_start":352,"line_end":352,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493070,"byte_end":493073,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493078,"byte_end":493172,"line_start":354,"line_end":354,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493177,"byte_end":493271,"line_start":355,"line_end":355,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493276,"byte_end":493372,"line_start":356,"line_end":356,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493377,"byte_end":493441,"line_start":357,"line_end":357,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493446,"byte_end":493449,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493454,"byte_end":493468,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493473,"byte_end":493476,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493481,"byte_end":493488,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493493,"byte_end":493519,"line_start":362,"line_end":362,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493524,"byte_end":493527,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493532,"byte_end":493564,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493569,"byte_end":493604,"line_start":365,"line_end":365,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493609,"byte_end":493644,"line_start":366,"line_end":366,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493649,"byte_end":493652,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493657,"byte_end":493679,"line_start":368,"line_end":368,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493684,"byte_end":493719,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493724,"byte_end":493759,"line_start":370,"line_end":370,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":493764,"byte_end":493771,"line_start":371,"line_end":371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5974},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495858,"byte_end":495873,"line_start":419,"line_end":419,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"fn par_sort_by_key<K, F, '_>(&'_ mut Self, F) where K: Ord,\nF: for<'_> Fn(&'_ T) -> K + Sync","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494003,"byte_end":494066,"line_start":381,"line_end":381,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494071,"byte_end":494074,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* \\* log(*n*))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494079,"byte_end":494174,"line_start":383,"line_end":383,"column_start":5,"column_end":100}},{"value":"/ worst-case, where the key function is *O*(*m*).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494179,"byte_end":494230,"line_start":384,"line_end":384,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494235,"byte_end":494238,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ For expensive key functions (e.g. functions that are not simple property accesses or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494243,"byte_end":494331,"line_start":386,"line_end":386,"column_start":5,"column_end":93}},{"value":"/ basic operations), [`par_sort_by_cached_key`](#method.par_sort_by_cached_key) is likely to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494336,"byte_end":494430,"line_start":387,"line_end":387,"column_start":5,"column_end":99}},{"value":"/ be significantly faster, as it does not recompute element keys.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494435,"byte_end":494502,"line_start":388,"line_end":388,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494507,"byte_end":494510,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494515,"byte_end":494608,"line_start":390,"line_end":390,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494613,"byte_end":494666,"line_start":391,"line_end":391,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494671,"byte_end":494742,"line_start":392,"line_end":392,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494747,"byte_end":494750,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494755,"byte_end":494783,"line_start":394,"line_end":394,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494788,"byte_end":494791,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494796,"byte_end":494859,"line_start":396,"line_end":396,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494864,"byte_end":494917,"line_start":397,"line_end":397,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":494922,"byte_end":495014,"line_start":398,"line_end":398,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495019,"byte_end":495083,"line_start":399,"line_end":399,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495088,"byte_end":495091,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495096,"byte_end":495189,"line_start":401,"line_end":401,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495194,"byte_end":495244,"line_start":402,"line_end":402,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495249,"byte_end":495252,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495257,"byte_end":495351,"line_start":404,"line_end":404,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495356,"byte_end":495450,"line_start":405,"line_end":405,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495455,"byte_end":495551,"line_start":406,"line_end":406,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495556,"byte_end":495620,"line_start":407,"line_end":407,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495625,"byte_end":495628,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495633,"byte_end":495647,"line_start":409,"line_end":409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495652,"byte_end":495655,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495660,"byte_end":495667,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495672,"byte_end":495698,"line_start":412,"line_end":412,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495703,"byte_end":495706,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495711,"byte_end":495748,"line_start":414,"line_end":414,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495753,"byte_end":495756,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495761,"byte_end":495796,"line_start":416,"line_end":416,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495801,"byte_end":495838,"line_start":417,"line_end":417,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":495843,"byte_end":495850,"line_start":418,"line_end":418,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5978},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497936,"byte_end":497958,"line_start":467,"line_end":467,"column_start":8,"column_end":30},"name":"par_sort_by_cached_key","qualname":"::slice::ParallelSliceMut::par_sort_by_cached_key","value":"fn par_sort_by_cached_key<K, F, '_>(&'_ mut Self, F) where\nF: for<'_> Fn(&'_ T) -> K + Sync, K: Ord + Send","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496047,"byte_end":496110,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496115,"byte_end":496118,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ During sorting, the key function is called at most once per element, by using","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496123,"byte_end":496204,"line_start":429,"line_end":429,"column_start":5,"column_end":86}},{"value":"/ temporary storage to remember the results of key evaluation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496209,"byte_end":496273,"line_start":430,"line_end":430,"column_start":5,"column_end":69}},{"value":"/ The key function is called in parallel, so the order of calls is completely unspecified.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496278,"byte_end":496370,"line_start":431,"line_end":431,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496375,"byte_end":496378,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* + *n* \\* log(*n*))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496383,"byte_end":496484,"line_start":433,"line_end":433,"column_start":5,"column_end":106}},{"value":"/ worst-case, where the key function is *O*(*m*).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496489,"byte_end":496540,"line_start":434,"line_end":434,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496545,"byte_end":496548,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ For simple key functions (e.g., functions that are property accesses or","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496553,"byte_end":496628,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/ basic operations), [`par_sort_by_key`](#method.par_sort_by_key) is likely to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496633,"byte_end":496716,"line_start":437,"line_end":437,"column_start":5,"column_end":88}},{"value":"/ faster.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496721,"byte_end":496732,"line_start":438,"line_end":438,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496737,"byte_end":496740,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496745,"byte_end":496773,"line_start":440,"line_end":440,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496778,"byte_end":496781,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496786,"byte_end":496879,"line_start":442,"line_end":442,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496884,"byte_end":496976,"line_start":443,"line_end":443,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":496981,"byte_end":497068,"line_start":444,"line_end":444,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497073,"byte_end":497157,"line_start":445,"line_end":445,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497162,"byte_end":497189,"line_start":446,"line_end":446,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497194,"byte_end":497197,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ In the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497202,"byte_end":497293,"line_start":448,"line_end":448,"column_start":5,"column_end":96}},{"value":"/ length of the slice.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497298,"byte_end":497322,"line_start":449,"line_end":449,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497327,"byte_end":497330,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497335,"byte_end":497424,"line_start":451,"line_end":451,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497429,"byte_end":497522,"line_start":452,"line_end":452,"column_start":5,"column_end":98}},{"value":"/ parallel. Finally, after sorting the cached keys, the item positions are updated sequentially.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497527,"byte_end":497625,"line_start":453,"line_end":453,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497630,"byte_end":497633,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497638,"byte_end":497684,"line_start":455,"line_end":455,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497689,"byte_end":497692,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497697,"byte_end":497711,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497716,"byte_end":497719,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497724,"byte_end":497731,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497736,"byte_end":497762,"line_start":460,"line_end":460,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497767,"byte_end":497770,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 32, -3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497775,"byte_end":497813,"line_start":462,"line_end":462,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497818,"byte_end":497821,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_cached_key(|k| k.to_string());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497826,"byte_end":497874,"line_start":464,"line_end":464,"column_start":5,"column_end":53}},{"value":"/ assert!(v == [-3, -5, 2, 32, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497879,"byte_end":497916,"line_start":465,"line_end":465,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":497921,"byte_end":497928,"line_start":466,"line_end":466,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5982},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501140,"byte_end":501157,"line_start":550,"line_end":550,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"fn par_sort_unstable<'_>(&'_ mut Self) where T: Ord","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but might not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but might not preserve the order of equal elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":499770,"byte_end":499854,"line_start":518,"line_end":518,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":499859,"byte_end":499862,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e., may reorder equal elements), in-place","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":499867,"byte_end":499937,"line_start":520,"line_end":520,"column_start":5,"column_end":75}},{"value":"/ (i.e., does not allocate), and *O*(*n* \\* log(*n*)) worst-case.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":499942,"byte_end":500009,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500014,"byte_end":500017,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500022,"byte_end":500050,"line_start":523,"line_end":523,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500055,"byte_end":500058,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500063,"byte_end":500156,"line_start":525,"line_end":525,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500161,"byte_end":500253,"line_start":526,"line_end":526,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500258,"byte_end":500345,"line_start":527,"line_end":527,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500350,"byte_end":500434,"line_start":528,"line_end":528,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500439,"byte_end":500466,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500471,"byte_end":500474,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ It is typically faster than stable sorting, except in a few special cases, e.g., when the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500479,"byte_end":500572,"line_start":531,"line_end":531,"column_start":5,"column_end":98}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500577,"byte_end":500637,"line_start":532,"line_end":532,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500642,"byte_end":500645,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500650,"byte_end":500739,"line_start":534,"line_end":534,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500744,"byte_end":500837,"line_start":535,"line_end":535,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500842,"byte_end":500855,"line_start":536,"line_end":536,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500860,"byte_end":500863,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500868,"byte_end":500914,"line_start":538,"line_end":538,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500919,"byte_end":500922,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500927,"byte_end":500941,"line_start":540,"line_end":540,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500946,"byte_end":500949,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500954,"byte_end":500961,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500966,"byte_end":500992,"line_start":543,"line_end":543,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":500997,"byte_end":501000,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501005,"byte_end":501039,"line_start":545,"line_end":545,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501044,"byte_end":501047,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501052,"byte_end":501078,"line_start":547,"line_end":547,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501083,"byte_end":501120,"line_start":548,"line_end":548,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501125,"byte_end":501132,"line_start":549,"line_end":549,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5983},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503702,"byte_end":503722,"line_start":611,"line_end":611,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"fn par_sort_unstable_by<F, '_>(&'_ mut Self, F) where\nF: for<'_, '_> Fn(&'_ T, &'_ T) -> Ordering + Sync","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but might not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but might not preserve the order of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501272,"byte_end":501367,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ equal elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501372,"byte_end":501391,"line_start":558,"line_end":558,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501396,"byte_end":501399,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e., may reorder equal elements), in-place","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501404,"byte_end":501474,"line_start":560,"line_end":560,"column_start":5,"column_end":75}},{"value":"/ (i.e., does not allocate), and *O*(*n* \\* log(*n*)) worst-case.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501479,"byte_end":501546,"line_start":561,"line_end":561,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501551,"byte_end":501554,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ The comparator function must define a total ordering for the elements in the slice. If","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501559,"byte_end":501649,"line_start":563,"line_end":563,"column_start":5,"column_end":95}},{"value":"/ the ordering is not total, the order of the elements is unspecified. An order is a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501654,"byte_end":501740,"line_start":564,"line_end":564,"column_start":5,"column_end":91}},{"value":"/ total order if it is (for all `a`, `b` and `c`):","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501745,"byte_end":501797,"line_start":565,"line_end":565,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501802,"byte_end":501805,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501810,"byte_end":501897,"line_start":567,"line_end":567,"column_start":5,"column_end":92}},{"value":"/ * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":501902,"byte_end":501998,"line_start":568,"line_end":568,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502003,"byte_end":502006,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502011,"byte_end":502100,"line_start":570,"line_end":570,"column_start":5,"column_end":94}},{"value":"/ `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502105,"byte_end":502191,"line_start":571,"line_end":571,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502196,"byte_end":502199,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502204,"byte_end":502211,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502216,"byte_end":502242,"line_start":574,"line_end":574,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502247,"byte_end":502250,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502255,"byte_end":502303,"line_start":576,"line_end":576,"column_start":5,"column_end":53}},{"value":"/ floats.par_sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502308,"byte_end":502374,"line_start":577,"line_end":577,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502379,"byte_end":502429,"line_start":578,"line_end":578,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502434,"byte_end":502441,"line_start":579,"line_end":579,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502446,"byte_end":502449,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502454,"byte_end":502482,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502487,"byte_end":502490,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502495,"byte_end":502588,"line_start":583,"line_end":583,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502593,"byte_end":502685,"line_start":584,"line_end":584,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502690,"byte_end":502777,"line_start":585,"line_end":585,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502782,"byte_end":502866,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502871,"byte_end":502898,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502903,"byte_end":502906,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ It is typically faster than stable sorting, except in a few special cases, e.g., when the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":502911,"byte_end":503004,"line_start":589,"line_end":589,"column_start":5,"column_end":98}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503009,"byte_end":503069,"line_start":590,"line_end":590,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503074,"byte_end":503077,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503082,"byte_end":503171,"line_start":592,"line_end":592,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503176,"byte_end":503269,"line_start":593,"line_end":593,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503274,"byte_end":503287,"line_start":594,"line_end":594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503292,"byte_end":503295,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503300,"byte_end":503346,"line_start":596,"line_end":596,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503351,"byte_end":503354,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503359,"byte_end":503373,"line_start":598,"line_end":598,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503378,"byte_end":503381,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503386,"byte_end":503393,"line_start":600,"line_end":600,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503398,"byte_end":503424,"line_start":601,"line_end":601,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503429,"byte_end":503432,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503437,"byte_end":503469,"line_start":603,"line_end":603,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503474,"byte_end":503518,"line_start":604,"line_end":604,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503523,"byte_end":503558,"line_start":605,"line_end":605,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503563,"byte_end":503566,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503571,"byte_end":503593,"line_start":607,"line_end":607,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503598,"byte_end":503642,"line_start":608,"line_end":608,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503647,"byte_end":503682,"line_start":609,"line_end":609,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503687,"byte_end":503694,"line_start":610,"line_end":610,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5986},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505468,"byte_end":505492,"line_start":655,"line_end":655,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"fn par_sort_unstable_by_key<K, F, '_>(&'_ mut Self, F) where K: Ord,\nF: for<'_> Fn(&'_ T) -> K + Sync","parent":{"krate":0,"index":5961},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but might not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but might not preserve the order","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":503935,"byte_end":504031,"line_start":620,"line_end":620,"column_start":5,"column_end":101}},{"value":"/ of equal elements.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504036,"byte_end":504058,"line_start":621,"line_end":621,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504063,"byte_end":504066,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e., may reorder equal elements), in-place","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504071,"byte_end":504141,"line_start":623,"line_end":623,"column_start":5,"column_end":75}},{"value":"/ (i.e., does not allocate), and *O*(m \\* *n* \\* log(*n*)) worst-case,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504146,"byte_end":504218,"line_start":624,"line_end":624,"column_start":5,"column_end":77}},{"value":"/ where the key function is *O*(*m*).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504223,"byte_end":504262,"line_start":625,"line_end":625,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504267,"byte_end":504270,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504275,"byte_end":504303,"line_start":627,"line_end":627,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504308,"byte_end":504311,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504316,"byte_end":504409,"line_start":629,"line_end":629,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504414,"byte_end":504506,"line_start":630,"line_end":630,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504511,"byte_end":504598,"line_start":631,"line_end":631,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504603,"byte_end":504687,"line_start":632,"line_end":632,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504692,"byte_end":504719,"line_start":633,"line_end":633,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504724,"byte_end":504727,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Due to its key calling strategy, `par_sort_unstable_by_key` is likely to be slower than","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504732,"byte_end":504823,"line_start":635,"line_end":635,"column_start":5,"column_end":96}},{"value":"/ [`par_sort_by_cached_key`](#method.par_sort_by_cached_key) in cases where the key function","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504828,"byte_end":504922,"line_start":636,"line_end":636,"column_start":5,"column_end":99}},{"value":"/ is expensive.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504927,"byte_end":504944,"line_start":637,"line_end":637,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504949,"byte_end":504952,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":504957,"byte_end":505046,"line_start":639,"line_end":639,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505051,"byte_end":505144,"line_start":640,"line_end":640,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505149,"byte_end":505162,"line_start":641,"line_end":641,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505167,"byte_end":505170,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505175,"byte_end":505221,"line_start":643,"line_end":643,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505226,"byte_end":505229,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505234,"byte_end":505248,"line_start":645,"line_end":645,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505253,"byte_end":505256,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505261,"byte_end":505268,"line_start":647,"line_end":647,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505273,"byte_end":505299,"line_start":648,"line_end":648,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505304,"byte_end":505307,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505312,"byte_end":505349,"line_start":650,"line_end":650,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505354,"byte_end":505357,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505362,"byte_end":505406,"line_start":652,"line_end":652,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505411,"byte_end":505448,"line_start":653,"line_end":653,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505453,"byte_end":505460,"line_start":654,"line_end":654,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5992},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505729,"byte_end":505750,"line_start":666,"line_end":666,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"<[T] as slice::ParallelSliceMut>::as_parallel_slice_mut","value":"fn as_parallel_slice_mut<'_>(&'_ mut Self) -> &'_ mut [T]","parent":{"krate":0,"index":5961},"children":[],"decl_id":{"krate":0,"index":5963},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505712,"byte_end":505721,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5998},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":505931,"byte_end":505944,"line_start":675,"line_end":675,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data [T] as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6004},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506149,"byte_end":506162,"line_start":684,"line_end":684,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data mut [T] as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9074},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506308,"byte_end":506312,"line_start":691,"line_end":691,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":9077}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506226,"byte_end":506279,"line_start":689,"line_end":689,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":6008},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506412,"byte_end":506417,"line_start":696,"line_end":696,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6013},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506570,"byte_end":506585,"line_start":704,"line_end":704,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Iter as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6015},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506724,"byte_end":506731,"line_start":711,"line_end":711,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Iter as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6019},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506873,"byte_end":506878,"line_start":717,"line_end":717,"column_start":8,"column_end":13},"name":"drive","qualname":"<Iter as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6021},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507008,"byte_end":507011,"line_start":724,"line_end":724,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6022},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507069,"byte_end":507082,"line_start":728,"line_end":728,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Iter as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9082},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507819,"byte_end":507826,"line_start":756,"line_end":756,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":9085},{"krate":0,"index":9086}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507723,"byte_end":507790,"line_start":754,"line_end":754,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":6038},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507953,"byte_end":507958,"line_start":762,"line_end":762,"column_start":8,"column_end":13},"name":"clone","qualname":"<Windows as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6043},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508119,"byte_end":508134,"line_start":770,"line_end":770,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Windows as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6045},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508273,"byte_end":508280,"line_start":777,"line_end":777,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Windows as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6049},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508425,"byte_end":508430,"line_start":783,"line_end":783,"column_start":8,"column_end":13},"name":"drive","qualname":"<Windows as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6051},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508560,"byte_end":508563,"line_start":790,"line_end":790,"column_start":8,"column_end":11},"name":"len","qualname":"<Windows as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6052},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508698,"byte_end":508711,"line_start":795,"line_end":795,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Windows as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9091},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509863,"byte_end":509870,"line_start":838,"line_end":838,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":9094}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509783,"byte_end":509834,"line_start":836,"line_end":836,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":6070},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510027,"byte_end":510042,"line_start":845,"line_end":845,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<IterMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6072},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510181,"byte_end":510188,"line_start":852,"line_end":852,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<IterMut as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6076},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510333,"byte_end":510338,"line_start":858,"line_end":858,"column_start":8,"column_end":13},"name":"drive","qualname":"<IterMut as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6078},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510468,"byte_end":510471,"line_start":865,"line_end":865,"column_start":8,"column_end":11},"name":"len","qualname":"<IterMut as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6079},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510529,"byte_end":510542,"line_start":869,"line_end":869,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<IterMut as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6092},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511322,"byte_end":511327,"line_start":899,"line_end":899,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6096},{"krate":0,"index":6097}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511252,"byte_end":511310,"line_start":898,"line_end":898,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":6102},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511450,"byte_end":511455,"line_start":905,"line_end":905,"column_start":8,"column_end":13},"name":"clone","qualname":"<Split as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2887},"children":[],"decl_id":{"krate":2,"index":2888},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6107},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511638,"byte_end":511641,"line_start":914,"line_end":914,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Split as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6113},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511924,"byte_end":511939,"line_start":926,"line_end":926,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Split as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6126},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513196,"byte_end":513204,"line_start":975,"line_end":975,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":6130},{"krate":0,"index":6131}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513118,"byte_end":513184,"line_start":974,"line_end":974,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":6136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513334,"byte_end":513337,"line_start":981,"line_end":981,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SplitMut as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10298},"children":[],"decl_id":{"krate":2,"index":10299},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6142},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513656,"byte_end":513671,"line_start":995,"line_end":995,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<SplitMut as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6155},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","parent":null,"children":[{"krate":0,"index":6156},{"krate":0,"index":6157},{"krate":0,"index":6158},{"krate":0,"index":6159},{"krate":0,"index":6160},{"krate":0,"index":6161},{"krate":0,"index":6162},{"krate":0,"index":6178},{"krate":0,"index":6180},{"krate":0,"index":6197},{"krate":0,"index":6200},{"krate":0,"index":6204},{"krate":0,"index":6205},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":9139},{"krate":0,"index":9142},{"krate":0,"index":9145},{"krate":0,"index":6209},{"krate":0,"index":6212},{"krate":0,"index":6217},{"krate":0,"index":9148},{"krate":0,"index":9151},{"krate":0,"index":9154},{"krate":0,"index":6223},{"krate":0,"index":6227},{"krate":0,"index":6232},{"krate":0,"index":9157},{"krate":0,"index":9160},{"krate":0,"index":9163},{"krate":0,"index":6238},{"krate":0,"index":6241},{"krate":0,"index":6246},{"krate":0,"index":9166},{"krate":0,"index":9169},{"krate":0,"index":9172},{"krate":0,"index":6252},{"krate":0,"index":6255},{"krate":0,"index":6260},{"krate":0,"index":9175},{"krate":0,"index":9180},{"krate":0,"index":9184},{"krate":0,"index":6266},{"krate":0,"index":6270},{"krate":0,"index":6276},{"krate":0,"index":9188},{"krate":0,"index":9193},{"krate":0,"index":9197},{"krate":0,"index":6286},{"krate":0,"index":6292},{"krate":0,"index":6296},{"krate":0,"index":6301},{"krate":0,"index":6307},{"krate":0,"index":9201},{"krate":0,"index":9205},{"krate":0,"index":9208},{"krate":0,"index":6316},{"krate":0,"index":6317},{"krate":0,"index":9211},{"krate":0,"index":9215},{"krate":0,"index":9218},{"krate":0,"index":6322},{"krate":0,"index":6323},{"krate":0,"index":9221},{"krate":0,"index":9226},{"krate":0,"index":9230},{"krate":0,"index":6328},{"krate":0,"index":6334},{"krate":0,"index":6340},{"krate":0,"index":9234},{"krate":0,"index":9239},{"krate":0,"index":9243},{"krate":0,"index":6348},{"krate":0,"index":6355},{"krate":0,"index":6361}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"/ Parallel iterator types for [strings][std::str]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605406,"byte_end":605457,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605458,"byte_end":605461,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605462,"byte_end":605540,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605541,"byte_end":605579,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605580,"byte_end":605583,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605584,"byte_end":605656,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605657,"byte_end":605729,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605730,"byte_end":605805,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605806,"byte_end":605878,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605879,"byte_end":605919,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605920,"byte_end":605923,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":605924,"byte_end":606003,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":606004,"byte_end":606089,"line_start":13,"line_end":13,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":606090,"byte_end":606093,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":606094,"byte_end":606151,"line_start":15,"line_end":15,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":6162},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607400,"byte_end":607414,"line_start":60,"line_end":60,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":6163},{"krate":0,"index":6164},{"krate":0,"index":6165},{"krate":0,"index":6166},{"krate":0,"index":6167},{"krate":0,"index":6168},{"krate":0,"index":6170},{"krate":0,"index":6172},{"krate":0,"index":6173},{"krate":0,"index":6174},{"krate":0,"index":6176}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607353,"byte_end":607389,"line_start":59,"line_end":59,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":6163},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607531,"byte_end":607549,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"fn as_parallel_string<'_>(&'_ Self) -> &'_ str","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607421,"byte_end":607493,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607498,"byte_end":607523,"line_start":62,"line_end":62,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":6164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607834,"byte_end":607843,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"fn par_chars<'_>(&'_ Self) -> Chars","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607571,"byte_end":607635,"line_start":65,"line_end":65,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607640,"byte_end":607643,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607648,"byte_end":607662,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607667,"byte_end":607670,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607675,"byte_end":607682,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607687,"byte_end":607713,"line_start":70,"line_end":70,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607718,"byte_end":607778,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607783,"byte_end":607814,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607819,"byte_end":607826,"line_start":73,"line_end":73,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6165},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608252,"byte_end":608268,"line_start":89,"line_end":89,"column_start":8,"column_end":24},"name":"par_char_indices","qualname":"::str::ParallelString::par_char_indices","value":"fn par_char_indices<'_>(&'_ Self) -> CharIndices","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string, with their positions.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string, with their positions.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":607949,"byte_end":608035,"line_start":80,"line_end":80,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608040,"byte_end":608043,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608048,"byte_end":608062,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608067,"byte_end":608070,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608075,"byte_end":608082,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608087,"byte_end":608113,"line_start":85,"line_end":85,"column_start":5,"column_end":31}},{"value":"/ let min = \"hello\".par_char_indices().min_by_key(|&(_i, c)| c as i32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608118,"byte_end":608191,"line_start":86,"line_end":86,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Some((1, 'e')), min);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608196,"byte_end":608232,"line_start":87,"line_end":87,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608237,"byte_end":608244,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608928,"byte_end":608937,"line_start":109,"line_end":109,"column_start":8,"column_end":17},"name":"par_bytes","qualname":"::str::ParallelString::par_bytes","value":"fn par_bytes<'_>(&'_ Self) -> Bytes","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the bytes of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the bytes of a string.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608386,"byte_end":608445,"line_start":95,"line_end":95,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608450,"byte_end":608453,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that multi-byte sequences (for code points greater than `U+007F`)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608458,"byte_end":608532,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ are produced as separate items, but will not be split across threads.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608537,"byte_end":608610,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ If you would prefer an indexed iterator without that guarantee, consider","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608615,"byte_end":608691,"line_start":99,"line_end":99,"column_start":5,"column_end":81}},{"value":"/ `string.as_bytes().par_iter().copied()` instead.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608696,"byte_end":608748,"line_start":100,"line_end":100,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608753,"byte_end":608756,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608761,"byte_end":608775,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608780,"byte_end":608783,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608788,"byte_end":608795,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608800,"byte_end":608826,"line_start":105,"line_end":105,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_bytes().max();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608831,"byte_end":608871,"line_start":106,"line_end":106,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(b'o'), max);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608876,"byte_end":608908,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":608913,"byte_end":608920,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609658,"byte_end":609674,"line_start":133,"line_end":133,"column_start":8,"column_end":24},"name":"par_encode_utf16","qualname":"::str::ParallelString::par_encode_utf16","value":"fn par_encode_utf16<'_>(&'_ Self) -> EncodeUtf16","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over a string encoded as UTF-16.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over a string encoded as UTF-16.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609043,"byte_end":609107,"line_start":115,"line_end":115,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609112,"byte_end":609115,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Note that surrogate pairs (for code points greater than `U+FFFF`) are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609120,"byte_end":609193,"line_start":117,"line_end":117,"column_start":5,"column_end":78}},{"value":"/ produced as separate items, but will not be split across threads.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609198,"byte_end":609267,"line_start":118,"line_end":118,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609272,"byte_end":609275,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609280,"byte_end":609294,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609299,"byte_end":609302,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609307,"byte_end":609314,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609319,"byte_end":609345,"line_start":123,"line_end":123,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609350,"byte_end":609353,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let max = \"hello\".par_encode_utf16().max();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609358,"byte_end":609405,"line_start":125,"line_end":125,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(b'o' as u16), max);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609410,"byte_end":609449,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609454,"byte_end":609457,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let text = \"Zażółć gęślą jaźń\";","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609462,"byte_end":609506,"line_start":128,"line_end":128,"column_start":5,"column_end":40}},{"value":"/ let utf8_len = text.len();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609511,"byte_end":609541,"line_start":129,"line_end":129,"column_start":5,"column_end":35}},{"value":"/ let utf16_len = text.par_encode_utf16().count();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609546,"byte_end":609598,"line_start":130,"line_end":130,"column_start":5,"column_end":57}},{"value":"/ assert!(utf16_len <= utf8_len);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609603,"byte_end":609638,"line_start":131,"line_end":131,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609643,"byte_end":609650,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6168},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610402,"byte_end":610411,"line_start":156,"line_end":156,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"fn par_split<P, '_>(&'_ Self, P) -> Split where P: Pattern","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609792,"byte_end":609854,"line_start":139,"line_end":139,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609859,"byte_end":609917,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609922,"byte_end":609925,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":609930,"byte_end":610001,"line_start":142,"line_end":142,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610006,"byte_end":610078,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610083,"byte_end":610123,"line_start":144,"line_end":144,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610128,"byte_end":610131,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610136,"byte_end":610150,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610155,"byte_end":610158,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610163,"byte_end":610170,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610175,"byte_end":610201,"line_start":149,"line_end":149,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610206,"byte_end":610248,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610253,"byte_end":610275,"line_start":151,"line_end":151,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610280,"byte_end":610332,"line_start":152,"line_end":152,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610337,"byte_end":610351,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610356,"byte_end":610382,"line_start":154,"line_end":154,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610387,"byte_end":610394,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6170},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611280,"byte_end":611300,"line_start":178,"line_end":178,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"fn par_split_terminator<P, '_>(&'_ Self, P) -> SplitTerminator where\nP: Pattern","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610531,"byte_end":610594,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610599,"byte_end":610668,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610673,"byte_end":610743,"line_start":162,"line_end":162,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610748,"byte_end":610790,"line_start":163,"line_end":163,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610795,"byte_end":610798,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610803,"byte_end":610874,"line_start":165,"line_end":165,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610879,"byte_end":610951,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":610956,"byte_end":610996,"line_start":167,"line_end":167,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611001,"byte_end":611004,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611009,"byte_end":611023,"line_start":169,"line_end":169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611028,"byte_end":611031,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611036,"byte_end":611043,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611048,"byte_end":611074,"line_start":172,"line_end":172,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611079,"byte_end":611118,"line_start":173,"line_end":173,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611123,"byte_end":611178,"line_start":174,"line_end":174,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611183,"byte_end":611202,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611207,"byte_end":611260,"line_start":176,"line_end":176,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611265,"byte_end":611272,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6172},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611971,"byte_end":611980,"line_start":197,"line_end":197,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"fn par_lines<'_>(&'_ Self) -> Lines","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611442,"byte_end":611516,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611521,"byte_end":611591,"line_start":183,"line_end":183,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611596,"byte_end":611671,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611676,"byte_end":611699,"line_start":185,"line_end":185,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611704,"byte_end":611707,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611712,"byte_end":611726,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611731,"byte_end":611734,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611739,"byte_end":611746,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611751,"byte_end":611777,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611782,"byte_end":611830,"line_start":191,"line_end":191,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611835,"byte_end":611855,"line_start":192,"line_end":192,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611860,"byte_end":611885,"line_start":193,"line_end":193,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611890,"byte_end":611909,"line_start":194,"line_end":194,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611914,"byte_end":611951,"line_start":195,"line_end":195,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":611956,"byte_end":611963,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6173},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612605,"byte_end":612625,"line_start":216,"line_end":216,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"fn par_split_whitespace<'_>(&'_ Self) -> SplitWhitespace","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612055,"byte_end":612127,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612132,"byte_end":612174,"line_start":202,"line_end":202,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612179,"byte_end":612182,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612187,"byte_end":612260,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612265,"byte_end":612330,"line_start":205,"line_end":205,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612335,"byte_end":612338,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612343,"byte_end":612357,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612362,"byte_end":612365,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612370,"byte_end":612377,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612382,"byte_end":612408,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612413,"byte_end":612459,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612464,"byte_end":612495,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612500,"byte_end":612539,"line_start":213,"line_end":213,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612544,"byte_end":612585,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612590,"byte_end":612597,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6174},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613342,"byte_end":613353,"line_start":237,"line_end":237,"column_start":8,"column_end":19},"name":"par_matches","qualname":"::str::ParallelString::par_matches","value":"fn par_matches<P, '_>(&'_ Self, P) -> Matches where P: Pattern","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a\n given character or predicate, similar to `str::matches`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612720,"byte_end":612780,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/ given character or predicate, similar to `str::matches`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612785,"byte_end":612845,"line_start":221,"line_end":221,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612850,"byte_end":612853,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612858,"byte_end":612929,"line_start":223,"line_end":223,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":612934,"byte_end":613006,"line_start":224,"line_end":224,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613011,"byte_end":613051,"line_start":225,"line_end":225,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613056,"byte_end":613059,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613064,"byte_end":613078,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613083,"byte_end":613086,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613091,"byte_end":613098,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613103,"byte_end":613129,"line_start":230,"line_end":230,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613134,"byte_end":613176,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"/    .par_matches(char::is_numeric)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613181,"byte_end":613218,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"/    .map(|s| s.parse::<i32>().expect(\"digit\"))","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613223,"byte_end":613272,"line_start":233,"line_end":233,"column_start":5,"column_end":54}},{"value":"/    .sum();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613277,"byte_end":613291,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613296,"byte_end":613322,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613327,"byte_end":613334,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6176},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614171,"byte_end":614188,"line_start":260,"line_end":260,"column_start":8,"column_end":25},"name":"par_match_indices","qualname":"::str::ParallelString::par_match_indices","value":"fn par_match_indices<P, '_>(&'_ Self, P) -> MatchIndices where P: Pattern","parent":{"krate":0,"index":6162},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a given character\n or predicate, with their positions, similar to `str::match_indices`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a given character","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613511,"byte_end":613587,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ or predicate, with their positions, similar to `str::match_indices`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613592,"byte_end":613664,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613669,"byte_end":613672,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613677,"byte_end":613748,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char`, `&[char]`, and any function or closure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613753,"byte_end":613825,"line_start":248,"line_end":248,"column_start":5,"column_end":77}},{"value":"/ `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613830,"byte_end":613870,"line_start":249,"line_end":249,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613875,"byte_end":613878,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613883,"byte_end":613897,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613902,"byte_end":613905,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613910,"byte_end":613917,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613922,"byte_end":613948,"line_start":254,"line_end":254,"column_start":5,"column_end":31}},{"value":"/ let digits: Vec<_> = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":613953,"byte_end":614004,"line_start":255,"line_end":255,"column_start":5,"column_end":56}},{"value":"/    .par_match_indices(char::is_numeric)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614009,"byte_end":614052,"line_start":256,"line_end":256,"column_start":5,"column_end":48}},{"value":"/    .collect();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614057,"byte_end":614075,"line_start":257,"line_end":257,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(digits, vec![(0, \"1\"), (3, \"2\"), (14, \"3\"), (17, \"4\")]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614080,"byte_end":614151,"line_start":258,"line_end":258,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614156,"byte_end":614163,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6179},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614405,"byte_end":614423,"line_start":270,"line_end":270,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"<str as str::ParallelString>::as_parallel_string","value":"fn as_parallel_string<'_>(&'_ Self) -> &'_ str","parent":{"krate":0,"index":6162},"children":[],"decl_id":{"krate":0,"index":6163},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614388,"byte_end":614397,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":6184},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615085,"byte_end":615092,"line_start":288,"line_end":288,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":9099},{"krate":0,"index":6185},{"krate":0,"index":6186},{"krate":0,"index":6187},{"krate":0,"index":6188},{"krate":0,"index":6191},{"krate":0,"index":6194}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614872,"byte_end":614943,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614948,"byte_end":614993,"line_start":285,"line_end":285,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":614998,"byte_end":615001,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615006,"byte_end":615070,"line_start":287,"line_end":287,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6185},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615152,"byte_end":615159,"line_start":290,"line_end":290,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"fn find_in<'_, '_>(&'_ Self, &'_ str) -> Option<usize>","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6186},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615212,"byte_end":615220,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"fn rfind_in<'_, '_>(&'_ Self, &'_ str) -> Option<usize>","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615273,"byte_end":615285,"line_start":292,"line_end":292,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"fn is_suffix_of<'_, '_>(&'_ Self, &'_ str) -> bool","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6188},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615329,"byte_end":615340,"line_start":293,"line_end":293,"column_start":12,"column_end":23},"name":"fold_splits","qualname":"::str::private::Pattern::fold_splits","value":"fn fold_splits<'ch, F, '_>(&'_ Self, &'ch str, F, bool) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615467,"byte_end":615479,"line_start":296,"line_end":296,"column_start":12,"column_end":24},"name":"fold_matches","qualname":"::str::private::Pattern::fold_matches","value":"fn fold_matches<'ch, F, '_>(&'_ Self, &'ch str, F) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615589,"byte_end":615607,"line_start":299,"line_end":299,"column_start":12,"column_end":30},"name":"fold_match_indices","qualname":"::str::private::Pattern::fold_match_indices","value":"fn fold_match_indices<'ch, F, '_>(&'_ Self, &'ch str, F, usize) -> F where\nF: Folder<(usize, &'ch str)>","parent":{"krate":0,"index":6184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9139},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617504,"byte_end":617509,"line_start":373,"line_end":373,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":9141}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617415,"byte_end":617468,"line_start":371,"line_end":371,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":6215},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617667,"byte_end":617682,"line_start":384,"line_end":384,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Chars as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9148},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":618551,"byte_end":618562,"line_start":417,"line_end":417,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":9150}],"decl_id":null,"docs":" Parallel iterator over the characters of a string, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string, with their positions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":618440,"byte_end":618515,"line_start":415,"line_end":415,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":6230},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":618759,"byte_end":618774,"line_start":429,"line_end":429,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<CharIndices as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":619934,"byte_end":619939,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":9159}],"decl_id":null,"docs":" Parallel iterator over the bytes of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the bytes of a string","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":619850,"byte_end":619898,"line_start":471,"line_end":471,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":6244},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620095,"byte_end":620110,"line_start":484,"line_end":484,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Bytes as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9166},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620955,"byte_end":620966,"line_start":517,"line_end":517,"column_start":12,"column_end":23},"name":"EncodeUtf16","qualname":"::str::EncodeUtf16","value":"EncodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":9168}],"decl_id":null,"docs":" Parallel iterator over a string encoded as UTF-16\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a string encoded as UTF-16","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620866,"byte_end":620919,"line_start":515,"line_end":515,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":6258},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621135,"byte_end":621150,"line_start":528,"line_end":528,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<EncodeUtf16 as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9175},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622034,"byte_end":622039,"line_start":561,"line_end":561,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":9178},{"krate":0,"index":9179}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621938,"byte_end":621998,"line_start":559,"line_end":559,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":6274},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622328,"byte_end":622343,"line_start":575,"line_end":575,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Split as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9188},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":623708,"byte_end":623723,"line_start":622,"line_end":622,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":9191},{"krate":0,"index":9192}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":623601,"byte_end":623672,"line_start":620,"line_end":620,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":6305},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624496,"byte_end":624511,"line_start":650,"line_end":650,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<SplitTerminator as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9201},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":625581,"byte_end":625586,"line_start":688,"line_end":688,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":625501,"byte_end":625545,"line_start":686,"line_end":686,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":6320},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":625783,"byte_end":625798,"line_start":698,"line_end":698,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Lines as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9211},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626207,"byte_end":626222,"line_start":713,"line_end":713,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626110,"byte_end":626171,"line_start":711,"line_end":711,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":6326},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626392,"byte_end":626407,"line_start":723,"line_end":723,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<SplitWhitespace as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9221},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626811,"byte_end":626818,"line_start":738,"line_end":738,"column_start":12,"column_end":19},"name":"Matches","qualname":"::str::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":9224},{"krate":0,"index":9225}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626717,"byte_end":626775,"line_start":736,"line_end":736,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":6338},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":627067,"byte_end":627082,"line_start":751,"line_end":751,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Matches as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9234},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628219,"byte_end":628231,"line_start":794,"line_end":794,"column_start":12,"column_end":24},"name":"MatchIndices","qualname":"::str::MatchIndices","value":"MatchIndices {  }","parent":null,"children":[{"krate":0,"index":9237},{"krate":0,"index":9238}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern, with their positions","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628103,"byte_end":628183,"line_start":792,"line_end":792,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":6359},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628517,"byte_end":628532,"line_start":808,"line_end":808,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<MatchIndices as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6369},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","parent":null,"children":[{"krate":0,"index":6370},{"krate":0,"index":6371},{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6376},{"krate":0,"index":6379},{"krate":0,"index":6382},{"krate":0,"index":9247},{"krate":0,"index":9251},{"krate":0,"index":6388},{"krate":0,"index":6393}],"decl_id":null,"docs":" This module contains the parallel iterator types for owned strings\n (`String`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"/ This module contains the parallel iterator types for owned strings","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":629609,"byte_end":629679,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/ (`String`). You will rarely need to interact with it directly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":629680,"byte_end":629745,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ unless you have need to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":629746,"byte_end":629805,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":6386},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630043,"byte_end":630052,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'a mut String as iter::ParallelDrainRange>::par_drain","value":"fn par_drain<R>(Self, R) -> Self::Iter where R: RangeBounds<usize>","parent":{"krate":0,"index":5088},"children":[],"decl_id":{"krate":0,"index":5092},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9247},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630366,"byte_end":630371,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"Drain","qualname":"::string::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":9249},{"krate":0,"index":9250}],"decl_id":null,"docs":" Draining parallel iterator that moves a range of characters out of a string,\n but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range of characters out of a string,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630223,"byte_end":630303,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630304,"byte_end":630337,"line_start":23,"line_end":23,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":6391},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630506,"byte_end":630521,"line_start":33,"line_end":33,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Drain as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6395},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630765,"byte_end":630769,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"drop","qualname":"<Drain as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3515},"children":[],"decl_id":{"krate":2,"index":3516},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6396},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","parent":null,"children":[{"krate":0,"index":6397},{"krate":0,"index":6398},{"krate":0,"index":6399},{"krate":0,"index":6402},{"krate":0,"index":6403},{"krate":0,"index":6406},{"krate":0,"index":6409},{"krate":0,"index":6412},{"krate":0,"index":6415},{"krate":0,"index":6416},{"krate":0,"index":6419},{"krate":0,"index":6422},{"krate":0,"index":6425},{"krate":0,"index":6428},{"krate":0,"index":6434},{"krate":0,"index":9254},{"krate":0,"index":9257},{"krate":0,"index":9260},{"krate":0,"index":6440},{"krate":0,"index":6445},{"krate":0,"index":6451},{"krate":0,"index":6458},{"krate":0,"index":9263},{"krate":0,"index":9269},{"krate":0,"index":6465},{"krate":0,"index":6472},{"krate":0,"index":6480},{"krate":0,"index":6484},{"krate":0,"index":6488},{"krate":0,"index":6492},{"krate":0,"index":6499},{"krate":0,"index":6503},{"krate":0,"index":6507},{"krate":0,"index":6514},{"krate":0,"index":6518},{"krate":0,"index":6522},{"krate":0,"index":6525}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"/ Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":630876,"byte_end":630938,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":630939,"byte_end":630942,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to interact with this module directly unless you need","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":630943,"byte_end":631021,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ to name one of the iterator types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631022,"byte_end":631060,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631061,"byte_end":631064,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631065,"byte_end":631122,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":6433},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631474,"byte_end":631487,"line_start":22,"line_end":22,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data Vec<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6439},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631702,"byte_end":631715,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<&'data mut Vec<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9254},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631872,"byte_end":631880,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":9256}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631787,"byte_end":631836,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":6444},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632016,"byte_end":632029,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"<Vec<T> as iter::IntoParallelIterator>::into_par_iter","value":"fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":4770},"children":[],"decl_id":{"krate":0,"index":4773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6448},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632168,"byte_end":632183,"line_start":54,"line_end":54,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<IntoIter<T> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6450},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632322,"byte_end":632329,"line_start":61,"line_end":61,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<IntoIter<T> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6453},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632453,"byte_end":632458,"line_start":67,"line_end":67,"column_start":8,"column_end":13},"name":"drive","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6455},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632588,"byte_end":632591,"line_start":74,"line_end":74,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6456},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632647,"byte_end":632660,"line_start":78,"line_end":78,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<IntoIter<T> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6463},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633036,"byte_end":633045,"line_start":91,"line_end":91,"column_start":8,"column_end":17},"name":"par_drain","qualname":"<&'data mut Vec<T> as iter::ParallelDrainRange>::par_drain","value":"fn par_drain<R>(Self, R) -> Self::Iter where R: RangeBounds<usize>","parent":{"krate":0,"index":5088},"children":[],"decl_id":{"krate":0,"index":5092},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9263},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633372,"byte_end":633377,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":9266},{"krate":0,"index":9267},{"krate":0,"index":9268}],"decl_id":null,"docs":" Draining parallel iterator that moves a range out of a vector, but keeps the total capacity.\n","sig":null,"attributes":[{"value":"/ Draining parallel iterator that moves a range out of a vector, but keeps the total capacity.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633247,"byte_end":633343,"line_start":100,"line_end":100,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":6469},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633560,"byte_end":633575,"line_start":111,"line_end":111,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Drain as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6471},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633714,"byte_end":633721,"line_start":118,"line_end":118,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Drain as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6475},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633856,"byte_end":633861,"line_start":124,"line_end":124,"column_start":8,"column_end":13},"name":"drive","qualname":"<Drain as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6477},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633991,"byte_end":633994,"line_start":131,"line_end":131,"column_start":8,"column_end":11},"name":"len","qualname":"<Drain as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6478},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":634052,"byte_end":634065,"line_start":135,"line_end":135,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Drain as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6483},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":634670,"byte_end":634674,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"drop","qualname":"<Drain as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3515},"children":[],"decl_id":{"krate":2,"index":3516},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6557},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641013,"byte_end":641028,"line_start":13,"line_end":13,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"<Either<L, R> as iter::ParallelIterator>::drive_unindexed","value":"fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6559},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641284,"byte_end":641291,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"opt_len","qualname":"<Either<L, R> as iter::ParallelIterator>::opt_len","value":"fn opt_len<'_>(&'_ Self) -> Option<usize>","parent":{"krate":0,"index":4796},"children":[],"decl_id":{"krate":0,"index":4998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6563},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641527,"byte_end":641532,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"drive","qualname":"<Either<L, R> as iter::IndexedParallelIterator>::drive","value":"fn drive<C>(Self, C) -> C::Result where C: Consumer<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5072},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6565},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641759,"byte_end":641762,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"len","qualname":"<Either<L, R> as iter::IndexedParallelIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5071},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6566},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641840,"byte_end":641853,"line_start":47,"line_end":47,"column_start":8,"column_end":21},"name":"with_producer","qualname":"<Either<L, R> as iter::IndexedParallelIterator>::with_producer","value":"fn with_producer<CB>(Self, CB) -> CB::Output where\nCB: ProducerCallback<Self::Item>","parent":{"krate":0,"index":5004},"children":[],"decl_id":{"krate":0,"index":5074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6572},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":642312,"byte_end":642322,"line_start":65,"line_end":65,"column_start":8,"column_end":18},"name":"par_extend","qualname":"<Either<L, R> as iter::ParallelExtend>::par_extend","value":"fn par_extend<I, '_>(&'_ mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":5080},"children":[],"decl_id":{"krate":0,"index":5082},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\split_producer.rs","byte_start":10655,"byte_end":10668,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\split_producer.rs","byte_start":12136,"byte_end":12149,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15093,"byte_end":15101,"line_start":47,"line_end":47,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15408,"byte_end":15416,"line_start":62,"line_end":62,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19109,"byte_end":19119,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19576,"byte_end":19580,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20351,"byte_end":20356,"line_start":76,"line_end":76,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20667,"byte_end":20672,"line_start":91,"line_end":91,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":21142,"byte_end":21147,"line_start":113,"line_end":113,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22218,"byte_end":22222,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23733,"byte_end":23737,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25031,"byte_end":25035,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27418,"byte_end":27422,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29177,"byte_end":29181,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30346,"byte_end":30354,"line_start":21,"line_end":21,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30904,"byte_end":30908,"line_start":43,"line_end":43,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32581,"byte_end":32586,"line_start":113,"line_end":113,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32891,"byte_end":32896,"line_start":128,"line_end":128,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":33458,"byte_end":33463,"line_start":151,"line_end":151,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":17665,"byte_end":17675,"line_start":51,"line_end":51,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":18075,"byte_end":18085,"line_start":65,"line_end":65,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":156419,"byte_end":156427,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":157556,"byte_end":157570,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159929,"byte_end":159937,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164650,"byte_end":164655,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164884,"byte_end":164889,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":165992,"byte_end":165997,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":166932,"byte_end":166941,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":167619,"byte_end":167628,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":168297,"byte_end":168310,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":168493,"byte_end":168506,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170118,"byte_end":170126,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170340,"byte_end":170348,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170644,"byte_end":170652,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170773,"byte_end":170781,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171551,"byte_end":171557,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171757,"byte_end":171763,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172096,"byte_end":172102,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172800,"byte_end":172808,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":173339,"byte_end":173352,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":173578,"byte_end":173591,"line_start":118,"line_end":118,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":174889,"byte_end":174897,"line_start":169,"line_end":169,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":175554,"byte_end":175562,"line_start":195,"line_end":195,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":175723,"byte_end":175731,"line_start":205,"line_end":205,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176842,"byte_end":176848,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177036,"byte_end":177042,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177490,"byte_end":177496,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":178141,"byte_end":178149,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":178706,"byte_end":178720,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":179616,"byte_end":179630,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":179742,"byte_end":179756,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":180404,"byte_end":180418,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":180738,"byte_end":180750,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":185896,"byte_end":185911,"line_start":14,"line_end":14,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":186490,"byte_end":186505,"line_start":27,"line_end":27,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":187685,"byte_end":187698,"line_start":57,"line_end":57,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":187736,"byte_end":187749,"line_start":59,"line_end":59,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":188131,"byte_end":188144,"line_start":73,"line_end":73,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":188524,"byte_end":188539,"line_start":86,"line_end":86,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":189618,"byte_end":189631,"line_start":122,"line_end":122,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":190623,"byte_end":190638,"line_start":155,"line_end":155,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":191027,"byte_end":191041,"line_start":168,"line_end":168,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205713,"byte_end":205719,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205907,"byte_end":205913,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206360,"byte_end":206366,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":207010,"byte_end":207018,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":207574,"byte_end":207588,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":208483,"byte_end":208497,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":208609,"byte_end":208623,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":209270,"byte_end":209284,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":209603,"byte_end":209615,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210897,"byte_end":210902,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210992,"byte_end":210997,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211133,"byte_end":211138,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211424,"byte_end":211429,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211909,"byte_end":211922,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212902,"byte_end":212911,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213105,"byte_end":213114,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213458,"byte_end":213467,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213973,"byte_end":213981,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":214565,"byte_end":214582,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":216786,"byte_end":216801,"line_start":33,"line_end":33,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":217205,"byte_end":217220,"line_start":51,"line_end":51,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":217377,"byte_end":217390,"line_start":61,"line_end":61,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218216,"byte_end":218226,"line_start":101,"line_end":101,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218524,"byte_end":218534,"line_start":114,"line_end":114,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219032,"byte_end":219040,"line_start":136,"line_end":136,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219383,"byte_end":219391,"line_start":150,"line_end":150,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219911,"byte_end":219919,"line_start":173,"line_end":173,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220221,"byte_end":220229,"line_start":186,"line_end":186,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220806,"byte_end":220813,"line_start":211,"line_end":211,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221274,"byte_end":221281,"line_start":227,"line_end":227,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221910,"byte_end":221917,"line_start":254,"line_end":254,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222255,"byte_end":222262,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222608,"byte_end":222618,"line_start":282,"line_end":282,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222975,"byte_end":222985,"line_start":296,"line_end":296,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223329,"byte_end":223341,"line_start":316,"line_end":316,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223763,"byte_end":223775,"line_start":336,"line_end":336,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223932,"byte_end":223942,"line_start":346,"line_end":346,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":224386,"byte_end":224397,"line_start":371,"line_end":371,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":224793,"byte_end":224799,"line_start":384,"line_end":384,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":225298,"byte_end":225304,"line_start":397,"line_end":397,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":225587,"byte_end":225605,"line_start":412,"line_end":412,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":226033,"byte_end":226051,"line_start":432,"line_end":432,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":226208,"byte_end":226224,"line_start":442,"line_end":442,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227156,"byte_end":227162,"line_start":484,"line_end":484,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227424,"byte_end":227430,"line_start":494,"line_end":494,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227707,"byte_end":227713,"line_start":504,"line_end":504,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228182,"byte_end":228190,"line_start":524,"line_end":524,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228477,"byte_end":228485,"line_start":537,"line_end":537,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228942,"byte_end":228945,"line_start":557,"line_end":557,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":229957,"byte_end":229960,"line_start":584,"line_end":584,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231015,"byte_end":231021,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231181,"byte_end":231187,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231399,"byte_end":231405,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231949,"byte_end":231963,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":232114,"byte_end":232128,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":232872,"byte_end":232886,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":233268,"byte_end":233280,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234556,"byte_end":234565,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234772,"byte_end":234781,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234971,"byte_end":234980,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":235543,"byte_end":235560,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":235713,"byte_end":235730,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":236516,"byte_end":236533,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":236933,"byte_end":236948,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238118,"byte_end":238130,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238284,"byte_end":238296,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238881,"byte_end":238893,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":239253,"byte_end":239263,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":240289,"byte_end":240300,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":242822,"byte_end":242834,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":243384,"byte_end":243396,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":244462,"byte_end":244474,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1542}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":246032,"byte_end":246042,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":247750,"byte_end":247761,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248581,"byte_end":248588,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248767,"byte_end":248774,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248955,"byte_end":248962,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":249528,"byte_end":249543,"line_start":56,"line_end":56,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":249688,"byte_end":249703,"line_start":62,"line_end":62,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":250495,"byte_end":250510,"line_start":94,"line_end":94,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":250950,"byte_end":250963,"line_start":115,"line_end":115,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252555,"byte_end":252566,"line_start":18,"line_end":18,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252775,"byte_end":252786,"line_start":26,"line_end":26,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252975,"byte_end":252986,"line_start":33,"line_end":33,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":253572,"byte_end":253591,"line_start":59,"line_end":59,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":253740,"byte_end":253759,"line_start":65,"line_end":65,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":254542,"byte_end":254561,"line_start":96,"line_end":96,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1693},{"krate":0,"index":1694}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":254973,"byte_end":254990,"line_start":116,"line_end":116,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256207,"byte_end":256214,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256432,"byte_end":256439,"line_start":26,"line_end":26,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256951,"byte_end":256966,"line_start":49,"line_end":49,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":257071,"byte_end":257086,"line_start":55,"line_end":55,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":257769,"byte_end":257784,"line_start":85,"line_end":85,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":258142,"byte_end":258155,"line_start":104,"line_end":104,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259571,"byte_end":259582,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259843,"byte_end":259854,"line_start":27,"line_end":27,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1764},{"krate":0,"index":1765}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":260401,"byte_end":260420,"line_start":51,"line_end":51,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":260529,"byte_end":260548,"line_start":57,"line_end":57,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":261222,"byte_end":261241,"line_start":86,"line_end":86,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":261571,"byte_end":261588,"line_start":104,"line_end":104,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262267,"byte_end":262271,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263068,"byte_end":263072,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263262,"byte_end":263266,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1825},{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263875,"byte_end":263887,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":264743,"byte_end":264755,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1856},{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":265224,"byte_end":265234,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1882},{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266394,"byte_end":266402,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267191,"byte_end":267199,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267453,"byte_end":267461,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1898},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":268029,"byte_end":268045,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":268963,"byte_end":268979,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1927},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270179,"byte_end":270189,"line_start":27,"line_end":27,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270435,"byte_end":270445,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270878,"byte_end":270888,"line_start":54,"line_end":54,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271304,"byte_end":271314,"line_start":75,"line_end":75,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":272279,"byte_end":272287,"line_start":114,"line_end":114,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1990},{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276618,"byte_end":276632,"line_start":27,"line_end":27,"column_start":65,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276912,"byte_end":276926,"line_start":37,"line_end":37,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277328,"byte_end":277342,"line_start":54,"line_end":54,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277728,"byte_end":277742,"line_start":74,"line_end":74,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":278663,"byte_end":278671,"line_start":112,"line_end":112,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2051},{"krate":0,"index":2052}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":282508,"byte_end":282523,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":282919,"byte_end":282934,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2087},{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":283358,"byte_end":283373,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284259,"byte_end":284262,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284532,"byte_end":284540,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284897,"byte_end":284907,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285217,"byte_end":285227,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285691,"byte_end":285698,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286233,"byte_end":286241,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286541,"byte_end":286548,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286871,"byte_end":286879,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287158,"byte_end":287164,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287426,"byte_end":287432,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2189}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287700,"byte_end":287706,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2193}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287970,"byte_end":287976,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2196}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288247,"byte_end":288253,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288697,"byte_end":288700,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2206}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290234,"byte_end":290241,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290402,"byte_end":290409,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290625,"byte_end":290632,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291092,"byte_end":291099,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291841,"byte_end":291849,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2257}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":292520,"byte_end":292535,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":293745,"byte_end":293760,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2287}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":293910,"byte_end":293925,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":294668,"byte_end":294683,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2304},{"krate":0,"index":2305}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":295061,"byte_end":295074,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296398,"byte_end":296408,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2335}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296660,"byte_end":296670,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297047,"byte_end":297057,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2349}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297953,"byte_end":297962,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2362},{"krate":0,"index":2363}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":298772,"byte_end":298781,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":299562,"byte_end":299580,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":299900,"byte_end":299918,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":302783,"byte_end":302796,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":303929,"byte_end":303942,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2416}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":304552,"byte_end":304565,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305492,"byte_end":305510,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306152,"byte_end":306170,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2434}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306547,"byte_end":306565,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2440},{"krate":0,"index":2441}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307667,"byte_end":307678,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307909,"byte_end":307920,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308450,"byte_end":308461,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":2470}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":309368,"byte_end":309376,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2481},{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":309943,"byte_end":309962,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":310203,"byte_end":310222,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":312397,"byte_end":312412,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":313184,"byte_end":313199,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":313847,"byte_end":313862,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2519}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":314210,"byte_end":314229,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":314454,"byte_end":314473,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2533},{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":2538}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":315551,"byte_end":315570,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":316110,"byte_end":316127,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2558},{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317865,"byte_end":317871,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318076,"byte_end":318082,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2574}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318417,"byte_end":318423,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":319001,"byte_end":319009,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2589},{"krate":0,"index":2590}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":319644,"byte_end":319658,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320965,"byte_end":320971,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2608}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321176,"byte_end":321182,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2614}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321517,"byte_end":321523,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2619},{"krate":0,"index":2620}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":322101,"byte_end":322109,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2629},{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":322744,"byte_end":322758,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324125,"byte_end":324128,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324285,"byte_end":324288,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324491,"byte_end":324494,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324968,"byte_end":324971,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":325713,"byte_end":325721,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2694},{"krate":0,"index":2695}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":326400,"byte_end":326411,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":327583,"byte_end":327594,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":327735,"byte_end":327746,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2738}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":328485,"byte_end":328496,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2745},{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":328886,"byte_end":328895,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2763},{"krate":0,"index":2764}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330132,"byte_end":330139,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330371,"byte_end":330378,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2784}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330610,"byte_end":330617,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2793}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331133,"byte_end":331140,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2799},{"krate":0,"index":2801},{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331985,"byte_end":331993,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2817},{"krate":0,"index":2818}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":332776,"byte_end":332791,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334124,"byte_end":334135,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334516,"byte_end":334527,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334818,"byte_end":334829,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":335143,"byte_end":335158,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":335324,"byte_end":335339,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":336183,"byte_end":336198,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2906},{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":336658,"byte_end":336671,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2925},{"krate":0,"index":2935},{"krate":0,"index":2936}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338202,"byte_end":338209,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338382,"byte_end":338389,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338633,"byte_end":338640,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2953},{"krate":0,"index":2954},{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339180,"byte_end":339187,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2965},{"krate":0,"index":2966}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":340062,"byte_end":340070,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":340880,"byte_end":340895,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3005},{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":342345,"byte_end":342360,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3021}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":342542,"byte_end":342557,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":343413,"byte_end":343428,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3044},{"krate":0,"index":3045}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":352806,"byte_end":352818,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3059},{"krate":0,"index":3060},{"krate":0,"index":3061},{"krate":0,"index":3062},{"krate":0,"index":3063},{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353162,"byte_end":353174,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3071},{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353530,"byte_end":353542,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3075},{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353736,"byte_end":353747,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3080}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354715,"byte_end":354719,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3088},{"krate":0,"index":3089},{"krate":0,"index":3091}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":355005,"byte_end":355009,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3094},{"krate":0,"index":3096},{"krate":0,"index":3097}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356196,"byte_end":356200,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3114}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356358,"byte_end":356362,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3117}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356472,"byte_end":356481,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3120}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356676,"byte_end":356685,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3123},{"krate":0,"index":3124},{"krate":0,"index":3126}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357195,"byte_end":357204,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3129},{"krate":0,"index":3131},{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357904,"byte_end":357912,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3140},{"krate":0,"index":3141}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":358621,"byte_end":358638,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":359736,"byte_end":359749,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360096,"byte_end":360109,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3173}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360360,"byte_end":360373,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3177}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360684,"byte_end":360701,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189},{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":361659,"byte_end":361676,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3197},{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":362155,"byte_end":362170,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3217},{"krate":0,"index":3218}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":363019,"byte_end":363035,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364876,"byte_end":364877,"line_start":48,"line_end":48,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3270}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365387,"byte_end":365397,"line_start":68,"line_end":68,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3273},{"krate":0,"index":3274}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369462,"byte_end":369471,"line_start":20,"line_end":20,"column_start":55,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369660,"byte_end":369669,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3306}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369893,"byte_end":369902,"line_start":38,"line_end":38,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3310},{"krate":0,"index":3311}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":370468,"byte_end":370485,"line_start":63,"line_end":63,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":370703,"byte_end":370720,"line_start":73,"line_end":73,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":371619,"byte_end":371634,"line_start":110,"line_end":110,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3347},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3350}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372778,"byte_end":372793,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372815,"byte_end":372830,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3378}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372979,"byte_end":372994,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373544,"byte_end":373559,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3391},{"krate":0,"index":3392}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373791,"byte_end":373806,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3395}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373991,"byte_end":374004,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3406},{"krate":0,"index":3407}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375019,"byte_end":375033,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375075,"byte_end":375089,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3432}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375191,"byte_end":375205,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375732,"byte_end":375746,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3449},{"krate":0,"index":3450}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375995,"byte_end":376009,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":376250,"byte_end":376262,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3471},{"krate":0,"index":3472}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377664,"byte_end":377670,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3486},{"krate":0,"index":3487}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378522,"byte_end":378528,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3491},{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378978,"byte_end":378992,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3499},{"krate":0,"index":3500},{"krate":0,"index":3501}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380043,"byte_end":380050,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3507},{"krate":0,"index":3508},{"krate":0,"index":3510}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380368,"byte_end":380375,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3513},{"krate":0,"index":3515},{"krate":0,"index":3517}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380987,"byte_end":381002,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":3526},{"krate":0,"index":3527}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":381799,"byte_end":381803,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3536}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":382181,"byte_end":382185,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":382314,"byte_end":382318,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3542}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382897,"byte_end":382900,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3551}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383082,"byte_end":383085,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3554},{"krate":0,"index":3555},{"krate":0,"index":3557}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383420,"byte_end":383423,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3560},{"krate":0,"index":3562},{"krate":0,"index":3563}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383993,"byte_end":384001,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3572},{"krate":0,"index":3573}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":384516,"byte_end":384527,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3581},{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385732,"byte_end":385736,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3598}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385969,"byte_end":385973,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3604}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386308,"byte_end":386312,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3610}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386893,"byte_end":386901,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3619},{"krate":0,"index":3620}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392028,"byte_end":392033,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3640}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392213,"byte_end":392218,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3644},{"krate":0,"index":3645}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392706,"byte_end":392719,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3660}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393814,"byte_end":393820,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3679}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394027,"byte_end":394033,"line_start":31,"line_end":31,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3682},{"krate":0,"index":3683},{"krate":0,"index":3685}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394368,"byte_end":394374,"line_start":49,"line_end":49,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3688},{"krate":0,"index":3690},{"krate":0,"index":3691}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":395056,"byte_end":395064,"line_start":78,"line_end":78,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":395745,"byte_end":395759,"line_start":107,"line_end":107,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3711},{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715},{"krate":0,"index":3716}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397085,"byte_end":397096,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397118,"byte_end":397129,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3744}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397270,"byte_end":397281,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3748},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397748,"byte_end":397759,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3757},{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397975,"byte_end":397986,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3761}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":398159,"byte_end":398168,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3768},{"krate":0,"index":3769},{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":3773}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399153,"byte_end":399157,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3782}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399390,"byte_end":399394,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3785},{"krate":0,"index":3786},{"krate":0,"index":3788}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399729,"byte_end":399733,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3791},{"krate":0,"index":3792},{"krate":0,"index":3794}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":400296,"byte_end":400304,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3803},{"krate":0,"index":3804}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":400876,"byte_end":400883,"line_start":9,"line_end":9,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3839}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401793,"byte_end":401800,"line_start":40,"line_end":40,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3845}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401996,"byte_end":402003,"line_start":46,"line_end":46,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3851},{"krate":0,"index":3852}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":402707,"byte_end":402722,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":403628,"byte_end":403643,"line_start":112,"line_end":112,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3884},{"krate":0,"index":3885}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":404182,"byte_end":404195,"line_start":137,"line_end":137,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3900},{"krate":0,"index":3901},{"krate":0,"index":3902},{"krate":0,"index":3903}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":404991,"byte_end":405002,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3908}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405859,"byte_end":405870,"line_start":200,"line_end":200,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3913}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":406155,"byte_end":406166,"line_start":212,"line_end":212,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":406788,"byte_end":406807,"line_start":240,"line_end":240,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3935},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":407785,"byte_end":407804,"line_start":280,"line_end":280,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3947},{"krate":0,"index":3948}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":408943,"byte_end":408960,"line_start":30,"line_end":30,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409002,"byte_end":409019,"line_start":32,"line_end":32,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3994}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409121,"byte_end":409138,"line_start":38,"line_end":38,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409771,"byte_end":409788,"line_start":65,"line_end":65,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4011},{"krate":0,"index":4012}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":410067,"byte_end":410084,"line_start":80,"line_end":80,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4018}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":410590,"byte_end":410605,"line_start":99,"line_end":99,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4033}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412098,"byte_end":412119,"line_start":27,"line_end":27,"column_start":22,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412153,"byte_end":412174,"line_start":29,"line_end":29,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4074}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412268,"byte_end":412289,"line_start":35,"line_end":35,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412877,"byte_end":412898,"line_start":61,"line_end":61,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4089},{"krate":0,"index":4090}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":413143,"byte_end":413164,"line_start":75,"line_end":75,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4095}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":413877,"byte_end":413896,"line_start":98,"line_end":98,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4109},{"krate":0,"index":4110}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":417819,"byte_end":417824,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4149},{"krate":0,"index":4150},{"krate":0,"index":4151},{"krate":0,"index":4154}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":418705,"byte_end":418714,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":419751,"byte_end":419763,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4188}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":420394,"byte_end":420400,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4204},{"krate":0,"index":4205},{"krate":0,"index":4207}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":421801,"byte_end":421807,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4225}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":422744,"byte_end":422757,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":424020,"byte_end":424033,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4252},{"krate":0,"index":4253}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":424697,"byte_end":424708,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4270},{"krate":0,"index":4271}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":425449,"byte_end":425461,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4282}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":426545,"byte_end":426553,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4302},{"krate":0,"index":4303},{"krate":0,"index":4304}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":428035,"byte_end":428044,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4328}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":428162,"byte_end":428171,"line_start":513,"line_end":513,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4332}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429048,"byte_end":429054,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4347}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429214,"byte_end":429220,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4351}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429432,"byte_end":429438,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4355},{"krate":0,"index":4356},{"krate":0,"index":4358}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429900,"byte_end":429906,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4362},{"krate":0,"index":4364},{"krate":0,"index":4365}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":430647,"byte_end":430655,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4376},{"krate":0,"index":4377}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":431332,"byte_end":431346,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4389},{"krate":0,"index":4390},{"krate":0,"index":4391},{"krate":0,"index":4392},{"krate":0,"index":4393},{"krate":0,"index":4394},{"krate":0,"index":4395}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":432606,"byte_end":432620,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4407}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":432767,"byte_end":432781,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4413},{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4416},{"krate":0,"index":4417},{"krate":0,"index":4418}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":433527,"byte_end":433541,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4424},{"krate":0,"index":4425}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":434061,"byte_end":434073,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444},{"krate":0,"index":4446},{"krate":0,"index":4447}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435019,"byte_end":435028,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4457}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435778,"byte_end":435787,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435891,"byte_end":435900,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4465}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436713,"byte_end":436722,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4478}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436912,"byte_end":436921,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4482},{"krate":0,"index":4483}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":437551,"byte_end":437568,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":438368,"byte_end":438385,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":4504},{"krate":0,"index":4505}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":438788,"byte_end":438803,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4515},{"krate":0,"index":4516},{"krate":0,"index":4517},{"krate":0,"index":4523},{"krate":0,"index":4524}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440457,"byte_end":440460,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4537}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440683,"byte_end":440686,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4541},{"krate":0,"index":4542},{"krate":0,"index":4544}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441070,"byte_end":441073,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4548},{"krate":0,"index":4550},{"krate":0,"index":4551}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441733,"byte_end":441742,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4562},{"krate":0,"index":4563}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":442363,"byte_end":442372,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4574},{"krate":0,"index":4575}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":443029,"byte_end":443040,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444449,"byte_end":444454,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4597}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444724,"byte_end":444729,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4604}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445121,"byte_end":445126,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4608},{"krate":0,"index":4610},{"krate":0,"index":4611}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42642,"byte_end":42643,"line_start":277,"line_end":277,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4782},{"krate":0,"index":4783},{"krate":0,"index":4784}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44151,"byte_end":44152,"line_start":324,"line_end":324,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108438,"byte_end":108439,"line_start":2232,"line_end":2232,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5001},{"krate":0,"index":5002},{"krate":0,"index":5003}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141617,"byte_end":141628,"line_start":3255,"line_end":3255,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":8526},{"krate":0,"index":5120},{"krate":0,"index":5121},{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5124}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142272,"byte_end":142278,"line_start":3280,"line_end":3280,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":8527},{"krate":0,"index":5127},{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5130},{"krate":0,"index":5131}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142886,"byte_end":142892,"line_start":3305,"line_end":3305,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":8528},{"krate":0,"index":5135},{"krate":0,"index":5136},{"krate":0,"index":5137},{"krate":0,"index":5138},{"krate":0,"index":5139}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143508,"byte_end":143512,"line_start":3330,"line_end":3330,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8529},{"krate":0,"index":5143},{"krate":0,"index":5144},{"krate":0,"index":5145},{"krate":0,"index":5146},{"krate":0,"index":5147}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":144256,"byte_end":144260,"line_start":3356,"line_end":3356,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8530},{"krate":0,"index":5151},{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446504,"byte_end":446510,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5168},{"krate":0,"index":5169},{"krate":0,"index":5170}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446683,"byte_end":446691,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5173},{"krate":0,"index":5174},{"krate":0,"index":5176}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446986,"byte_end":446994,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5179},{"krate":0,"index":5181},{"krate":0,"index":5182}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448151,"byte_end":448155,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5187}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":449631,"byte_end":449645,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5205},{"krate":0,"index":5206},{"krate":0,"index":5207},{"krate":0,"index":5208}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":450257,"byte_end":450263,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5212}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453290,"byte_end":453295,"line_start":53,"line_end":53,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5275},{"krate":0,"index":5276},{"krate":0,"index":5277}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453572,"byte_end":453584,"line_start":69,"line_end":69,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5285}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455238,"byte_end":455242,"line_start":119,"line_end":119,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5310}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455571,"byte_end":455575,"line_start":135,"line_end":135,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5313},{"krate":0,"index":5315},{"krate":0,"index":5316}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461210,"byte_end":461214,"line_start":323,"line_end":323,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5325},{"krate":0,"index":5326},{"krate":0,"index":5328}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461521,"byte_end":461525,"line_start":338,"line_end":338,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5330},{"krate":0,"index":5332},{"krate":0,"index":5333}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466670,"byte_end":466674,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":5346}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":467612,"byte_end":467626,"line_start":75,"line_end":75,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5351}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469299,"byte_end":469303,"line_start":125,"line_end":125,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5373},{"krate":0,"index":5374},{"krate":0,"index":5376}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469632,"byte_end":469636,"line_start":141,"line_end":141,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5379},{"krate":0,"index":5381},{"krate":0,"index":5382}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473132,"byte_end":473136,"line_start":265,"line_end":265,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5392}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473516,"byte_end":473520,"line_start":281,"line_end":281,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5394},{"krate":0,"index":5396},{"krate":0,"index":5397}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477144,"byte_end":477150,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5411},{"krate":0,"index":5412},{"krate":0,"index":5413}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477584,"byte_end":477588,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5417}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478841,"byte_end":478847,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5436}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515156,"byte_end":515162,"line_start":13,"line_end":13,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5456}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515320,"byte_end":515326,"line_start":19,"line_end":19,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5460}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515455,"byte_end":515461,"line_start":25,"line_end":25,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5464},{"krate":0,"index":5465},{"krate":0,"index":5467}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515789,"byte_end":515795,"line_start":40,"line_end":40,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5471},{"krate":0,"index":5473},{"krate":0,"index":5474}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":516418,"byte_end":516432,"line_start":68,"line_end":68,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5484},{"krate":0,"index":5485},{"krate":0,"index":5486},{"krate":0,"index":5487}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517298,"byte_end":517309,"line_start":100,"line_end":100,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5491},{"krate":0,"index":5492}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517895,"byte_end":517906,"line_start":120,"line_end":120,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5496}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518040,"byte_end":518051,"line_start":126,"line_end":126,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5500},{"krate":0,"index":5501},{"krate":0,"index":5503}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518379,"byte_end":518390,"line_start":141,"line_end":141,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5507},{"krate":0,"index":5509},{"krate":0,"index":5510}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519010,"byte_end":519029,"line_start":169,"line_end":169,"column_start":43,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5520},{"krate":0,"index":5521},{"krate":0,"index":5522},{"krate":0,"index":5523}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519867,"byte_end":519876,"line_start":200,"line_end":200,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5527}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520057,"byte_end":520066,"line_start":206,"line_end":206,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5531},{"krate":0,"index":5532},{"krate":0,"index":5534}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520398,"byte_end":520407,"line_start":221,"line_end":221,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":5538},{"krate":0,"index":5540},{"krate":0,"index":5541}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521040,"byte_end":521057,"line_start":249,"line_end":249,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5551},{"krate":0,"index":5552},{"krate":0,"index":5553},{"krate":0,"index":5554}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521953,"byte_end":521967,"line_start":281,"line_end":281,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5558},{"krate":0,"index":5559},{"krate":0,"index":5560},{"krate":0,"index":5561}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523677,"byte_end":523691,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5565},{"krate":0,"index":5566},{"krate":0,"index":5568}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524023,"byte_end":524037,"line_start":339,"line_end":339,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":5572},{"krate":0,"index":5574},{"krate":0,"index":5575}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524667,"byte_end":524689,"line_start":367,"line_end":367,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5585},{"krate":0,"index":5586},{"krate":0,"index":5587},{"krate":0,"index":5588}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":526147,"byte_end":526157,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5620}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":529066,"byte_end":529079,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5630}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":532805,"byte_end":532814,"line_start":205,"line_end":205,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5641}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":544324,"byte_end":544329,"line_start":510,"line_end":510,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5665}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\quicksort.rs","byte_start":553410,"byte_end":553420,"line_start":17,"line_end":17,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5697}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589423,"byte_end":589430,"line_start":12,"line_end":12,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5764}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589588,"byte_end":589595,"line_start":18,"line_end":18,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5768}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589725,"byte_end":589732,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5772},{"krate":0,"index":5773},{"krate":0,"index":5775}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590060,"byte_end":590067,"line_start":39,"line_end":39,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5779},{"krate":0,"index":5781},{"krate":0,"index":5782}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590692,"byte_end":590707,"line_start":67,"line_end":67,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5792},{"krate":0,"index":5793},{"krate":0,"index":5794},{"krate":0,"index":5795}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591605,"byte_end":591617,"line_start":99,"line_end":99,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5799},{"krate":0,"index":5800}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592166,"byte_end":592178,"line_start":118,"line_end":118,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5804}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592313,"byte_end":592325,"line_start":124,"line_end":124,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5808},{"krate":0,"index":5809},{"krate":0,"index":5811}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592653,"byte_end":592665,"line_start":139,"line_end":139,"column_start":58,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":5815},{"krate":0,"index":5817},{"krate":0,"index":5818}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":593287,"byte_end":593307,"line_start":167,"line_end":167,"column_start":43,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5828},{"krate":0,"index":5829},{"krate":0,"index":5830},{"krate":0,"index":5831}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594191,"byte_end":594201,"line_start":198,"line_end":198,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5835}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594382,"byte_end":594392,"line_start":204,"line_end":204,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5839},{"krate":0,"index":5840},{"krate":0,"index":5842}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594724,"byte_end":594734,"line_start":219,"line_end":219,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":5846},{"krate":0,"index":5848},{"krate":0,"index":5849}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":595369,"byte_end":595387,"line_start":247,"line_end":247,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5859},{"krate":0,"index":5860},{"krate":0,"index":5861},{"krate":0,"index":5862}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596315,"byte_end":596330,"line_start":279,"line_end":279,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5866},{"krate":0,"index":5867},{"krate":0,"index":5868},{"krate":0,"index":5869}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598004,"byte_end":598019,"line_start":321,"line_end":321,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5873},{"krate":0,"index":5874},{"krate":0,"index":5876}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598351,"byte_end":598366,"line_start":336,"line_end":336,"column_start":58,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":5880},{"krate":0,"index":5882},{"krate":0,"index":5883}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598998,"byte_end":599021,"line_start":364,"line_end":364,"column_start":43,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5893},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5896}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506388,"byte_end":506392,"line_start":695,"line_end":695,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6008}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506519,"byte_end":506523,"line_start":701,"line_end":701,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6012},{"krate":0,"index":6013},{"krate":0,"index":6015}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506849,"byte_end":506853,"line_start":716,"line_end":716,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":6019},{"krate":0,"index":6021},{"krate":0,"index":6022}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507356,"byte_end":507368,"line_start":740,"line_end":740,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6031},{"krate":0,"index":6032},{"krate":0,"index":6033},{"krate":0,"index":6034}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507926,"byte_end":507933,"line_start":761,"line_end":761,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6038}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508063,"byte_end":508070,"line_start":767,"line_end":767,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6042},{"krate":0,"index":6043},{"krate":0,"index":6045}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508398,"byte_end":508405,"line_start":782,"line_end":782,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":6049},{"krate":0,"index":6051},{"krate":0,"index":6052}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509079,"byte_end":509094,"line_start":811,"line_end":811,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6062},{"krate":0,"index":6063},{"krate":0,"index":6064},{"krate":0,"index":6065}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509969,"byte_end":509976,"line_start":842,"line_end":842,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6069},{"krate":0,"index":6070},{"krate":0,"index":6072}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510306,"byte_end":510313,"line_start":857,"line_end":857,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":6076},{"krate":0,"index":6078},{"krate":0,"index":6079}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510826,"byte_end":510841,"line_start":881,"line_end":881,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6088},{"krate":0,"index":6089},{"krate":0,"index":6090},{"krate":0,"index":6091}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511422,"byte_end":511427,"line_start":904,"line_end":904,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6102}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511610,"byte_end":511615,"line_start":913,"line_end":913,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6107}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511811,"byte_end":511816,"line_start":919,"line_end":919,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6112},{"krate":0,"index":6113}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513303,"byte_end":513311,"line_start":980,"line_end":980,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6136}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513536,"byte_end":513544,"line_start":988,"line_end":988,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6141},{"krate":0,"index":6142}],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617295,"byte_end":617297,"line_start":365,"line_end":365,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":9138},{"krate":0,"index":9126},{"krate":0,"index":9127},{"krate":0,"index":9128},{"krate":0,"index":9129},{"krate":0,"index":9132},{"krate":0,"index":9135}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617624,"byte_end":617629,"line_start":381,"line_end":381,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6214},{"krate":0,"index":6215}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617889,"byte_end":617902,"line_start":392,"line_end":392,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6219},{"krate":0,"index":6220},{"krate":0,"index":6221}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":618701,"byte_end":618712,"line_start":426,"line_end":426,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6229},{"krate":0,"index":6230}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":619063,"byte_end":619082,"line_start":441,"line_end":441,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6234},{"krate":0,"index":6235},{"krate":0,"index":6236}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620054,"byte_end":620059,"line_start":481,"line_end":481,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6243},{"krate":0,"index":6244}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620317,"byte_end":620330,"line_start":492,"line_end":492,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6248},{"krate":0,"index":6249},{"krate":0,"index":6250}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621087,"byte_end":621098,"line_start":525,"line_end":525,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6257},{"krate":0,"index":6258}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621363,"byte_end":621382,"line_start":536,"line_end":536,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6262},{"krate":0,"index":6263},{"krate":0,"index":6264}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622123,"byte_end":622128,"line_start":566,"line_end":566,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6269}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622278,"byte_end":622283,"line_start":572,"line_end":572,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6273},{"krate":0,"index":6274}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":623936,"byte_end":623951,"line_start":632,"line_end":632,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6295}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624105,"byte_end":624128,"line_start":638,"line_end":638,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6300}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624436,"byte_end":624451,"line_start":647,"line_end":647,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6304},{"krate":0,"index":6305}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624799,"byte_end":624822,"line_start":659,"line_end":659,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":6311},{"krate":0,"index":6312},{"krate":0,"index":6314}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":625736,"byte_end":625741,"line_start":695,"line_end":695,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6319},{"krate":0,"index":6320}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626335,"byte_end":626350,"line_start":720,"line_end":720,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6325},{"krate":0,"index":6326}],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":627015,"byte_end":627022,"line_start":748,"line_end":748,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6337},{"krate":0,"index":6338}],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":627399,"byte_end":627414,"line_start":763,"line_end":763,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":6344},{"krate":0,"index":6345},{"krate":0,"index":6346}],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628451,"byte_end":628463,"line_start":805,"line_end":805,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6358},{"krate":0,"index":6359}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628876,"byte_end":628896,"line_start":821,"line_end":821,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":6365},{"krate":0,"index":6366},{"krate":0,"index":6367}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630464,"byte_end":630469,"line_start":30,"line_end":30,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6390},{"krate":0,"index":6391}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630746,"byte_end":630751,"line_start":43,"line_end":43,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6395}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631951,"byte_end":631954,"line_start":42,"line_end":42,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6442},{"krate":0,"index":6443},{"krate":0,"index":6444}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632127,"byte_end":632135,"line_start":51,"line_end":51,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6447},{"krate":0,"index":6448},{"krate":0,"index":6450}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632432,"byte_end":632440,"line_start":66,"line_end":66,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6453},{"krate":0,"index":6455},{"krate":0,"index":6456}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633515,"byte_end":633520,"line_start":108,"line_end":108,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6468},{"krate":0,"index":6469},{"krate":0,"index":6471}],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633831,"byte_end":633836,"line_start":123,"line_end":123,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6475},{"krate":0,"index":6477},{"krate":0,"index":6478}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":634645,"byte_end":634650,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6483}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":635815,"byte_end":635828,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6490},{"krate":0,"index":6491}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":636828,"byte_end":636841,"line_start":206,"line_end":206,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6495},{"krate":0,"index":6496},{"krate":0,"index":6497},{"krate":0,"index":6498}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":637476,"byte_end":637489,"line_start":226,"line_end":226,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6502}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":637865,"byte_end":637875,"line_start":240,"line_end":240,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6510},{"krate":0,"index":6511},{"krate":0,"index":6512},{"krate":0,"index":6513}],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638349,"byte_end":638359,"line_start":259,"line_end":259,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6517}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638680,"byte_end":638690,"line_start":268,"line_end":268,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6521}],"docs":"","sig":null,"attributes":[]},{"id":615,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638811,"byte_end":638821,"line_start":274,"line_end":274,"column_start":47,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":616,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638867,"byte_end":638877,"line_start":276,"line_end":276,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6528}],"docs":"","sig":null,"attributes":[]},{"id":617,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":640893,"byte_end":640899,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6556},{"krate":0,"index":6557},{"krate":0,"index":6559}],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641419,"byte_end":641425,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6563},{"krate":0,"index":6565},{"krate":0,"index":6566}],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":642219,"byte_end":642225,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6572}],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5328,"byte_end":5335,"line_start":134,"line_end":134,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5441,"byte_end":5448,"line_start":137,"line_end":137,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Inherent","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5464,"byte_end":5471,"line_start":139,"line_end":139,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6664}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5667,"byte_end":5674,"line_start":147,"line_end":147,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6667}],"docs":"","sig":null,"attributes":[]},{"id":624,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5817,"byte_end":5824,"line_start":154,"line_end":154,"column_start":18,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3931,"byte_end":3936,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3946,"byte_end":3957,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16815,"byte_end":16826,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16836,"byte_end":16845,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":149}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16855,"byte_end":16864,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":163}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16874,"byte_end":16882,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":176}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16892,"byte_end":16900,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":208}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16910,"byte_end":16921,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":238}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":16931,"byte_end":16940,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":251}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3967,"byte_end":3971,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":357}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":37509,"byte_end":37517,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":386}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3981,"byte_end":3987,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5156}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":3997,"byte_end":4004,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5218}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4014,"byte_end":4019,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5258}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4029,"byte_end":4044,"line_start":99,"line_end":99,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":5335}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4054,"byte_end":4060,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5399}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4070,"byte_end":4075,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5443}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4085,"byte_end":4088,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6155}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4098,"byte_end":4104,"line_start":103,"line_end":103,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":6369}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":4114,"byte_end":4117,"line_start":104,"line_end":104,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6396}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\split_producer.rs","byte_start":10224,"byte_end":10229,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\split_producer.rs","byte_start":10655,"byte_end":10668,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\split_producer.rs","byte_start":12136,"byte_end":12149,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15093,"byte_end":15101,"line_start":47,"line_end":47,"column_start":52,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":6670},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\array.rs","byte_start":15408,"byte_end":15416,"line_start":62,"line_end":62,"column_start":59,"column_end":67},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":6670},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19109,"byte_end":19119,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":920},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":19576,"byte_end":19580,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":6708},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20351,"byte_end":20356,"line_start":76,"line_end":76,"column_start":46,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":6740},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":20667,"byte_end":20672,"line_start":91,"line_end":91,"column_start":53,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":6740},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\binary_heap.rs","byte_start":21142,"byte_end":21147,"line_start":113,"line_end":113,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":6740},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_map.rs","byte_start":22218,"byte_end":22222,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":6772},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\btree_set.rs","byte_start":23733,"byte_end":23737,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":6848},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_map.rs","byte_start":25031,"byte_end":25035,"line_start":36,"line_end":36,"column_start":50,"column_end":54},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":6897},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\hash_set.rs","byte_start":27418,"byte_end":27422,"line_start":36,"line_end":36,"column_start":41,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":6994},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\linked_list.rs","byte_start":29177,"byte_end":29181,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":7057},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30346,"byte_end":30354,"line_start":21,"line_end":21,"column_start":40,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":5,"index":4628},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":30904,"byte_end":30908,"line_start":43,"line_end":43,"column_start":29,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":7127},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32581,"byte_end":32586,"line_start":113,"line_end":113,"column_start":40,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":7173},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":32891,"byte_end":32896,"line_start":128,"line_end":128,"column_start":47,"column_end":52},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":7173},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\vec_deque.rs","byte_start":33458,"byte_end":33463,"line_start":151,"line_end":151,"column_start":28,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":7173},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":17665,"byte_end":17675,"line_start":51,"line_end":51,"column_start":20,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\collections\\mod.rs","byte_start":18075,"byte_end":18085,"line_start":65,"line_end":65,"column_start":43,"column_end":53},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":333},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147952,"byte_end":147956,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":147959,"byte_end":147964,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150966,"byte_end":150970,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":150973,"byte_end":150978,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":152286,"byte_end":152291,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":154306,"byte_end":154314,"line_start":213,"line_end":213,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":413},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155419,"byte_end":155423,"line_start":236,"line_end":236,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":155426,"byte_end":155431,"line_start":236,"line_end":236,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":156419,"byte_end":156427,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":7183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":157556,"byte_end":157570,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":7188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\plumbing\\mod.rs","byte_start":159929,"byte_end":159937,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":450},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164650,"byte_end":164655,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":7194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":164884,"byte_end":164889,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":7194},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":165992,"byte_end":165997,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":7194},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":166932,"byte_end":166941,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":511},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":167619,"byte_end":167628,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":523},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":168297,"byte_end":168310,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":168493,"byte_end":168506,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":535},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170118,"byte_end":170126,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170340,"byte_end":170348,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170644,"byte_end":170652,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chain.rs","byte_start":170773,"byte_end":170781,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171551,"byte_end":171557,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":7207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":171757,"byte_end":171763,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":7207},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172096,"byte_end":172102,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":7207},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":172800,"byte_end":172808,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":602},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":173339,"byte_end":173352,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":173578,"byte_end":173591,"line_start":118,"line_end":118,"column_start":28,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":613},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":174889,"byte_end":174897,"line_start":169,"line_end":169,"column_start":22,"column_end":30},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":634},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":175554,"byte_end":175562,"line_start":195,"line_end":195,"column_start":31,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":634},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\chunks.rs","byte_start":175723,"byte_end":175731,"line_start":205,"line_end":205,"column_start":33,"column_end":41},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":634},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":176842,"byte_end":176848,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":7217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177036,"byte_end":177042,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":7217},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":177490,"byte_end":177496,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":7217},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":178141,"byte_end":178149,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":676},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":178706,"byte_end":178720,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":686},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":179616,"byte_end":179630,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":179742,"byte_end":179756,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":701},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":180404,"byte_end":180418,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":701},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\cloned.rs","byte_start":180738,"byte_end":180750,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":723},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":185896,"byte_end":185911,"line_start":14,"line_end":14,"column_start":15,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":186490,"byte_end":186505,"line_start":27,"line_end":27,"column_start":24,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":187685,"byte_end":187698,"line_start":57,"line_end":57,"column_start":29,"column_end":42},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":771},"to":{"krate":2,"index":3268}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":187736,"byte_end":187749,"line_start":59,"line_end":59,"column_start":13,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":188131,"byte_end":188144,"line_start":73,"line_end":73,"column_start":22,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":771},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":188524,"byte_end":188539,"line_start":86,"line_end":86,"column_start":40,"column_end":55},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":189618,"byte_end":189631,"line_start":122,"line_end":122,"column_start":38,"column_end":51},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":190623,"byte_end":190638,"line_start":155,"line_end":155,"column_start":49,"column_end":64},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":758},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\collect\\consumer.rs","byte_start":191027,"byte_end":191041,"line_start":168,"line_end":168,"column_start":47,"column_end":61},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":811},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205713,"byte_end":205719,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":7226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":205907,"byte_end":205913,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":7226},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":206360,"byte_end":206366,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":7226},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":207010,"byte_end":207018,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":869},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":207574,"byte_end":207588,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":879},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":208483,"byte_end":208497,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":208609,"byte_end":208623,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":894},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":209270,"byte_end":209284,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":894},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\copied.rs","byte_start":209603,"byte_end":209615,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210897,"byte_end":210902,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":210992,"byte_end":210997,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211133,"byte_end":211138,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211424,"byte_end":211429,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\empty.rs","byte_start":211909,"byte_end":211922,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":962},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":212902,"byte_end":212911,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":7235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213105,"byte_end":213114,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":7235},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213458,"byte_end":213467,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":7235},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":213973,"byte_end":213981,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1002},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\enumerate.rs","byte_start":214565,"byte_end":214582,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1011},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":216786,"byte_end":216801,"line_start":33,"line_end":33,"column_start":31,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1086},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":217205,"byte_end":217220,"line_start":51,"line_end":51,"column_start":40,"column_end":55},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1086},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":217377,"byte_end":217390,"line_start":61,"line_end":61,"column_start":23,"column_end":36},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1088},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218216,"byte_end":218226,"line_start":101,"line_end":101,"column_start":31,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":5,"index":920},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":218524,"byte_end":218534,"line_start":114,"line_end":114,"column_start":39,"column_end":49},"kind":{"Impl":{"id":115}},"from":{"krate":5,"index":920},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219032,"byte_end":219040,"line_start":136,"line_end":136,"column_start":39,"column_end":47},"kind":{"Impl":{"id":116}},"from":{"krate":5,"index":1560},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219383,"byte_end":219391,"line_start":150,"line_end":150,"column_start":59,"column_end":67},"kind":{"Impl":{"id":117}},"from":{"krate":5,"index":1560},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":219911,"byte_end":219919,"line_start":173,"line_end":173,"column_start":31,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":5,"index":3300},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220221,"byte_end":220229,"line_start":186,"line_end":186,"column_start":39,"column_end":47},"kind":{"Impl":{"id":119}},"from":{"krate":5,"index":3300},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":220806,"byte_end":220813,"line_start":211,"line_end":211,"column_start":42,"column_end":49},"kind":{"Impl":{"id":120}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221274,"byte_end":221281,"line_start":227,"line_end":227,"column_start":62,"column_end":69},"kind":{"Impl":{"id":121}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":221910,"byte_end":221917,"line_start":254,"line_end":254,"column_start":34,"column_end":41},"kind":{"Impl":{"id":122}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222255,"byte_end":222262,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"kind":{"Impl":{"id":123}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222608,"byte_end":222618,"line_start":282,"line_end":282,"column_start":31,"column_end":41},"kind":{"Impl":{"id":124}},"from":{"krate":5,"index":3748},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":222975,"byte_end":222985,"line_start":296,"line_end":296,"column_start":39,"column_end":49},"kind":{"Impl":{"id":125}},"from":{"krate":5,"index":3748},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223329,"byte_end":223341,"line_start":316,"line_end":316,"column_start":31,"column_end":43},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1192},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223763,"byte_end":223775,"line_start":336,"line_end":336,"column_start":40,"column_end":52},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1192},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":223932,"byte_end":223942,"line_start":346,"line_end":346,"column_start":23,"column_end":33},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1194},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":224386,"byte_end":224397,"line_start":371,"line_end":371,"column_start":36,"column_end":47},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1197},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":224793,"byte_end":224799,"line_start":384,"line_end":384,"column_start":31,"column_end":37},"kind":{"Impl":{"id":130}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":225298,"byte_end":225304,"line_start":397,"line_end":397,"column_start":39,"column_end":45},"kind":{"Impl":{"id":131}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":225587,"byte_end":225605,"line_start":412,"line_end":412,"column_start":25,"column_end":43},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1230},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":226033,"byte_end":226051,"line_start":432,"line_end":432,"column_start":34,"column_end":52},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1230},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":226208,"byte_end":226224,"line_start":442,"line_end":442,"column_start":23,"column_end":39},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1232},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227156,"byte_end":227162,"line_start":484,"line_end":484,"column_start":38,"column_end":44},"kind":{"Impl":{"id":135}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227424,"byte_end":227430,"line_start":494,"line_end":494,"column_start":33,"column_end":39},"kind":{"Impl":{"id":136}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":227707,"byte_end":227713,"line_start":504,"line_end":504,"column_start":43,"column_end":49},"kind":{"Impl":{"id":137}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228182,"byte_end":228190,"line_start":524,"line_end":524,"column_start":31,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":5,"index":4628},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228477,"byte_end":228485,"line_start":537,"line_end":537,"column_start":39,"column_end":47},"kind":{"Impl":{"id":139}},"from":{"krate":5,"index":4628},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":228942,"byte_end":228945,"line_start":557,"line_end":557,"column_start":31,"column_end":34},"kind":{"Impl":{"id":140}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\extend.rs","byte_start":229957,"byte_end":229960,"line_start":584,"line_end":584,"column_start":39,"column_end":42},"kind":{"Impl":{"id":141}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231015,"byte_end":231021,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7244},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231181,"byte_end":231187,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":7244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231399,"byte_end":231405,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":7244},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":231949,"byte_end":231963,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":232114,"byte_end":232128,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1314},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":232872,"byte_end":232886,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1314},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter.rs","byte_start":233268,"byte_end":233280,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1343},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234556,"byte_end":234565,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":7253},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234772,"byte_end":234781,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":7253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":234971,"byte_end":234980,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":7253},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":235543,"byte_end":235560,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":235713,"byte_end":235730,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1383},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":236516,"byte_end":236533,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1383},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\filter_map.rs","byte_start":236933,"byte_end":236948,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1414},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238118,"byte_end":238130,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238284,"byte_end":238296,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1443},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":238881,"byte_end":238893,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1443},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":239253,"byte_end":239263,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1468},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find.rs","byte_start":240289,"byte_end":240300,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1489},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":242822,"byte_end":242834,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":243384,"byte_end":243396,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1514},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":244462,"byte_end":244474,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1514},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":246032,"byte_end":246042,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1543},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\find_first_last\\mod.rs","byte_start":247750,"byte_end":247761,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1560},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248581,"byte_end":248588,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7270},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248767,"byte_end":248774,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":248955,"byte_end":248962,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7270},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":249528,"byte_end":249543,"line_start":56,"line_end":56,"column_start":16,"column_end":31},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":249688,"byte_end":249703,"line_start":62,"line_end":62,"column_start":38,"column_end":53},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1590},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":250495,"byte_end":250510,"line_start":94,"line_end":94,"column_start":47,"column_end":62},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1590},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map.rs","byte_start":250950,"byte_end":250963,"line_start":115,"line_end":115,"column_start":36,"column_end":49},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1621},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252555,"byte_end":252566,"line_start":18,"line_end":18,"column_start":48,"column_end":59},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7279},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252775,"byte_end":252786,"line_start":26,"line_end":26,"column_start":30,"column_end":41},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":252975,"byte_end":252986,"line_start":33,"line_end":33,"column_start":37,"column_end":48},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7279},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":253572,"byte_end":253591,"line_start":59,"line_end":59,"column_start":16,"column_end":35},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":253740,"byte_end":253759,"line_start":65,"line_end":65,"column_start":38,"column_end":57},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1664},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":254542,"byte_end":254561,"line_start":96,"line_end":96,"column_start":47,"column_end":66},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1664},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flat_map_iter.rs","byte_start":254973,"byte_end":254990,"line_start":116,"line_end":116,"column_start":36,"column_end":53},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1695},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256207,"byte_end":256214,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256432,"byte_end":256439,"line_start":26,"line_end":26,"column_start":30,"column_end":37},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":7288},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":256951,"byte_end":256966,"line_start":49,"line_end":49,"column_start":9,"column_end":24},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":257071,"byte_end":257086,"line_start":55,"line_end":55,"column_start":28,"column_end":43},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1724},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":257769,"byte_end":257784,"line_start":85,"line_end":85,"column_start":37,"column_end":52},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1724},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten.rs","byte_start":258142,"byte_end":258155,"line_start":104,"line_end":104,"column_start":26,"column_end":39},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1744},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259571,"byte_end":259582,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":259843,"byte_end":259854,"line_start":27,"line_end":27,"column_start":30,"column_end":41},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7297},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":260401,"byte_end":260420,"line_start":51,"line_end":51,"column_start":9,"column_end":28},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":260529,"byte_end":260548,"line_start":57,"line_end":57,"column_start":28,"column_end":47},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1767},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":261222,"byte_end":261241,"line_start":86,"line_end":86,"column_start":37,"column_end":56},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1767},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\flatten_iter.rs","byte_start":261571,"byte_end":261588,"line_start":104,"line_end":104,"column_start":26,"column_end":43},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1787},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":262267,"byte_end":262271,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263068,"byte_end":263072,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7306},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263262,"byte_end":263266,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":7306},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":263875,"byte_end":263887,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1828},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":264743,"byte_end":264755,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1828},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":265224,"byte_end":265234,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1858},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":266394,"byte_end":266402,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":7318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267191,"byte_end":267199,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7318},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":267453,"byte_end":267461,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":7318},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":268029,"byte_end":268045,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1901},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold.rs","byte_start":268963,"byte_end":268979,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1901},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270179,"byte_end":270189,"line_start":27,"line_end":27,"column_start":59,"column_end":69},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7330},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270435,"byte_end":270445,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":270878,"byte_end":270888,"line_start":54,"line_end":54,"column_start":40,"column_end":50},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7330},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":271304,"byte_end":271314,"line_start":75,"line_end":75,"column_start":47,"column_end":57},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":7330},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks.rs","byte_start":272279,"byte_end":272287,"line_start":114,"line_end":114,"column_start":55,"column_end":63},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1975},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276618,"byte_end":276632,"line_start":27,"line_end":27,"column_start":65,"column_end":79},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7343},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":276912,"byte_end":276926,"line_start":37,"line_end":37,"column_start":15,"column_end":29},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":7343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277328,"byte_end":277342,"line_start":54,"line_end":54,"column_start":36,"column_end":50},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":7343},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":277728,"byte_end":277742,"line_start":74,"line_end":74,"column_start":43,"column_end":57},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":7343},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\fold_chunks_with.rs","byte_start":278663,"byte_end":278671,"line_start":112,"line_end":112,"column_start":51,"column_end":59},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2037},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":282508,"byte_end":282523,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2065},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":282919,"byte_end":282934,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2065},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\for_each.rs","byte_start":283358,"byte_end":283373,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2065},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284259,"byte_end":284262,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":216}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284532,"byte_end":284540,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"kind":{"Impl":{"id":217}},"from":{"krate":5,"index":4628},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":284897,"byte_end":284907,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"kind":{"Impl":{"id":218}},"from":{"krate":5,"index":920},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285217,"byte_end":285227,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"kind":{"Impl":{"id":219}},"from":{"krate":5,"index":3748},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":285691,"byte_end":285698,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"kind":{"Impl":{"id":220}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286233,"byte_end":286241,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":221}},"from":{"krate":5,"index":1560},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286541,"byte_end":286548,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"kind":{"Impl":{"id":222}},"from":{"krate":1,"index":2031},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":286871,"byte_end":286879,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"kind":{"Impl":{"id":223}},"from":{"krate":5,"index":3300},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287158,"byte_end":287164,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"kind":{"Impl":{"id":224}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287426,"byte_end":287432,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"kind":{"Impl":{"id":225}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287700,"byte_end":287706,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"kind":{"Impl":{"id":226}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":287970,"byte_end":287976,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":227}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288247,"byte_end":288253,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"kind":{"Impl":{"id":228}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\from_par_iter.rs","byte_start":288697,"byte_end":288700,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"kind":{"Impl":{"id":229}},"from":{"krate":5,"index":792},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290234,"byte_end":290241,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":7356},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290402,"byte_end":290409,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":7356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":290625,"byte_end":290632,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":7356},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291092,"byte_end":291099,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":7356},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":291841,"byte_end":291849,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2247},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":292520,"byte_end":292535,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2259},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":293745,"byte_end":293760,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":293910,"byte_end":293925,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2277},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":294668,"byte_end":294683,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2277},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\inspect.rs","byte_start":295061,"byte_end":295074,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":2306},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296398,"byte_end":296408,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":7365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":296660,"byte_end":296670,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":7365},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297047,"byte_end":297057,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":7365},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":297953,"byte_end":297962,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2351},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":298772,"byte_end":298781,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2365},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":299562,"byte_end":299580,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":299900,"byte_end":299918,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2379},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":302783,"byte_end":302796,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":303929,"byte_end":303942,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave.rs","byte_start":304552,"byte_end":304565,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":305492,"byte_end":305510,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":7378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306152,"byte_end":306170,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":7378},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\interleave_shortest.rs","byte_start":306547,"byte_end":306565,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":7378},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307667,"byte_end":307678,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":7390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":307909,"byte_end":307920,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":7390},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":308450,"byte_end":308461,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":7390},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":309368,"byte_end":309376,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2472},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":309943,"byte_end":309962,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":2484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":310203,"byte_end":310222,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2484},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":312397,"byte_end":312412,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2503},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":313184,"byte_end":313199,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2503},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":313847,"byte_end":313862,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2503},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":314210,"byte_end":314229,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":2520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":314454,"byte_end":314473,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2520},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":315551,"byte_end":315570,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2520},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\intersperse.rs","byte_start":316110,"byte_end":316127,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2544},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":317865,"byte_end":317871,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":7400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318076,"byte_end":318082,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":7400},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":318417,"byte_end":318423,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":7400},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":319001,"byte_end":319009,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2582},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":319644,"byte_end":319658,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2592},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":320965,"byte_end":320971,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":7410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321176,"byte_end":321182,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":7410},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":321517,"byte_end":321523,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":7410},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":322101,"byte_end":322109,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2622},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\len.rs","byte_start":322744,"byte_end":322758,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2632},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324125,"byte_end":324128,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":7420},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324285,"byte_end":324288,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":7420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324491,"byte_end":324494,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":7420},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":324968,"byte_end":324971,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":7420},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":325713,"byte_end":325721,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2684},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":326400,"byte_end":326411,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2697},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":327583,"byte_end":327594,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":327735,"byte_end":327746,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2716},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":328485,"byte_end":328496,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2716},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map.rs","byte_start":328886,"byte_end":328895,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2747},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330132,"byte_end":330139,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":7429},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330371,"byte_end":330378,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":7429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":330610,"byte_end":330617,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":7429},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331133,"byte_end":331140,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":7429},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":331985,"byte_end":331993,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2804},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":332776,"byte_end":332791,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2820},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334124,"byte_end":334135,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2842},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334516,"byte_end":334527,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2842},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":334818,"byte_end":334829,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2842},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":335143,"byte_end":335158,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":335324,"byte_end":335339,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":336183,"byte_end":336198,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":336658,"byte_end":336671,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2908},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338202,"byte_end":338209,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":7441},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338382,"byte_end":338389,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":7441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":338633,"byte_end":338640,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":7441},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":339180,"byte_end":339187,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":7441},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":340062,"byte_end":340070,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":2968},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":340880,"byte_end":340895,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":2985},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":342345,"byte_end":342360,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":342542,"byte_end":342557,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":3008},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\map_with.rs","byte_start":343413,"byte_end":343428,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":3008},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":352806,"byte_end":352818,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3055},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353162,"byte_end":353174,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":3055},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353530,"byte_end":353542,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3055},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\noop.rs","byte_start":353736,"byte_end":353747,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3077},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":354715,"byte_end":354719,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":8332},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\once.rs","byte_start":355005,"byte_end":355009,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":8332},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356196,"byte_end":356200,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":8350},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356358,"byte_end":356362,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":8350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356472,"byte_end":356481,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":8341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":356676,"byte_end":356685,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":8341},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357195,"byte_end":357204,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":8341},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":357904,"byte_end":357912,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":3134},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":358621,"byte_end":358638,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":3143},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":359736,"byte_end":359749,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":3159},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360096,"byte_end":360109,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":3159},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360360,"byte_end":360373,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":3159},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":360684,"byte_end":360701,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":3178},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":361659,"byte_end":361676,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":3178},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":362155,"byte_end":362170,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":3199},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\panic_fuse.rs","byte_start":363019,"byte_end":363035,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":3219},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364711,"byte_end":364716,"line_start":43,"line_end":43,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":3266}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":364876,"byte_end":364877,"line_start":48,"line_end":48,"column_start":45,"column_end":46},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":3269},"to":{"krate":0,"index":3266}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\par_bridge.rs","byte_start":365387,"byte_end":365397,"line_start":68,"line_end":68,"column_start":50,"column_end":60},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8357},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369462,"byte_end":369471,"line_start":20,"line_end":20,"column_start":55,"column_end":64},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8366},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369660,"byte_end":369669,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":8366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":369893,"byte_end":369902,"line_start":38,"line_end":38,"column_start":33,"column_end":42},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":8366},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":370468,"byte_end":370485,"line_start":63,"line_end":63,"column_start":16,"column_end":33},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":3313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":370703,"byte_end":370720,"line_start":73,"line_end":73,"column_start":35,"column_end":52},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":3313},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\positions.rs","byte_start":371619,"byte_end":371634,"line_start":110,"line_end":110,"column_start":29,"column_end":44},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":3336},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372778,"byte_end":372793,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3371},"to":{"krate":2,"index":3268}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372815,"byte_end":372830,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":3371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":372979,"byte_end":372994,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3371},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373544,"byte_end":373559,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3371},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373791,"byte_end":373806,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3371},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\product.rs","byte_start":373991,"byte_end":374004,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3396},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375019,"byte_end":375033,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":3418},"to":{"krate":2,"index":3278}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375075,"byte_end":375089,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3418},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375191,"byte_end":375205,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":3418},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375732,"byte_end":375746,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":3418},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":375995,"byte_end":376009,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":3418},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\reduce.rs","byte_start":376250,"byte_end":376262,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":3457},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":377664,"byte_end":377670,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":8375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378522,"byte_end":378528,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":8375},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":378978,"byte_end":378992,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":3494},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380043,"byte_end":380050,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":8384},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380368,"byte_end":380375,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":8384},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":380987,"byte_end":381002,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":3518},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":381799,"byte_end":381803,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":382181,"byte_end":382185,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\repeat.rs","byte_start":382314,"byte_end":382318,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":382897,"byte_end":382900,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":8394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383082,"byte_end":383085,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":8394},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383420,"byte_end":383423,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":8394},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":383993,"byte_end":384001,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":3565},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\rev.rs","byte_start":384516,"byte_end":384527,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":3575},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385732,"byte_end":385736,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":8403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":385969,"byte_end":385973,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8403},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386308,"byte_end":386312,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":8403},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\skip.rs","byte_start":386893,"byte_end":386901,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":3612},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392028,"byte_end":392033,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":8413},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392213,"byte_end":392218,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":8413},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\splitter.rs","byte_start":392706,"byte_end":392719,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":3647},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":393814,"byte_end":393820,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":8422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394027,"byte_end":394033,"line_start":31,"line_end":31,"column_start":30,"column_end":36},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":8422},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":394368,"byte_end":394374,"line_start":49,"line_end":49,"column_start":37,"column_end":43},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8422},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":395056,"byte_end":395064,"line_start":78,"line_end":78,"column_start":45,"column_end":53},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":3693},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\step_by.rs","byte_start":395745,"byte_end":395759,"line_start":107,"line_end":107,"column_start":22,"column_end":36},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":3704},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397085,"byte_end":397096,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":3737},"to":{"krate":2,"index":3268}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397118,"byte_end":397129,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":3737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397270,"byte_end":397281,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":3737},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397748,"byte_end":397759,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":3737},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":397975,"byte_end":397986,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":3737},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\sum.rs","byte_start":398159,"byte_end":398168,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":3762},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399153,"byte_end":399157,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":8432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399390,"byte_end":399394,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":8432},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":399729,"byte_end":399733,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":8432},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\take.rs","byte_start":400296,"byte_end":400304,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":3796},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":400876,"byte_end":400883,"line_start":9,"line_end":9,"column_start":19,"column_end":26},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":8442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401793,"byte_end":401800,"line_start":40,"line_end":40,"column_start":55,"column_end":62},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":8442},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":401996,"byte_end":402003,"line_start":46,"line_end":46,"column_start":40,"column_end":47},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":8442},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":402707,"byte_end":402722,"line_start":76,"line_end":76,"column_start":42,"column_end":57},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":3854},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":403628,"byte_end":403643,"line_start":112,"line_end":112,"column_start":51,"column_end":66},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":3854},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":404182,"byte_end":404195,"line_start":137,"line_end":137,"column_start":36,"column_end":49},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":3886},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":404991,"byte_end":405002,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":8457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":405859,"byte_end":405870,"line_start":200,"line_end":200,"column_start":56,"column_end":67},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":8457},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":406155,"byte_end":406166,"line_start":212,"line_end":212,"column_start":36,"column_end":47},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":8457},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":406788,"byte_end":406807,"line_start":240,"line_end":240,"column_start":38,"column_end":57},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":3921},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_fold.rs","byte_start":407785,"byte_end":407804,"line_start":280,"line_end":280,"column_start":47,"column_end":66},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":3921},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":408943,"byte_end":408960,"line_start":30,"line_end":30,"column_start":26,"column_end":43},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":3979},"to":{"krate":2,"index":3278}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409002,"byte_end":409019,"line_start":32,"line_end":32,"column_start":27,"column_end":44},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":3979},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409121,"byte_end":409138,"line_start":38,"line_end":38,"column_start":36,"column_end":53},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":3979},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":409771,"byte_end":409788,"line_start":65,"line_end":65,"column_start":45,"column_end":62},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":3979},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":410067,"byte_end":410084,"line_start":80,"line_end":80,"column_start":35,"column_end":52},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":3979},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce.rs","byte_start":410590,"byte_end":410605,"line_start":99,"line_end":99,"column_start":30,"column_end":45},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":4019},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412098,"byte_end":412119,"line_start":27,"line_end":27,"column_start":22,"column_end":43},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":4063},"to":{"krate":2,"index":3278}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412153,"byte_end":412174,"line_start":29,"line_end":29,"column_start":23,"column_end":44},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":4063},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412268,"byte_end":412289,"line_start":35,"line_end":35,"column_start":32,"column_end":53},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4063},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":412877,"byte_end":412898,"line_start":61,"line_end":61,"column_start":41,"column_end":62},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":4063},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":413143,"byte_end":413164,"line_start":75,"line_end":75,"column_start":39,"column_end":60},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":4063},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\try_reduce_with.rs","byte_start":413877,"byte_end":413896,"line_start":98,"line_end":98,"column_start":30,"column_end":49},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":4096},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415131,"byte_end":415135,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":415138,"byte_end":415142,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":417819,"byte_end":417824,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":4144},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":418705,"byte_end":418714,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":4160},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":419751,"byte_end":419763,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":4178},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":420394,"byte_end":420400,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":4191},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":421801,"byte_end":421807,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":4208},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":422744,"byte_end":422757,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":4226},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":424020,"byte_end":424033,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":4226},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":424697,"byte_end":424708,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":4254},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":425449,"byte_end":425461,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":4272},"to":{"krate":0,"index":429}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":426545,"byte_end":426553,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":4297},"to":{"krate":0,"index":4114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":428035,"byte_end":428044,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":4323},"to":{"krate":2,"index":3246}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\unzip.rs","byte_start":428162,"byte_end":428171,"line_start":513,"line_end":513,"column_start":38,"column_end":47},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":4323},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429048,"byte_end":429054,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":8469},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429214,"byte_end":429220,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":8469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429432,"byte_end":429438,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":8469},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":429900,"byte_end":429906,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":8469},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":430647,"byte_end":430655,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":4367},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":431332,"byte_end":431346,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":4379},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":432606,"byte_end":432620,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":4397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":432767,"byte_end":432781,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":4397},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":433527,"byte_end":433541,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":4397},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":434061,"byte_end":434073,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":4426},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435019,"byte_end":435028,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":8478},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435778,"byte_end":435787,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":8478},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\update.rs","byte_start":435891,"byte_end":435900,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":8478},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436713,"byte_end":436722,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":8491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":436912,"byte_end":436921,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":8491},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":437551,"byte_end":437568,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":4485},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":438368,"byte_end":438385,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":4485},"to":{"krate":0,"index":432}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\while_some.rs","byte_start":438788,"byte_end":438803,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":4506},"to":{"krate":0,"index":421}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440457,"byte_end":440460,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":8500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":440683,"byte_end":440686,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":8500},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441070,"byte_end":441073,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":8500},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":441733,"byte_end":441742,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":4553},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":442363,"byte_end":442372,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":4565},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip.rs","byte_start":443029,"byte_end":443040,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":4577},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444449,"byte_end":444454,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":8513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":444724,"byte_end":444729,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":8513},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\zip_eq.rs","byte_start":445121,"byte_end":445126,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":8513},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":42642,"byte_end":42643,"line_start":277,"line_end":277,"column_start":67,"column_end":68},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":4781},"to":{"krate":0,"index":4774}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":44151,"byte_end":44152,"line_start":324,"line_end":324,"column_start":70,"column_end":71},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":4785}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45041,"byte_end":45046,"line_start":350,"line_end":350,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":45049,"byte_end":45053,"line_start":350,"line_end":350,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108438,"byte_end":108439,"line_start":2232,"line_end":2232,"column_start":52,"column_end":53},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":5000},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":108933,"byte_end":108949,"line_start":2248,"line_end":2248,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":4796},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":141617,"byte_end":141628,"line_start":3255,"line_end":3255,"column_start":24,"column_end":35},"kind":{"Impl":{"id":449}},"from":{"krate":2,"index":45788},"to":{"krate":0,"index":5111}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142272,"byte_end":142278,"line_start":3280,"line_end":3280,"column_start":21,"column_end":27},"kind":{"Impl":{"id":450}},"from":{"krate":2,"index":47489},"to":{"krate":0,"index":5111}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":142886,"byte_end":142892,"line_start":3305,"line_end":3305,"column_start":24,"column_end":30},"kind":{"Impl":{"id":451}},"from":{"krate":2,"index":47616},"to":{"krate":0,"index":5111}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":143508,"byte_end":143512,"line_start":3330,"line_end":3330,"column_start":24,"column_end":28},"kind":{"Impl":{"id":452}},"from":{"krate":2,"index":50356},"to":{"krate":0,"index":5111}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\iter\\mod.rs","byte_start":144256,"byte_end":144260,"line_start":3356,"line_end":3356,"column_start":24,"column_end":28},"kind":{"Impl":{"id":453}},"from":{"krate":2,"index":50356},"to":{"krate":0,"index":5111}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446504,"byte_end":446510,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"kind":{"Impl":{"id":454}},"from":{"krate":2,"index":47489},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446683,"byte_end":446691,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":8531},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":446986,"byte_end":446994,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":8531},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":448151,"byte_end":448155,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":8540},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":449631,"byte_end":449645,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":5200},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\option.rs","byte_start":450257,"byte_end":450263,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"kind":{"Impl":{"id":463}},"from":{"krate":2,"index":47489},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453290,"byte_end":453295,"line_start":53,"line_end":53,"column_start":34,"column_end":39},"kind":{"Impl":{"id":464}},"from":{"krate":2,"index":45880},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":453572,"byte_end":453584,"line_start":69,"line_end":69,"column_start":26,"column_end":38},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":5278},"to":{"krate":2,"index":8410}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454468,"byte_end":454473,"line_start":92,"line_end":92,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":5288}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454476,"byte_end":454480,"line_start":92,"line_end":92,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":5288}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":454811,"byte_end":454823,"line_start":103,"line_end":103,"column_start":36,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":5288},"to":{"krate":0,"index":5292}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455238,"byte_end":455242,"line_start":119,"line_end":119,"column_start":44,"column_end":48},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":8586},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":455571,"byte_end":455575,"line_start":135,"line_end":135,"column_start":58,"column_end":62},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":8586},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461210,"byte_end":461214,"line_start":323,"line_end":323,"column_start":27,"column_end":31},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":8586},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range.rs","byte_start":461521,"byte_end":461525,"line_start":338,"line_end":338,"column_start":34,"column_end":38},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":8586},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":466670,"byte_end":466674,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":8799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":467612,"byte_end":467626,"line_start":75,"line_end":75,"column_start":34,"column_end":48},"kind":{"Impl":{"id":491}},"from":{"krate":2,"index":45949},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468529,"byte_end":468534,"line_start":98,"line_end":98,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":5354}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468537,"byte_end":468541,"line_start":98,"line_end":98,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":5354}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":468872,"byte_end":468884,"line_start":109,"line_end":109,"column_start":36,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":5354},"to":{"krate":0,"index":5358}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469299,"byte_end":469303,"line_start":125,"line_end":125,"column_start":44,"column_end":48},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":8799},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":469632,"byte_end":469636,"line_start":141,"line_end":141,"column_start":58,"column_end":62},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":8799},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473132,"byte_end":473136,"line_start":265,"line_end":265,"column_start":27,"column_end":31},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":8799},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\range_inclusive.rs","byte_start":473516,"byte_end":473520,"line_start":281,"line_end":281,"column_start":34,"column_end":38},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":8799},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477144,"byte_end":477150,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":512}},"from":{"krate":2,"index":47616},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":477584,"byte_end":477588,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":8926},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\result.rs","byte_start":478841,"byte_end":478847,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"kind":{"Impl":{"id":520}},"from":{"krate":2,"index":47616},"to":{"krate":0,"index":5076}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515156,"byte_end":515162,"line_start":13,"line_end":13,"column_start":22,"column_end":28},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":8972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515320,"byte_end":515326,"line_start":19,"line_end":19,"column_start":32,"column_end":38},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":8972},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515455,"byte_end":515461,"line_start":25,"line_end":25,"column_start":51,"column_end":57},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":8972},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":515789,"byte_end":515795,"line_start":40,"line_end":40,"column_start":58,"column_end":64},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":8972},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":516418,"byte_end":516432,"line_start":68,"line_end":68,"column_start":43,"column_end":57},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":5476},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517298,"byte_end":517309,"line_start":100,"line_end":100,"column_start":22,"column_end":33},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":8981},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":517895,"byte_end":517906,"line_start":120,"line_end":120,"column_start":32,"column_end":43},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":8981},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518040,"byte_end":518051,"line_start":126,"line_end":126,"column_start":51,"column_end":62},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":8981},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":518379,"byte_end":518390,"line_start":141,"line_end":141,"column_start":58,"column_end":69},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":8981},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519010,"byte_end":519029,"line_start":169,"line_end":169,"column_start":43,"column_end":62},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":5512},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":519867,"byte_end":519876,"line_start":200,"line_end":200,"column_start":22,"column_end":31},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":8991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520057,"byte_end":520066,"line_start":206,"line_end":206,"column_start":51,"column_end":60},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":8991},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":520398,"byte_end":520407,"line_start":221,"line_end":221,"column_start":58,"column_end":67},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":8991},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521040,"byte_end":521057,"line_start":249,"line_end":249,"column_start":43,"column_end":60},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":5543},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":521953,"byte_end":521967,"line_start":281,"line_end":281,"column_start":22,"column_end":36},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":9000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":523677,"byte_end":523691,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":9000},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524023,"byte_end":524037,"line_start":339,"line_end":339,"column_start":58,"column_end":72},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":9000},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\chunks.rs","byte_start":524667,"byte_end":524689,"line_start":367,"line_end":367,"column_start":43,"column_end":65},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":5577},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":526147,"byte_end":526157,"line_start":33,"line_end":33,"column_start":18,"column_end":28},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":5613},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":529066,"byte_end":529079,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":5624},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":532805,"byte_end":532814,"line_start":205,"line_end":205,"column_start":22,"column_end":31},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":5634},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mergesort.rs","byte_start":544324,"byte_end":544329,"line_start":510,"line_end":510,"column_start":22,"column_end":27},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":5656},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\quicksort.rs","byte_start":553410,"byte_end":553420,"line_start":17,"line_end":17,"column_start":18,"column_end":28},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":5691},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589423,"byte_end":589430,"line_start":12,"line_end":12,"column_start":22,"column_end":29},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":9032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589588,"byte_end":589595,"line_start":18,"line_end":18,"column_start":32,"column_end":39},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":9032},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":589725,"byte_end":589732,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":9032},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590060,"byte_end":590067,"line_start":39,"line_end":39,"column_start":58,"column_end":65},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":9032},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":590692,"byte_end":590707,"line_start":67,"line_end":67,"column_start":43,"column_end":58},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":5784},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":591605,"byte_end":591617,"line_start":99,"line_end":99,"column_start":22,"column_end":34},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":9041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592166,"byte_end":592178,"line_start":118,"line_end":118,"column_start":32,"column_end":44},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":9041},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592313,"byte_end":592325,"line_start":124,"line_end":124,"column_start":51,"column_end":63},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":9041},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":592653,"byte_end":592665,"line_start":139,"line_end":139,"column_start":58,"column_end":70},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":9041},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":593287,"byte_end":593307,"line_start":167,"line_end":167,"column_start":43,"column_end":63},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":5820},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594191,"byte_end":594201,"line_start":198,"line_end":198,"column_start":22,"column_end":32},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":9051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594382,"byte_end":594392,"line_start":204,"line_end":204,"column_start":51,"column_end":61},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":9051},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":594724,"byte_end":594734,"line_start":219,"line_end":219,"column_start":58,"column_end":68},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":9051},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":595369,"byte_end":595387,"line_start":247,"line_end":247,"column_start":43,"column_end":61},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":5851},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":596315,"byte_end":596330,"line_start":279,"line_end":279,"column_start":22,"column_end":37},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":9060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598004,"byte_end":598019,"line_start":321,"line_end":321,"column_start":51,"column_end":66},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":9060},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598351,"byte_end":598366,"line_start":336,"line_end":336,"column_start":58,"column_end":73},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":9060},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\rchunks.rs","byte_start":598998,"byte_end":599021,"line_start":364,"line_end":364,"column_start":43,"column_end":66},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":5885},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506388,"byte_end":506392,"line_start":695,"line_end":695,"column_start":32,"column_end":36},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":9074},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506519,"byte_end":506523,"line_start":701,"line_end":701,"column_start":51,"column_end":55},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":9074},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":506849,"byte_end":506853,"line_start":716,"line_end":716,"column_start":58,"column_end":62},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":9074},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507356,"byte_end":507368,"line_start":740,"line_end":740,"column_start":43,"column_end":55},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":507926,"byte_end":507933,"line_start":761,"line_end":761,"column_start":32,"column_end":39},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":9082},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508063,"byte_end":508070,"line_start":767,"line_end":767,"column_start":51,"column_end":58},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":9082},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":508398,"byte_end":508405,"line_start":782,"line_end":782,"column_start":58,"column_end":65},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":9082},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509079,"byte_end":509094,"line_start":811,"line_end":811,"column_start":43,"column_end":58},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":6054},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":509969,"byte_end":509976,"line_start":842,"line_end":842,"column_start":51,"column_end":58},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":9091},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510306,"byte_end":510313,"line_start":857,"line_end":857,"column_start":58,"column_end":65},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":9091},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":510826,"byte_end":510841,"line_start":881,"line_end":881,"column_start":43,"column_end":58},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":6081},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511422,"byte_end":511427,"line_start":904,"line_end":904,"column_start":36,"column_end":41},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":6092},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511610,"byte_end":511615,"line_start":913,"line_end":913,"column_start":36,"column_end":41},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":6092},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":511811,"byte_end":511816,"line_start":919,"line_end":919,"column_start":40,"column_end":45},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":6092},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513303,"byte_end":513311,"line_start":980,"line_end":980,"column_start":36,"column_end":44},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":6126},"to":{"krate":2,"index":10298}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\slice\\mod.rs","byte_start":513536,"byte_end":513544,"line_start":988,"line_end":988,"column_start":40,"column_end":48},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":6126},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615094,"byte_end":615099,"line_start":288,"line_end":288,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":6184}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615102,"byte_end":615106,"line_start":288,"line_end":288,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3280},"to":{"krate":0,"index":6184}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":615109,"byte_end":615113,"line_start":288,"line_end":288,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":6184}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617295,"byte_end":617297,"line_start":365,"line_end":365,"column_start":54,"column_end":56},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":6208},"to":{"krate":0,"index":6184}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617624,"byte_end":617629,"line_start":381,"line_end":381,"column_start":32,"column_end":37},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":9139},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":617889,"byte_end":617902,"line_start":392,"line_end":392,"column_start":33,"column_end":46},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":6209},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":618701,"byte_end":618712,"line_start":426,"line_end":426,"column_start":32,"column_end":43},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":9148},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":619063,"byte_end":619082,"line_start":441,"line_end":441,"column_start":33,"column_end":52},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":6223},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620054,"byte_end":620059,"line_start":481,"line_end":481,"column_start":32,"column_end":37},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":9157},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":620317,"byte_end":620330,"line_start":492,"line_end":492,"column_start":33,"column_end":46},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":6238},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621087,"byte_end":621098,"line_start":525,"line_end":525,"column_start":32,"column_end":43},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":9166},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":621363,"byte_end":621382,"line_start":536,"line_end":536,"column_start":33,"column_end":52},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":6252},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622123,"byte_end":622128,"line_start":566,"line_end":566,"column_start":23,"column_end":28},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":9175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":622278,"byte_end":622283,"line_start":572,"line_end":572,"column_start":44,"column_end":49},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":9175},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":623936,"byte_end":623951,"line_start":632,"line_end":632,"column_start":23,"column_end":38},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":9188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624105,"byte_end":624128,"line_start":638,"line_end":638,"column_start":36,"column_end":59},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":6286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624436,"byte_end":624451,"line_start":647,"line_end":647,"column_start":44,"column_end":59},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":9188},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":624799,"byte_end":624822,"line_start":659,"line_end":659,"column_start":58,"column_end":81},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":6286},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":625736,"byte_end":625741,"line_start":695,"line_end":695,"column_start":32,"column_end":37},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":9201},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":626335,"byte_end":626350,"line_start":720,"line_end":720,"column_start":32,"column_end":47},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":9211},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":627015,"byte_end":627022,"line_start":748,"line_end":748,"column_start":44,"column_end":51},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":9221},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":627399,"byte_end":627414,"line_start":763,"line_end":763,"column_start":51,"column_end":66},"kind":{"Impl":{"id":598}},"from":{"krate":0,"index":6328},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628451,"byte_end":628463,"line_start":805,"line_end":805,"column_start":44,"column_end":56},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":9234},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\str.rs","byte_start":628876,"byte_end":628896,"line_start":821,"line_end":821,"column_start":51,"column_end":71},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":6348},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630464,"byte_end":630469,"line_start":30,"line_end":30,"column_start":31,"column_end":36},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":9247},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\string.rs","byte_start":630746,"byte_end":630751,"line_start":43,"line_end":43,"column_start":19,"column_end":24},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":9247},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":631951,"byte_end":631954,"line_start":42,"line_end":42,"column_start":40,"column_end":43},"kind":{"Impl":{"id":603}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":4770}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632127,"byte_end":632135,"line_start":51,"line_end":51,"column_start":36,"column_end":44},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":9254},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":632432,"byte_end":632440,"line_start":66,"line_end":66,"column_start":43,"column_end":51},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":9254},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633515,"byte_end":633520,"line_start":108,"line_end":108,"column_start":43,"column_end":48},"kind":{"Impl":{"id":606}},"from":{"krate":0,"index":9263},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":633831,"byte_end":633836,"line_start":123,"line_end":123,"column_start":50,"column_end":55},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":9263},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":634645,"byte_end":634650,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"kind":{"Impl":{"id":608}},"from":{"krate":0,"index":9263},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":635815,"byte_end":635828,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"kind":{"Impl":{"id":609}},"from":{"krate":0,"index":6484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":636828,"byte_end":636841,"line_start":206,"line_end":206,"column_start":43,"column_end":56},"kind":{"Impl":{"id":610}},"from":{"krate":0,"index":6484},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":637476,"byte_end":637489,"line_start":226,"line_end":226,"column_start":39,"column_end":52},"kind":{"Impl":{"id":611}},"from":{"krate":0,"index":6484},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":637865,"byte_end":637875,"line_start":240,"line_end":240,"column_start":36,"column_end":46},"kind":{"Impl":{"id":612}},"from":{"krate":0,"index":6503},"to":{"krate":2,"index":8608}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638349,"byte_end":638359,"line_start":259,"line_end":259,"column_start":47,"column_end":57},"kind":{"Impl":{"id":613}},"from":{"krate":0,"index":6503},"to":{"krate":2,"index":8454}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638680,"byte_end":638690,"line_start":268,"line_end":268,"column_start":45,"column_end":55},"kind":{"Impl":{"id":614}},"from":{"krate":0,"index":6503},"to":{"krate":2,"index":8479}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638811,"byte_end":638821,"line_start":274,"line_end":274,"column_start":47,"column_end":57},"kind":{"Impl":{"id":615}},"from":{"krate":0,"index":6503},"to":{"krate":2,"index":8886}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\vec.rs","byte_start":638867,"byte_end":638877,"line_start":276,"line_end":276,"column_start":32,"column_end":42},"kind":{"Impl":{"id":616}},"from":{"krate":0,"index":6503},"to":{"krate":2,"index":3515}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":640893,"byte_end":640899,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":617}},"from":{"krate":16,"index":292},"to":{"krate":0,"index":4796}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":641419,"byte_end":641425,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"kind":{"Impl":{"id":618}},"from":{"krate":16,"index":292},"to":{"krate":0,"index":5004}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\par_either.rs","byte_start":642219,"byte_end":642225,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":619}},"from":{"krate":16,"index":292},"to":{"krate":0,"index":5080}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5328,"byte_end":5335,"line_start":134,"line_end":134,"column_start":31,"column_end":38},"kind":{"Impl":{"id":620}},"from":{"krate":0,"index":6654},"to":{"krate":2,"index":3268}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5441,"byte_end":5448,"line_start":137,"line_end":137,"column_start":31,"column_end":38},"kind":{"Impl":{"id":621}},"from":{"krate":0,"index":6654},"to":{"krate":2,"index":3280}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5464,"byte_end":5471,"line_start":139,"line_end":139,"column_start":9,"column_end":16},"kind":{"Impl":{"id":622}},"from":{"krate":0,"index":6654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5667,"byte_end":5674,"line_start":147,"line_end":147,"column_start":19,"column_end":26},"kind":{"Impl":{"id":623}},"from":{"krate":0,"index":6654},"to":{"krate":2,"index":2887}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rayon-1.6.1\\src\\lib.rs","byte_start":5817,"byte_end":5824,"line_start":154,"line_end":154,"column_start":18,"column_end":25},"kind":{"Impl":{"id":624}},"from":{"krate":0,"index":6654},"to":{"krate":2,"index":3278}}]}