{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3","program":"C:\\Users\\Ben\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bytemuck","--edition=2018","C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck_derive\"","--cfg","feature=\"derive\"","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=00fcd7dca4ccccf1","-C","extra-filename=-00fcd7dca4ccccf1","--out-dir","c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps","--extern","bytemuck_derive=c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\bytemuck_derive-68fb01c58ce3f16b.dll","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Ben\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Ben\\Desktop\\rust_f1_telemetry-main\\rust_f1_telemetry-main\\f1-game-client\\target\\rls\\debug\\deps\\libbytemuck-00fcd7dca4ccccf1.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[12474186806860358612,0]},"crate_root":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src","external_crates":[{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5178777620647193466,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7203661724729889941,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17525700935344431946,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14114419768508526436,0]}},{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","num":5,"id":{"name":"bytemuck_derive","disambiguator":[15746579042910254411,0]}}],"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":0,"byte_end":11048,"line_start":1,"line_end":386,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2181,"byte_end":2185,"line_start":57,"line_end":57,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2844,"byte_end":2845,"line_start":82,"line_end":82,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2890,"byte_end":2891,"line_start":85,"line_end":85,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2928,"byte_end":2945,"line_start":88,"line_end":88,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2995,"byte_end":2996,"line_start":93,"line_end":93,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3050,"byte_end":3051,"line_start":95,"line_end":95,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3076,"byte_end":3077,"line_start":98,"line_end":98,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3121,"byte_end":3122,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3159,"byte_end":3160,"line_start":103,"line_end":103,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3199,"byte_end":3200,"line_start":106,"line_end":106,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3237,"byte_end":3238,"line_start":109,"line_end":109,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3279,"byte_end":3280,"line_start":112,"line_end":112,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"TransparentWrapper","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3339,"byte_end":3352,"line_start":116,"line_end":116,"column_start":3,"column_end":16},"alias_span":null,"name":"AnyBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":194},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3354,"byte_end":3371,"line_start":116,"line_end":116,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":196},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3373,"byte_end":3383,"line_start":116,"line_end":116,"column_start":37,"column_end":47},"alias_span":null,"name":"Contiguous","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":193},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3385,"byte_end":3393,"line_start":116,"line_end":116,"column_start":49,"column_end":57},"alias_span":null,"name":"NoUninit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":190},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3395,"byte_end":3398,"line_start":116,"line_end":116,"column_start":59,"column_end":62},"alias_span":null,"name":"Pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":195},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3402,"byte_end":3420,"line_start":117,"line_end":117,"column_start":3,"column_end":21},"alias_span":null,"name":"TransparentWrapper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":192},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3422,"byte_end":3430,"line_start":117,"line_end":117,"column_start":23,"column_end":31},"alias_span":null,"name":"Zeroable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":0,"byte_end":11048,"line_start":1,"line_end":386,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":274},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":943},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":34,"byte_end":77,"line_start":3,"line_end":3,"column_start":1,"column_end":44}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":151,"byte_end":225,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":226,"byte_end":229,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":230,"byte_end":243,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":244,"byte_end":247,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":248,"byte_end":321,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":322,"byte_end":336,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":337,"byte_end":340,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":341,"byte_end":364,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":365,"byte_end":393,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":394,"byte_end":426,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":427,"byte_end":459,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":460,"byte_end":500,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":501,"byte_end":504,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":505,"byte_end":580,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":581,"byte_end":660,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":661,"byte_end":741,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":742,"byte_end":821,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":822,"byte_end":840,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":841,"byte_end":844,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":845,"byte_end":872,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":873,"byte_end":876,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":877,"byte_end":948,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":949,"byte_end":989,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":990,"byte_end":993,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":994,"byte_end":1069,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1070,"byte_end":1147,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1148,"byte_end":1225,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1226,"byte_end":1271,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1272,"byte_end":1275,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1276,"byte_end":1291,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1292,"byte_end":1295,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1296,"byte_end":1376,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1377,"byte_end":1456,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1457,"byte_end":1536,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":1537,"byte_end":1607,"line_start":40,"line_end":40,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":124}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2726,"byte_end":2764,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11436,"byte_end":11475,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11477,"byte_end":11524,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11525,"byte_end":11528,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11529,"byte_end":11609,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11610,"byte_end":11684,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11685,"byte_end":11739,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11740,"byte_end":11743,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features =","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11744,"byte_end":11809,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ [\"extern_crate_alloc\"]}`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":11810,"byte_end":11838,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12108,"byte_end":12116,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"fn cast_box<A, B>(Box<A>) -> Box<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12031,"byte_end":12090,"line_start":24,"line_end":24,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12091,"byte_end":12100,"line_start":25,"line_end":25,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12578,"byte_end":12590,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"fn try_cast_box<A, B>(Box<A>) -> Result<Box<B>, (PodCastError, Box<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12230,"byte_end":12300,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12301,"byte_end":12304,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12305,"byte_end":12372,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12373,"byte_end":12376,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12377,"byte_end":12391,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12392,"byte_end":12395,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12396,"byte_end":12470,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12471,"byte_end":12487,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12488,"byte_end":12560,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":12561,"byte_end":12570,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13471,"byte_end":13485,"line_start":65,"line_end":65,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"fn try_zeroed_box<T>() -> Result<Box<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13051,"byte_end":13118,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13119,"byte_end":13122,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13123,"byte_end":13198,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13199,"byte_end":13278,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13279,"byte_end":13352,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13353,"byte_end":13390,"line_start":59,"line_end":59,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13391,"byte_end":13394,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13395,"byte_end":13409,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13410,"byte_end":13413,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13414,"byte_end":13453,"line_start":63,"line_end":63,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":13454,"byte_end":13463,"line_start":64,"line_end":64,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14610,"byte_end":14620,"line_start":95,"line_end":95,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"fn zeroed_box<T>() -> Box<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14545,"byte_end":14592,"line_start":93,"line_end":93,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14593,"byte_end":14602,"line_start":94,"line_end":94,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14912,"byte_end":14926,"line_start":106,"line_end":106,"column_start":8,"column_end":22},"name":"try_zeroed_vec","qualname":"::allocation::try_zeroed_vec","value":"fn try_zeroed_vec<T>(usize) -> Result<Vec<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Vec<T>` of length and capacity exactly equal to `length` and\n all elements zeroed.","sig":null,"attributes":[{"value":"/ Allocates a `Vec<T>` of length and capacity exactly equal to `length` and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14679,"byte_end":14756,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/ all elements zeroed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14757,"byte_end":14781,"line_start":100,"line_end":100,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14782,"byte_end":14785,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14786,"byte_end":14800,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14801,"byte_end":14804,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14805,"byte_end":14884,"line_start":104,"line_end":104,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":14885,"byte_end":14904,"line_start":105,"line_end":105,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15172,"byte_end":15182,"line_start":116,"line_end":116,"column_start":8,"column_end":18},"name":"zeroed_vec","qualname":"::allocation::zeroed_vec","value":"fn zeroed_vec<T>(usize) -> Vec<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_vec`] but unwraps for you\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_vec`] but unwraps for you","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15119,"byte_end":15164,"line_start":115,"line_end":115,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15735,"byte_end":15755,"line_start":132,"line_end":132,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"fn try_zeroed_slice_box<T>(usize) -> Result<Box<[T]>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15260,"byte_end":15322,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15323,"byte_end":15326,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15327,"byte_end":15402,"line_start":122,"line_end":122,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15403,"byte_end":15482,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15483,"byte_end":15556,"line_start":124,"line_end":124,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15557,"byte_end":15594,"line_start":125,"line_end":125,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15595,"byte_end":15598,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15599,"byte_end":15613,"line_start":127,"line_end":127,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15614,"byte_end":15617,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15618,"byte_end":15697,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15698,"byte_end":15717,"line_start":130,"line_end":130,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":15718,"byte_end":15727,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16619,"byte_end":16635,"line_start":158,"line_end":158,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"fn zeroed_slice_box<T>(usize) -> Box<[T]> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16536,"byte_end":16611,"line_start":157,"line_end":157,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16810,"byte_end":16824,"line_start":164,"line_end":164,"column_start":8,"column_end":22},"name":"cast_slice_box","qualname":"::allocation::cast_slice_box","value":"fn cast_slice_box<A, B>(Box<[A]>) -> Box<[B]> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16721,"byte_end":16792,"line_start":162,"line_end":162,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16793,"byte_end":16802,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17316,"byte_end":17334,"line_start":181,"line_end":181,"column_start":8,"column_end":26},"name":"try_cast_slice_box","qualname":"::allocation::try_cast_slice_box","value":"fn try_cast_slice_box<A, B>(Box<[A]>)\n-> Result<Box<[B]>, (PodCastError, Box<[A]>)> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Box<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":16953,"byte_end":17007,"line_start":170,"line_end":170,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17008,"byte_end":17011,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17012,"byte_end":17084,"line_start":172,"line_end":172,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17085,"byte_end":17088,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17089,"byte_end":17103,"line_start":174,"line_end":174,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17104,"byte_end":17107,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box<[T]>` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17108,"byte_end":17187,"line_start":176,"line_end":176,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17188,"byte_end":17204,"line_start":177,"line_end":177,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Box<[T]>` must be the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17205,"byte_end":17280,"line_start":178,"line_end":178,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17281,"byte_end":17298,"line_start":179,"line_end":179,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":17299,"byte_end":17308,"line_start":180,"line_end":180,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":18906,"byte_end":18914,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"fn cast_vec<A, B>(Vec<A>) -> Vec<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":18829,"byte_end":18888,"line_start":213,"line_end":213,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":18889,"byte_end":18898,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19469,"byte_end":19481,"line_start":231,"line_end":231,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"fn try_cast_vec<A, B>(Vec<A>) -> Result<Vec<B>, (PodCastError, Vec<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19028,"byte_end":19096,"line_start":219,"line_end":219,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19097,"byte_end":19100,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19101,"byte_end":19168,"line_start":221,"line_end":221,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19169,"byte_end":19172,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19173,"byte_end":19187,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19188,"byte_end":19191,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19192,"byte_end":19266,"line_start":225,"line_end":225,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19267,"byte_end":19283,"line_start":226,"line_end":226,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Vec` must be the exact","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19284,"byte_end":19360,"line_start":227,"line_end":227,"column_start":1,"column_end":77}},{"value":"/   same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19361,"byte_end":19372,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"/ * The start and end capacity in bytes of the `Vec` mest be the exact same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19373,"byte_end":19451,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":19452,"byte_end":19461,"line_start":230,"line_end":230,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22982,"byte_end":23000,"line_start":302,"line_end":302,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"fn pod_collect_to_vec<A, B, '_>(&'_ [A]) -> Vec<B> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22381,"byte_end":22456,"line_start":286,"line_end":286,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22457,"byte_end":22460,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22461,"byte_end":22538,"line_start":288,"line_end":288,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22539,"byte_end":22542,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22543,"byte_end":22621,"line_start":290,"line_end":290,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22622,"byte_end":22625,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22626,"byte_end":22637,"line_start":292,"line_end":292,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22638,"byte_end":22660,"line_start":293,"line_end":293,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22661,"byte_end":22704,"line_start":294,"line_end":294,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22705,"byte_end":22769,"line_start":295,"line_end":295,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22770,"byte_end":22809,"line_start":296,"line_end":296,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22810,"byte_end":22878,"line_start":297,"line_end":297,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22879,"byte_end":22891,"line_start":298,"line_end":298,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22892,"byte_end":22960,"line_start":299,"line_end":299,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22961,"byte_end":22966,"line_start":300,"line_end":300,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":22967,"byte_end":22974,"line_start":301,"line_end":301,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23632,"byte_end":23639,"line_start":323,"line_end":323,"column_start":8,"column_end":15},"name":"cast_rc","qualname":"::allocation::cast_rc","value":"fn cast_rc<A, B>(Rc<A>) -> Rc<B> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_rc`](try_cast_rc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_rc`](try_cast_rc), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23557,"byte_end":23614,"line_start":321,"line_end":321,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23615,"byte_end":23624,"line_start":322,"line_end":322,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24301,"byte_end":24312,"line_start":343,"line_end":343,"column_start":8,"column_end":19},"name":"try_cast_rc","qualname":"::allocation::try_cast_rc","value":"fn try_cast_rc<A, B>(Rc<A>) -> Result<Rc<B>, (PodCastError, Rc<A>)> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Rc`](alloc::rc::Rc).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Rc`](alloc::rc::Rc).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23782,"byte_end":23847,"line_start":329,"line_end":329,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23848,"byte_end":23851,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Rc`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23852,"byte_end":23918,"line_start":331,"line_end":331,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23919,"byte_end":23922,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":23923,"byte_end":23999,"line_start":333,"line_end":333,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24000,"byte_end":24079,"line_start":334,"line_end":334,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24080,"byte_end":24097,"line_start":335,"line_end":335,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24098,"byte_end":24101,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24102,"byte_end":24116,"line_start":337,"line_end":337,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24117,"byte_end":24120,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Rc` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24121,"byte_end":24194,"line_start":339,"line_end":339,"column_start":1,"column_end":74}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24195,"byte_end":24211,"line_start":340,"line_end":340,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Rc` must have the exact same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24212,"byte_end":24283,"line_start":341,"line_end":341,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24284,"byte_end":24293,"line_start":342,"line_end":342,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24916,"byte_end":24924,"line_start":360,"line_end":360,"column_start":8,"column_end":16},"name":"cast_arc","qualname":"::allocation::cast_arc","value":"fn cast_arc<A, B>(Arc<A>) -> Arc<B> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_arc`](try_cast_arc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_arc`](try_cast_arc), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24805,"byte_end":24864,"line_start":357,"line_end":357,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24865,"byte_end":24874,"line_start":358,"line_end":358,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":24875,"byte_end":24908,"line_start":359,"line_end":359,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25630,"byte_end":25642,"line_start":381,"line_end":381,"column_start":8,"column_end":20},"name":"try_cast_arc","qualname":"::allocation::try_cast_arc","value":"fn try_cast_arc<A, B>(Arc<A>) -> Result<Arc<B>, (PodCastError, Arc<A>)> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Arc`](alloc::sync::Arc).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Arc`](alloc::sync::Arc).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25070,"byte_end":25139,"line_start":366,"line_end":366,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25140,"byte_end":25143,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Arc`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25144,"byte_end":25211,"line_start":368,"line_end":368,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25212,"byte_end":25215,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25216,"byte_end":25292,"line_start":370,"line_end":370,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25293,"byte_end":25372,"line_start":371,"line_end":371,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25373,"byte_end":25390,"line_start":372,"line_end":372,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25391,"byte_end":25394,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25395,"byte_end":25409,"line_start":374,"line_end":374,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25410,"byte_end":25413,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Arc` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25414,"byte_end":25488,"line_start":376,"line_end":376,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25489,"byte_end":25505,"line_start":377,"line_end":377,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Arc` must have the exact same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25506,"byte_end":25578,"line_start":378,"line_end":378,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25579,"byte_end":25588,"line_start":379,"line_end":379,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":25589,"byte_end":25622,"line_start":380,"line_end":380,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26235,"byte_end":26248,"line_start":400,"line_end":400,"column_start":8,"column_end":21},"name":"cast_slice_rc","qualname":"::allocation::cast_slice_rc","value":"fn cast_slice_rc<A, B>(Rc<[A]>) -> Rc<[B]> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_rc`](try_cast_slice_rc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_rc`](try_cast_slice_rc), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26148,"byte_end":26217,"line_start":398,"line_end":398,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26218,"byte_end":26227,"line_start":399,"line_end":399,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26946,"byte_end":26963,"line_start":424,"line_end":424,"column_start":8,"column_end":25},"name":"try_cast_slice_rc","qualname":"::allocation::try_cast_slice_rc","value":"fn try_cast_slice_rc<A, B>(Rc<[A]>)\n-> Result<Rc<[B]>, (PodCastError, Rc<[A]>)> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Rc<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Rc<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26408,"byte_end":26461,"line_start":409,"line_end":409,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26462,"byte_end":26465,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Rc<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26466,"byte_end":26537,"line_start":411,"line_end":411,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26538,"byte_end":26541,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26542,"byte_end":26618,"line_start":413,"line_end":413,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26619,"byte_end":26698,"line_start":414,"line_end":414,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26699,"byte_end":26716,"line_start":415,"line_end":415,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26717,"byte_end":26720,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26721,"byte_end":26735,"line_start":417,"line_end":417,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26736,"byte_end":26739,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Rc<[T]>` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26740,"byte_end":26818,"line_start":419,"line_end":419,"column_start":1,"column_end":79}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26819,"byte_end":26835,"line_start":420,"line_end":420,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Rc<[T]>` must be the exact","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26836,"byte_end":26916,"line_start":421,"line_end":421,"column_start":1,"column_end":81}},{"value":"/   same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26917,"byte_end":26928,"line_start":422,"line_end":422,"column_start":1,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":26929,"byte_end":26938,"line_start":423,"line_end":423,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28749,"byte_end":28763,"line_start":463,"line_end":463,"column_start":8,"column_end":22},"name":"cast_slice_arc","qualname":"::allocation::cast_slice_arc","value":"fn cast_slice_arc<A, B>(Arc<[A]>) -> Arc<[B]> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_arc`](try_cast_slice_arc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_arc`](try_cast_slice_arc), but unwraps for you.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28626,"byte_end":28697,"line_start":460,"line_end":460,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28698,"byte_end":28707,"line_start":461,"line_end":461,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28708,"byte_end":28741,"line_start":462,"line_end":462,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29502,"byte_end":29520,"line_start":488,"line_end":488,"column_start":8,"column_end":26},"name":"try_cast_slice_arc","qualname":"::allocation::try_cast_slice_arc","value":"fn try_cast_slice_arc<A, B>(Arc<[A]>)\n-> Result<Arc<[B]>, (PodCastError, Arc<[A]>)> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Arc<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Arc<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28926,"byte_end":28980,"line_start":472,"line_end":472,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28981,"byte_end":28984,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Arc<[T]>`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":28985,"byte_end":29057,"line_start":474,"line_end":474,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29058,"byte_end":29061,"line_start":475,"line_end":475,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29062,"byte_end":29138,"line_start":476,"line_end":476,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29139,"byte_end":29218,"line_start":477,"line_end":477,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29219,"byte_end":29236,"line_start":478,"line_end":478,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29237,"byte_end":29240,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29241,"byte_end":29255,"line_start":480,"line_end":480,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29256,"byte_end":29259,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Arc<[T]>` must have the exact same","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29260,"byte_end":29339,"line_start":482,"line_end":482,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29340,"byte_end":29356,"line_start":483,"line_end":483,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Arc<[T]>` must be the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29357,"byte_end":29432,"line_start":484,"line_end":484,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29433,"byte_end":29450,"line_start":485,"line_end":485,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29451,"byte_end":29460,"line_start":486,"line_end":486,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":29461,"byte_end":29494,"line_start":487,"line_end":487,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31278,"byte_end":31301,"line_start":525,"line_end":525,"column_start":11,"column_end":34},"name":"TransparentWrapperAlloc","qualname":"::allocation::TransparentWrapperAlloc","value":"TransparentWrapperAlloc<Inner>: TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":" An extension trait for `TransparentWrapper` and alloc types.\n","sig":null,"attributes":[{"value":"/ An extension trait for `TransparentWrapper` and alloc types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31203,"byte_end":31267,"line_start":524,"line_end":524,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31423,"byte_end":31431,"line_start":529,"line_end":529,"column_start":6,"column_end":14},"name":"wrap_vec","qualname":"::allocation::TransparentWrapperAlloc::wrap_vec","value":"fn wrap_vec(Vec<Inner>) -> Vec<Self> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert a vec of the inner type into a vec of the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the inner type into a vec of the wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31350,"byte_end":31417,"line_start":528,"line_end":528,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":32014,"byte_end":32022,"line_start":552,"line_end":552,"column_start":6,"column_end":14},"name":"wrap_box","qualname":"::allocation::TransparentWrapperAlloc::wrap_box","value":"fn wrap_box(Box<Inner>) -> Box<Self>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert a box to the inner type into a box to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the inner type into a box to the wrapper","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31923,"byte_end":31984,"line_start":549,"line_end":549,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31987,"byte_end":31996,"line_start":550,"line_end":550,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31999,"byte_end":32008,"line_start":551,"line_end":551,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":32959,"byte_end":32966,"line_start":576,"line_end":576,"column_start":6,"column_end":13},"name":"wrap_rc","qualname":"::allocation::TransparentWrapperAlloc::wrap_rc","value":"fn wrap_rc(Rc<Inner>) -> Rc<Self>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert an [`Rc`](alloc::rc::Rc) to the inner type into an `Rc` to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Rc`](alloc::rc::Rc) to the inner type into an `Rc` to the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":32847,"byte_end":32921,"line_start":573,"line_end":573,"column_start":3,"column_end":77}},{"value":"/ wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":32924,"byte_end":32941,"line_start":574,"line_end":574,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":32944,"byte_end":32953,"line_start":575,"line_end":575,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":33889,"byte_end":33897,"line_start":599,"line_end":599,"column_start":6,"column_end":14},"name":"wrap_arc","qualname":"::allocation::TransparentWrapperAlloc::wrap_arc","value":"fn wrap_arc(Arc<Inner>) -> Arc<Self>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert an [`Arc`](alloc::sync::Arc) to the inner type into an `Arc` to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Arc`](alloc::sync::Arc) to the inner type into an `Arc` to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":33736,"byte_end":33811,"line_start":595,"line_end":595,"column_start":3,"column_end":78}},{"value":"/ the wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":33814,"byte_end":33835,"line_start":596,"line_end":596,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":33838,"byte_end":33847,"line_start":597,"line_end":597,"column_start":3,"column_end":12}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":33850,"byte_end":33883,"line_start":598,"line_end":598,"column_start":3,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":34746,"byte_end":34754,"line_start":619,"line_end":619,"column_start":6,"column_end":14},"name":"peel_vec","qualname":"::allocation::TransparentWrapperAlloc::peel_vec","value":"fn peel_vec(Vec<Self>) -> Vec<Inner> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert a vec of the wrapper type into a vec of the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the wrapper type into a vec of the inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":34673,"byte_end":34740,"line_start":618,"line_end":618,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":35338,"byte_end":35346,"line_start":642,"line_end":642,"column_start":6,"column_end":14},"name":"peel_box","qualname":"::allocation::TransparentWrapperAlloc::peel_box","value":"fn peel_box(Box<Self>) -> Box<Inner>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert a box to the wrapper type into a box to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the wrapper type into a box to the inner","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":35247,"byte_end":35308,"line_start":639,"line_end":639,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":35311,"byte_end":35320,"line_start":640,"line_end":640,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":35323,"byte_end":35332,"line_start":641,"line_end":641,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":36283,"byte_end":36290,"line_start":666,"line_end":666,"column_start":6,"column_end":13},"name":"peel_rc","qualname":"::allocation::TransparentWrapperAlloc::peel_rc","value":"fn peel_rc(Rc<Self>) -> Rc<Inner>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert an [`Rc`](alloc::rc::Rc) to the wrapper type into an `Rc` to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Rc`](alloc::rc::Rc) to the wrapper type into an `Rc` to the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":36171,"byte_end":36247,"line_start":663,"line_end":663,"column_start":3,"column_end":79}},{"value":"/ inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":36250,"byte_end":36265,"line_start":664,"line_end":664,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":36268,"byte_end":36277,"line_start":665,"line_end":665,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":37213,"byte_end":37221,"line_start":689,"line_end":689,"column_start":6,"column_end":14},"name":"peel_arc","qualname":"::allocation::TransparentWrapperAlloc::peel_arc","value":"fn peel_arc(Arc<Self>) -> Arc<Inner>","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Convert an [`Arc`](alloc::sync::Arc) to the wrapper type into an `Arc` to\n the inner type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Arc`](alloc::sync::Arc) to the wrapper type into an `Arc` to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":37060,"byte_end":37137,"line_start":685,"line_end":685,"column_start":3,"column_end":80}},{"value":"/ the inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":37140,"byte_end":37159,"line_start":686,"line_end":686,"column_start":3,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":37162,"byte_end":37171,"line_start":687,"line_end":687,"column_start":3,"column_end":12}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":37174,"byte_end":37207,"line_start":688,"line_end":688,"column_start":3,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41411,"byte_end":41424,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":38812,"byte_end":38891,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":38892,"byte_end":38895,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":38896,"byte_end":38953,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":38954,"byte_end":39015,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39016,"byte_end":39095,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39096,"byte_end":39169,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39170,"byte_end":39245,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39246,"byte_end":39312,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39313,"byte_end":39316,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39317,"byte_end":39396,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39397,"byte_end":39473,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39474,"byte_end":39477,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39478,"byte_end":39549,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39550,"byte_end":39619,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39620,"byte_end":39654,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39655,"byte_end":39658,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39659,"byte_end":39671,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39672,"byte_end":39675,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39676,"byte_end":39753,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39754,"byte_end":39831,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39832,"byte_end":39903,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39904,"byte_end":39984,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":39985,"byte_end":40063,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40064,"byte_end":40087,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40088,"byte_end":40091,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40092,"byte_end":40172,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40173,"byte_end":40253,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40254,"byte_end":40298,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40299,"byte_end":40302,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40303,"byte_end":40315,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40316,"byte_end":40319,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40320,"byte_end":40397,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40398,"byte_end":40476,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40477,"byte_end":40520,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40521,"byte_end":40524,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40525,"byte_end":40565,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40566,"byte_end":40613,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40614,"byte_end":40685,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40686,"byte_end":40748,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40749,"byte_end":40829,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40830,"byte_end":40888,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40889,"byte_end":40963,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":40964,"byte_end":41041,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41042,"byte_end":41122,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41123,"byte_end":41203,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41204,"byte_end":41283,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41284,"byte_end":41334,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41335,"byte_end":41393,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":594},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":41567,"byte_end":41634,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":41635,"byte_end":41680,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46408,"byte_end":46425,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":41768,"byte_end":41846,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":41847,"byte_end":41926,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":41927,"byte_end":42007,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42008,"byte_end":42082,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42083,"byte_end":42111,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42112,"byte_end":42115,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42116,"byte_end":42194,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42195,"byte_end":42271,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42272,"byte_end":42339,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks wheter a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42340,"byte_end":42413,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42414,"byte_end":42490,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42491,"byte_end":42570,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42571,"byte_end":42648,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42649,"byte_end":42669,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42670,"byte_end":42673,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42674,"byte_end":42754,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42755,"byte_end":42832,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42833,"byte_end":42911,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42912,"byte_end":42988,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":42989,"byte_end":43064,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43065,"byte_end":43081,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43082,"byte_end":43085,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43086,"byte_end":43098,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43099,"byte_end":43102,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43103,"byte_end":43176,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43177,"byte_end":43252,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43253,"byte_end":43330,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43331,"byte_end":43403,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43404,"byte_end":43432,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43433,"byte_end":43436,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43437,"byte_end":43450,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43451,"byte_end":43454,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43455,"byte_end":43523,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43524,"byte_end":43527,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43528,"byte_end":43539,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43540,"byte_end":43588,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43589,"byte_end":43592,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43593,"byte_end":43609,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43610,"byte_end":43636,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43637,"byte_end":43654,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43655,"byte_end":43676,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43677,"byte_end":43698,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43699,"byte_end":43720,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43721,"byte_end":43726,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43727,"byte_end":43730,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43731,"byte_end":43777,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43778,"byte_end":43802,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43803,"byte_end":43806,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43807,"byte_end":43860,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43861,"byte_end":43886,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43887,"byte_end":43921,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43922,"byte_end":43949,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43950,"byte_end":43963,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43964,"byte_end":43973,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43974,"byte_end":43979,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43980,"byte_end":43983,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":43984,"byte_end":44072,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44073,"byte_end":44156,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44157,"byte_end":44245,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44246,"byte_end":44284,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44285,"byte_end":44292,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44293,"byte_end":44296,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44297,"byte_end":44356,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44357,"byte_end":44360,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44361,"byte_end":44372,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44373,"byte_end":44423,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44424,"byte_end":44442,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44443,"byte_end":44493,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44494,"byte_end":44513,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44514,"byte_end":44537,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44538,"byte_end":44561,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44562,"byte_end":44585,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44586,"byte_end":44593,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44594,"byte_end":44634,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44635,"byte_end":44683,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44684,"byte_end":44710,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44711,"byte_end":44766,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44767,"byte_end":44794,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44795,"byte_end":44831,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44832,"byte_end":44861,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44862,"byte_end":44877,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44878,"byte_end":44889,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44890,"byte_end":44897,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44898,"byte_end":44941,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44942,"byte_end":44968,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44969,"byte_end":44972,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":44973,"byte_end":45005,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45006,"byte_end":45064,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45065,"byte_end":45111,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45112,"byte_end":45115,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45116,"byte_end":45153,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45154,"byte_end":45188,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45189,"byte_end":45247,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45248,"byte_end":45277,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45278,"byte_end":45281,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45282,"byte_end":45366,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45367,"byte_end":45409,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45410,"byte_end":45436,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45437,"byte_end":45442,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45443,"byte_end":45511,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45512,"byte_end":45565,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45566,"byte_end":45604,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45605,"byte_end":45610,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45611,"byte_end":45640,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45641,"byte_end":45648,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45649,"byte_end":45652,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45653,"byte_end":45665,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45666,"byte_end":45669,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45670,"byte_end":45745,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45746,"byte_end":45804,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45805,"byte_end":45834,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45835,"byte_end":45914,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45915,"byte_end":45993,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":45994,"byte_end":46072,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46073,"byte_end":46097,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46098,"byte_end":46176,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46177,"byte_end":46238,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46239,"byte_end":46292,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46293,"byte_end":46296,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46297,"byte_end":46366,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46367,"byte_end":46390,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46688,"byte_end":46692,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46436,"byte_end":46509,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46512,"byte_end":46570,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46573,"byte_end":46602,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46605,"byte_end":46608,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46611,"byte_end":46680,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46814,"byte_end":46834,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46712,"byte_end":46790,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46793,"byte_end":46808,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46965,"byte_end":46985,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ T) -> bool","parent":{"krate":0,"index":155},"children":[],"decl_id":{"krate":0,"index":157},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46942,"byte_end":46959,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47101,"byte_end":47121,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":155},"children":[],"decl_id":{"krate":0,"index":157},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47086,"byte_end":47095,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47277,"byte_end":47297,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":155},"children":[],"decl_id":{"krate":0,"index":157},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47262,"byte_end":47271,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47621,"byte_end":47633,"line_start":178,"line_end":178,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":594},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47570,"byte_end":47618,"line_start":177,"line_end":177,"column_start":3,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47634,"byte_end":47653,"line_start":178,"line_end":178,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47908,"byte_end":47925,"line_start":183,"line_end":183,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":594},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47658,"byte_end":47731,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47734,"byte_end":47805,"line_start":180,"line_end":180,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47808,"byte_end":47876,"line_start":181,"line_end":181,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47879,"byte_end":47905,"line_start":182,"line_end":182,"column_start":3,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47549,"byte_end":47565,"line_start":176,"line_end":176,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":598}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47397,"byte_end":47477,"line_start":173,"line_end":173,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47478,"byte_end":47488,"line_start":174,"line_end":174,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48017,"byte_end":48020,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10305},"children":[],"decl_id":{"krate":1,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48259,"byte_end":48263,"line_start":196,"line_end":196,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3174},"children":[],"decl_id":{"krate":1,"index":3176},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48612,"byte_end":48626,"line_start":209,"line_end":209,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&'_ T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48359,"byte_end":48393,"line_start":201,"line_end":201,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48394,"byte_end":48397,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48398,"byte_end":48412,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48413,"byte_end":48416,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48417,"byte_end":48466,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48467,"byte_end":48535,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48536,"byte_end":48594,"line_start":207,"line_end":207,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48595,"byte_end":48604,"line_start":208,"line_end":208,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49215,"byte_end":49233,"line_start":229,"line_end":229,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8])\n-> Result<&'_ mut T, CheckedCastError> where T: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48954,"byte_end":48996,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48997,"byte_end":49000,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49001,"byte_end":49015,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49016,"byte_end":49019,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49020,"byte_end":49069,"line_start":225,"line_end":225,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49070,"byte_end":49138,"line_start":226,"line_end":226,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49139,"byte_end":49197,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49198,"byte_end":49207,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49789,"byte_end":49811,"line_start":247,"line_end":247,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, CheckedCastError>\nwhere T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49584,"byte_end":49631,"line_start":241,"line_end":241,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49632,"byte_end":49635,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49636,"byte_end":49650,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49651,"byte_end":49712,"line_start":244,"line_end":244,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49713,"byte_end":49771,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":49772,"byte_end":49781,"line_start":246,"line_end":246,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50562,"byte_end":50570,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50110,"byte_end":50139,"line_start":259,"line_end":259,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50140,"byte_end":50143,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50144,"byte_end":50221,"line_start":261,"line_end":261,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50222,"byte_end":50301,"line_start":262,"line_end":262,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50302,"byte_end":50380,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50381,"byte_end":50400,"line_start":264,"line_end":264,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50401,"byte_end":50404,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50405,"byte_end":50419,"line_start":266,"line_end":266,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50420,"byte_end":50423,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50424,"byte_end":50479,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50480,"byte_end":50544,"line_start":269,"line_end":269,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50545,"byte_end":50554,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51114,"byte_end":51126,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&'_ B, CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50856,"byte_end":50892,"line_start":283,"line_end":283,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50893,"byte_end":50896,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50897,"byte_end":50911,"line_start":285,"line_end":285,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50912,"byte_end":50915,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50916,"byte_end":50968,"line_start":287,"line_end":287,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":50969,"byte_end":51031,"line_start":288,"line_end":288,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51032,"byte_end":51096,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51097,"byte_end":51106,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51568,"byte_end":51580,"line_start":307,"line_end":307,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&'_ mut B, CheckedCastError>\nwhere A: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51462,"byte_end":51506,"line_start":303,"line_end":303,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51507,"byte_end":51510,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51511,"byte_end":51550,"line_start":305,"line_end":305,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51551,"byte_end":51560,"line_start":306,"line_end":306,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52823,"byte_end":52837,"line_start":340,"line_end":340,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&'_ [B], CheckedCastError>\nwhere A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":51958,"byte_end":52031,"line_start":322,"line_end":322,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52032,"byte_end":52035,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52036,"byte_end":52095,"line_start":324,"line_end":324,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52096,"byte_end":52165,"line_start":325,"line_end":325,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52166,"byte_end":52169,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52170,"byte_end":52184,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52185,"byte_end":52188,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52189,"byte_end":52269,"line_start":329,"line_end":329,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52270,"byte_end":52290,"line_start":330,"line_end":330,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52291,"byte_end":52368,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52369,"byte_end":52445,"line_start":332,"line_end":332,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52446,"byte_end":52526,"line_start":333,"line_end":333,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52527,"byte_end":52551,"line_start":334,"line_end":334,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52552,"byte_end":52677,"line_start":335,"line_end":335,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52678,"byte_end":52698,"line_start":336,"line_end":336,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52699,"byte_end":52779,"line_start":337,"line_end":337,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52780,"byte_end":52805,"line_start":338,"line_end":338,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":52806,"byte_end":52815,"line_start":339,"line_end":339,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53365,"byte_end":53383,"line_start":359,"line_end":359,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A])\n-> Result<&'_ mut [B], CheckedCastError> where A: NoUninit + AnyBitPattern,\nB: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53215,"byte_end":53287,"line_start":354,"line_end":354,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53288,"byte_end":53300,"line_start":355,"line_end":355,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53301,"byte_end":53304,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53305,"byte_end":53347,"line_start":357,"line_end":357,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53348,"byte_end":53357,"line_start":358,"line_end":358,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53939,"byte_end":53949,"line_start":382,"line_end":382,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &'_ T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53809,"byte_end":53843,"line_start":376,"line_end":376,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53844,"byte_end":53847,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53848,"byte_end":53861,"line_start":378,"line_end":378,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53862,"byte_end":53865,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53866,"byte_end":53921,"line_start":380,"line_end":380,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":53922,"byte_end":53931,"line_start":381,"line_end":381,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54236,"byte_end":54250,"line_start":395,"line_end":395,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &'_ mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54094,"byte_end":54136,"line_start":389,"line_end":389,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54137,"byte_end":54140,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54141,"byte_end":54154,"line_start":391,"line_end":391,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54155,"byte_end":54158,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54159,"byte_end":54218,"line_start":393,"line_end":393,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54219,"byte_end":54228,"line_start":394,"line_end":394,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54566,"byte_end":54584,"line_start":407,"line_end":407,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54422,"byte_end":54459,"line_start":402,"line_end":402,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54460,"byte_end":54463,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54464,"byte_end":54477,"line_start":404,"line_end":404,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54478,"byte_end":54548,"line_start":405,"line_end":405,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54549,"byte_end":54558,"line_start":406,"line_end":406,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54887,"byte_end":54891,"line_start":420,"line_end":420,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54748,"byte_end":54769,"line_start":414,"line_end":414,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54770,"byte_end":54773,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54774,"byte_end":54787,"line_start":416,"line_end":416,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54788,"byte_end":54791,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54792,"byte_end":54869,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":54870,"byte_end":54879,"line_start":419,"line_end":419,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55158,"byte_end":55166,"line_start":433,"line_end":433,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &'_ mut B where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55032,"byte_end":55064,"line_start":427,"line_end":427,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55065,"byte_end":55068,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55069,"byte_end":55082,"line_start":429,"line_end":429,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55083,"byte_end":55086,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55087,"byte_end":55140,"line_start":431,"line_end":431,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55141,"byte_end":55150,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55482,"byte_end":55490,"line_start":451,"line_end":451,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &'_ B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55364,"byte_end":55388,"line_start":445,"line_end":445,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55389,"byte_end":55392,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55393,"byte_end":55406,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55407,"byte_end":55410,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55411,"byte_end":55464,"line_start":449,"line_end":449,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55465,"byte_end":55474,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55765,"byte_end":55775,"line_start":464,"line_end":464,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &'_ [B] where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55641,"byte_end":55669,"line_start":458,"line_end":458,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55670,"byte_end":55673,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55674,"byte_end":55687,"line_start":460,"line_end":460,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55688,"byte_end":55691,"line_start":461,"line_end":461,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55692,"byte_end":55747,"line_start":462,"line_end":462,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55748,"byte_end":55757,"line_start":463,"line_end":463,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":56070,"byte_end":56084,"line_start":477,"line_end":477,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &'_ mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55934,"byte_end":55970,"line_start":471,"line_end":471,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55971,"byte_end":55974,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55975,"byte_end":55988,"line_start":473,"line_end":473,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55989,"byte_end":55992,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":55993,"byte_end":56052,"line_start":475,"line_end":475,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":56053,"byte_end":56062,"line_start":476,"line_end":476,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69440,"byte_end":69448,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":277}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":68982,"byte_end":69033,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69034,"byte_end":69068,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69069,"byte_end":69072,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69073,"byte_end":69136,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69137,"byte_end":69193,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69194,"byte_end":69197,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69198,"byte_end":69211,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69212,"byte_end":69215,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69216,"byte_end":69257,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69258,"byte_end":69305,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69306,"byte_end":69379,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69380,"byte_end":69422,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69728,"byte_end":69734,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69460,"byte_end":69500,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69503,"byte_end":69506,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69509,"byte_end":69584,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69587,"byte_end":69665,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69668,"byte_end":69710,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69713,"byte_end":69722,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85574,"byte_end":85590,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85344,"byte_end":85410,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85411,"byte_end":85446,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85447,"byte_end":85450,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85451,"byte_end":85464,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85465,"byte_end":85468,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85469,"byte_end":85528,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85529,"byte_end":85556,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88159,"byte_end":88162,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86265,"byte_end":86303,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86304,"byte_end":86307,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86308,"byte_end":86385,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86386,"byte_end":86465,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86466,"byte_end":86546,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86547,"byte_end":86565,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86566,"byte_end":86569,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86570,"byte_end":86646,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86647,"byte_end":86718,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86719,"byte_end":86793,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86794,"byte_end":86812,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86813,"byte_end":86816,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86817,"byte_end":86830,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86831,"byte_end":86834,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86835,"byte_end":86875,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86876,"byte_end":86923,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":86924,"byte_end":87002,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87003,"byte_end":87031,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87032,"byte_end":87108,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87109,"byte_end":87187,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87188,"byte_end":87268,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87269,"byte_end":87299,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87300,"byte_end":87354,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87355,"byte_end":87430,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87431,"byte_end":87510,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87511,"byte_end":87555,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87556,"byte_end":87636,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87637,"byte_end":87695,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87696,"byte_end":87770,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87771,"byte_end":87848,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87849,"byte_end":87929,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":87930,"byte_end":88010,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88011,"byte_end":88090,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88091,"byte_end":88141,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102468,"byte_end":102479,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102142,"byte_end":102198,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102199,"byte_end":102234,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102235,"byte_end":102238,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102239,"byte_end":102252,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102253,"byte_end":102256,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102257,"byte_end":102321,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102322,"byte_end":102400,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102401,"byte_end":102450,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106328,"byte_end":106336,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103244,"byte_end":103322,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103323,"byte_end":103326,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103327,"byte_end":103384,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103385,"byte_end":103464,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103465,"byte_end":103539,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103540,"byte_end":103619,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103620,"byte_end":103700,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103701,"byte_end":103781,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103782,"byte_end":103859,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103860,"byte_end":103875,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103876,"byte_end":103879,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103880,"byte_end":103954,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":103955,"byte_end":104034,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104035,"byte_end":104115,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104116,"byte_end":104184,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104185,"byte_end":104237,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104238,"byte_end":104241,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104242,"byte_end":104254,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104255,"byte_end":104258,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104259,"byte_end":104336,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104337,"byte_end":104409,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104410,"byte_end":104481,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104482,"byte_end":104562,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104563,"byte_end":104641,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104642,"byte_end":104665,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104666,"byte_end":104669,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104670,"byte_end":104682,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104683,"byte_end":104686,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104687,"byte_end":104753,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104754,"byte_end":104808,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104809,"byte_end":104884,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104885,"byte_end":104949,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104950,"byte_end":104953,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104954,"byte_end":104994,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":104995,"byte_end":105042,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105043,"byte_end":105119,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105120,"byte_end":105198,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105199,"byte_end":105279,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105280,"byte_end":105310,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105311,"byte_end":105368,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105369,"byte_end":105442,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105443,"byte_end":105522,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105523,"byte_end":105567,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105568,"byte_end":105619,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105620,"byte_end":105665,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105666,"byte_end":105746,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105747,"byte_end":105805,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105806,"byte_end":105880,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105881,"byte_end":105958,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":105959,"byte_end":106039,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106040,"byte_end":106120,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106121,"byte_end":106200,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106201,"byte_end":106251,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106252,"byte_end":106310,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110008,"byte_end":110018,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107040,"byte_end":107068,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107069,"byte_end":107072,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107073,"byte_end":107148,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107149,"byte_end":107215,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107216,"byte_end":107260,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107261,"byte_end":107264,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107265,"byte_end":107344,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107345,"byte_end":107425,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107426,"byte_end":107488,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107489,"byte_end":107492,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107493,"byte_end":107571,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107572,"byte_end":107647,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107648,"byte_end":107676,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107677,"byte_end":107680,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107681,"byte_end":107694,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107695,"byte_end":107698,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107699,"byte_end":107706,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107707,"byte_end":107738,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107739,"byte_end":107754,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107755,"byte_end":107799,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107800,"byte_end":107814,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107815,"byte_end":107827,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107828,"byte_end":107840,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107841,"byte_end":107853,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107854,"byte_end":107866,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107867,"byte_end":107879,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107880,"byte_end":107885,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107886,"byte_end":107922,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107923,"byte_end":107943,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107944,"byte_end":107985,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":107986,"byte_end":108027,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108028,"byte_end":108033,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108034,"byte_end":108088,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108089,"byte_end":108132,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108133,"byte_end":108174,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108175,"byte_end":108182,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108183,"byte_end":108195,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108196,"byte_end":108199,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108200,"byte_end":108273,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108274,"byte_end":108287,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108288,"byte_end":108291,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108292,"byte_end":108369,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108370,"byte_end":108449,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108450,"byte_end":108504,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108505,"byte_end":108508,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108509,"byte_end":108589,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108590,"byte_end":108612,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108613,"byte_end":108616,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108617,"byte_end":108697,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108698,"byte_end":108754,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108755,"byte_end":108758,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108759,"byte_end":108834,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108835,"byte_end":108907,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108908,"byte_end":108977,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108978,"byte_end":108981,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":108982,"byte_end":109060,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109061,"byte_end":109137,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109138,"byte_end":109149,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109150,"byte_end":109153,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109154,"byte_end":109226,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109227,"byte_end":109305,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109306,"byte_end":109382,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109383,"byte_end":109462,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109463,"byte_end":109466,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109467,"byte_end":109539,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109540,"byte_end":109605,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109606,"byte_end":109609,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109610,"byte_end":109687,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109688,"byte_end":109710,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109711,"byte_end":109714,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109715,"byte_end":109794,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109795,"byte_end":109828,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109829,"byte_end":109832,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109833,"byte_end":109910,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":109911,"byte_end":109990,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110843,"byte_end":110846,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110039,"byte_end":110110,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110113,"byte_end":110122,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110125,"byte_end":110128,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110131,"byte_end":110203,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110206,"byte_end":110272,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110275,"byte_end":110343,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110346,"byte_end":110388,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110391,"byte_end":110394,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110397,"byte_end":110474,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110477,"byte_end":110499,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110502,"byte_end":110505,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110508,"byte_end":110577,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110580,"byte_end":110656,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110659,"byte_end":110728,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110731,"byte_end":110769,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110772,"byte_end":110775,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110778,"byte_end":110835,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110937,"byte_end":110946,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110863,"byte_end":110928,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111036,"byte_end":111045,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110962,"byte_end":111027,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111710,"byte_end":111722,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111061,"byte_end":111129,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111132,"byte_end":111195,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111198,"byte_end":111201,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111204,"byte_end":111278,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111281,"byte_end":111348,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111351,"byte_end":111419,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111422,"byte_end":111425,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111428,"byte_end":111440,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111443,"byte_end":111446,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111449,"byte_end":111522,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111525,"byte_end":111571,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111574,"byte_end":111577,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111580,"byte_end":111654,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111657,"byte_end":111692,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":111695,"byte_end":111704,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113245,"byte_end":113257,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112561,"byte_end":112636,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112639,"byte_end":112715,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112718,"byte_end":112730,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112733,"byte_end":112736,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112739,"byte_end":112813,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112816,"byte_end":112883,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112886,"byte_end":112954,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112957,"byte_end":112960,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112963,"byte_end":112975,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112978,"byte_end":112981,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":112984,"byte_end":113057,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113060,"byte_end":113106,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113109,"byte_end":113112,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113115,"byte_end":113189,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113192,"byte_end":113227,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":113230,"byte_end":113239,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123391,"byte_end":123409,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120302,"byte_end":120377,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120378,"byte_end":120407,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120408,"byte_end":120411,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120412,"byte_end":120484,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120485,"byte_end":120563,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120564,"byte_end":120642,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120643,"byte_end":120719,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120720,"byte_end":120796,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120797,"byte_end":120845,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120846,"byte_end":120849,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120850,"byte_end":120862,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120863,"byte_end":120866,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120867,"byte_end":120936,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120937,"byte_end":120940,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":120941,"byte_end":121012,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121013,"byte_end":121016,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121017,"byte_end":121089,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121090,"byte_end":121152,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121153,"byte_end":121232,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121233,"byte_end":121312,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121313,"byte_end":121343,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121344,"byte_end":121347,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121348,"byte_end":121428,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121429,"byte_end":121490,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121491,"byte_end":121494,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121495,"byte_end":121569,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121570,"byte_end":121585,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121586,"byte_end":121664,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121665,"byte_end":121743,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121744,"byte_end":121747,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121748,"byte_end":121819,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121820,"byte_end":121823,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121824,"byte_end":121838,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121839,"byte_end":121842,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121843,"byte_end":121922,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":121923,"byte_end":122002,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122003,"byte_end":122078,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122079,"byte_end":122148,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122149,"byte_end":122186,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122187,"byte_end":122190,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122191,"byte_end":122269,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122270,"byte_end":122338,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122339,"byte_end":122342,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122343,"byte_end":122357,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122358,"byte_end":122361,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122362,"byte_end":122374,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122375,"byte_end":122378,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122379,"byte_end":122386,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122387,"byte_end":122424,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122425,"byte_end":122449,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122450,"byte_end":122479,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122480,"byte_end":122483,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122484,"byte_end":122508,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122509,"byte_end":122542,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122543,"byte_end":122546,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122547,"byte_end":122610,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122611,"byte_end":122614,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122615,"byte_end":122674,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122675,"byte_end":122713,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122714,"byte_end":122774,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122775,"byte_end":122778,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122779,"byte_end":122806,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122807,"byte_end":122853,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122854,"byte_end":122926,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122927,"byte_end":122930,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122931,"byte_end":122988,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122989,"byte_end":122996,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":122997,"byte_end":123000,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123001,"byte_end":123040,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123041,"byte_end":123044,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123045,"byte_end":123052,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123053,"byte_end":123090,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123091,"byte_end":123094,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123095,"byte_end":123119,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123120,"byte_end":123145,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123146,"byte_end":123149,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123150,"byte_end":123208,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123209,"byte_end":123212,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123213,"byte_end":123256,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123257,"byte_end":123290,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123291,"byte_end":123294,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123295,"byte_end":123325,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123326,"byte_end":123365,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123366,"byte_end":123373,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123496,"byte_end":123500,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123429,"byte_end":123478,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123481,"byte_end":123490,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123812,"byte_end":123820,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref<'_>(&'_ Inner) -> &'_ Self","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123709,"byte_end":123782,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123785,"byte_end":123794,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":123797,"byte_end":123806,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":124510,"byte_end":124518,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut<'_>(&'_ mut Inner) -> &'_ mut Self","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":124391,"byte_end":124468,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":124471,"byte_end":124492,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":124495,"byte_end":124504,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125182,"byte_end":125192,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice<'_>(&'_ [Inner]) -> &'_ [Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125093,"byte_end":125164,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125167,"byte_end":125176,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125736,"byte_end":125750,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut<'_>(&'_ mut [Inner]) -> &'_ mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125625,"byte_end":125698,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125701,"byte_end":125718,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":125721,"byte_end":125730,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126256,"byte_end":126260,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126189,"byte_end":126238,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126241,"byte_end":126250,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126465,"byte_end":126473,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref<'_>(&'_ Self) -> &'_ Inner","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126362,"byte_end":126435,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126438,"byte_end":126447,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":126450,"byte_end":126459,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127163,"byte_end":127171,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut<'_>(&'_ mut Self) -> &'_ mut Inner","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127044,"byte_end":127120,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127123,"byte_end":127145,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127148,"byte_end":127157,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127835,"byte_end":127845,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice<'_>(&'_ [Self]) -> &'_ [Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127746,"byte_end":127817,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":127820,"byte_end":127829,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128390,"byte_end":128404,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut<'_>(&'_ mut [Self]) -> &'_ mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":501},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128279,"byte_end":128354,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128357,"byte_end":128372,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128375,"byte_end":128384,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3710,"byte_end":3750,"line_start":125,"line_end":125,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3587,"byte_end":3659,"line_start":123,"line_end":123,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3662,"byte_end":3707,"line_start":124,"line_end":124,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3936,"byte_end":3960,"line_start":129,"line_end":129,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3754,"byte_end":3822,"line_start":126,"line_end":126,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3825,"byte_end":3900,"line_start":127,"line_end":127,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3903,"byte_end":3933,"line_start":128,"line_end":128,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4181,"byte_end":4193,"line_start":133,"line_end":133,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3964,"byte_end":4039,"line_start":130,"line_end":130,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4042,"byte_end":4115,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4118,"byte_end":4178,"line_start":132,"line_end":132,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4484,"byte_end":4501,"line_start":140,"line_end":140,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4197,"byte_end":4271,"line_start":134,"line_end":134,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4274,"byte_end":4305,"line_start":135,"line_end":135,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4308,"byte_end":4311,"line_start":136,"line_end":136,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4314,"byte_end":4390,"line_start":137,"line_end":137,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4393,"byte_end":4468,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4471,"byte_end":4481,"line_start":139,"line_end":139,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3570,"byte_end":3582,"line_start":122,"line_end":122,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":3436,"byte_end":3509,"line_start":120,"line_end":120,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4588,"byte_end":4591,"line_start":144,"line_end":144,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10305},"children":[],"decl_id":{"krate":1,"index":10306},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4976,"byte_end":4984,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T, '_>(&'_ T) -> &'_ [u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4767,"byte_end":4801,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4802,"byte_end":4805,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4806,"byte_end":4884,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4885,"byte_end":4958,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4959,"byte_end":4968,"line_start":155,"line_end":155,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5271,"byte_end":5283,"line_start":165,"line_end":165,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T, '_>(&'_ mut T) -> &'_ mut [u8] where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5054,"byte_end":5096,"line_start":160,"line_end":160,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5097,"byte_end":5100,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5101,"byte_end":5179,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5180,"byte_end":5253,"line_start":163,"line_end":163,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5254,"byte_end":5263,"line_start":164,"line_end":164,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5511,"byte_end":5521,"line_start":175,"line_end":175,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &'_ T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5381,"byte_end":5415,"line_start":169,"line_end":169,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5416,"byte_end":5419,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5420,"byte_end":5433,"line_start":171,"line_end":171,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5434,"byte_end":5437,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5438,"byte_end":5493,"line_start":173,"line_end":173,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5494,"byte_end":5503,"line_start":174,"line_end":174,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5740,"byte_end":5754,"line_start":185,"line_end":185,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &'_ mut T where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5598,"byte_end":5640,"line_start":179,"line_end":179,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5641,"byte_end":5644,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5645,"byte_end":5658,"line_start":181,"line_end":181,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5659,"byte_end":5662,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5663,"byte_end":5722,"line_start":183,"line_end":183,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5723,"byte_end":5732,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6000,"byte_end":6022,"line_start":194,"line_end":194,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5854,"byte_end":5901,"line_start":189,"line_end":189,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5902,"byte_end":5905,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5906,"byte_end":5920,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5921,"byte_end":5982,"line_start":192,"line_end":192,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":5983,"byte_end":5992,"line_start":193,"line_end":193,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6289,"byte_end":6307,"line_start":205,"line_end":205,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6145,"byte_end":6182,"line_start":200,"line_end":200,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6183,"byte_end":6186,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6187,"byte_end":6200,"line_start":202,"line_end":202,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6201,"byte_end":6271,"line_start":203,"line_end":203,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6272,"byte_end":6281,"line_start":204,"line_end":204,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6593,"byte_end":6607,"line_start":216,"line_end":216,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&'_ T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6399,"byte_end":6433,"line_start":209,"line_end":209,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6434,"byte_end":6437,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6438,"byte_end":6452,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6453,"byte_end":6456,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6457,"byte_end":6506,"line_start":213,"line_end":213,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6507,"byte_end":6575,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6576,"byte_end":6585,"line_start":215,"line_end":215,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6912,"byte_end":6930,"line_start":227,"line_end":227,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8]) -> Result<&'_ mut T, PodCastError>\nwhere T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6710,"byte_end":6752,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6753,"byte_end":6756,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6757,"byte_end":6771,"line_start":222,"line_end":222,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6772,"byte_end":6775,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6776,"byte_end":6825,"line_start":224,"line_end":224,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6826,"byte_end":6894,"line_start":225,"line_end":225,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":6895,"byte_end":6904,"line_start":226,"line_end":226,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7200,"byte_end":7204,"line_start":239,"line_end":239,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7061,"byte_end":7082,"line_start":233,"line_end":233,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7083,"byte_end":7086,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7087,"byte_end":7100,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7101,"byte_end":7104,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7105,"byte_end":7182,"line_start":237,"line_end":237,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7183,"byte_end":7192,"line_start":238,"line_end":238,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7409,"byte_end":7417,"line_start":249,"line_end":249,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &'_ mut B where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7283,"byte_end":7315,"line_start":243,"line_end":243,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7316,"byte_end":7319,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7320,"byte_end":7333,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7334,"byte_end":7337,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7338,"byte_end":7391,"line_start":247,"line_end":247,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7392,"byte_end":7401,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7660,"byte_end":7668,"line_start":261,"line_end":261,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &'_ B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7542,"byte_end":7566,"line_start":255,"line_end":255,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7567,"byte_end":7570,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7571,"byte_end":7584,"line_start":257,"line_end":257,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7585,"byte_end":7588,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7589,"byte_end":7642,"line_start":259,"line_end":259,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7643,"byte_end":7652,"line_start":260,"line_end":260,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7877,"byte_end":7887,"line_start":271,"line_end":271,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &'_ [B] where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7753,"byte_end":7781,"line_start":265,"line_end":265,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7782,"byte_end":7785,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7786,"byte_end":7799,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7800,"byte_end":7803,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7804,"byte_end":7859,"line_start":269,"line_end":269,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7860,"byte_end":7869,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8114,"byte_end":8128,"line_start":281,"line_end":281,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &'_ mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":7978,"byte_end":8014,"line_start":275,"line_end":275,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8015,"byte_end":8018,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8019,"byte_end":8032,"line_start":277,"line_end":277,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8033,"byte_end":8036,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8037,"byte_end":8096,"line_start":279,"line_end":279,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8097,"byte_end":8106,"line_start":280,"line_end":280,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8345,"byte_end":8357,"line_start":292,"line_end":292,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U, '_>(&'_ [T]) -> (&'_ [T], &'_ [U], &'_ [T]) where\nT: NoUninit, U: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8270,"byte_end":8327,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8328,"byte_end":8337,"line_start":291,"line_end":291,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8546,"byte_end":8562,"line_start":300,"line_end":300,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U, '_>(&'_ mut [T])\n-> (&'_ mut [T], &'_ mut [U], &'_ mut [T]) where T: NoUninit + AnyBitPattern,\nU: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8467,"byte_end":8528,"line_start":298,"line_end":298,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8529,"byte_end":8538,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9113,"byte_end":9121,"line_start":320,"line_end":320,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8726,"byte_end":8755,"line_start":309,"line_end":309,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8756,"byte_end":8759,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8760,"byte_end":8837,"line_start":311,"line_end":311,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8838,"byte_end":8917,"line_start":312,"line_end":312,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8918,"byte_end":8996,"line_start":313,"line_end":313,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":8997,"byte_end":9016,"line_start":314,"line_end":314,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9017,"byte_end":9020,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9021,"byte_end":9035,"line_start":316,"line_end":316,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9036,"byte_end":9039,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9040,"byte_end":9095,"line_start":318,"line_end":318,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9096,"byte_end":9105,"line_start":319,"line_end":319,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9424,"byte_end":9436,"line_start":333,"line_end":333,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&'_ B, PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9231,"byte_end":9267,"line_start":326,"line_end":326,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9268,"byte_end":9271,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9272,"byte_end":9286,"line_start":328,"line_end":328,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9287,"byte_end":9290,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9291,"byte_end":9343,"line_start":330,"line_end":330,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9344,"byte_end":9406,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9407,"byte_end":9416,"line_start":332,"line_end":332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9654,"byte_end":9666,"line_start":343,"line_end":343,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&'_ mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9552,"byte_end":9596,"line_start":339,"line_end":339,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9597,"byte_end":9600,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9601,"byte_end":9636,"line_start":341,"line_end":341,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9637,"byte_end":9646,"line_start":342,"line_end":342,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10582,"byte_end":10596,"line_start":368,"line_end":368,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&'_ [B], PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9824,"byte_end":9897,"line_start":352,"line_end":352,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9898,"byte_end":9901,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9902,"byte_end":9961,"line_start":354,"line_end":354,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":9962,"byte_end":10031,"line_start":355,"line_end":355,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10032,"byte_end":10035,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10036,"byte_end":10050,"line_start":357,"line_end":357,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10051,"byte_end":10054,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10055,"byte_end":10135,"line_start":359,"line_end":359,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10136,"byte_end":10156,"line_start":360,"line_end":360,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10157,"byte_end":10234,"line_start":361,"line_end":361,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10235,"byte_end":10311,"line_start":362,"line_end":362,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10312,"byte_end":10392,"line_start":363,"line_end":363,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10393,"byte_end":10417,"line_start":364,"line_end":364,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10418,"byte_end":10543,"line_start":365,"line_end":365,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10544,"byte_end":10564,"line_start":366,"line_end":366,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10565,"byte_end":10574,"line_start":367,"line_end":367,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10864,"byte_end":10882,"line_start":379,"line_end":379,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A])\n-> Result<&'_ mut [B], PodCastError> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10718,"byte_end":10790,"line_start":374,"line_end":374,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10791,"byte_end":10803,"line_start":375,"line_end":375,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10804,"byte_end":10807,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10808,"byte_end":10846,"line_start":377,"line_end":377,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":10847,"byte_end":10856,"line_start":378,"line_end":378,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":38069,"byte_end":38070,"line_start":708,"line_end":708,"column_start":74,"column_end":75},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41505,"byte_end":41506,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46918,"byte_end":46919,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47993,"byte_end":48009,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48235,"byte_end":48251,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70375,"byte_end":70383,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70507,"byte_end":70518,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70550,"byte_end":70563,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70605,"byte_end":70617,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84267,"byte_end":84274,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84342,"byte_end":84348,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84416,"byte_end":84423,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84491,"byte_end":84498,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84566,"byte_end":84572,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84640,"byte_end":84647,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85330,"byte_end":85336,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85635,"byte_end":85644,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85681,"byte_end":85691,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85728,"byte_end":85738,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85775,"byte_end":85785,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85822,"byte_end":85833,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85870,"byte_end":85882,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85919,"byte_end":85928,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85965,"byte_end":85975,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86012,"byte_end":86022,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86059,"byte_end":86069,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86106,"byte_end":86117,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86154,"byte_end":86166,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86207,"byte_end":86214,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88630,"byte_end":88638,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88938,"byte_end":88949,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88976,"byte_end":88989,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":89021,"byte_end":89033,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101140,"byte_end":101147,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101210,"byte_end":101216,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101279,"byte_end":101286,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101349,"byte_end":101356,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101419,"byte_end":101425,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101488,"byte_end":101495,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102128,"byte_end":102134,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102547,"byte_end":102556,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102588,"byte_end":102598,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102630,"byte_end":102640,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102672,"byte_end":102682,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102714,"byte_end":102725,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102757,"byte_end":102769,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102801,"byte_end":102810,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102842,"byte_end":102852,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102884,"byte_end":102894,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102926,"byte_end":102936,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102968,"byte_end":102979,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":103011,"byte_end":103023,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106398,"byte_end":106399,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106497,"byte_end":106506,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106535,"byte_end":106544,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106573,"byte_end":106583,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106612,"byte_end":106622,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106651,"byte_end":106661,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106690,"byte_end":106700,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106729,"byte_end":106739,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106768,"byte_end":106778,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106807,"byte_end":106818,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106847,"byte_end":106858,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106887,"byte_end":106899,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106928,"byte_end":106940,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128896,"byte_end":128904,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4568,"byte_end":4580,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2773,"byte_end":2783,"line_start":80,"line_end":80,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":2902,"byte_end":2909,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":140}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":31320,"byte_end":31338,"line_start":526,"line_end":526,"column_start":3,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":501},"to":{"krate":0,"index":114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\allocation.rs","byte_start":38069,"byte_end":38070,"line_start":708,"line_end":708,"column_start":74,"column_end":75},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":126},"to":{"krate":0,"index":114}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41428,"byte_end":41436,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":276},"to":{"krate":0,"index":136}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41439,"byte_end":41444,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":136}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41447,"byte_end":41451,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":136}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\anybitpattern.rs","byte_start":41505,"byte_end":41506,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":138},"to":{"krate":0,"index":136}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46427,"byte_end":46431,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":155}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":46918,"byte_end":46919,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":159},"to":{"krate":0,"index":155}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":47993,"byte_end":48009,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":594},"to":{"krate":1,"index":10305}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\checked.rs","byte_start":48235,"byte_end":48251,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":594},"to":{"krate":1,"index":3174}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":69450,"byte_end":69455,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70375,"byte_end":70383,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":28058},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70507,"byte_end":70518,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":3286},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70550,"byte_end":70563,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":38875},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":70605,"byte_end":70617,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":32303},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84267,"byte_end":84274,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":53393},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84342,"byte_end":84348,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":53402},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84416,"byte_end":84423,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":53413},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84491,"byte_end":84498,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":53422},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84566,"byte_end":84572,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":53433},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable.rs","byte_start":84640,"byte_end":84647,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":53448},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85330,"byte_end":85336,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":47489},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85592,"byte_end":85597,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85635,"byte_end":85644,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":24707},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85681,"byte_end":85691,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":24741},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85728,"byte_end":85738,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":24775},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85775,"byte_end":85785,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":24809},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85822,"byte_end":85833,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":24843},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85870,"byte_end":85882,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":24877},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85919,"byte_end":85928,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":24503},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":85965,"byte_end":85975,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":24537},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86012,"byte_end":86022,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":24571},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86059,"byte_end":86069,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":24605},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86106,"byte_end":86117,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":24639},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86154,"byte_end":86166,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":24673},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\zeroable_in_option.rs","byte_start":86207,"byte_end":86214,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":2396},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88164,"byte_end":88172,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":276},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88175,"byte_end":88179,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88630,"byte_end":88638,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":28058},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88938,"byte_end":88949,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":3286},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":88976,"byte_end":88989,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":38875},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":89021,"byte_end":89033,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":32303},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101140,"byte_end":101147,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":53393},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101210,"byte_end":101216,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":53402},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101279,"byte_end":101286,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":53413},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101349,"byte_end":101356,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":53422},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101419,"byte_end":101425,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":53433},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod.rs","byte_start":101488,"byte_end":101495,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":53448},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102128,"byte_end":102134,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":47489},"to":{"krate":0,"index":379}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102481,"byte_end":102497,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":361},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102500,"byte_end":102504,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102547,"byte_end":102556,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":24707},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102588,"byte_end":102598,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":24741},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102630,"byte_end":102640,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":24775},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102672,"byte_end":102682,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":24809},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102714,"byte_end":102725,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":24843},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102757,"byte_end":102769,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":24877},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102801,"byte_end":102810,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":24503},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102842,"byte_end":102852,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":24537},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102884,"byte_end":102894,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":24571},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102926,"byte_end":102936,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":24605},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":102968,"byte_end":102979,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":24639},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\pod_in_option.rs","byte_start":103011,"byte_end":103023,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":24673},"to":{"krate":0,"index":413}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106338,"byte_end":106343,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106346,"byte_end":106350,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106398,"byte_end":106399,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":470},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106497,"byte_end":106506,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":24503},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106535,"byte_end":106544,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":1,"index":24707},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106573,"byte_end":106583,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":24537},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106612,"byte_end":106622,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":24741},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106651,"byte_end":106661,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":24571},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106690,"byte_end":106700,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":24775},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106729,"byte_end":106739,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":24605},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106768,"byte_end":106778,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":24809},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106807,"byte_end":106818,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":24639},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106847,"byte_end":106858,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":24843},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106887,"byte_end":106899,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":24673},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\no_uninit.rs","byte_start":106928,"byte_end":106940,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":24877},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\contiguous.rs","byte_start":110020,"byte_end":110024,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3278},"to":{"krate":0,"index":488}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\transparent.rs","byte_start":128896,"byte_end":128904,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":1,"index":28058},"to":{"krate":0,"index":501}},{"span":{"file_name":"C:\\Users\\Ben\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.12.3\\src\\lib.rs","byte_start":4568,"byte_end":4580,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":943},"to":{"krate":1,"index":10305}}]}